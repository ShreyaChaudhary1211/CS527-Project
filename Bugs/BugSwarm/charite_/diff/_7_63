[<Line: +package de.charite.compbio.jannovar.mendel;
>, <Line: +import java.util.List;
>, <Line: +import org.junit.Assert;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Test;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import com.google.common.collect.ImmutableMap;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Disease;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedFileContents;
>, <Line: +import de.charite.compbio.jannovar.pedigree.PedPerson;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Sex;
>, <Line: +public class MendelianCompatibilityCheckerXDSmallFemaleTest extends MendelianCompatibilityCheckerTestBase {
>, <Line: +	MendelianInheritanceChecker checker;
>, <Line: +	List<GenotypeCalls> gcList;
>, <Line: +	ImmutableMap<ModeOfInheritance, ImmutableList<GenotypeCalls>> result;
>, <Line: +	@Before
>, <Line: +	public void setUp() throws Exception {
>, <Line: +		ImmutableList.Builder<PedPerson> individuals = new ImmutableList.Builder<PedPerson>();
>, <Line: +		individuals.add(new PedPerson("ped", "I.1", "0", "0", Sex.MALE, Disease.UNAFFECTED)); // father
>, <Line: +		individuals.add(new PedPerson("ped", "I.2", "0", "0", Sex.FEMALE, Disease.AFFECTED)); // mother
>, <Line: +		individuals.add(new PedPerson("ped", "II.1", "I.1", "I.2", Sex.MALE, Disease.UNAFFECTED)); // son
>, <Line: +		individuals.add(new PedPerson("ped", "II.2", "I.1", "I.2", Sex.FEMALE, Disease.AFFECTED)); // daughter
>, <Line: +		PedFileContents pedFileContents = new PedFileContents(new ImmutableList.Builder<String>().build(),
>, <Line: +				individuals.build());
>, <Line: +		this.pedigree = new Pedigree(pedFileContents, "ped");
>, <Line: +		this.names = ImmutableList.of("I.1", "I.2", "II.1", "II.2");
>, <Line: +		this.checker = new MendelianInheritanceChecker(this.pedigree);
>, <Line: +		this.result = null;
>, <Line: +		this.gcList = null;
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testSizeOfPedigree() {
>, <Line: +		Assert.assertEquals(4, pedigree.getMembers().size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant1() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, HET, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant2() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(REF, REF, REF, REF), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant3() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, ALT, ALT, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant4() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, UKN, UKN, UKN), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant5() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, REF, HET, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant6() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, REF, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant7() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, REF, REF, REF), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant8() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(REF, REF, REF, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant9() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, ALT, HET, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant10() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, ALT, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant11() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, REF, REF, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant12() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, REF, REF, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant13() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, HET, REF, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant14() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, ALT, REF, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant15() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, REF, HET, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant16() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, REF, ALT, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant17() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, ALT, ALT, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant18() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, UKN, ALT, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant19() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, ALT, UKN, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	// Note that the following case are NOT considered as AD since we require the mutation to be heterozygous for
>, <Line: +	// AD.
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant20() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, REF, HET, REF), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesOneVariant21() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, REF, ALT, REF), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesTwoVariants1() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, ALT, HET, HET), lst(HET, UKN, HET, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesTwoVariants2() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, HET, HET, ALT), lst(HET, UKN, HET, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesTwoVariants3() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(HET, REF, ALT, REF), lst(HET, UKN, HET, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCaseNegativesTwoVariants4() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(ALT, REF, HET, REF), lst(HET, UKN, HET, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant1() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(REF, HET, REF, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant2() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, HET, UKN, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant3() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, UKN, UKN, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesOneVariant4() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, HET, UKN, UKN), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesTwoVariants1() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(REF, HET, REF, HET), lst(REF, HET, REF, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesTwoVariants2() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, HET, UKN, HET), lst(ALT, ALT, ALT, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesTwoVariants3() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, UKN, UKN, HET), lst(UKN, UKN, UKN, HET), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testCasePositivesTwoVariants4() throws IncompatiblePedigreeException {
>, <Line: +		gcList = getGenotypeCallsList(lst(UKN, HET, UKN, UKN), lst(ALT, ALT, ALT, ALT), true);
>, <Line: +		result = checker.checkMendelianInheritance(gcList);
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.AUTOSOMAL_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(1, result.get(ModeOfInheritance.X_DOMINANT).size());
>, <Line: +		Assert.assertEquals(0, result.get(ModeOfInheritance.X_RECESSIVE).size());
>, <Line: +		Assert.assertEquals(2, result.get(ModeOfInheritance.ANY).size());
>, <Line: +	}
>, <Line: +}
>]
[]