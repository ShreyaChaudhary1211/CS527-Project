[<Line: +import de.charite.compbio.jannovar.vardbs.generic_tsv.GenericTSVAnnotationOptions;
>, <Line: +import de.charite.compbio.jannovar.vardbs.generic_vcf.GenericVCFAnnotationOptions;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +import java.util.function.BiFunction;
>, <Line: +	/** Whether or not to enable the "parent GT is filtered" GT filter, default is true. */
>, <Line: +	private boolean useParentGtIsFiltered;
>, <Line: +	/** Column of contig name in dbNSFP. */
>, <Line: +	private int dbNsfpColContig;
>, <Line: +	/** Column of contig name in dbNSFP. */
>, <Line: +	private int dbNsfpColPosition;
>, <Line: +	/** Prefix for dbNSFP annotations. */
>, <Line: +	private String prefixDbNsfp;
>, <Line: +	/** Configuration for annotation with dbNSFP. */
>, <Line: +	private String pathDbNsfp;
>, <Line: +	/** Fields to annotate with from dbNSFP. */
>, <Line: +	private List<String> columnsDbNsfp = new ArrayList<>();
>, <Line: +	/** Configuration for annotation with generic TSV files. */
>, <Line: +	private List<GenericTSVAnnotationOptions> tsvAnnotationOptions = new ArrayList<>();
>, <Line: +	/** Configuration for annotation with VCF files. */
>, <Line: +	private List<GenericVCFAnnotationOptions> vcfAnnotationOptions = new ArrayList<>();
>, <Line: +	 * @param subParsers {@link Subparsers} to setup
>, <Line: +		ArgumentGroup annotationGroup =
>, <Line: +				subParser.addArgumentGroup("Annotation Arguments (optional)");
>, <Line: +		ArgumentGroup dbNsfpAnnotationGroup =
>, <Line: +				subParser.addArgumentGroup("Annotation with dbNSFP (experimental; optional)");
>, <Line: +		dbNsfpAnnotationGroup.addArgument("--dbnsfp-tsv").help("Patht to dbNSFP TSV file")
>, <Line: +				.required(false);
>, <Line: +		dbNsfpAnnotationGroup.addArgument("--dbnsfp-col-contig").type(Integer.class)
>, <Line: +				.help("Column index of contig in dbNSFP").setDefault(1);
>, <Line: +		dbNsfpAnnotationGroup.addArgument("--dbnsfp-col-position").type(Integer.class)
>, <Line: +				.help("Column index of position in dbNSFP").setDefault(2);
>, <Line: +		dbNsfpAnnotationGroup.addArgument("--dbnsfp-prefix").help("Prefix for dbNSFP annotations")
>, <Line: +				.setDefault("DBNSFP_").required(false);
>, <Line: +		dbNsfpAnnotationGroup.addArgument("--dbnsfp-columns")
>, <Line: +				.help("Columns from dbDSFP file to use for annotation").action(Arguments.append());
>, <Line: +		ArgumentGroup bedAnnotationGroup =
>, <Line: +				subParser.addArgumentGroup("BED-based Annotation (experimental; optional)");
>, <Line: +		ArgumentGroup vcfAnnotationGroup =
>, <Line: +				subParser.addArgumentGroup("Generic VCF-based Annotation (experimental; optional)");
>, <Line: +		vcfAnnotationGroup.addArgument("--vcf-annotation")
>, <Line: +				.help("Add VCF file to use for annotating. The value must be of the format "
>, <Line: +						+ "\"pathToVfFile:prefix:field1,field2,field3\".")
>, <Line: +				.action(Arguments.append());
>, <Line: +		ArgumentGroup tsvAnnotationGroup =
>, <Line: +				subParser.addArgumentGroup("TSV-based Annotation (experimental; optional)");
>, <Line: +		tsvAnnotationGroup.addArgument("--tsv-annotation")
>, <Line: +				.help("Add TSV file to use for annotating. The value must be of the format "
>, <Line: +						+ "\"pathToTsvFile:oneBasedOffset:colContig:colStart:colEnd:colRef(or=0):"
>, <Line: +						+ "colAlt(or=0):isRefAnnotated(R=yes,A=no):colValue:fieldType:fieldName:fieldDescription:"
>, <Line: +						+ "accumulationStrategy\".")
>, <Line: +				.action(Arguments.append());
>, <Line: +		ArgumentGroup threshFilterGroup =
>, <Line: +				subParser.addArgumentGroup("Threshold-filter related arguments");
>, <Line: +		optionalGroup.addArgument("--disable-parent-gt-is-filtered").setDefault(true)
>, <Line: +				.dest("use_parent_gt_is_filtered").action(Arguments.storeFalse());
>, <Line: +		useParentGtIsFiltered = args.getBoolean("use_parent_gt_is_filtered");
>, <Line: +		dbNsfpColContig = args.getInt("dbnsfp_col_contig");
>, <Line: +		dbNsfpColPosition = args.getInt("dbnsfp_col_position");
>, <Line: +		prefixDbNsfp = args.getString("dbnsfp_prefix");
>, <Line: +		pathDbNsfp = args.getString("dbnsfp_tsv");
>, <Line: +		if (args.getList("dbnsfp_columns") != null) {
>, <Line: +			for (Object o : args.getList("dbnsfp_columns")) {
>, <Line: +				final String s = (String) o;
>, <Line: +				for (String s2 : s.split(",")) {
>, <Line: +					if (!DbNsfpFields.DBNSFP_FIELDS.containsKey(s2)) {
>, <Line: +						throw new RuntimeException(
>, <Line: +								"Unknown field from dbNSFP or not yet supported: " + s);
>, <Line: +					} else {
>, <Line: +						columnsDbNsfp.add(s2);
>, <Line: +					}
>, <Line: +				}
>, <Line: +			}
>, <Line: +		}
>, <Line: +		if (args.getList("bed_annotation") != null) {
>, <Line: +			for (Object o : args.getList("bed_annotation")) {
>, <Line: +				final String s = (String) o;
>, <Line: +				bedAnnotationOptions.add(BedAnnotationOptions.parseFrom(s));
>, <Line: +			}
>, <Line: +		}
>, <Line: +		if (args.getList("tsv_annotation") != null) {
>, <Line: +			for (Object o : args.getList("tsv_annotation")) {
>, <Line: +				final String s = (String) o;
>, <Line: +				tsvAnnotationOptions.add(GenericTSVAnnotationOptions.parseFrom(s));
>, <Line: +			}
>, <Line: +		}
>, <Line: +		if (args.getList("vcf_annotation") != null) {
>, <Line: +			for (Object o : args.getList("vcf_annotation")) {
>, <Line: +				final String s = (String) o;
>, <Line: +				vcfAnnotationOptions.add(GenericVCFAnnotationOptions.parseFrom(s));
>, <Line: +			}
>, <Line: +				|| pathVCFGnomadExomes != null || pathVCFGnomadGenomes != null || pathDbNsfp != null
>, <Line: +				|| !tsvAnnotationOptions.isEmpty() || !vcfAnnotationOptions.isEmpty()))
>, <Line: +	public Integer getThreshDeNovoParentAd2() {
>, <Line: +		return threshDeNovoParentAd2;
>, <Line: +	}
>, <Line: +	public void setThreshDeNovoParentAd2(Integer threshDeNovoParentAd2) {
>, <Line: +		this.threshDeNovoParentAd2 = threshDeNovoParentAd2;
>, <Line: +	}
>, <Line: +	public String getPrefixDbNsfp() {
>, <Line: +		return prefixDbNsfp;
>, <Line: +	}
>, <Line: +	public void setPrefixDbNsfp(String prefixDbNsfp) {
>, <Line: +		this.prefixDbNsfp = prefixDbNsfp;
>, <Line: +	}
>, <Line: +	public String getPathDbNsfp() {
>, <Line: +		return pathDbNsfp;
>, <Line: +	}
>, <Line: +	public void setPathDbNsfp(String pathDbNsfp) {
>, <Line: +		this.pathDbNsfp = pathDbNsfp;
>, <Line: +	}
>, <Line: +	public List<String> getColumnsDbNsfp() {
>, <Line: +		return columnsDbNsfp;
>, <Line: +	}
>, <Line: +	public void setColumnsDbNsfp(List<String> columnsDbNsfp) {
>, <Line: +		this.columnsDbNsfp = columnsDbNsfp;
>, <Line: +	}
>, <Line: +	public List<GenericTSVAnnotationOptions> getTsvAnnotationOptions() {
>, <Line: +		return tsvAnnotationOptions;
>, <Line: +	}
>, <Line: +	public void setTsvAnnotationOptions(List<GenericTSVAnnotationOptions> tsvAnnotationOptions) {
>, <Line: +		this.tsvAnnotationOptions = tsvAnnotationOptions;
>, <Line: +	}
>, <Line: +	public int getDbNsfpColContig() {
>, <Line: +		return dbNsfpColContig;
>, <Line: +	}
>, <Line: +	public void setDbNsfpColContig(int dbNsfpColContig) {
>, <Line: +		this.dbNsfpColContig = dbNsfpColContig;
>, <Line: +	}
>, <Line: +	public int getDbNsfpColPosition() {
>, <Line: +		return dbNsfpColPosition;
>, <Line: +	}
>, <Line: +	public void setDbNsfpColPosition(int dbNsfpColPosition) {
>, <Line: +		this.dbNsfpColPosition = dbNsfpColPosition;
>, <Line: +	}
>, <Line: +	public List<GenericVCFAnnotationOptions> getVcfAnnotationOptions() {
>, <Line: +		return vcfAnnotationOptions;
>, <Line: +	}
>, <Line: +	public void setVcfAnnotationOptions(List<GenericVCFAnnotationOptions> vcfAnnotationOptions) {
>, <Line: +		this.vcfAnnotationOptions = vcfAnnotationOptions;
>, <Line: +	}
>, <Line: +	public boolean isUseParentGtIsFiltered() {
>, <Line: +		return useParentGtIsFiltered;
>, <Line: +	}
>, <Line: +	public void setUseParentGtIsFiltered(boolean useParentGtIsFiltered) {
>, <Line: +		this.useParentGtIsFiltered = useParentGtIsFiltered;
>, <Line: +	}
>, <Line: +				+ inheritanceAnnoUseFilters + ", useParentGtIsFiltered=" + useParentGtIsFiltered
>, <Line: +				+ ", threshDeNovoParentAd2=" + threshDeNovoParentAd2 + ", bedAnnotationOptions="
>, <Line: +				+ bedAnnotationOptions + ", dbNsfpColContig=" + dbNsfpColContig
>, <Line: +				+ ", dbNsfpColPosition=" + dbNsfpColPosition + ", prefixDbNsfp=" + prefixDbNsfp
>, <Line: +				+ ", pathDbNsfp=" + pathDbNsfp + ", columnsDbNsfp=" + columnsDbNsfp
>, <Line: +				+ ", tsvAnnotationOptions=" + tsvAnnotationOptions + ", vcfAnnotationOptions="
>, <Line: +				+ vcfAnnotationOptions + "]";
>, <Line: +		 * @param strValue String to parse from
>]
[<Line: -import java.util.ArrayList;
>, <Line: -import java.util.List;
>, <Line: -import java.util.Map;
>, <Line: -import java.util.function.BiFunction;
>, <Line: -import net.sourceforge.argparse4j.inf.Argument;
>, <Line: -import net.sourceforge.argparse4j.inf.ArgumentAction;
>, <Line: -import net.sourceforge.argparse4j.inf.ArgumentParserException;
>, <Line: -	 * @param subParsers
>, <Line: -	 *            {@link Subparsers} to setup
>, <Line: -		ArgumentGroup annotationGroup = subParser
>, <Line: -				.addArgumentGroup("Annotation Arguments (optional)");
>, <Line: -		ArgumentGroup bedAnnotationGroup = subParser
>, <Line: -				.addArgumentGroup("BED-based Annotation (optional)");
>, <Line: -		ArgumentGroup threshFilterGroup = subParser
>, <Line: -				.addArgumentGroup("Threshold-filter related arguments");
>, <Line: -		for (Object o : args.getList("bed_annotation")) {
>, <Line: -			final String s = (String)o;
>, <Line: -			bedAnnotationOptions.add(BedAnnotationOptions.parseFrom(s));
>, <Line: -				|| pathVCFGnomadExomes != null || pathVCFGnomadGenomes != null))
>, <Line: -				+ inheritanceAnnoUseFilters + ", threshDeNovoParentAd2=" + threshDeNovoParentAd2
>, <Line: -				+ ", bedAnnotationOptions=" + bedAnnotationOptions + "]";
>, <Line: -	}
>, <Line: -	public Integer getThreshDeNovoParentAd2() {
>, <Line: -		return threshDeNovoParentAd2;
>, <Line: -	}
>, <Line: -	public void setThreshDeNovoParentAd2(Integer threshDeNovoParentAd2) {
>, <Line: -		this.threshDeNovoParentAd2 = threshDeNovoParentAd2;
>, <Line: -		 * @param strValue
>, <Line: -		 *            String to parse from
>]