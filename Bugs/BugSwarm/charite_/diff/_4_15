[<Line: +import java.io.Closeable;
>, <Line: +import de.charite.compbio.jannovar.Jannovar;
>, <Line: +public class AnnotatedVCFWriter implements Closeable {
>, <Line: +	private final JannovarAnnotateVCFOptions options;
>, <Line: +			ImmutableMap<Integer, Chromosome> chromosomeMap, String vcfPath, JannovarAnnotateVCFOptions options,
>, <Line: +				!options.isShowAll(), options.isEscapeAnnField(), options.isNt3PrimeShifting()));
>, <Line: +				new VCFHeaderLine("jannovarVersion", Jannovar.JANNOVAR_VERSION),
>, <Line: +		this.out = VariantContextWriterConstructionHelper.openVariantContextWriter(vcfHeader,
>, <Line: +				options.getPathOutputVCF(), additionalLines);
>]
[<Line: -import java.io.File;
>, <Line: -import de.charite.compbio.jannovar.JannovarOptions;
>, <Line: -import de.charite.compbio.jannovar.impl.util.PathUtil;
>, <Line: -public class AnnotatedVCFWriter extends AnnotatedVariantWriter {
>, <Line: -	/** path to VCF file to process */
>, <Line: -	private final String vcfPath;
>, <Line: -	private final JannovarOptions options;
>, <Line: -			ImmutableMap<Integer, Chromosome> chromosomeMap, String vcfPath, JannovarOptions options,
>, <Line: -				!options.showAll, options.escapeAnnField, options.nt3PrimeShifting));
>, <Line: -		this.vcfPath = vcfPath;
>, <Line: -				new VCFHeaderLine("jannovarVersion", JannovarOptions.JANNOVAR_VERSION),
>, <Line: -		this.out = VariantContextWriterConstructionHelper.openVariantContextWriter(vcfHeader, getOutFileName(),
>, <Line: -				additionalLines);
>, <Line: -	/**
>, <Line: -	 * Create and return output file name.
>, <Line: -	 *
>, <Line: -	 * The output file name is the same as the input, with the extension ".EXT" replaced by ".jv.EXT" where EXT is one
>, <Line: -	 * of "vcf.gz", "vcf", and "bcf". If the extension is different from these values, ".jv.vcf.gz" is appended to the
>, <Line: -	 * input file name.
>, <Line: -	 *
>, <Line: -	 * When <code>options.outVCFFolder</code> is set then the file is written to this folder.
>, <Line: -	 *
>, <Line: -	 * @return output file name, depending on this.options
>, <Line: -	 */
>, <Line: -	@Override
>, <Line: -	public String getOutFileName() {
>, <Line: -		File f = new File(vcfPath);
>, <Line: -		String outname = f.getName();
>, <Line: -		if (options.outVCFFolder != null)
>, <Line: -			outname = PathUtil.join(options.outVCFFolder, outname);
>, <Line: -		else if (f.getParent() != null)
>, <Line: -			outname = PathUtil.join(f.getParent(), outname);
>, <Line: -		String suffix = ".vcf.gz";
>, <Line: -		for (String x : new String[] { ".vcf.gz", ".vcf", ".bcf" })
>, <Line: -			if (outname.endsWith(x))
>, <Line: -				suffix = x;
>, <Line: -		int i = outname.toLowerCase().lastIndexOf(suffix);
>, <Line: -		if (i < 0)
>, <Line: -			return outname + options.outputInfix + ".vcf.gz";
>, <Line: -		else
>, <Line: -			return outname.substring(0, i) + options.outputInfix + suffix;
>, <Line: -	}
>, <Line: -	@Override
>]