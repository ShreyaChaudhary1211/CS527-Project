[]
[<Line: -package de.charite.compbio.jannovar.pedigree.compatibilitychecker;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import com.google.common.collect.ImmutableMap;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Genotype;
>, <Line: -import de.charite.compbio.jannovar.pedigree.GenotypeList;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: -import de.charite.compbio.jannovar.pedigree.Person;
>, <Line: -/**
>, <Line: - * Abstract helper class for checking a {@link GenotypeList} for compatibility
>, <Line: - * with a {@link Pedigree}.
>, <Line: - * 
>, <Line: - * This class summarizes the builder compatibility checks.
>, <Line: - *
>, <Line: - * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: - * 
>, <Line: - * @deprecated use {@link CompatibilityChecker} instead.
>, <Line: - */
>, <Line: -@Deprecated
>, <Line: -public abstract class CompatibilityCheckerBase implements CompatibilityChecker {
>, <Line: -	/** the pedigree to use for the checking */
>, <Line: -	protected final Pedigree pedigree;
>, <Line: -	/** the genotype call list to use for the checking */
>, <Line: -	protected final GenotypeList list;
>, <Line: -	/**
>, <Line: -	 * Collects list of compatible mutations from father an mother for compound heterozygous.
>, <Line: -	 */
>, <Line: -	protected class Candidate {
>, <Line: -		/** one VCF record compatible with mutation in father */
>, <Line: -		private final ImmutableList<Genotype> paternal;
>, <Line: -		/** one VCF record compatible with mutation in mother */
>, <Line: -		private final ImmutableList<Genotype> maternal;
>, <Line: -		public Candidate(ImmutableList<Genotype> paternal, ImmutableList<Genotype> maternal) {
>, <Line: -			this.paternal = paternal;
>, <Line: -			this.maternal = maternal;
>, <Line: -		}
>, <Line: -		/** @return one VCF record compatible with mutation in father */
>, <Line: -		public ImmutableList<Genotype> getPaternal() {
>, <Line: -			return paternal;
>, <Line: -		}
>, <Line: -		/** @return one VCF record compatible with mutation in mother */
>, <Line: -		public ImmutableList<Genotype> getMaternal() {
>, <Line: -			return maternal;
>, <Line: -		}
>, <Line: -}
>, <Line: -	/**
>, <Line: -	 * Initialize compatibility checker and perform some sanity checks.
>, <Line: -	 *
>, <Line: -	 * The {@link GenotypeList} object passed to the constructor is expected to
>, <Line: -	 * represent all of the variants found in a certain gene (possibly after
>, <Line: -	 * filtering for rarity or predicted pathogenicity). The samples represented
>, <Line: -	 * by the {@link GenotypeList} must be in the same order as the list of
>, <Line: -	 * individuals contained in this pedigree.
>, <Line: -	 *
>, <Line: -	 * @param pedigree
>, <Line: -	 *            the {@link Pedigree} to use for the initialize
>, <Line: -	 * @param list
>, <Line: -	 *            the {@link GenotypeList} to use for the initialization
>, <Line: -	 * @throws CompatibilityCheckerException
>, <Line: -	 *             if the pedigree or variant list is invalid
>, <Line: -	 */
>, <Line: -	public CompatibilityCheckerBase(Pedigree pedigree, GenotypeList list) throws CompatibilityCheckerException {
>, <Line: -		if (pedigree.getMembers().size() == 0)
>, <Line: -			throw new CompatibilityCheckerException("Invalid pedigree of size 1.");
>, <Line: -		if (!list.namesEqual(pedigree))
>, <Line: -			throw new CompatibilityCheckerException("Incompatible names in pedigree and genotype list.");
>, <Line: -		if (list.getCalls().get(0).size() == 0)
>, <Line: -			throw new CompatibilityCheckerException("Genotype call list must not be empty!");
>, <Line: -		this.pedigree = pedigree;
>, <Line: -		this.list = list;
>, <Line: -	}
>, <Line: -	/* (non-Javadoc)
>, <Line: -	 * @see de.charite.compbio.jannovar.pedigree.compatibilitychecker.ICompatibilityChecker#run()
>, <Line: -	 */
>, <Line: -	public boolean run() throws CompatibilityCheckerException {
>, <Line: -		if (pedigree.getMembers().size() == 1)
>, <Line: -			return runSingleSampleCase();
>, <Line: -		else
>, <Line: -			return runMultiSampleCase();
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * @return siblig map for each person in <code>pedigree</code>, both parents
>, <Line: -	 *         must be in <code>pedigree</code> and the same
>, <Line: -	 */
>, <Line: -	protected static ImmutableMap<Person, ImmutableList<Person>> buildSiblings(Pedigree pedigree) {
>, <Line: -		ImmutableMap.Builder<Person, ImmutableList<Person>> mapBuilder = new ImmutableMap.Builder<Person, ImmutableList<Person>>();
>, <Line: -		for (Person p1 : pedigree.getMembers()) {
>, <Line: -			if (p1.getMother() == null || p1.getFather() == null)
>, <Line: -				continue;
>, <Line: -			ImmutableList.Builder<Person> listBuilder = new ImmutableList.Builder<Person>();
>, <Line: -			for (Person p2 : pedigree.getMembers()) {
>, <Line: -				if (p1.equals(p2) || !p1.getMother().equals(p2.getMother()) || !p1.getFather().equals(p2.getFather()))
>, <Line: -					continue;
>, <Line: -				listBuilder.add(p2);
>, <Line: -			}
>, <Line: -			mapBuilder.put(p1, listBuilder.build());
>, <Line: -		}
>, <Line: -		return mapBuilder.build();
>, <Line: -	}
>, <Line: -}
>]