[]
[<Line: -package de.charite.compbio.jannovar.cmd.download;
>, <Line: -import java.io.PrintWriter;
>, <Line: -import java.net.MalformedURLException;
>, <Line: -import java.net.URL;
>, <Line: -import java.util.Map;
>, <Line: -import org.apache.commons.cli.CommandLine;
>, <Line: -import org.apache.commons.cli.DefaultParser;
>, <Line: -import org.apache.commons.cli.HelpFormatter;
>, <Line: -import org.apache.commons.cli.Option;
>, <Line: -import org.apache.commons.cli.Options;
>, <Line: -import org.apache.commons.cli.ParseException;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import de.charite.compbio.jannovar.JannovarOptions;
>, <Line: -import de.charite.compbio.jannovar.cmd.HelpRequestedException;
>, <Line: -/**
>, <Line: - * Helper class for parsing the commandline of the download command.
>, <Line: - *
>, <Line: - * @author <a href="mailto:manuel.holtgrewe@charite.de">Manuel Holtgrewe</a>
>, <Line: - */
>, <Line: -public final class DownloadCommandLineParser {
>, <Line: -	/** options representation for the Apache commons command line parser */
>, <Line: -	protected Options options;
>, <Line: -	protected Options helpOptions;
>, <Line: -	/** the Apache commons command line parser */
>, <Line: -	protected DefaultParser parser;
>, <Line: -	/**
>, <Line: -	 * Calls initializeParser().
>, <Line: -	 */
>, <Line: -	public DownloadCommandLineParser() {
>, <Line: -		initializeParser();
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Initialize {@link #parser} and {@link #options}.
>, <Line: -	 */
>, <Line: -	private void initializeParser() {
>, <Line: -		options = new Options();
>, <Line: -		helpOptions = new Options();
>, <Line: -		Option helpOption = Option.builder("h").desc("show this help").longOpt("help").build();
>, <Line: -		helpOptions.addOption(helpOption);
>, <Line: -		options.addOption(helpOption);
>, <Line: -		options.addOption(Option.builder("v").desc("create verbose output").longOpt("verbose").build());
>, <Line: -		options.addOption(Option.builder("vv").desc("create very verbose output").longOpt("very-verbose").build());
>, <Line: -		options.addOption(Option.builder("s").desc("INI file with data source list").numberOfArgs(1)
>, <Line: -				.longOpt("data-source-list").build());
>, <Line: -		options.addOption(
>, <Line: -				Option.builder("dir").desc("target folder for downloaded and serialized files, defaults to \"data\"")
>, <Line: -						.numberOfArgs(1).longOpt("data-dir").build());
>, <Line: -		options.addOption(
>, <Line: -				Option.builder()
>, <Line: -						.desc("proxy to use for HTTP/HTTPS/FTP downloads (lower precedence than "
>, <Line: -								+ "the other proxy options)")
>, <Line: -						.numberOfArgs(1).longOpt("proxy").argName("proxy").build());
>, <Line: -		options.addOption(Option.builder().desc("proxy to use for HTTP downloads as \"<PROTOCOL>://<HOST>[:<PORT>]\"")
>, <Line: -				.numberOfArgs(1).longOpt("http-proxy").argName("http-proxy").build());
>, <Line: -		options.addOption(Option.builder().desc("proxy to use for HTTPS downloads as \"<PROTOCOL>://<HOST>[:<PORT>]\"")
>, <Line: -				.numberOfArgs(1).longOpt("https-proxy").argName("https-proxy").build());
>, <Line: -		options.addOption(Option.builder().desc("proxy to use for FTP downloads as \"<PROTOCOL>://<HOST>[:<PORT>]\"")
>, <Line: -				.numberOfArgs(1).longOpt("ftp-proxy").argName("ftp-proxy").build());
>, <Line: -		options.addOption(Option.builder("d").desc("Datasource for the transcipt database").hasArgs().required()
>, <Line: -				.longOpt("datasource").hasArgs().argName("datasource").build());
>, <Line: -		parser = new DefaultParser();
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Parse the command line and
>, <Line: -	 *
>, <Line: -	 * @throws ParseException
>, <Line: -	 *             on problems with the command line
>, <Line: -	 * @throws HelpRequestedException
>, <Line: -	 *             if the user requested help on the command line
>, <Line: -	 */
>, <Line: -	public JannovarOptions parse(String argv[]) throws ParseException, HelpRequestedException {
>, <Line: -		//Parse the help
>, <Line: -		CommandLine cmd = parser.parse(helpOptions, argv, true);
>, <Line: -		printHelpIfOptionIsSet(cmd);
>, <Line: -		// Parse the command line.
>, <Line: -		cmd = parser.parse(options, argv);
>, <Line: -		printHelpIfOptionIsSet(cmd);
>, <Line: -		// Fill the resulting JannovarOptions.
>, <Line: -		JannovarOptions result = new JannovarOptions();
>, <Line: -		result.printProgressBars = true;
>, <Line: -		result.command = JannovarOptions.Command.DOWNLOAD;
>, <Line: -		if (cmd.hasOption("verbose"))
>, <Line: -			result.verbosity = 2;
>, <Line: -		if (cmd.hasOption("very-verbose"))
>, <Line: -			result.verbosity = 3;
>, <Line: -		if (cmd.hasOption("data-dir"))
>, <Line: -			result.downloadPath = cmd.getOptionValue("data-dir");
>, <Line: -		// Get data source names from args.
>, <Line: -		ImmutableList.Builder<String> dsBuilder = new ImmutableList.Builder<String>();
>, <Line: -		for (String datasource : cmd.getOptionValues("datasource")) {
>, <Line: -			dsBuilder.add(datasource);
>, <Line: -		}
>, <Line: -		result.dataSourceNames = dsBuilder.build();
>, <Line: -		// Get data source (INI) file paths.
>, <Line: -		ImmutableList.Builder<String> dsfBuilder = new ImmutableList.Builder<String>();
>, <Line: -		String[] dataSourceLists = cmd.getOptionValues("data-source-list");
>, <Line: -		if (dataSourceLists != null)
>, <Line: -			for (int i = 0; i < dataSourceLists.length; ++i)
>, <Line: -				dsfBuilder.add(dataSourceLists[i]);
>, <Line: -		dsfBuilder.add("bundle:///default_sources.ini");
>, <Line: -		result.dataSourceFiles = dsfBuilder.build();
>, <Line: -		// get proxy settings from system environment if possible
>, <Line: -		Map<String, String> env = System.getenv();
>, <Line: -		if (getProxyURL(env.get("HTTP_PROXY")) != null)
>, <Line: -			result.httpProxy = getProxyURL(env.get("HTTP_PROXY"));
>, <Line: -		if (getProxyURL(env.get("http_proxy")) != null)
>, <Line: -			result.httpProxy = getProxyURL(env.get("http_proxy"));
>, <Line: -		if (getProxyURL(env.get("HTTPS_PROXY")) != null)
>, <Line: -			result.httpsProxy = getProxyURL(env.get("HTTPS_PROXY"));
>, <Line: -		if (getProxyURL(env.get("https_proxy")) != null)
>, <Line: -			result.httpsProxy = getProxyURL(env.get("https_proxy"));
>, <Line: -		if (getProxyURL(env.get("FTP_PROXY")) != null)
>, <Line: -			result.ftpProxy = getProxyURL(env.get("FTP_PROXY"));
>, <Line: -		if (getProxyURL(env.get("ftp_proxy")) != null)
>, <Line: -			result.ftpProxy = getProxyURL(env.get("ftp_proxy"));
>, <Line: -		// get proxy settings from the command line (--proxy), can be overwritten below
>, <Line: -		if (cmd.hasOption("proxy")) {
>, <Line: -			result.httpProxy = getProxyURL(cmd.getOptionValue("proxy"));
>, <Line: -			result.httpsProxy = getProxyURL(cmd.getOptionValue("proxy"));
>, <Line: -			result.ftpProxy = getProxyURL(cmd.getOptionValue("proxy"));
>, <Line: -		}
>, <Line: -		// get proxy settings from the command line, overriding the environment settings
>, <Line: -		if (cmd.hasOption("http-proxy"))
>, <Line: -			result.httpProxy = getProxyURL(cmd.getOptionValue("http-proxy"));
>, <Line: -		if (cmd.hasOption("https-proxy"))
>, <Line: -			result.httpsProxy = getProxyURL(cmd.getOptionValue("https-proxy"));
>, <Line: -		if (cmd.hasOption("ftp-proxy"))
>, <Line: -			result.ftpProxy = getProxyURL(cmd.getOptionValue("ftp-proxy"));
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	private void printHelpIfOptionIsSet(CommandLine cmd) throws HelpRequestedException {
>, <Line: -		if (cmd.hasOption("help")) {
>, <Line: -			printHelp();
>, <Line: -			throw new HelpRequestedException();
>, <Line: -		}
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Build {@link URL} from an environment proxy configuration
>, <Line: -	 *
>, <Line: -	 * @param envValue
>, <Line: -	 *            environment value with proxy host and port as URL
>, <Line: -	 * @return {@link URL} with configuration from <code>envValue</code> or <code>null</code> if not set or not
>, <Line: -	 *         successful
>, <Line: -	 */
>, <Line: -	private URL getProxyURL(String envValue) {
>, <Line: -		if (envValue == null)
>, <Line: -			return null;
>, <Line: -		try {
>, <Line: -			return new URL(envValue);
>, <Line: -		} catch (MalformedURLException e) {
>, <Line: -			System.err.println("WARNING: Could not parse proxy value " + envValue + " as URL.");
>, <Line: -			return null;
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void printHelp() {
>, <Line: -		final String HEADER = new StringBuilder().append("Jannovar Command: download\n\n")
>, <Line: -				.append("Use this command to download a transcript database and build a serialization file \n")
>, <Line: -				.append("of it. This file can then be later loaded by the annotation commands.\n\n")
>, <Line: -				.append("Usage: java -jar de.charite.compbio.jannovar.jar download [options] -d <datasource>+\n\n")
>, <Line: -				.toString();
>, <Line: -		// TODO(holtgrem): Explain data sources and refer to manual.
>, <Line: -		final String FOOTER = new StringBuilder()
>, <Line: -				.append("\n\nExample: java -jar de.charite.compbio.jannovar.jar download -d hg19/ucsc\n\n")
>, <Line: -				.append("Note that Jannovar also interprets the environment variables\n")
>, <Line: -				.append("HTTP_PROXY, HTTPS_PROXY and FTP_PROXY for downloading files.\n").toString();
>, <Line: -		System.err.print(HEADER);
>, <Line: -		HelpFormatter hf = new HelpFormatter();
>, <Line: -		PrintWriter pw = new PrintWriter(System.err, true);
>, <Line: -		hf.printOptions(pw, 78, options, 2, 2);
>, <Line: -		System.err.print(FOOTER);
>, <Line: -	}
>, <Line: -}
>]