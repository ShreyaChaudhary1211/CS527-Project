[<Line: +package de.charite.compbio.jannovar.mendel;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.List;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import de.charite.compbio.jannovar.pedigree.Pedigree;
>, <Line: +/**
>, <Line: + * Base class for tests for MendelianCompatibilityChecker JUnit tests
>, <Line: + * 
>, <Line: + * @author <a href="mailto:manuel.holtgrewe@bihealth.de">Manuel Holtgrewe</a>
>, <Line: + * @author <a href="mailto:max.schubach@charite.de">Max Schubach</a>
>, <Line: + */
>, <Line: +public class MendelianCompatibilityCheckerTestBase {
>, <Line: +	/** Helper enum type for simple genotypes */
>, <Line: +	protected enum SimpleGenotype {
>, <Line: +		/** heterozygous */
>, <Line: +		HET,
>, <Line: +		/** homozygous ref */
>, <Line: +		REF,
>, <Line: +		/** homozygous alt */
>, <Line: +		ALT,
>, <Line: +		/** unknown/no-call/not observed */
>, <Line: +		UKN
>, <Line: +	}
>, <Line: +	protected final SimpleGenotype HET = SimpleGenotype.HET;
>, <Line: +	protected final SimpleGenotype REF = SimpleGenotype.REF;
>, <Line: +	protected final SimpleGenotype ALT = SimpleGenotype.ALT;
>, <Line: +	protected final SimpleGenotype UKN = SimpleGenotype.UKN;
>, <Line: +	protected ImmutableList<String> names;
>, <Line: +	protected Pedigree pedigree;
>, <Line: +	/**
>, <Line: +	 * @return a {@link com.google.common.collect.ImmutableList} object.
>, <Line: +	 */
>, <Line: +	protected ImmutableList<SimpleGenotype> lst(SimpleGenotype... gts) {
>, <Line: +		ImmutableList.Builder<SimpleGenotype> builder = new ImmutableList.Builder<SimpleGenotype>();
>, <Line: +		for (int i = 0; i < gts.length; ++i)
>, <Line: +			builder.add(gts[i]);
>, <Line: +		return builder.build();
>, <Line: +	}
>, <Line: +	protected List<GenotypeCalls> getGenotypeCallsList(ImmutableList<SimpleGenotype> genotypes,
>, <Line: +			boolean isXchromosomal) {
>, <Line: +		HashMap<String, Genotype> entries = new HashMap<String, Genotype>();
>, <Line: +		for (int i = 0; i < names.size(); ++i) {
>, <Line: +			switch (genotypes.get(i)) {
>, <Line: +			case HET:
>, <Line: +				entries.put(names.get(i), new Genotype(ImmutableList.of(Genotype.REF_CALL, 1)));
>, <Line: +				break;
>, <Line: +			case REF:
>, <Line: +				entries.put(names.get(i), new Genotype(ImmutableList.of(Genotype.REF_CALL, Genotype.REF_CALL)));
>, <Line: +				break;
>, <Line: +			case ALT:
>, <Line: +				entries.put(names.get(i), new Genotype(ImmutableList.of(1, 1)));
>, <Line: +				break;
>, <Line: +			case UKN:
>, <Line: +				entries.put(names.get(i), new Genotype(ImmutableList.of(Genotype.NO_CALL, Genotype.NO_CALL)));
>, <Line: +				break;
>, <Line: +			}
>, <Line: +		}
>, <Line: +		List<GenotypeCalls> gcs = new ArrayList<GenotypeCalls>();
>, <Line: +		gcs.add(new GenotypeCalls(isXchromosomal ? ChromosomeType.X_CHROMOSOMAL : ChromosomeType.AUTOSOMAL,
>, <Line: +				entries.entrySet()));
>, <Line: +		return gcs;
>, <Line: +	}
>, <Line: +	@SuppressWarnings("unchecked")
>, <Line: +	protected List<GenotypeCalls> getGenotypeCallsList(ImmutableList<SimpleGenotype> genotypes1,
>, <Line: +			ImmutableList<SimpleGenotype> genotypes2, boolean isXchromosomal) {
>, <Line: +		List<GenotypeCalls> gcs = new ArrayList<GenotypeCalls>();
>, <Line: +		for (Object obj : new Object[] { genotypes1, genotypes2 }) {
>, <Line: +			ImmutableList<SimpleGenotype> genotypes = (ImmutableList<SimpleGenotype>) obj;
>, <Line: +			HashMap<String, Genotype> entries = new HashMap<String, Genotype>();
>, <Line: +			for (int i = 0; i < names.size(); ++i) {
>, <Line: +				switch (genotypes.get(i)) {
>, <Line: +				case HET:
>, <Line: +					entries.put(names.get(i), new Genotype(ImmutableList.of(Genotype.REF_CALL, 1)));
>, <Line: +					break;
>, <Line: +				case REF:
>, <Line: +					entries.put(names.get(i), new Genotype(ImmutableList.of(Genotype.REF_CALL, Genotype.REF_CALL)));
>, <Line: +					break;
>, <Line: +				case ALT:
>, <Line: +					entries.put(names.get(i), new Genotype(ImmutableList.of(1, 1)));
>, <Line: +					break;
>, <Line: +				case UKN:
>, <Line: +					entries.put(names.get(i), new Genotype(ImmutableList.of(Genotype.NO_CALL, Genotype.NO_CALL)));
>, <Line: +					break;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			gcs.add(new GenotypeCalls(isXchromosomal ? ChromosomeType.X_CHROMOSOMAL : ChromosomeType.AUTOSOMAL,
>, <Line: +					entries.entrySet()));
>, <Line: +		}
>, <Line: +		return gcs;
>, <Line: +	}
>, <Line: +}
>]
[]