[<Line: +import static org.semanticweb.owlapi.util.OWLAPIPreconditions.checkNotNull;
>, <Line: +public class GZipFileDocumentTarget extends OWLOntologyDocumentTargetBase {
>, <Line: +     * @param file
>, <Line: +    public GZipFileDocumentTarget(File file) {
>, <Line: +        super(() -> new GZIPOutputStream(new FileOutputStream(checkNotNull(file, "file cannot be null"))), null);
>]
[<Line: -import static org.semanticweb.owlapi.util.OWLAPIPreconditions.*;
>, <Line: -import java.io.IOException;
>, <Line: -import java.io.OutputStream;
>, <Line: -import java.util.Optional;
>, <Line: -import org.semanticweb.owlapi.model.IRI;
>, <Line: -import org.slf4j.Logger;
>, <Line: -import org.slf4j.LoggerFactory;
>, <Line: -public class GZipFileDocumentTarget implements OWLOntologyDocumentTarget {
>, <Line: -    private static final Logger LOGGER = LoggerFactory.getLogger(GZipFileDocumentTarget.class);
>, <Line: -    private final File out;
>, <Line: -     * @param os
>, <Line: -    public GZipFileDocumentTarget(File os) {
>, <Line: -        out = checkNotNull(os, "os cannot be null");
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public Optional<OutputStream> getOutputStream() {
>, <Line: -        try {
>, <Line: -            return optional(new GZIPOutputStream(new FileOutputStream(out)));
>, <Line: -        } catch (IOException e) {
>, <Line: -            LOGGER.error("Cannot create output stream", e);
>, <Line: -            return emptyOptional();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public Optional<IRI> getDocumentIRI() {
>, <Line: -        return optional(IRI.create(out));
>]