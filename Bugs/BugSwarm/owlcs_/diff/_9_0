[<Line: +package org.semanticweb.owlapi.api.test;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.HashSet;
>, <Line: +import java.util.LinkedHashSet;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Set;
>, <Line: +import javax.annotation.Nonnull;
>, <Line: +import org.semanticweb.owlapi.apibinding.OWLManager;
>, <Line: +import org.semanticweb.owlapi.model.*;
>, <Line: +import com.google.common.collect.Sets;
>, <Line: +@SuppressWarnings("javadoc")
>, <Line: +public class Builder {
>, <Line: +    private static @Nonnull OWLDataFactory df = OWLManager.getOWLDataFactory();
>, <Line: +    private final @Nonnull OWLAnnotationProperty ap = df.getOWLAnnotationProperty(IRI.create("urn:test#", "ann"));
>, <Line: +    private final @Nonnull OWLObjectProperty op = df.getOWLObjectProperty(IRI.create("urn:test#", "op"));
>, <Line: +    private final @Nonnull OWLDataProperty dp = df.getOWLDataProperty(IRI.create("urn:test#", "dp"));
>, <Line: +    private final @Nonnull OWLLiteral lit = df.getOWLLiteral(false);
>, <Line: +    private final @Nonnull OWLLiteral plainlit = df.getOWLLiteral("string", "en");
>, <Line: +    private final @Nonnull IRI iri = IRI.create("urn:test#", "iri");
>, <Line: +    private final @Nonnull Set<OWLAnnotation> as = Sets.newHashSet(df.getOWLAnnotation(ap, df.getOWLLiteral("test")));
>, <Line: +    private final @Nonnull OWLClass ce = df.getOWLClass(IRI.create("urn:test#", "c"));
>, <Line: +    private final @Nonnull OWLNamedIndividual i = df.getOWLNamedIndividual(IRI.create("urn:test#", "i"));
>, <Line: +    private final @Nonnull OWLNamedIndividual j = df.getOWLNamedIndividual(IRI.create("urn:test#", "j"));
>, <Line: +    private final @Nonnull OWLDatatype d = df.getOWLDatatype(IRI.create("urn:test#", "datatype"));
>, <Line: +    private final @Nonnull Set<OWLDataProperty> dps = Sets.newHashSet(df.getOWLDataProperty(iri), dp);
>, <Line: +    private final @Nonnull Set<OWLObjectProperty> ops = Sets.newHashSet(df.getOWLObjectProperty(iri), op);
>, <Line: +    private final @Nonnull Set<OWLClass> classes = Sets.newHashSet(df.getOWLClass(iri), ce);
>, <Line: +    private final @Nonnull Set<OWLNamedIndividual> inds = Sets.newHashSet(i, df.getOWLNamedIndividual(iri));
>, <Line: +    private final @Nonnull SWRLAtom v1 = df.getSWRLBuiltInAtom(IRI.create("urn:swrl#", "v1"), Arrays.asList((SWRLDArgument) df.getSWRLVariable(IRI.create("urn:swrl#", "var3")), df.getSWRLVariable(IRI.create("urn:swrl#", "var4"))));
>, <Line: +    private final @Nonnull SWRLAtom v2 = df.getSWRLBuiltInAtom(IRI.create("urn:swrl#", "v2"), Arrays.asList((SWRLDArgument) df.getSWRLVariable(IRI.create("urn:swrl#", "var5")), df.getSWRLVariable(IRI.create("urn:swrl#", "var6"))));
>, <Line: +    private final @Nonnull Set<SWRLAtom> body = Sets.newHashSet(v1);
>, <Line: +    private final @Nonnull Set<SWRLAtom> head = Sets.newHashSet(v2);
>, <Line: +    private final @Nonnull SWRLDArgument var1 = df.getSWRLVariable(IRI.create("urn:swrl#", "var1"));
>, <Line: +    private final @Nonnull List<SWRLDArgument> var1list = Arrays.asList(var1);
>, <Line: +    private final @Nonnull SWRLIArgument var2 = df.getSWRLVariable(IRI.create("urn:swrl#", "var2"));
>, <Line: +    private final @Nonnull LinkedHashSet<SWRLAtom> body2 = Sets.newLinkedHashSet(Arrays.asList(v1, 
>, <Line: +        df.getSWRLClassAtom(ce, var2), 
>, <Line: +        df.getSWRLDataRangeAtom(d, var1), 
>, <Line: +        df.getSWRLBuiltInAtom(iri, var1list), 
>, <Line: +        df.getSWRLDifferentIndividualsAtom(var2, df.getSWRLIndividualArgument(i)), 
>, <Line: +        df.getSWRLSameIndividualAtom(var2, df.getSWRLIndividualArgument(df.getOWLNamedIndividual(iri))), 
>, <Line: +        df.getSWRLBuiltInAtom(iri, var1list)));
>, <Line: +    private final @Nonnull LinkedHashSet<SWRLAtom> head2 = Sets.newLinkedHashSet(Arrays.asList(v2, df
>, <Line: +        .getSWRLDataPropertyAtom(dp, var2, df.getSWRLLiteralArgument(lit)), df.getSWRLObjectPropertyAtom(op, var2, var2)));
>, <Line: +    private final @Nonnull OWLOntologyManager m = getManager();
>, <Line: +    // no parsers and storers injected
>, <Line: +    private static OWLOntologyManager getManager() {
>, <Line: +        OWLOntologyManager instance = OWLManager.createOWLOntologyManager();
>, <Line: +        instance.getOntologyParsers().clear();
>, <Line: +        instance.getOntologyStorers().clear();
>, <Line: +        return instance;
>, <Line: +    }
>, <Line: +    public SWRLRule bigRule() {
>, <Line: +        return df.getSWRLRule(body2, head2, as);
>, <Line: +    }
>, <Line: +    public OWLHasKeyAxiom hasKey() {
>, <Line: +        Set<OWLPropertyExpression> set = new HashSet<>();
>, <Line: +        set.add(df.getOWLObjectProperty(iri));
>, <Line: +        set.add(op);
>, <Line: +        set.add(dp);
>, <Line: +        return df.getOWLHasKeyAxiom(ce, set, as);
>, <Line: +    }
>, <Line: +    public OWLSymmetricObjectPropertyAxiom symm() {
>, <Line: +        return df.getOWLSymmetricObjectPropertyAxiom(op, as);
>, <Line: +    }
>, <Line: +    public OWLTransitiveObjectPropertyAxiom trans() {
>, <Line: +        return df.getOWLTransitiveObjectPropertyAxiom(op, as);
>, <Line: +    }
>, <Line: +    public SWRLRule rule() {
>, <Line: +        return df.getSWRLRule(body, head);
>, <Line: +    }
>, <Line: +    public OWLSubObjectPropertyOfAxiom subObject() {
>, <Line: +        return df.getOWLSubObjectPropertyOfAxiom(op, df.getOWLTopObjectProperty(), as);
>, <Line: +    }
>, <Line: +    public OWLSubDataPropertyOfAxiom subData() {
>, <Line: +        return df.getOWLSubDataPropertyOfAxiom(dp, df.getOWLTopDataProperty());
>, <Line: +    }
>, <Line: +    public OWLSubClassOfAxiom subClass() {
>, <Line: +        return df.getOWLSubClassOfAxiom(ce, df.getOWLThing(), as);
>, <Line: +    }
>, <Line: +    public OWLSubAnnotationPropertyOfAxiom subAnn() {
>, <Line: +        return df.getOWLSubAnnotationPropertyOfAxiom(ap, df.getRDFSLabel(), as);
>, <Line: +    }
>, <Line: +    public OWLSameIndividualAxiom same() {
>, <Line: +        return df.getOWLSameIndividualAxiom(inds, as);
>, <Line: +    }
>, <Line: +    public OWLReflexiveObjectPropertyAxiom ref() {
>, <Line: +        return df.getOWLReflexiveObjectPropertyAxiom(op, as);
>, <Line: +    }
>, <Line: +    public OWLSubPropertyChainOfAxiom chain() {
>, <Line: +        return df.getOWLSubPropertyChainOfAxiom(new ArrayList<>(ops), op, as);
>, <Line: +    }
>, <Line: +    public OWLObjectPropertyRangeAxiom oRange() {
>, <Line: +        return df.getOWLObjectPropertyRangeAxiom(op, ce, as);
>, <Line: +    }
>, <Line: +    public OWLObjectPropertyDomainAxiom oDom() {
>, <Line: +        return df.getOWLObjectPropertyDomainAxiom(op, ce, as);
>, <Line: +    }
>, <Line: +    public OWLObjectPropertyAssertionAxiom opaInv() {
>, <Line: +        return df.getOWLObjectPropertyAssertionAxiom(df.getOWLObjectInverseOf(op), i, i, as);
>, <Line: +    }
>, <Line: +    public OWLObjectPropertyAssertionAxiom opaInvj() {
>, <Line: +        return df.getOWLObjectPropertyAssertionAxiom(df.getOWLObjectInverseOf(op), i, j, as);
>, <Line: +    }
>, <Line: +    public OWLObjectPropertyAssertionAxiom opa() {
>, <Line: +        return df.getOWLObjectPropertyAssertionAxiom(op, i, i, as);
>, <Line: +    }
>, <Line: +    public OWLNegativeObjectPropertyAssertionAxiom nop() {
>, <Line: +        return df.getOWLNegativeObjectPropertyAssertionAxiom(op, i, i, as);
>, <Line: +    }
>, <Line: +    public OWLNegativeDataPropertyAssertionAxiom ndp() {
>, <Line: +        return df.getOWLNegativeDataPropertyAssertionAxiom(dp, i, lit, as);
>, <Line: +    }
>, <Line: +    public OWLIrreflexiveObjectPropertyAxiom irr() {
>, <Line: +        return df.getOWLIrreflexiveObjectPropertyAxiom(op, as);
>, <Line: +    }
>, <Line: +    public OWLInverseObjectPropertiesAxiom iop() {
>, <Line: +        return df.getOWLInverseObjectPropertiesAxiom(op, op, as);
>, <Line: +    }
>, <Line: +    public OWLInverseFunctionalObjectPropertyAxiom ifp() {
>, <Line: +        return df.getOWLInverseFunctionalObjectPropertyAxiom(op, as);
>, <Line: +    }
>, <Line: +    public OWLFunctionalObjectPropertyAxiom fop() {
>, <Line: +        return df.getOWLFunctionalObjectPropertyAxiom(op, as);
>, <Line: +    }
>, <Line: +    public OWLFunctionalDataPropertyAxiom fdp() {
>, <Line: +        return df.getOWLFunctionalDataPropertyAxiom(dp, as);
>, <Line: +    }
>, <Line: +    public OWLEquivalentObjectPropertiesAxiom eOp() {
>, <Line: +        return df.getOWLEquivalentObjectPropertiesAxiom(ops, as);
>, <Line: +    }
>, <Line: +    public OWLEquivalentDataPropertiesAxiom eDp() {
>, <Line: +        return df.getOWLEquivalentDataPropertiesAxiom(dps, as);
>, <Line: +    }
>, <Line: +    public OWLEquivalentClassesAxiom ec() {
>, <Line: +        return df.getOWLEquivalentClassesAxiom(classes, as);
>, <Line: +    }
>, <Line: +    public OWLDisjointUnionAxiom du() {
>, <Line: +        return df.getOWLDisjointUnionAxiom(ce, classes, as);
>, <Line: +    }
>, <Line: +    public OWLDisjointObjectPropertiesAxiom dOp() {
>, <Line: +        return df.getOWLDisjointObjectPropertiesAxiom(ops, as);
>, <Line: +    }
>, <Line: +    public OWLDisjointDataPropertiesAxiom dDp() {
>, <Line: +        return df.getOWLDisjointDataPropertiesAxiom(dps, as);
>, <Line: +    }
>, <Line: +    public OWLDisjointClassesAxiom dc() {
>, <Line: +        return df.getOWLDisjointClassesAxiom(ce, df.getOWLClass(iri));
>, <Line: +    }
>, <Line: +    public OWLDifferentIndividualsAxiom assDi() {
>, <Line: +        return df.getOWLDifferentIndividualsAxiom(i, df.getOWLNamedIndividual(iri));
>, <Line: +    }
>, <Line: +    public OWLDeclarationAxiom decI() {
>, <Line: +        return df.getOWLDeclarationAxiom(i, as);
>, <Line: +    }
>, <Line: +    public OWLDeclarationAxiom decAp() {
>, <Line: +        return df.getOWLDeclarationAxiom(ap, as);
>, <Line: +    }
>, <Line: +    public OWLDeclarationAxiom decDt() {
>, <Line: +        return df.getOWLDeclarationAxiom(d, as);
>, <Line: +    }
>, <Line: +    public OWLDeclarationAxiom decDp() {
>, <Line: +        return df.getOWLDeclarationAxiom(dp, as);
>, <Line: +    }
>, <Line: +    public OWLDeclarationAxiom decOp() {
>, <Line: +        return df.getOWLDeclarationAxiom(op, as);
>, <Line: +    }
>, <Line: +    public OWLDeclarationAxiom decC() {
>, <Line: +        return df.getOWLDeclarationAxiom(ce, as);
>, <Line: +    }
>, <Line: +    public OWLDatatypeDefinitionAxiom dDef() {
>, <Line: +        return df.getOWLDatatypeDefinitionAxiom(d, df.getDoubleOWLDatatype(), as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyRangeAxiom dRange() {
>, <Line: +        return df.getOWLDataPropertyRangeAxiom(dp, d, as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyDomainAxiom dDom() {
>, <Line: +        return df.getOWLDataPropertyDomainAxiom(dp, ce, as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyAssertionAxiom assDPlain() {
>, <Line: +        return df.getOWLDataPropertyAssertionAxiom(dp, i, plainlit, as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyAssertionAxiom assD() {
>, <Line: +        return df.getOWLDataPropertyAssertionAxiom(dp, i, lit, as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyRangeAxiom dRangeRestrict() {
>, <Line: +        return df.getOWLDataPropertyRangeAxiom(dp, df.getOWLDatatypeMinMaxExclusiveRestriction(5.0D, 6.0D), as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyRangeAxiom dNot() {
>, <Line: +        return df.getOWLDataPropertyRangeAxiom(dp, df.getOWLDataComplementOf(df.getOWLDataOneOf(lit)), as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyRangeAxiom dOneOf() {
>, <Line: +        return df.getOWLDataPropertyRangeAxiom(dp, df.getOWLDataOneOf(lit), as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assDEq() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLDataExactCardinality(1, dp, d), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assDMax() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLDataMaxCardinality(1, dp, d), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assDMin() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLDataMinCardinality(1, dp, d), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assDHas() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLDataHasValue(dp, lit), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assDAll() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLDataAllValuesFrom(dp, d), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assDSome() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLDataSomeValuesFrom(dp, d), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assOneOf() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectOneOf(i), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assHasSelf() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectHasSelf(op), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assEq() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectExactCardinality(1, op, ce), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assMax() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectMaxCardinality(1, op, ce), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assMin() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectMinCardinality(1, op, ce), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assHas() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectHasValue(op, i), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assAll() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectAllValuesFrom(op, ce), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assSome() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectSomeValuesFrom(op, ce), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assNotAnon() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectComplementOf(ce), df.getOWLAnonymousIndividual("id"), as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assNot() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectComplementOf(ce), i, as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyRangeAxiom dRangeOr() {
>, <Line: +        return df.getOWLDataPropertyRangeAxiom(dp, df.getOWLDataUnionOf(d, df.getOWLDataOneOf(lit)), as);
>, <Line: +    }
>, <Line: +    public OWLDataPropertyRangeAxiom dRangeAnd() {
>, <Line: +        return df.getOWLDataPropertyRangeAxiom(dp, df.getOWLDataIntersectionOf(d, df.getOWLDataOneOf(lit)), as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assOr() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectUnionOf(classes), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom assAnd() {
>, <Line: +        return df.getOWLClassAssertionAxiom(df.getOWLObjectIntersectionOf(classes), i, as);
>, <Line: +    }
>, <Line: +    public OWLClassAssertionAxiom ass() {
>, <Line: +        return df.getOWLClassAssertionAxiom(ce, i, as);
>, <Line: +    }
>, <Line: +    public OWLAnnotationPropertyRangeAxiom annRange() {
>, <Line: +        return df.getOWLAnnotationPropertyRangeAxiom(ap, iri, as);
>, <Line: +    }
>, <Line: +    public OWLAnnotationPropertyDomainAxiom annDom() {
>, <Line: +        return df.getOWLAnnotationPropertyDomainAxiom(ap, iri, as);
>, <Line: +    }
>, <Line: +    public OWLAsymmetricObjectPropertyAxiom asymm() {
>, <Line: +        return df.getOWLAsymmetricObjectPropertyAxiom(op, as);
>, <Line: +    }
>, <Line: +    public OWLAnnotationAssertionAxiom ann() {
>, <Line: +        return df.getOWLAnnotationAssertionAxiom(ap, iri, lit, as);
>, <Line: +    }
>, <Line: +    public OWLOntology onto() {
>, <Line: +        try {
>, <Line: +            return m.createOntology(IRI.create("urn:test#", "test"));
>, <Line: +        } catch (OWLOntologyCreationException e) {
>, <Line: +            throw new RuntimeException(e);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public List<OWLAxiom> all() {
>, <Line: +        return Arrays.asList(ann(), asymm(), annDom(), annRange(), ass(), assAnd(), assOr(), dRangeAnd(), dRangeOr(),
>, <Line: +            assNot(), assNotAnon(), assSome(), assAll(), assHas(), assMin(), assMax(), assEq(), assHasSelf(),
>, <Line: +            assOneOf(), assDSome(), assDAll(), assDHas(), assDMin(), assDMax(), assDEq(), dOneOf(), dNot(),
>, <Line: +            dRangeRestrict(), assD(), assDPlain(), dDom(), dRange(), dDef(), decC(), decOp(), decDp(), decDt(), decAp(),
>, <Line: +            decI(), assDi(), dc(), dDp(), dOp(), du(), ec(), eDp(), eOp(), fdp(), fop(), ifp(), iop(), irr(), ndp(),
>, <Line: +            nop(), opa(), opaInv(), opaInvj(), oDom(), oRange(), chain(), ref(), same(), subAnn(), subClass(),
>, <Line: +            subData(), subObject(), rule(), symm(), trans(), hasKey(), bigRule());
>, <Line: +    }
>, <Line: +}
>]
[]