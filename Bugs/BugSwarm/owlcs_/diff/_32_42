[<Line: +import java.util.*;
>, <Line: +import com.google.common.collect.Sets;
>, <Line: +    private static final Set<?> trueValues = Sets.newHashSet(Boolean.TRUE, "true");
>, <Line: +    private static final Set<?> falseValues = Sets.newHashSet(Boolean.FALSE, "false");
>, <Line: +        if (c2 == null || c1.size() != c2.size()) {
>, <Line: +        return checkContents(c1, c2);
>, <Line: +    }
>, <Line: +    protected static boolean checkContents(Collection<?> c1, Collection<?> c2) {
>, <Line: +        // xrefs are stored as lists to preserve order, but order is not
>, <Line: +        // important for comparisons
>, <Line: +        Set<?> s = new HashSet<>(c2);
>, <Line: +            if (!s.contains(x)) {
>, <Line: +                return trueValues.contains(v1) && trueValues.contains(v2)
>, <Line: +                    || falseValues.contains(v1) && falseValues.contains(v2);
>]
[<Line: -import java.util.ArrayList;
>, <Line: -import java.util.Collection;
>, <Line: -import java.util.Collections;
>, <Line: -import java.util.List;
>, <Line: -        if (c2 == null) {
>, <Line: -            return false;
>, <Line: -        }
>, <Line: -        if (c1.size() != c2.size()) {
>, <Line: -        // xrefs are stored as lists to preserve order, but order is not import
>, <Line: -        // for comparisons
>, <Line: -            if (!c2.contains(x)) {
>, <Line: -                if (Boolean.TRUE.equals(v1) && "true".equals(v2)) {
>, <Line: -                    // special case - OK
>, <Line: -                } else if (Boolean.TRUE.equals(v2) && "true".equals(v1)) {
>, <Line: -                    // special case - OK
>, <Line: -                } else if (Boolean.FALSE.equals(v1) && "false".equals(v2)) {
>, <Line: -                    // special case - OK
>, <Line: -                } else if (Boolean.FALSE.equals(v2) && "false".equals(v1)) {
>, <Line: -                    // special case - OK
>, <Line: -                } else {
>, <Line: -                    return false;
>, <Line: -                }
>]