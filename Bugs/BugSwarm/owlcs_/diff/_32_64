[<Line: +import java.util.OptionalLong;
>, <Line: +        OptionalLong max = getOntologies().flatMapToLong(o -> o.classesInSignature().filter(processedClasses::add)
>, <Line: +            .mapToLong(cls -> equivalent(o.equivalentClassesAxioms(cls), OWLClassExpression.class)
>, <Line: +                .filter(d -> !d.isAnonymous()).count()))
>, <Line: +            .max();
>, <Line: +        return Integer.valueOf((int) max.orElse(0L));
>]
[<Line: -import java.util.concurrent.atomic.AtomicLong;
>, <Line: -        AtomicLong count = new AtomicLong();
>, <Line: -        getOntologies().forEach(o -> o.classesInSignature().filter(processedClasses::add).forEach(cls -> {
>, <Line: -            long curCount = equivalent(o.equivalentClassesAxioms(cls), OWLClassExpression.class)
>, <Line: -                .filter(d -> !d.isAnonymous()).count();
>, <Line: -            if (curCount > count.get()) {
>, <Line: -                count.set(curCount);
>, <Line: -            }
>, <Line: -        }));
>, <Line: -        return count.intValue();
>]