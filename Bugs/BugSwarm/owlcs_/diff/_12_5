[<Line: +/* This file is part of the OWL API.
>, <Line: + * The contents of this file are subject to the LGPL License, Version 3.0.
>, <Line: + * Copyright 2014, The University of Manchester
>, <Line: + * 
>, <Line: + * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
>, <Line: + * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
>, <Line: + * You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
>, <Line: + *
>, <Line: + * Alternatively, the contents of this file may be used under the terms of the Apache License, Version 2.0 in which case, the provisions of the Apache License Version 2.0 are applicable instead of those above.
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
>, <Line: + * http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
>, <Line: +package org.semanticweb.owlapi.io;
>, <Line: +import static org.semanticweb.owlapi.util.OWLAPIPreconditions.verifyNotNull;
>, <Line: +import java.io.BufferedOutputStream;
>, <Line: +import java.io.BufferedWriter;
>, <Line: +import java.io.File;
>, <Line: +import java.io.FileOutputStream;
>, <Line: +import java.io.IOException;
>, <Line: +import java.io.OutputStream;
>, <Line: +import java.io.OutputStreamWriter;
>, <Line: +import java.io.PrintWriter;
>, <Line: +import java.net.URLConnection;
>, <Line: +import java.nio.charset.Charset;
>, <Line: +import java.nio.charset.StandardCharsets;
>, <Line: +import javax.annotation.Nullable;
>, <Line: +import org.semanticweb.owlapi.model.IRI;
>, <Line: +import org.semanticweb.owlapi.model.OWLDocumentFormat;
>, <Line: +import org.semanticweb.owlapi.model.OWLOntology;
>, <Line: +import org.semanticweb.owlapi.model.OWLOntologyStorageException;
>, <Line: +import org.semanticweb.owlapi.model.OWLStorer;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +/**
>, <Line: + * Base class for ontology storers.
>, <Line: + * 
>, <Line: + * @author Ignazio
>, <Line: + * @since 6.0.0
>, <Line: + */
>, <Line: +public class OWLOntologyDocumentTargetBase implements OWLOntologyDocumentTarget {
>, <Line: +    protected static final Logger LOGGER = LoggerFactory.getLogger(OWLOntologyDocumentTargetBase.class);
>, <Line: +    protected interface Streamer<W> {
>, <Line: +        W get() throws IOException;
>, <Line: +    }
>, <Line: +    protected Charset encoding = StandardCharsets.UTF_8;
>, <Line: +    protected Streamer<OutputStream> baseStream;
>, <Line: +    protected Streamer<OutputStream> stream;
>, <Line: +    protected Streamer<PrintWriter> writer;
>, <Line: +    @Nullable protected final IRI iri;
>, <Line: +    protected OWLOntologyDocumentTargetBase(Streamer<OutputStream> baseStream, @Nullable IRI iri) {
>, <Line: +        this.baseStream = baseStream;
>, <Line: +        stream = () -> stream(baseStream);
>, <Line: +        writer = () -> writer(baseStream);
>, <Line: +        this.iri = iri;
>, <Line: +    }
>, <Line: +    protected PrintWriter writer(Streamer<OutputStream> in) throws IOException {
>, <Line: +        return new PrintWriter(new BufferedWriter(new OutputStreamWriter(in.get(), encoding)));
>, <Line: +    }
>, <Line: +    protected OutputStream stream(Streamer<OutputStream> in) throws IOException {
>, <Line: +        return new BufferedOutputStream(in.get());
>, <Line: +    }
>, <Line: +    protected void storeOnWriter(OWLStorer storer, OWLOntology ontology, OWLDocumentFormat format)
>, <Line: +        throws OWLOntologyStorageException {
>, <Line: +        try (PrintWriter w = writer.get()) {
>, <Line: +            storer.storeOntology(ontology, w, format);
>, <Line: +            w.flush();
>, <Line: +        } catch (IOException e) {
>, <Line: +            throw new OWLOntologyStorageException(e);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    protected void storeOnStream(OWLStorer storer, OWLOntology ontology, OWLDocumentFormat format)
>, <Line: +        throws OWLOntologyStorageException {
>, <Line: +        try (OutputStream w = stream.get()) {
>, <Line: +            storer.storeOntology(ontology, w, format);
>, <Line: +            w.flush();
>, <Line: +        } catch (IOException e) {
>, <Line: +            throw new OWLOntologyStorageException(e);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void store(OWLStorer storer, OWLOntology ontology, OWLDocumentFormat format)
>, <Line: +        throws OWLOntologyStorageException {
>, <Line: +        if (iri != null) {
>, <Line: +            IRI documentIRI = verifyNotNull(iri);
>, <Line: +            if (!documentIRI.isAbsolute()) {
>, <Line: +                throw new OWLOntologyStorageException("Document IRI must be absolute: " + documentIRI);
>, <Line: +            }
>, <Line: +            if (documentIRI.isFileIRI()) {
>, <Line: +                File file = new File(documentIRI.toURI());
>, <Line: +                // Ensure that the necessary directories exist.
>, <Line: +                file.getParentFile().mkdirs();
>, <Line: +                baseStream = () -> new FileOutputStream(file);
>, <Line: +            } else {
>, <Line: +                baseStream = () -> {
>, <Line: +                    URLConnection openConnection = documentIRI.toURI().toURL().openConnection();
>, <Line: +                    openConnection.setDoOutput(true);
>, <Line: +                    return openConnection.getOutputStream();
>, <Line: +                };
>, <Line: +            }
>, <Line: +            stream = () -> stream(baseStream);
>, <Line: +            writer = () -> writer(baseStream);
>, <Line: +        }
>, <Line: +        if (format.isTextual()) {
>, <Line: +            storeOnWriter(storer, ontology, format);
>, <Line: +        } else {
>, <Line: +            storeOnStream(storer, ontology, format);
>, <Line: +        }
>, <Line: +    }
>, <Line: +}
>]
[]