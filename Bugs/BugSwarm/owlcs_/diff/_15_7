[<Line: +import gnu.trove.map.hash.TObjectIntHashMap;
>, <Line: +    TObjectIntHashMap<Atom> atomIndex = new TObjectIntHashMap<>();
>, <Line: +    @Override
>, <Line: +    public Stream<OWLAxiom> getModule(Stream<OWLEntity> signature, boolean useSemantics, ModuleType moduletype) {
>, <Line: +        return decomposer.getModule(signature, useSemantics, moduletype).stream().map(AxiomWrapper::getAxiom)
>, <Line: +            .filter(ax -> ax != null);
>]
[<Line: -import uk.ac.manchester.cs.chainsaw.FastSet;
>, <Line: -    Map<Atom, Integer> atomIndex = new HashMap<>();
>, <Line: -    Set<Atom> asSet(Iterable<Integer> keys) {
>, <Line: -        Set<Atom> s = new HashSet<>();
>, <Line: -        for (int i : keys) {
>, <Line: -            s.add(atoms.get(i));
>, <Line: -        }
>, <Line: -        return s;
>, <Line: -    }
>, <Line: -    Set<Atom> asSet(FastSet keys) {
>, <Line: -        Set<Atom> s = new HashSet<>();
>, <Line: -        for (int i = 0; i < keys.size(); i++) {
>, <Line: -            s.add(atoms.get(keys.get(i)));
>, <Line: -        }
>, <Line: -        return s;
>, <Line: -    }
>, <Line: -    Atom getAtomByID(Object id) {
>, <Line: -        return atoms.get((Integer) id);
>, <Line: -    }
>, <Line: -    Collection<AxiomWrapper> getModule(Stream<OWLEntity> signature, boolean useSemantics, ModuleType moduletype) {
>, <Line: -        return decomposer.getModule(signature, useSemantics, moduletype);
>]