[<Line: +     *        milliseconds.
>, <Line: +        //@formatter:off
>, <Line: +        return new OWLOntologyLoaderConfiguration()
>, <Line: +            .setConnectionTimeout(getConnectionTimeout())
>, <Line: +            .setLoadAnnotationAxioms(shouldLoadAnnotations())
>, <Line: +            .setMissingImportHandlingStrategy(getMissingImportHandlingStrategy())
>, <Line: +            .setMissingOntologyHeaderStrategy(getMissingOntologyHeaderStrategy())
>, <Line: +            .setPriorityCollectionSorting(getPriorityCollectionSorting())
>, <Line: +            .setReportStackTraces(shouldReportStackTraces())
>, <Line: +            .setRetriesToAttempt(getRetriesToAttempt())
>, <Line: +            .setStrict(shouldParseWithStrictConfiguration())
>, <Line: +            .setTreatDublinCoreAsBuiltIn(shouldTreatDublinCoreAsBuiltin())
>, <Line: +        //@formatter:on
>, <Line: +        //@formatter:off
>, <Line: +        return new OWLOntologyWriterConfiguration()
>, <Line: +            .withIndenting(shouldIndent())
>, <Line: +            .withIndentSize(getIndentSize())
>, <Line: +            .withLabelsAsBanner(shouldUseLabelsAsBanner())
>, <Line: +            .withRemapAllAnonymousIndividualsIds(shouldRemapIds())
>, <Line: +            .withSaveIdsForAllAnonymousIndividuals(shouldSaveIds())
>, <Line: +            .withUseNamespaceEntities(shouldUseNamespaceEntities())
>, <Line: +            .withBannersEnabled(shouldUseBanners());
>, <Line: +        //@formatter:on
>]
[<Line: -    /**
>, <Line: -     * @param b
>, <Line: -     *        true if HTTP compression should be accepted
>, <Line: -     * @return a copy of this configuration with accepting HTTP compression set
>, <Line: -     *         to the new value
>, <Line: -     */
>, <Line: -    public OntologyConfigurator setAcceptingHTTPCompression(boolean b) {
>, <Line: -        overrides.put(ACCEPT_HTTP_COMPRESSION, Boolean.valueOf(b));
>, <Line: -        return this;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * @return true if HTTP compression should be used
>, <Line: -     */
>, <Line: -    public boolean shouldAcceptHTTPCompression() {
>, <Line: -        return ACCEPT_HTTP_COMPRESSION.getValue(Boolean.class, overrides).booleanValue();
>, <Line: -    }
>, <Line: -     *        milliseconds. This is necessary for use in {@code URLConnection}
>, <Line: -    /**
>, <Line: -     * @param value
>, <Line: -     *        true if redirects should be followed across protocols, false
>, <Line: -     *        otherwise.
>, <Line: -     * @return a copy of the current object with followRedirects set to the new
>, <Line: -     *         value.
>, <Line: -     */
>, <Line: -    public OntologyConfigurator setFollowRedirects(boolean value) {
>, <Line: -        overrides.put(FOLLOW_REDIRECTS, Boolean.valueOf(value));
>, <Line: -        return this;
>, <Line: -    }
>, <Line: -    /** @return follow redirects */
>, <Line: -    public boolean shouldFollowRedirects() {
>, <Line: -        return FOLLOW_REDIRECTS.getValue(Boolean.class, overrides).booleanValue();
>, <Line: -    }
>, <Line: -        return new OWLOntologyLoaderConfiguration().setAcceptingHTTPCompression(shouldAcceptHTTPCompression())
>, <Line: -            .setConnectionTimeout(getConnectionTimeout()).setFollowRedirects(shouldFollowRedirects())
>, <Line: -            .setLoadAnnotationAxioms(shouldLoadAnnotations()).setMissingImportHandlingStrategy(
>, <Line: -                getMissingImportHandlingStrategy()).setMissingOntologyHeaderStrategy(getMissingOntologyHeaderStrategy())
>, <Line: -            .setPriorityCollectionSorting(getPriorityCollectionSorting()).setReportStackTraces(
>, <Line: -                shouldReportStackTraces()).setRetriesToAttempt(getRetriesToAttempt()).setStrict(
>, <Line: -                    shouldParseWithStrictConfiguration()).setTreatDublinCoreAsBuiltIn(shouldTreatDublinCoreAsBuiltin())
>, <Line: -        return new OWLOntologyWriterConfiguration().withIndenting(shouldIndent()).withIndentSize(getIndentSize())
>, <Line: -            .withLabelsAsBanner(shouldUseLabelsAsBanner()).withRemapAllAnonymousIndividualsIds(shouldRemapIds())
>, <Line: -            .withSaveIdsForAllAnonymousIndividuals(shouldSaveIds()).withUseNamespaceEntities(
>, <Line: -                shouldUseNamespaceEntities()).withBannersEnabled(shouldUseBanners());
>]