[<Line: +    HasApplyChange, HasAddAxioms, HasAddAxiom, HasRemoveAxioms, HasRemoveAxiom, HasContainsOntology,
>, <Line: +    HasOntologyChangeListeners, HasOntologyConfigurator, Serializable {
>, <Line: +     *         in O.
>, <Line: +     *         in O.
>, <Line: +     *        {@code null})
>, <Line: +     *         is managed by this manager, otherwise {@code false}.
>, <Line: +     *         manager, otherwise {@code false}.
>, <Line: +     *        be anything)
>, <Line: +     *         by this manager, otherwise {@code false}.
>, <Line: +     *         if none match.
>, <Line: +     *         if none match.
>, <Line: +     *         manager does not manage an ontology with the specified IRI and no version IRI.
>, <Line: +     *         manage an ontology with the specified ontology ID.
>, <Line: +     *         declaration could not be resolved to an ontology, because the ontology was not loaded
>, <Line: +     *         or has been removed from this manager
>, <Line: +     *         the directlyImports relation. If the ontology is not managed by this manager then the
>, <Line: +     *         empty set will be returned.
>, <Line: +     *         the directlyImports relation. If the ontology is not managed by this manager then the
>, <Line: +     *         empty set will be returned.
>, <Line: +     *         imports relation of this ontology. If, for what ever reason, an imported ontology
>, <Line: +     *         could not be loaded, then it will not be contained in the returned set of ontologies.
>, <Line: +     *         If the ontology is not managed by this manager then the empty set will be returned.
>, <Line: +     *         imports relation of this ontology. If, for what ever reason, an imported ontology
>, <Line: +     *         could not be loaded, then it will not be contained in the returned set of ontologies.
>, <Line: +     *         If the ontology is not managed by this manager then the empty set will be returned.
>, <Line: +     *         ontology. This set will also include the specified ontology. Example: if A imports B
>, <Line: +     *         and B imports C, then calling this method with A will return the set consisting of A,
>, <Line: +     *         B and C. If, for what ever reason, an imported ontology could not be loaded, then it
>, <Line: +     *         will not be contained in the returned set of ontologies. If the ontology is not
>, <Line: +     *         managed by this manager then the empty set will be returned.
>, <Line: +     *         includes the specified ontology.
>, <Line: +     *         element in the list will be the specified ontology. If the ontology is not managed by
>, <Line: +     *         this manager then an empty list will be returned.
>, <Line: +     * @param ontologyIRI The IRI of the new ontology. <br>
>, <Line: +     *        The ontology document IRI of the created ontology will be set to the value returned by
>, <Line: +     *        any installed {@link org.semanticweb.owlapi.model.OWLOntologyIRIMapper}s. If no
>, <Line: +     *        mappers are installed or the ontology IRI was not mapped to a document IRI by any of
>, <Line: +     *        the installed mappers, then the ontology document IRI will be set to the value of
>, <Line: +     *        {@code ontologyIRI}.
>, <Line: +     *         new ontology already exists in this manager.
>, <Line: +     *         the specified {@code ontologyIRI}.
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     * @param ontologyIRI The IRI of the new ontology. <br>
>, <Line: +     *        The ontology document IRI of the created ontology will be set to the value returned by
>, <Line: +     *        any installed {@link org.semanticweb.owlapi.model.OWLOntologyIRIMapper}s. If no
>, <Line: +     *        mappers are installed or the ontology IRI was not mapped to a document IRI by any of
>, <Line: +     *        the installed mappers, then the ontology document IRI will be set to the value of
>, <Line: +     *        {@code ontologyIRI}.
>, <Line: +     *         new ontology already exists in this manager.
>, <Line: +     *         the specified {@code ontologyIRI}.
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     *        a document IRI in order to determine the type of ontology factory that will be used to
>, <Line: +     *        create the ontology. If this mapping is {@code null} then a default (in memory)
>, <Line: +     *        implementation of the ontology will most likely be created.
>, <Line: +     *         then this existing ontology will be returned.
>, <Line: +     *         the specified {@code ontologyIRI} (and no version IRI).
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     * @param ontologyID The ID of the ontology to be created. <br>
>, <Line: +     *        The ontology document IRI of the created ontology will be set to the value returned by
>, <Line: +     *        any installed {@link org.semanticweb.owlapi.model.OWLOntologyIRIMapper}s. If no
>, <Line: +     *        mappers are installed or the ontology IRI was not mapped to a document IRI by any of
>, <Line: +     *        the installed mappers, then the ontology document IRI will be set to the value of
>, <Line: +     *        {@code ontologyIRI}.
>, <Line: +     *         then this existing ontology will be returned.
>, <Line: +     *         the specified {@code ontologyID} (and no version IRI).
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     *        new ontology. If set to {@code false} then all axioms (including annotation axioms)
>, <Line: +     *        are copied into the new ontology.
>, <Line: +     *         contained in the specified ontologies possibly minus all non-logical axioms
>, <Line: +     *         new ontology already exists in this manager.
>, <Line: +     *         the specified {@code ontologyIRI} (and no ontology version IRI).
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     *        new ontology. If set to {@code false} then all axioms (including annotation axioms)
>, <Line: +     *        are copied into the new ontology.
>, <Line: +     *         contained in the specified ontologies possibly minus all non-logical axioms
>, <Line: +     *         new ontology already exists in this manager.
>, <Line: +     *         the specified {@code ontologyIRI} (and no ontology version IRI).
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     *         contained in the specified ontologies
>, <Line: +     *         new ontology already exists in this manager.
>, <Line: +     *         the specified {@code ontologyIRI} (and no version IRI).
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     *        will also have this IRI (although the OWL API will tolerated situations where this is
>, <Line: +     *        not the case).
>, <Line: +     *         ontology.
>, <Line: +     *         parsed from a document and the document contained syntax errors.
>, <Line: +     *         could not be loaded for what ever reason. If the
>, <Line: +     *         {@link MissingImportHandlingStrategy} is set to
>, <Line: +     *         {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown.
>, <Line: +     *         The {@code UnloadableImportException} contains information about the import
>, <Line: +     *         declaration that triggered the import and the cause of this exception is an {@code
>, <Line: +     *         loaded.
>, <Line: +     *         the specified {@code ontologyIRI} (where the ontology doesn't have a version IRI).
>, <Line: +     *         mapped to a ontology document IRI for which there already exists a mapping in this
>, <Line: +     *         manager.
>, <Line: +     *         ontology.
>, <Line: +     *         parsed from a document and the document contained syntax errors.
>, <Line: +     *         could not be loaded for what ever reason. If the
>, <Line: +     *         {@link MissingImportHandlingStrategy} is set to
>, <Line: +     *         {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown.
>, <Line: +     *         The {@code UnloadableImportException} contains information about the import
>, <Line: +     *         declaration that triggered the import and the cause of this exception is an {@code
>, <Line: +     *         loaded.
>, <Line: +     *         already the document IRI for a loaded ontology.
>, <Line: +     *         ontology IRI and version IRI is the same as the ontology IRI and version IRI of the
>, <Line: +     *         ontology contained in the document pointed to by {@code documentIRI}.
>, <Line: +            getOntologyConfigurator());
>, <Line: +     *         ontology.
>, <Line: +     *         parsed.
>, <Line: +     *         could not be loaded for what ever reason. If the
>, <Line: +     *         {@link MissingImportHandlingStrategy} is set to
>, <Line: +     *         {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown.
>, <Line: +     *         The {@code UnloadableImportException} contains information about the import
>, <Line: +     *         declaration that triggered the import and the cause of this exception is an {@code
>, <Line: +     *         loaded.
>, <Line: +     *         the document IRI for a loaded ontology.
>, <Line: +     *         ontology IRI and version IRI is the same as the ontology IRI and version IRI of the
>, <Line: +     *         ontology contained in the document pointed to by {@code documentIRI}.
>, <Line: +     *        ontology
>, <Line: +     *         ontology.
>, <Line: +     *         parsed.
>, <Line: +     *         could not be loaded for what ever reason. If the
>, <Line: +     *         {@link MissingImportHandlingStrategy} is set to
>, <Line: +     *         {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown.
>, <Line: +     *         The {@code UnloadableImportException} contains information about the import
>, <Line: +     *         declaration that triggered the import and the cause of this exception is an {@code
>, <Line: +     *         loaded.
>, <Line: +     *         ontology IRI and version IRI is the same as the ontology IRI and version IRI of the
>, <Line: +     *         ontology obtained from parsing the content of the input stream.
>, <Line: +     *        from.
>, <Line: +     *         ontology.
>, <Line: +     *         parsed from a document and the document contained syntax errors.
>, <Line: +     *         could not be loaded for what ever reason. If the
>, <Line: +     *         {@link MissingImportHandlingStrategy} is set to
>, <Line: +     *         {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown.
>, <Line: +     *         The {@code UnloadableImportException} contains information about the import
>, <Line: +     *         declaration that triggered the import and the cause of this exception is an {@code
>, <Line: +     *         loaded.
>, <Line: +     *         already the document IRI for a loaded ontology.
>, <Line: +     *         ontology IRI and version IRI is the same as the ontology IRI and version IRI of the
>, <Line: +     *         ontology contained in the document represented by the input source.
>, <Line: +        return loadOntologyFromOntologyDocument(documentSource, getOntologyConfigurator());
>, <Line: +     *        from.
>, <Line: +     *         ontology.
>, <Line: +     *         parsed from a document and the document contained syntax errors.
>, <Line: +     *         could not be loaded for what ever reason. If the
>, <Line: +     *         {@link MissingImportHandlingStrategy} is set to
>, <Line: +     *         {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown.
>, <Line: +     *         The {@code UnloadableImportException} contains information about the import
>, <Line: +     *         declaration that triggered the import and the cause of this exception is an {@code
>, <Line: +     *         loaded.
>, <Line: +     *         already the document IRI for a loaded ontology.
>, <Line: +     *         ontology IRI and version IRI is the same as the ontology IRI and version IRI of the
>, <Line: +     *         ontology contained in the document represented by the input source.
>, <Line: +        OntologyConfigurator config) throws OWLOntologyCreationException;
>, <Line: +     *        nothing happens.
>, <Line: +     *        then nothing happens.
>, <Line: +     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this manager.
>, <Line: +     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this manager.
>, <Line: +     *         programmatically created ontology)
>, <Line: +     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this manager.
>, <Line: +     *         saving the ontology, or the ontology can't be saved in the format it was loaded from.
>, <Line: +     * @throws UnknownOWLOntologyException if the specified ontology is not managed by this manager.
>, <Line: +     *         specified output stream
>, <Line: +     * @throws UnknownOWLOntologyException if the specified ontology is not managed by this manager.
>, <Line: +     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this manager.
>, <Line: +     *         list.
>, <Line: +     *         the list.
>, <Line: +     *        any previously set broadcast strategy.
>, <Line: +     *         silent missing imports handling is not turned on. If silent missing import handling
>, <Line: +     *         is turned on then this exception will not be thrown.
>, <Line: +        makeLoadImportRequest(declaration, getOntologyConfigurator());
>, <Line: +     *        loading.
>, <Line: +     *         silent missing imports handling is not turned on. If silent missing import handling
>, <Line: +     *         is turned on then this exception will not be thrown.
>, <Line: +        OntologyConfigurator configuration);
>]
[<Line: -    HasApplyChange, HasAddAxioms, HasAddAxiom, HasRemoveAxioms, HasRemoveAxiom,
>, <Line: -    HasContainsOntology, HasOntologyChangeListeners, HasOntologyConfigurator,
>, <Line: -    HasOntologyLoaderConfiguration, HasOntologyWriterConfiguration, Serializable {
>, <Line: -     * in O.
>, <Line: -     * in O.
>, <Line: -     * {@code null})
>, <Line: -     * is managed by this manager, otherwise {@code false}.
>, <Line: -     * manager, otherwise {@code false}.
>, <Line: -     * be anything)
>, <Line: -     * by this manager, otherwise {@code false}.
>, <Line: -     * if none match.
>, <Line: -     * if none match.
>, <Line: -     * manager does not manage an ontology with the specified IRI and no version IRI.
>, <Line: -     * manage an ontology with the specified ontology ID.
>, <Line: -     * declaration could not be resolved to an ontology, because the ontology was not loaded or has
>, <Line: -     * been removed from this manager
>, <Line: -     * the directlyImports relation. If the ontology is not managed by this manager then the empty
>, <Line: -     * set will be returned.
>, <Line: -     * the directlyImports relation. If the ontology is not managed by this manager then the empty
>, <Line: -     * set will be returned.
>, <Line: -     * imports relation of this ontology. If, for what ever reason, an imported ontology could not
>, <Line: -     * be loaded, then it will not be contained in the returned set of ontologies. If the ontology
>, <Line: -     * is not managed by this manager then the empty set will be returned.
>, <Line: -     * imports relation of this ontology. If, for what ever reason, an imported ontology could not
>, <Line: -     * be loaded, then it will not be contained in the returned set of ontologies. If the ontology
>, <Line: -     * is not managed by this manager then the empty set will be returned.
>, <Line: -     * ontology. This set will also include the specified ontology. Example: if A imports B and B
>, <Line: -     * imports C, then calling this method with A will return the set consisting of A, B and C. If,
>, <Line: -     * for what ever reason, an imported ontology could not be loaded, then it will not be contained
>, <Line: -     * in the returned set of ontologies. If the ontology is not managed by this manager then the
>, <Line: -     * empty set will be returned.
>, <Line: -     * includes the specified ontology.
>, <Line: -     * element in the list will be the specified ontology. If the ontology is not managed by this
>, <Line: -     * manager then an empty list will be returned.
>, <Line: -     * @param ontologyIRI The IRI of the new ontology. <br> The ontology document IRI of the created
>, <Line: -     * ontology will be set to the value returned by any installed {@link
>, <Line: -     * org.semanticweb.owlapi.model.OWLOntologyIRIMapper}s. If no mappers are installed or the
>, <Line: -     * ontology IRI was not mapped to a document IRI by any of the installed mappers, then the
>, <Line: -     * ontology document IRI will be set to the value of {@code ontologyIRI}.
>, <Line: -     * new ontology already exists in this manager.
>, <Line: -     * the specified {@code ontologyIRI}.
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * @param ontologyIRI The IRI of the new ontology. <br> The ontology document IRI of the created
>, <Line: -     * ontology will be set to the value returned by any installed {@link
>, <Line: -     * org.semanticweb.owlapi.model.OWLOntologyIRIMapper}s. If no mappers are installed or the
>, <Line: -     * ontology IRI was not mapped to a document IRI by any of the installed mappers, then the
>, <Line: -     * ontology document IRI will be set to the value of {@code ontologyIRI}.
>, <Line: -     * new ontology already exists in this manager.
>, <Line: -     * the specified {@code ontologyIRI}.
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * a document IRI in order to determine the type of ontology factory that will be used to create
>, <Line: -     * the ontology. If this mapping is {@code null} then a default (in memory) implementation of
>, <Line: -     * the ontology will most likely be created.
>, <Line: -     * then this existing ontology will be returned.
>, <Line: -     * the specified {@code ontologyIRI} (and no version IRI).
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * @param ontologyID The ID of the ontology to be created. <br> The ontology document IRI of the
>, <Line: -     * created ontology will be set to the value returned by any installed {@link
>, <Line: -     * org.semanticweb.owlapi.model.OWLOntologyIRIMapper}s. If no mappers are installed or the
>, <Line: -     * ontology IRI was not mapped to a document IRI by any of the installed mappers, then the
>, <Line: -     * ontology document IRI will be set to the value of {@code ontologyIRI}.
>, <Line: -     * then this existing ontology will be returned.
>, <Line: -     * the specified {@code ontologyID} (and no version IRI).
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * new ontology. If set to {@code false} then all axioms (including annotation axioms) are
>, <Line: -     * copied into the new ontology.
>, <Line: -     * contained in the specified ontologies possibly minus all non-logical axioms
>, <Line: -     * new ontology already exists in this manager.
>, <Line: -     * the specified {@code ontologyIRI} (and no ontology version IRI).
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * new ontology. If set to {@code false} then all axioms (including annotation axioms) are
>, <Line: -     * copied into the new ontology.
>, <Line: -     * contained in the specified ontologies possibly minus all non-logical axioms
>, <Line: -     * new ontology already exists in this manager.
>, <Line: -     * the specified {@code ontologyIRI} (and no ontology version IRI).
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * contained in the specified ontologies
>, <Line: -     * new ontology already exists in this manager.
>, <Line: -     * the specified {@code ontologyIRI} (and no version IRI).
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * will also have this IRI (although the OWL API will tolerated situations where this is not the
>, <Line: -     * case).
>, <Line: -     * ontology.
>, <Line: -     * parsed from a document and the document contained syntax errors.
>, <Line: -     * could not be loaded for what ever reason. If the {@link MissingImportHandlingStrategy} is set
>, <Line: -     * to {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown. The
>, <Line: -     * {@code UnloadableImportException} contains information about the import declaration that
>, <Line: -     * triggered the import and the cause of this exception is an {@code
>, <Line: -     * loaded.
>, <Line: -     * the specified {@code ontologyIRI} (where the ontology doesn't have a version IRI).
>, <Line: -     * mapped to a ontology document IRI for which there already exists a mapping in this manager.
>, <Line: -     * ontology.
>, <Line: -     * parsed from a document and the document contained syntax errors.
>, <Line: -     * could not be loaded for what ever reason. If the {@link MissingImportHandlingStrategy} is set
>, <Line: -     * to {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown. The
>, <Line: -     * {@code UnloadableImportException} contains information about the import declaration that
>, <Line: -     * triggered the import and the cause of this exception is an {@code
>, <Line: -     * loaded.
>, <Line: -     * already the document IRI for a loaded ontology.
>, <Line: -     * ontology IRI and version IRI is the same as the ontology IRI and version IRI of the ontology
>, <Line: -     * contained in the document pointed to by {@code documentIRI}.
>, <Line: -            getOntologyLoaderConfiguration());
>, <Line: -     * ontology.
>, <Line: -     * parsed.
>, <Line: -     * could not be loaded for what ever reason. If the {@link MissingImportHandlingStrategy} is set
>, <Line: -     * to {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown. The
>, <Line: -     * {@code UnloadableImportException} contains information about the import declaration that
>, <Line: -     * triggered the import and the cause of this exception is an {@code
>, <Line: -     * loaded.
>, <Line: -     * the document IRI for a loaded ontology.
>, <Line: -     * ontology IRI and version IRI is the same as the ontology IRI and version IRI of the ontology
>, <Line: -     * contained in the document pointed to by {@code documentIRI}.
>, <Line: -     * ontology
>, <Line: -     * ontology.
>, <Line: -     * parsed.
>, <Line: -     * could not be loaded for what ever reason. If the {@link MissingImportHandlingStrategy} is set
>, <Line: -     * to {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown. The
>, <Line: -     * {@code UnloadableImportException} contains information about the import declaration that
>, <Line: -     * triggered the import and the cause of this exception is an {@code
>, <Line: -     * loaded.
>, <Line: -     * ontology IRI and version IRI is the same as the ontology IRI and version IRI of the ontology
>, <Line: -     * obtained from parsing the content of the input stream.
>, <Line: -     * from.
>, <Line: -     * ontology.
>, <Line: -     * parsed from a document and the document contained syntax errors.
>, <Line: -     * could not be loaded for what ever reason. If the {@link MissingImportHandlingStrategy} is set
>, <Line: -     * to {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown. The
>, <Line: -     * {@code UnloadableImportException} contains information about the import declaration that
>, <Line: -     * triggered the import and the cause of this exception is an {@code
>, <Line: -     * loaded.
>, <Line: -     * already the document IRI for a loaded ontology.
>, <Line: -     * ontology IRI and version IRI is the same as the ontology IRI and version IRI of the ontology
>, <Line: -     * contained in the document represented by the input source.
>, <Line: -        return loadOntologyFromOntologyDocument(documentSource, getOntologyLoaderConfiguration());
>, <Line: -     * from.
>, <Line: -     * ontology.
>, <Line: -     * parsed from a document and the document contained syntax errors.
>, <Line: -     * could not be loaded for what ever reason. If the {@link MissingImportHandlingStrategy} is set
>, <Line: -     * to {@link MissingImportHandlingStrategy#SILENT} then this exception will not be thrown. The
>, <Line: -     * {@code UnloadableImportException} contains information about the import declaration that
>, <Line: -     * triggered the import and the cause of this exception is an {@code
>, <Line: -     * loaded.
>, <Line: -     * already the document IRI for a loaded ontology.
>, <Line: -     * ontology IRI and version IRI is the same as the ontology IRI and version IRI of the ontology
>, <Line: -     * contained in the document represented by the input source.
>, <Line: -        OWLOntologyLoaderConfiguration config) throws OWLOntologyCreationException;
>, <Line: -     * nothing happens.
>, <Line: -     * then nothing happens.
>, <Line: -     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this
>, <Line: -     * manager.
>, <Line: -     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this
>, <Line: -     * manager.
>, <Line: -     * programmatically created ontology)
>, <Line: -     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this
>, <Line: -     * manager.
>, <Line: -     * saving the ontology, or the ontology can't be saved in the format it was loaded from.
>, <Line: -     * @throws UnknownOWLOntologyException if the specified ontology is not managed by this
>, <Line: -     * manager.
>, <Line: -     * specified output stream
>, <Line: -     * @throws UnknownOWLOntologyException if the specified ontology is not managed by this
>, <Line: -     * manager.
>, <Line: -     * @throws UnknownOWLOntologyException If the specified ontology is not managed by this
>, <Line: -     * manager.
>, <Line: -     * list.
>, <Line: -     * the list.
>, <Line: -     * any previously set broadcast strategy.
>, <Line: -     * silent missing imports handling is not turned on. If silent missing import handling is turned
>, <Line: -     * on then this exception will not be thrown.
>, <Line: -        makeLoadImportRequest(declaration, getOntologyLoaderConfiguration());
>, <Line: -     * loading.
>, <Line: -     * silent missing imports handling is not turned on. If silent missing import handling is turned
>, <Line: -     * on then this exception will not be thrown.
>, <Line: -        OWLOntologyLoaderConfiguration configuration);
>]