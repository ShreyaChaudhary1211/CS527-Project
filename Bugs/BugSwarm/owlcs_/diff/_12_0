[<Line: +import static org.semanticweb.owlapi.util.OWLAPIPreconditions.checkNotNull;
>, <Line: +public class FileDocumentTarget extends OWLOntologyDocumentTargetBase {
>, <Line: +        super(() -> new FileOutputStream(checkNotNull(file, "file cannot be null")), null);
>]
[<Line: -import static org.semanticweb.owlapi.util.OWLAPIPreconditions.*;
>, <Line: -import java.io.BufferedOutputStream;
>, <Line: -import java.io.BufferedWriter;
>, <Line: -import java.io.FileWriter;
>, <Line: -import java.io.IOException;
>, <Line: -import java.io.OutputStream;
>, <Line: -import java.io.Writer;
>, <Line: -import java.util.Optional;
>, <Line: -import org.semanticweb.owlapi.model.IRI;
>, <Line: -import org.slf4j.Logger;
>, <Line: -import org.slf4j.LoggerFactory;
>, <Line: -public class FileDocumentTarget implements OWLOntologyDocumentTarget {
>, <Line: -    private static final Logger LOGGER = LoggerFactory.getLogger(FileDocumentTarget.class);
>, <Line: -    private final File file;
>, <Line: -        this.file = checkNotNull(file, "file cannot be null");
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public Optional<Writer> getWriter() {
>, <Line: -        try {
>, <Line: -            return optional(new BufferedWriter(new FileWriter(file)));
>, <Line: -        } catch (IOException e) {
>, <Line: -            LOGGER.error("Writer cannot be created", e);
>, <Line: -            return emptyOptional();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public Optional<OutputStream> getOutputStream() {
>, <Line: -        try {
>, <Line: -            return optional(new BufferedOutputStream(new FileOutputStream(file)));
>, <Line: -        } catch (IOException e) {
>, <Line: -            LOGGER.error("Input stream cannot be created", e);
>, <Line: -            return emptyOptional();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public Optional<IRI> getDocumentIRI() {
>, <Line: -        return optional(IRI.create(file));
>]