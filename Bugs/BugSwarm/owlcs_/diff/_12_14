[<Line: +import java.io.BufferedWriter;
>, <Line: +import java.io.OutputStream;
>, <Line: +import java.io.OutputStreamWriter;
>, <Line: +import java.io.PrintWriter;
>, <Line: +import org.semanticweb.owlapi.model.OWLDocumentFormat;
>, <Line: +import org.semanticweb.owlapi.model.OWLOntology;
>, <Line: +import org.semanticweb.owlapi.model.OWLOntologyStorageException;
>, <Line: +import org.semanticweb.owlapi.model.OWLRuntimeException;
>, <Line: +import org.semanticweb.owlapi.model.OWLStorer;
>, <Line: +    public void storeOntology(OWLOntology ontology, OutputStream outputStream, OWLDocumentFormat format)
>]
[<Line: -import java.io.*;
>, <Line: -import java.net.URL;
>, <Line: -import java.net.URLConnection;
>, <Line: -import java.util.Optional;
>, <Line: -import org.semanticweb.owlapi.io.OWLOntologyDocumentTarget;
>, <Line: -import org.semanticweb.owlapi.model.*;
>, <Line: -    public void storeOntology(OWLOntology ontology, IRI documentIRI, OWLDocumentFormat ontologyFormat)
>, <Line: -        throws OWLOntologyStorageException {
>, <Line: -        if (!documentIRI.isAbsolute()) {
>, <Line: -            throw new OWLOntologyStorageException("Document IRI must be absolute: " + documentIRI);
>, <Line: -        }
>, <Line: -        try (
>, <Line: -            // prepare actual output
>, <Line: -            OutputStream os = prepareActualOutput(documentIRI)) {
>, <Line: -            store(ontology, ontologyFormat, os);
>, <Line: -        } catch (IOException e) {
>, <Line: -            throw new OWLOntologyStorageException(e);
>, <Line: -        }
>, <Line: -    }
>, <Line: -    private static OutputStream prepareActualOutput(IRI documentIRI) throws IOException {
>, <Line: -        // files opened with FileOutputStream
>, <Line: -        if ("file".equals(documentIRI.getScheme())) {
>, <Line: -            File file = new File(documentIRI.toURI());
>, <Line: -            // Ensure that the necessary directories exist.
>, <Line: -            file.getParentFile().mkdirs();
>, <Line: -            return new FileOutputStream(file);
>, <Line: -        }
>, <Line: -        // URLs
>, <Line: -        URL url = documentIRI.toURI().toURL();
>, <Line: -        URLConnection conn = url.openConnection();
>, <Line: -        return conn.getOutputStream();
>, <Line: -    }
>, <Line: -    private void store(OWLOntology ontology, OWLDocumentFormat ontologyFormat, OutputStream tempOutputStream)
>, <Line: -        throws OWLOntologyStorageException, IOException {
>, <Line: -        try (OutputStreamWriter osw = new OutputStreamWriter(tempOutputStream, StandardCharsets.UTF_8);
>, <Line: -            BufferedWriter bw = new BufferedWriter(osw);
>, <Line: -            PrintWriter tempWriter = new PrintWriter(bw);) {
>, <Line: -            storeOntology(ontology, tempWriter, ontologyFormat);
>, <Line: -            tempWriter.flush();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public void storeOntology(OWLOntology ontology, OWLOntologyDocumentTarget target, OWLDocumentFormat format)
>, <Line: -        throws OWLOntologyStorageException {
>, <Line: -        Optional<Writer> writer = target.getWriter();
>, <Line: -        if (format.isTextual() && writer.isPresent()) {
>, <Line: -            try (Writer w = writer.get(); PrintWriter pw = new PrintWriter(w);) {
>, <Line: -                storeOntology(ontology, pw, format);
>, <Line: -                pw.flush();
>, <Line: -                return;
>, <Line: -            } catch (IOException e) {
>, <Line: -                throw new OWLOntologyStorageException(e);
>, <Line: -            }
>, <Line: -        }
>, <Line: -        Optional<OutputStream> outputStream = target.getOutputStream();
>, <Line: -        if (outputStream.isPresent()) {
>, <Line: -            storeOntology(ontology, outputStream.get(), format);
>, <Line: -            return;
>, <Line: -        }
>, <Line: -        Optional<IRI> documentIRI = target.getDocumentIRI();
>, <Line: -        if (documentIRI.isPresent()) {
>, <Line: -            storeOntology(ontology, documentIRI.get(), format);
>, <Line: -            return;
>, <Line: -        }
>, <Line: -        throw new OWLOntologyStorageException(
>, <Line: -            "Neither a Writer, OutputStream or Document IRI could be obtained to store the ontology in this format: "
>, <Line: -                + format.getKey());
>, <Line: -    }
>, <Line: -    /*
>, <Line: -     * Override this to support textual serialisation.
>, <Line: -     */
>, <Line: -    protected abstract void storeOntology(OWLOntology ontology, PrintWriter writer, OWLDocumentFormat format)
>, <Line: -        throws OWLOntologyStorageException;
>, <Line: -    /*
>, <Line: -     * Override this to support direct binary serialisation without the UTF-8
>, <Line: -     * encoding being applied.
>, <Line: -     */
>, <Line: -    protected void storeOntology(OWLOntology ontology, OutputStream outputStream, OWLDocumentFormat format)
>]