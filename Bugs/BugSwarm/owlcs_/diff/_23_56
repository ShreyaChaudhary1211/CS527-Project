[]
[<Line: -/*  NOTE:  Derived from openrdf sesame version 2.9.0.  See
>, <Line: - *  sesame distribution, available at https://bitbucket.org/openrdf/sesame
>, <Line: - * for license details referenced below.
>, <Line: - * Cloned from info.aduna.xml.SimpleSaxParser in order to be able to mask errors.
>, <Line: - * Licensed to Aduna under one or more contributor license agreements.  
>, <Line: - * See the NOTICE.txt file distributed with this work for additional 
>, <Line: - * information regarding copyright ownership. 
>, <Line: - *
>, <Line: - * Aduna licenses this file to you under the terms of the Aduna BSD 
>, <Line: - * License (the "License"); you may not use this file except in compliance 
>, <Line: - * with the License. See the LICENSE.txt file distributed with this work 
>, <Line: - * for the full License.
>, <Line: - *
>, <Line: - * Unless required by applicable law or agreed to in writing, software 
>, <Line: - * distributed under the License is distributed on an "AS IS" BASIS, 
>, <Line: - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
>, <Line: - * implied. See the License for the specific language governing permissions
>, <Line: - * and limitations under the License.
>, <Line: - */
>, <Line: -package org.semanticweb.owlapi.rio.utils;
>, <Line: -import java.io.File;
>, <Line: -import java.io.FileInputStream;
>, <Line: -import java.io.IOException;
>, <Line: -import java.io.InputStream;
>, <Line: -import java.io.Reader;
>, <Line: -import java.util.Collections;
>, <Line: -import java.util.LinkedHashMap;
>, <Line: -import java.util.Map;
>, <Line: -import org.xml.sax.Attributes;
>, <Line: -import org.xml.sax.InputSource;
>, <Line: -import org.xml.sax.SAXException;
>, <Line: -import org.xml.sax.XMLReader;
>, <Line: -import org.xml.sax.helpers.DefaultHandler;
>, <Line: -import info.aduna.xml.SimpleSAXListener;
>, <Line: -import info.aduna.xml.XMLReaderFactory;
>, <Line: -/**
>, <Line: - * An XML parser that generates "simple" SAX-like events from a limited subset
>, <Line: - * of XML documents. The OWLAPISimpleSAXParser can parse simple XML documents;
>, <Line: - * it doesn't support processing instructions or elements that contain both
>, <Line: - * sub-element and character data; character data is only supported in the
>, <Line: - * "leaves" of the XML element tree.
>, <Line: - * <h3>Example:</h3>
>, <Line: - * <p>
>, <Line: - * Parsing the following XML:
>, <Line: - * 
>, <Line: - * <pre>
>, <Line: - * &lt;?xml version='1.0' encoding='UTF-8'?&gt;
>, <Line: - * &lt;xml-doc&gt;
>, <Line: - *   &lt;foo a="1" b="2&amp;amp;3"/&gt;
>, <Line: - *   &lt;bar&gt;Hello World!&lt;/bar&gt;
>, <Line: - * &lt;/xml-doc&gt;
>, <Line: - * </pre>
>, <Line: - * <p>
>, <Line: - * will result in the following method calls to the <tt>SimpleSAXListener</tt>:
>, <Line: - * 
>, <Line: - * <pre>
>, <Line: - * startDocument()
>, <Line: - * startTag("xml-doc", emptyMap, "")
>, <Line: - *
>, <Line: - * startTag("foo", a_b_Map, "")
>, <Line: - * endTag("foo")
>, <Line: - *
>, <Line: - * startTag("bar", emptyMap, "Hello World!")
>, <Line: - * endTag("bar")
>, <Line: - *
>, <Line: - * endTag("xml-doc")
>, <Line: - * endDocument()
>, <Line: - * </pre>
>, <Line: - */
>, <Line: -public class OWLAPISimpleSAXParser {
>, <Line: -    /*-----------*
>, <Line: -     * Variables *
>, <Line: -     *-----------*/
>, <Line: -    /**
>, <Line: -     * The XMLReader to use for parsing the XML.
>, <Line: -     */
>, <Line: -    private XMLReader xmlReader;
>, <Line: -    /**
>, <Line: -     * The listener to report the events to.
>, <Line: -     */
>, <Line: -    protected SimpleSAXListener listener;
>, <Line: -    /**
>, <Line: -     * Flag indicating whether leading and trailing whitespace in text elements
>, <Line: -     * should be preserved.
>, <Line: -     */
>, <Line: -    protected boolean preserveWhitespace = false;
>, <Line: -    /*--------------*
>, <Line: -     * Constructors *
>, <Line: -     *--------------*/
>, <Line: -    /**
>, <Line: -     * Creates a new OWLAPISimpleSAXParser that will use the supplied
>, <Line: -     * <tt>XMLReader</tt> for parsing the XML. One must set a
>, <Line: -     * <tt>SimpleSAXListener</tt> on this object before calling one of the
>, <Line: -     * <tt>parse()</tt> methods.
>, <Line: -     * 
>, <Line: -     * @param xmlReader
>, <Line: -     *        The XMLReader to use for parsing.
>, <Line: -     * @see #setListener
>, <Line: -     */
>, <Line: -    public OWLAPISimpleSAXParser(XMLReader xmlReader) {
>, <Line: -        super();
>, <Line: -        this.xmlReader = xmlReader;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Creates a new OWLAPISimpleSAXParser that will try to create a new
>, <Line: -     * <tt>XMLReader</tt> using <tt>info.aduna.xml.XMLReaderFactory</tt> for
>, <Line: -     * parsing the XML. One must set a <tt>SimpleSAXListener</tt> on this object
>, <Line: -     * before calling one of the <tt>parse()</tt> methods.
>, <Line: -     * 
>, <Line: -     * @throws SAXException
>, <Line: -     *         If the OWLAPISimpleSAXParser was unable to create an XMLReader.
>, <Line: -     * @see #setListener
>, <Line: -     * @see XMLReader
>, <Line: -     * @see XMLReaderFactory
>, <Line: -     */
>, <Line: -    public OWLAPISimpleSAXParser() throws SAXException {
>, <Line: -        this(XMLReaderFactory.createXMLReader());
>, <Line: -    }
>, <Line: -    /*---------*
>, <Line: -     * Methods *
>, <Line: -     *---------*/
>, <Line: -    /**
>, <Line: -     * Sets the (new) listener that should receive any events from this parser.
>, <Line: -     * This listener will replace any previously set listener.
>, <Line: -     * 
>, <Line: -     * @param listener
>, <Line: -     *        The (new) listener for events from this parser.
>, <Line: -     */
>, <Line: -    public void setListener(SimpleSAXListener listener) {
>, <Line: -        this.listener = listener;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Gets the listener that currently will receive any events from this
>, <Line: -     * parser.
>, <Line: -     * 
>, <Line: -     * @return The listener for events from this parser.
>, <Line: -     */
>, <Line: -    public SimpleSAXListener getListener() {
>, <Line: -        return listener;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * @param preserveWhitespace
>, <Line: -     *        whether leading and trailing whitespace characters in text
>, <Line: -     *        elements should be preserved. Such whitespace characters are
>, <Line: -     *        discarded by default.
>, <Line: -     */
>, <Line: -    public void setPreserveWhitespace(boolean preserveWhitespace) {
>, <Line: -        this.preserveWhitespace = preserveWhitespace;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * @return Checks whether leading and trailing whitespace characters in text
>, <Line: -     *         elements are preserved. Defaults to <tt>false</tt>.
>, <Line: -     */
>, <Line: -    public boolean isPreserveWhitespace() {
>, <Line: -        return preserveWhitespace;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Parses the content of the supplied <tt>File</tt> as XML.
>, <Line: -     * 
>, <Line: -     * @param file
>, <Line: -     *        The file containing the XML to parse.
>, <Line: -     * @throws SAXException
>, <Line: -     *         for sax issues
>, <Line: -     * @throws IOException
>, <Line: -     *         for data access issues
>, <Line: -     */
>, <Line: -    public void parse(File file) throws SAXException, IOException {
>, <Line: -        try (InputStream in = new FileInputStream(file)) {
>, <Line: -            parse(in);
>, <Line: -        }
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Parses the content of the supplied <tt>InputStream</tt> as XML.
>, <Line: -     * 
>, <Line: -     * @param in
>, <Line: -     *        An <tt>InputStream</tt> containing XML data.
>, <Line: -     * @throws SAXException
>, <Line: -     *         for sax issues
>, <Line: -     * @throws IOException
>, <Line: -     *         for data access issues
>, <Line: -     */
>, <Line: -    public void parse(InputStream in) throws SAXException, IOException {
>, <Line: -        parse(new InputSource(in));
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Parses the content of the supplied <tt>Reader</tt> as XML.
>, <Line: -     * 
>, <Line: -     * @param reader
>, <Line: -     *        A <tt>Reader</tt> containing XML data.
>, <Line: -     * @throws SAXException
>, <Line: -     *         for sax issues
>, <Line: -     * @throws IOException
>, <Line: -     *         for data access issues
>, <Line: -     */
>, <Line: -    public void parse(Reader reader) throws SAXException, IOException {
>, <Line: -        parse(new InputSource(reader));
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Parses the content of the supplied <tt>InputSource</tt> as XML.
>, <Line: -     * 
>, <Line: -     * @param inputSource
>, <Line: -     *        An <tt>InputSource</tt> containing XML data.
>, <Line: -     * @throws SAXException
>, <Line: -     *         for sax issues
>, <Line: -     * @throws IOException
>, <Line: -     *         for data access issues
>, <Line: -     */
>, <Line: -    private synchronized void parse(InputSource inputSource) throws SAXException, IOException {
>, <Line: -        SimpleSAXDefaultHandler handler = new SimpleSAXDefaultHandler();
>, <Line: -        xmlReader.setContentHandler(handler);
>, <Line: -        xmlReader.setErrorHandler(handler);
>, <Line: -        xmlReader.parse(inputSource);
>, <Line: -    }
>, <Line: -    /*-------------------------------------*
>, <Line: -     * Inner class SimpleSAXDefaultHandler *
>, <Line: -     *-------------------------------------*/
>, <Line: -    class SimpleSAXDefaultHandler extends DefaultHandler {
>, <Line: -        /*-----------*
>, <Line: -         * Variables *
>, <Line: -         *-----------*/
>, <Line: -        /**
>, <Line: -         * StringBuilder used to collect text during parsing.
>, <Line: -         */
>, <Line: -        private StringBuilder charBuf = new StringBuilder(512);
>, <Line: -        /**
>, <Line: -         * The tag name of a deferred start tag.
>, <Line: -         */
>, <Line: -        private String deferredStartTag = null;
>, <Line: -        /**
>, <Line: -         * The attributes of a deferred start tag.
>, <Line: -         */
>, <Line: -        private Map<String, String> deferredAttributes = null;
>, <Line: -        /*--------------*
>, <Line: -         * Constructors *
>, <Line: -         *--------------*/
>, <Line: -        public SimpleSAXDefaultHandler() {
>, <Line: -            super();
>, <Line: -        }
>, <Line: -        /*---------*
>, <Line: -         * Methods *
>, <Line: -         *---------*/
>, <Line: -        // overrides DefaultHandler.startDocument()
>, <Line: -        @Override
>, <Line: -        public void startDocument() throws SAXException {
>, <Line: -            listener.startDocument();
>, <Line: -        }
>, <Line: -        // overrides DefaultHandler.endDocument()
>, <Line: -        @Override
>, <Line: -        public void endDocument() throws SAXException {
>, <Line: -            listener.endDocument();
>, <Line: -        }
>, <Line: -        // overrides DefaultHandler.characters()
>, <Line: -        @Override
>, <Line: -        public void characters(char[] ch, int start, int length) {
>, <Line: -            charBuf.append(ch, start, length);
>, <Line: -        }
>, <Line: -        // overrides DefaultHandler.startElement()
>, <Line: -        @Override
>, <Line: -        public void startElement(String namespaceURI, String localName, String qName, Attributes attributes)
>, <Line: -            throws SAXException {
>, <Line: -            // Report any deferred start tag
>, <Line: -            if (deferredStartTag != null) {
>, <Line: -                reportDeferredStartElement();
>, <Line: -            }
>, <Line: -            // Make current tag new deferred start tag
>, <Line: -            deferredStartTag = localName;
>, <Line: -            // Copy attributes to deferredAttributes
>, <Line: -            int attCount = attributes.getLength();
>, <Line: -            if (attCount == 0) {
>, <Line: -                deferredAttributes = Collections.emptyMap();
>, <Line: -            } else {
>, <Line: -                deferredAttributes = new LinkedHashMap<>(attCount * 2);
>, <Line: -                for (int i = 0; i < attCount; i++) {
>, <Line: -                    deferredAttributes.put(attributes.getQName(i), attributes.getValue(i));
>, <Line: -                }
>, <Line: -            }
>, <Line: -            // Clear character buffer
>, <Line: -            charBuf.setLength(0);
>, <Line: -        }
>, <Line: -        private void reportDeferredStartElement() throws SAXException {
>, <Line: -            listener.startTag(deferredStartTag, deferredAttributes, "");
>, <Line: -            deferredStartTag = null;
>, <Line: -            deferredAttributes = null;
>, <Line: -        }
>, <Line: -        // overrides DefaultHandler.endElement()
>, <Line: -        @Override
>, <Line: -        public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
>, <Line: -            if (deferredStartTag != null) {
>, <Line: -                // Check if any character data has been collected in the charBuf
>, <Line: -                String text = charBuf.toString();
>, <Line: -                if (!preserveWhitespace) {
>, <Line: -                    text = text.trim();
>, <Line: -                }
>, <Line: -                // Report deferred start tag
>, <Line: -                listener.startTag(deferredStartTag, deferredAttributes, text);
>, <Line: -                deferredStartTag = null;
>, <Line: -                deferredAttributes = null;
>, <Line: -            }
>, <Line: -            // Report the end tag
>, <Line: -            listener.endTag(localName);
>, <Line: -            // Clear character buffer
>, <Line: -            charBuf.setLength(0);
>, <Line: -        }
>, <Line: -    }
>, <Line: -}
>]