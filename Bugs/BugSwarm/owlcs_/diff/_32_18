[<Line: +import org.semanticweb.owlapi.api.test.baseclasses.TestBase;
>, <Line: +import org.semanticweb.owlapi.model.OWLClass;
>, <Line: +public class SWRLAtomOrderingTestCase extends TestBase {
>, <Line: +        OWLClass predicate = df.getOWLClass(iri("a"));
>, <Line: +        atomA = df.getSWRLClassAtom(predicate, df.getSWRLIndividualArgument(df.getOWLNamedIndividual(iri("i"))));
>, <Line: +        atomB = df.getSWRLClassAtom(predicate, df.getSWRLIndividualArgument(df.getOWLNamedIndividual(iri("j"))));
>, <Line: +        atomC = df.getSWRLClassAtom(predicate, df.getSWRLIndividualArgument(df.getOWLNamedIndividual(iri("k"))));
>, <Line: +        atomD = df.getSWRLClassAtom(predicate, df.getSWRLIndividualArgument(df.getOWLNamedIndividual(iri("l"))));
>]
[<Line: -import static org.mockito.Mockito.when;
>, <Line: -import org.mockito.Mock;
>, <Line: -public class SWRLAtomOrderingTestCase {
>, <Line: -    @Mock
>, <Line: -    @Mock
>, <Line: -    @Mock
>, <Line: -    @Mock
>, <Line: -        when(atomA.compareTo(atomB)).thenReturn(-1);
>, <Line: -        when(atomA.compareTo(atomC)).thenReturn(-1);
>, <Line: -        when(atomB.compareTo(atomC)).thenReturn(-1);
>, <Line: -        when(atomC.compareTo(atomB)).thenReturn(1);
>, <Line: -        when(atomC.compareTo(atomA)).thenReturn(1);
>, <Line: -        when(atomB.compareTo(atomA)).thenReturn(1);
>, <Line: -        when(atomA.compareTo(atomA)).thenReturn(0);
>, <Line: -        when(atomB.compareTo(atomB)).thenReturn(0);
>, <Line: -        when(atomC.compareTo(atomC)).thenReturn(0);
>]