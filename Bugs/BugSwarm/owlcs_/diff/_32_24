[<Line: +            return Boolean.valueOf(owlClassReferences.containsKey(cls));
>, <Line: +            return Boolean.valueOf(owlObjectPropertyReferences.containsKey(property));
>, <Line: +            return Boolean.valueOf(owlDataPropertyReferences.containsKey(property));
>, <Line: +            return Boolean.valueOf(owlIndividualReferences.containsKey(individual));
>, <Line: +            return Boolean.valueOf(owlDatatypeReferences.containsKey(datatype));
>, <Line: +            return Boolean.valueOf(owlAnnotationPropertyReferences.containsKey(property));
>, <Line: +        return LOGICAL_AXIOM_TYPES.stream().map(type -> axiomsByType.values(type, OWLLogicalAxiom.class))
>, <Line: +        return entity.accept(refChecker).booleanValue();
>]
[<Line: -            return owlClassReferences.containsKey(cls);
>, <Line: -            return owlObjectPropertyReferences.containsKey(property);
>, <Line: -            return owlDataPropertyReferences.containsKey(property);
>, <Line: -            return owlIndividualReferences.containsKey(individual);
>, <Line: -            return owlDatatypeReferences.containsKey(datatype);
>, <Line: -            return owlAnnotationPropertyReferences.containsKey(property);
>, <Line: -        return LOGICAL_AXIOM_TYPES.stream()
>, <Line: -            .map(type -> axiomsByType.values(type, OWLLogicalAxiom.class))
>, <Line: -        return entity.accept(refChecker);
>]