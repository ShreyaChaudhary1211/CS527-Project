[]
[<Line: -import java.io.IOException;
>, <Line: -import java.io.InputStream;
>, <Line: -import java.io.Reader;
>, <Line: -import java.net.URI;
>, <Line: -import java.net.URL;
>, <Line: -import java.net.URLConnection;
>, <Line: -import java.util.Optional;
>, <Line: -import javax.annotation.Nonnull;
>, <Line: -import org.openrdf.rio.RDFHandler;
>, <Line: -import org.openrdf.rio.RDFParser;
>, <Line: -import org.openrdf.rio.helpers.BasicParserSettings;
>, <Line: -import org.semanticweb.owlapi.formats.RioRDFDocumentFormatFactory;
>, <Line: -import org.semanticweb.owlapi.io.OWLOntologyDocumentSource;
>, <Line: -import org.semanticweb.owlapi.io.OWLParser;
>, <Line: -import org.semanticweb.owlapi.model.OWLOntologyLoaderConfiguration;
>, <Line: -    @Nonnull
>, <Line: -    @Override
>, <Line: -    public OWLParser createParser() {
>, <Line: -        return new TrixParserImpl(getRioFormatFactory());
>, <Line: -    }
>, <Line: -    private static class TrixParserImpl extends RioParserImpl {
>, <Line: -        public TrixParserImpl(RioRDFDocumentFormatFactory formatFactory) {
>, <Line: -            super(formatFactory);
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        protected void parseDocumentSource(OWLOntologyDocumentSource source, String baseUri, RDFHandler handler,
>, <Line: -            OWLOntologyLoaderConfiguration config) throws IOException {
>, <Line: -            RioRDFDocumentFormatFactory owlFormatFactory = getSupportedFormat();
>, <Line: -            final RDFParser createParser = new OWLAPIRioTrixParser();
>, <Line: -            createParser.getParserConfig().addNonFatalError(BasicParserSettings.VERIFY_DATATYPE_VALUES);
>, <Line: -            createParser.getParserConfig().addNonFatalError(BasicParserSettings.VERIFY_LANGUAGE_TAGS);
>, <Line: -            createParser.setRDFHandler(handler);
>, <Line: -            long rioParseStart = System.currentTimeMillis();
>, <Line: -            Optional<Reader> reader = source.getReader();
>, <Line: -            if (owlFormatFactory.isTextual() && reader.isPresent()) {
>, <Line: -                createParser.parse(reader.get(), baseUri);
>, <Line: -            } else {
>, <Line: -                Optional<InputStream> inputStream = source.getInputStream();
>, <Line: -                if (inputStream.isPresent()) {
>, <Line: -                    createParser.parse(inputStream.get(), baseUri);
>, <Line: -                } else {
>, <Line: -                    URL url = URI.create(source.getDocumentIRI().toString()).toURL();
>, <Line: -                    URLConnection conn = url.openConnection();
>, <Line: -                    createParser.parse(conn.getInputStream(), baseUri);
>, <Line: -                }
>, <Line: -            }
>, <Line: -            if (LOGGER.isDebugEnabled()) {
>, <Line: -                LOGGER.debug("rioParse: timing={}", System.currentTimeMillis() - rioParseStart);
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>]