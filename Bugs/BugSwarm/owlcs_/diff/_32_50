[<Line: +import java.util.function.Consumer;
>, <Line: +        sortOptionally(entities).stream().filter(e -> createGraph(e, illegalPuns))
>, <Line: +        ontology.axioms(ANNOTATION_ASSERTION).filter(ax -> ax.getSubject().isIRI())
>, <Line: +        if (ontology.referencingAxioms(anonInd).filter(ax -> !(ax instanceof OWLDifferentIndividualsAxiom))
>, <Line: +        RDFTranslator translator = new RDFTranslator(ontology.getOWLOntologyManager(), ontology,
>, <Line: +        entity.accept(new GraphVisitor(ontology, axioms, this::createGraph));
>, <Line: +    static final class GraphVisitor implements OWLEntityVisitor {
>, <Line: +        private final List<OWLAxiom> axioms;
>, <Line: +        private OWLOntology ontology;
>, <Line: +        private Consumer<Stream<OWLAxiom>> graphCreation;
>, <Line: +        GraphVisitor(OWLOntology ontology, List<OWLAxiom> axioms, Consumer<Stream<OWLAxiom>> graphCreation) {
>, <Line: +            this.axioms = axioms;
>, <Line: +            this.ontology = ontology;
>, <Line: +            this.graphCreation = graphCreation;
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public void visit(OWLClass cls) {
>, <Line: +            add(axioms, ontology.axioms(cls).filter(this::threewayDisjoint));
>, <Line: +            add(axioms, ontology.axioms(HAS_KEY).filter(ax -> ax.getClassExpression().equals(cls)));
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public void visit(OWLDatatype datatype) {
>, <Line: +            add(axioms, ontology.datatypeDefinitions(datatype));
>, <Line: +            graphCreation.accept(axioms.stream());
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public void visit(OWLNamedIndividual individual) {
>, <Line: +            add(axioms, ontology.axioms(individual).filter(ax -> !(ax instanceof OWLDifferentIndividualsAxiom)));
>, <Line: +            // for object property assertion axioms where the property is
>, <Line: +            // anonymous and the individual is the object, the renderer will
>, <Line: +            // save the simplified version of the axiom.
>, <Line: +            // As they will have subject and object inverted, we need to
>, <Line: +            // collect them here, otherwise the triple will not be included
>, <Line: +            // because the subject will not match
>, <Line: +            add(axioms, ontology.referencingAxioms(individual).filter(ax -> inverse(ax, individual)));
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public void visit(OWLDataProperty property) {
>, <Line: +            add(axioms, ontology.axioms(property).filter(this::threewayDisjointData));
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public void visit(OWLObjectProperty property) {
>, <Line: +            add(axioms, ontology.axioms(property).filter(this::threewayDisjointObject));
>, <Line: +            add(axioms, ontology.axioms(SUB_PROPERTY_CHAIN_OF).filter(ax -> ax.getSuperProperty().equals(property)));
>, <Line: +            OWLObjectInverseOf inverse = ontology.getOWLOntologyManager().getOWLDataFactory()
>, <Line: +                .getOWLObjectInverseOf(property);
>, <Line: +            add(axioms, ontology.axioms(inverse));
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public void visit(OWLAnnotationProperty property) {
>, <Line: +            add(axioms, ontology.axioms(property));
>, <Line: +        }
>, <Line: +        boolean threewayDisjoint(OWLAxiom ax) {
>, <Line: +            if (ax instanceof OWLDisjointClassesAxiom) {
>, <Line: +                OWLDisjointClassesAxiom disjAx = (OWLDisjointClassesAxiom) ax;
>, <Line: +                if (disjAx.classExpressions().count() > 2) {
>, <Line: +                    return false;
>, <Line: +                }
>, <Line: +            }
>, <Line: +            return true;
>, <Line: +        }
>, <Line: +        static boolean inverse(OWLAxiom ax, OWLNamedIndividual i) {
>, <Line: +            if (ax instanceof OWLObjectPropertyAssertionAxiom) {
>, <Line: +                OWLObjectPropertyAssertionAxiom candidate = (OWLObjectPropertyAssertionAxiom) ax;
>, <Line: +                if (candidate.getProperty().isAnonymous() && candidate.getObject().equals(i)) {
>, <Line: +                    return true;
>, <Line: +                }
>, <Line: +            }
>, <Line: +            return false;
>, <Line: +        }
>, <Line: +        boolean threewayDisjointData(OWLAxiom ax) {
>, <Line: +            return !(ax instanceof OWLDisjointDataPropertiesAxiom
>, <Line: +                && ((OWLDisjointDataPropertiesAxiom) ax).properties().count() > 2);
>, <Line: +        }
>, <Line: +        boolean threewayDisjointObject(OWLAxiom ax) {
>, <Line: +            return !(ax instanceof OWLDisjointObjectPropertiesAxiom
>, <Line: +                && ((OWLDisjointObjectPropertiesAxiom) ax).properties().count() > 2);
>, <Line: +        }
>, <Line: +    }
>, <Line: +                return getBlankNodeFor(anonymousIndividual.getID().getID(), isIndividual, needId);
>]
[<Line: -        sortOptionally(entities).stream()
>, <Line: -            .filter(e -> createGraph(e, illegalPuns))
>, <Line: -        ontology.axioms(ANNOTATION_ASSERTION)
>, <Line: -            .filter(ax -> ax.getSubject().isIRI())
>, <Line: -        if (ontology.referencingAxioms(anonInd)
>, <Line: -            .filter(ax -> !(ax instanceof OWLDifferentIndividualsAxiom))
>, <Line: -        RDFTranslator translator = new RDFTranslator(
>, <Line: -            ontology.getOWLOntologyManager(), ontology,
>, <Line: -        entity.accept(new OWLEntityVisitor() {
>, <Line: -            @Override
>, <Line: -            public void visit(OWLClass cls) {
>, <Line: -                add(axioms, ontology.axioms(cls).filter(this::threewayDisjoint));
>, <Line: -                add(axioms, ontology.axioms(HAS_KEY).filter(ax -> ax.getClassExpression().equals(cls)));
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public void visit(OWLDatatype datatype) {
>, <Line: -                add(axioms, ontology.datatypeDefinitions(datatype));
>, <Line: -                createGraph(axioms.stream());
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public void visit(OWLNamedIndividual individual) {
>, <Line: -                add(axioms, ontology.axioms(individual)
>, <Line: -                    .filter(ax -> !(ax instanceof OWLDifferentIndividualsAxiom)));
>, <Line: -                // for object property assertion axioms where the property is
>, <Line: -                // anonymous and the individual is the object, the renderer will
>, <Line: -                // save the simplified version of the axiom.
>, <Line: -                // As they will have subject and object inverted, we need to
>, <Line: -                // collect them here, otherwise the triple will not be included
>, <Line: -                // because the subject will not match
>, <Line: -                add(axioms, ontology.referencingAxioms(individual).filter(ax -> inverse(ax, individual)));
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public void visit(OWLDataProperty property) {
>, <Line: -                add(axioms, ontology.axioms(property).filter(this::threewayDisjointData));
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public void visit(OWLObjectProperty property) {
>, <Line: -                add(axioms, ontology.axioms(property).filter(this::threewayDisjointObject));
>, <Line: -                add(axioms, ontology.axioms(SUB_PROPERTY_CHAIN_OF)
>, <Line: -                    .filter(ax -> ax.getSuperProperty().equals(property)));
>, <Line: -                OWLObjectInverseOf inverse = df.getOWLObjectInverseOf(property);
>, <Line: -                add(axioms, ontology.axioms(inverse));
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public void visit(OWLAnnotationProperty property) {
>, <Line: -                add(axioms, ontology.axioms(property));
>, <Line: -            }
>, <Line: -            boolean threewayDisjoint(OWLAxiom ax) {
>, <Line: -                if (ax instanceof OWLDisjointClassesAxiom) {
>, <Line: -                    OWLDisjointClassesAxiom disjAx = (OWLDisjointClassesAxiom) ax;
>, <Line: -                    if (disjAx.classExpressions().count() > 2) {
>, <Line: -                        return false;
>, <Line: -                    }
>, <Line: -                }
>, <Line: -                return true;
>, <Line: -            }
>, <Line: -            boolean inverse(OWLAxiom ax, OWLNamedIndividual i) {
>, <Line: -                if (ax instanceof OWLObjectPropertyAssertionAxiom) {
>, <Line: -                    OWLObjectPropertyAssertionAxiom candidate = (OWLObjectPropertyAssertionAxiom) ax;
>, <Line: -                    if (candidate.getProperty().isAnonymous() && candidate.getObject().equals(i)) {
>, <Line: -                        return true;
>, <Line: -                    }
>, <Line: -                }
>, <Line: -                return false;
>, <Line: -            }
>, <Line: -            boolean threewayDisjointData(OWLAxiom ax) {
>, <Line: -                return !(ax instanceof OWLDisjointDataPropertiesAxiom
>, <Line: -                    && ((OWLDisjointDataPropertiesAxiom) ax).properties().count() > 2);
>, <Line: -            }
>, <Line: -            boolean threewayDisjointObject(OWLAxiom ax) {
>, <Line: -                return !(ax instanceof OWLDisjointObjectPropertiesAxiom
>, <Line: -                    && ((OWLDisjointObjectPropertiesAxiom) ax).properties().count() > 2);
>, <Line: -            }
>, <Line: -        });
>, <Line: -                key = anonymousIndividual.getID().getID();
>]