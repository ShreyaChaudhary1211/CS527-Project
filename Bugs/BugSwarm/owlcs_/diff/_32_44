[<Line: +import gnu.trove.map.hash.TObjectIntHashMap;
>, <Line: +    @Nonnull private static final TObjectIntHashMap<String> TAGSPRIORITIES = buildTagsPriorities();
>, <Line: +    @Nonnull private static final TObjectIntHashMap<String> TYPEDEFTAGSPRIORITIES = buildTypeDefTagsPriorities();
>, <Line: +    private static final TObjectIntHashMap<String> HEADERTAGSPRIORITIES = buildHeaderTagsPriorities();
>, <Line: +    private static final Comparator<String> headerTagsComparator = Comparator
>, <Line: +        .comparingInt(OBOFormatWriter::getHeaderPriority);
>, <Line: +    private static Comparator<String> termsTagsComparator = Comparator.comparingInt(OBOFormatWriter::getPriority);
>, <Line: +    private static Comparator<String> typeDefTagsComparator = Comparator
>, <Line: +        .comparingInt(OBOFormatWriter::getTypedefPriority);
>, <Line: +    private static int getHeaderPriority(String s) {
>, <Line: +        return actualGet(s, HEADERTAGSPRIORITIES);
>, <Line: +    protected static int actualGet(String s, TObjectIntHashMap<String> map) {
>, <Line: +        int i = map.get(s);
>, <Line: +        if (i == map.getNoEntryValue()) {
>, <Line: +            return 10000;
>, <Line: +        }
>, <Line: +        return i;
>, <Line: +    private static int getPriority(String s) {
>, <Line: +        return actualGet(s, TAGSPRIORITIES);
>, <Line: +    }
>, <Line: +    private static int getTypedefPriority(String s) {
>, <Line: +        return actualGet(s, TYPEDEFTAGSPRIORITIES);
>, <Line: +            sb.append(escapeOboString(idref.substring(0, colonPos), EscapeMode.XREF));
>, <Line: +            sb.append(escapeOboString(idref.substring(colonPos + 1), EscapeMode.XREF));
>, <Line: +            sb.append(escapeOboString(idref, EscapeMode.XREF));
>, <Line: +            sb.append(escapeOboString(annotation, EscapeMode.QUOTES));
>, <Line: +            sb.append(escapeOboString(value, EscapeMode.QUOTES));
>, <Line: +                sb.append('"').append(escapeOboString(value, EscapeMode.QUOTES)).append('"');
>, <Line: +                sb.append(escapeOboString(value, EscapeMode.SIMPLE)).append(' ');
>, <Line: +            sb.append(escapeOboString(value, EscapeMode.QUOTES));
>, <Line: +        } else if (OboFormatTag.TAG_DEF.getTag().equals(clause.getTag())
>, <Line: +            || OboFormatTag.TAG_SYNONYM.getTag().equals(clause.getTag())
>, <Line: +            || OboFormatTag.TAG_EXPAND_EXPRESSION_TO.getTag().equals(clause.getTag())
>, <Line: +                sb.append(escapeOboString(idref.substring(0, colonPos), EscapeMode.XREFLIST));
>, <Line: +                sb.append(escapeOboString(idref.substring(colonPos + 1), EscapeMode.XREFLIST));
>, <Line: +                sb.append(escapeOboString(idref, EscapeMode.XREFLIST));
>, <Line: +                sb.append(escapeOboString(annotation, EscapeMode.QUOTES));
>, <Line: +        sb.append(escapeOboString(property, EscapeMode.SIMPLE));
>, <Line: +                sb.append(escapeOboString(val, EscapeMode.QUOTES));
>, <Line: +                sb.append(escapeOboString(val, EscapeMode.SIMPLE));
>, <Line: +            EscapeMode mode = EscapeMode.MOST;
>, <Line: +                mode = EscapeMode.PARENTHESIS;
>, <Line: +                sb.append(escapeOboString(qv.getValue(), EscapeMode.QUOTES));
>, <Line: +        //@formatter:off
>, <Line: +        /** all except xref and xrefList. */    MOST, 
>, <Line: +        /** simple + parenthesis. */            PARENTHESIS, 
>, <Line: +        /** simple + quotes. */                 QUOTES, 
>, <Line: +        /** simple + comma + colon. */          XREF, 
>, <Line: +        /** xref + closing brackets. */         XREFLIST, 
>, <Line: +        /** newline and backslash. */           SIMPLE
>, <Line: +        //@formatter:on
>, <Line: +        String replace = in.replace("\\", "\\\\");
>, <Line: +        if (mode == EscapeMode.MOST || mode == EscapeMode.QUOTES) {
>, <Line: +            replace = replace.replace("\"", "\\\"");
>, <Line: +        }
>, <Line: +        replace = replace.replace("\n", "\\n");
>, <Line: +        if (mode == EscapeMode.MOST || mode == EscapeMode.PARENTHESIS) {
>, <Line: +            replace = replace.replace("{", "\\{");
>, <Line: +        }
>, <Line: +        if (mode == EscapeMode.XREF || mode == EscapeMode.XREFLIST) {
>, <Line: +            replace = replace.replace(",", "\\,").replace(":", "\\:");
>, <Line: +        if (mode == EscapeMode.XREFLIST) {
>, <Line: +            replace = replace.replace("]", "\\]");
>, <Line: +        return replace;
>, <Line: +    private static TObjectIntHashMap<String> buildHeaderTagsPriorities() {
>, <Line: +        TObjectIntHashMap<String> table = new TObjectIntHashMap<>();
>, <Line: +    private static TObjectIntHashMap<String> buildTagsPriorities() {
>, <Line: +        TObjectIntHashMap<String> table = new TObjectIntHashMap<>();
>, <Line: +    private static TObjectIntHashMap<String> buildTypeDefTagsPriorities() {
>, <Line: +        TObjectIntHashMap<String> table = new TObjectIntHashMap<>();
>]
[<Line: -    @Nonnull private static final Map<String, Integer> TAGSPRIORITIES = buildTagsPriorities();
>, <Line: -    @Nonnull private static final Map<String, Integer> TYPEDEFTAGSPRIORITIES = buildTypeDefTagsPriorities();
>, <Line: -    private static final Map<String, Integer> HEADERTAGSPRIORITIES = buildHeaderTagsPriorities();
>, <Line: -    private static final Comparator<String> headerTagsComparator = Comparator.comparing(
>, <Line: -        OBOFormatWriter::getHeaderPriority);
>, <Line: -    private static Comparator<String> termsTagsComparator = Comparator.comparing(OBOFormatWriter::getPriority);
>, <Line: -    private static Comparator<String> typeDefTagsComparator = Comparator.comparing(OBOFormatWriter::getTypedefPriority);
>, <Line: -    private static Integer getHeaderPriority(String s) {
>, <Line: -        return HEADERTAGSPRIORITIES.getOrDefault(s, Integer.valueOf(10000));
>, <Line: -    private static Integer getPriority(String s) {
>, <Line: -        return TAGSPRIORITIES.getOrDefault(s, Integer.valueOf(10000));
>, <Line: -    private static Integer getTypedefPriority(String s) {
>, <Line: -        return TYPEDEFTAGSPRIORITIES.getOrDefault(s, Integer.valueOf(10000));
>, <Line: -            sb.append(escapeOboString(idref.substring(0, colonPos), EscapeMode.xref));
>, <Line: -            sb.append(escapeOboString(idref.substring(colonPos + 1), EscapeMode.xref));
>, <Line: -            sb.append(escapeOboString(idref, EscapeMode.xref));
>, <Line: -            sb.append(escapeOboString(annotation, EscapeMode.quotes));
>, <Line: -            sb.append(escapeOboString(value, EscapeMode.quotes));
>, <Line: -                sb.append('"').append(escapeOboString(value, EscapeMode.quotes)).append('"');
>, <Line: -                sb.append(escapeOboString(value, EscapeMode.simple)).append(' ');
>, <Line: -            sb.append(escapeOboString(value, EscapeMode.quotes));
>, <Line: -        } else if (OboFormatTag.TAG_DEF.getTag().equals(clause.getTag()) || OboFormatTag.TAG_SYNONYM.getTag().equals(
>, <Line: -            clause.getTag()) || OboFormatTag.TAG_EXPAND_EXPRESSION_TO.getTag().equals(clause.getTag())
>, <Line: -                sb.append(escapeOboString(idref.substring(0, colonPos), EscapeMode.xrefList));
>, <Line: -                sb.append(escapeOboString(idref.substring(colonPos + 1), EscapeMode.xrefList));
>, <Line: -                sb.append(escapeOboString(idref, EscapeMode.xrefList));
>, <Line: -                sb.append(escapeOboString(annotation, EscapeMode.quotes));
>, <Line: -        sb.append(escapeOboString(property, EscapeMode.simple));
>, <Line: -                sb.append(escapeOboString(val, EscapeMode.quotes));
>, <Line: -                sb.append(escapeOboString(val, EscapeMode.simple));
>, <Line: -            EscapeMode mode = EscapeMode.most;
>, <Line: -                mode = EscapeMode.parenthesis;
>, <Line: -                sb.append(escapeOboString(qv.getValue(), EscapeMode.quotes));
>, <Line: -        /** all except xref and xrefList. */
>, <Line: -        most,
>, <Line: -        /** simple + parenthesis. */
>, <Line: -        parenthesis,
>, <Line: -        /** simple + quotes. */
>, <Line: -        quotes,
>, <Line: -        /** simple + comma + colon. */
>, <Line: -        xref,
>, <Line: -        /** xref + closing brackets. */
>, <Line: -        xrefList,
>, <Line: -        /** newline and backslash. */
>, <Line: -        simple
>, <Line: -        boolean modfied = false;
>, <Line: -        StringBuilder sb = new StringBuilder();
>, <Line: -        int length = in.length();
>, <Line: -        for (int i = 0; i < length; i++) {
>, <Line: -            char c = in.charAt(i);
>, <Line: -            if (c == '\n') {
>, <Line: -                modfied = true;
>, <Line: -                sb.append("\\n");
>, <Line: -            } else if (c == '\\') {
>, <Line: -                modfied = true;
>, <Line: -                sb.append("\\\\");
>, <Line: -            } else if (c == '"' && (mode == EscapeMode.most || mode == EscapeMode.quotes)) {
>, <Line: -                modfied = true;
>, <Line: -                sb.append("\\\"");
>, <Line: -            } else if (c == '{' && (mode == EscapeMode.most || mode == EscapeMode.parenthesis)) {
>, <Line: -                modfied = true;
>, <Line: -                sb.append("\\{");
>, <Line: -            }
>, <Line: -            // removed for compatibility with OBO-Edit
>, <Line: -            // else if (c == '}' && (mode == EscapeMode.most || mode ==
>, <Line: -            // EscapeMode.parenthesis)) {
>, <Line: -            // modfied = true;
>, <Line: -            // sb.append("\\}");
>, <Line: -            // }
>, <Line: -            else if (c == ',' && (mode == EscapeMode.xref || mode == EscapeMode.xrefList)) {
>, <Line: -                modfied = true;
>, <Line: -                sb.append("\\,");
>, <Line: -            } else if (c == ':' && (mode == EscapeMode.xref || mode == EscapeMode.xrefList)) {
>, <Line: -                modfied = true;
>, <Line: -                sb.append("\\:");
>, <Line: -            } else if (c == ']' && mode == EscapeMode.xrefList) {
>, <Line: -                modfied = true;
>, <Line: -                sb.append("\\]");
>, <Line: -            } else {
>, <Line: -                sb.append(c);
>, <Line: -            }
>, <Line: -        if (modfied) {
>, <Line: -            return sb;
>, <Line: -        return in;
>, <Line: -    private static Map<String, Integer> buildHeaderTagsPriorities() {
>, <Line: -        Map<String, Integer> table = new HashMap<>();
>, <Line: -    private static Map<String, Integer> buildTagsPriorities() {
>, <Line: -        Map<String, Integer> table = new HashMap<>();
>, <Line: -    private static Map<String, Integer> buildTypeDefTagsPriorities() {
>, <Line: -        Map<String, Integer> table = new HashMap<>();
>]