[<Line: +        when(ontologyFactory.canCreateFromDocumentIRI(any(IRI.class))).thenReturn(Boolean.TRUE);
>, <Line: +        when(ontologyFactory.canAttemptLoading(any(OWLOntologyDocumentSource.class))).thenReturn(Boolean.TRUE);
>, <Line: +        when(ontologyFactory.loadOWLOntology(any(OWLOntologyManager.class), any(OWLOntologyDocumentSource.class),
>, <Line: +            any(OWLOntologyFactory.OWLOntologyCreationHandler.class), any(OWLOntologyLoaderConfiguration.class)))
>, <Line: +        when(storer.canStoreOntology(any(OWLDocumentFormat.class))).thenReturn(Boolean.TRUE);
>, <Line: +        when(mock.getOntologyID())
>, <Line: +            .thenReturn(new OWLOntologyID(optional(IRI.create("urn:mock:ontology")), emptyOptional()));
>]
[<Line: -        when(ontologyFactory.canCreateFromDocumentIRI(any(IRI.class))).thenReturn(true);
>, <Line: -        when(ontologyFactory.canAttemptLoading(any(OWLOntologyDocumentSource.class))).thenReturn(true);
>, <Line: -        when(ontologyFactory.loadOWLOntology(any(OWLOntologyManager.class), any(OWLOntologyDocumentSource.class), any(
>, <Line: -            OWLOntologyFactory.OWLOntologyCreationHandler.class), any(OWLOntologyLoaderConfiguration.class)))
>, <Line: -        when(storer.canStoreOntology(any(OWLDocumentFormat.class))).thenReturn(true);
>, <Line: -        when(mock.getOntologyID()).thenReturn(new OWLOntologyID(optional(IRI.create("urn:mock:ontology")),
>, <Line: -            emptyOptional()));
>]