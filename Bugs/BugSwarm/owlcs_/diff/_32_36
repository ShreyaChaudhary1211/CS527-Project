[<Line: +            AtomicBoolean rollbackRequested = new AtomicBoolean(false);
>, <Line: +            AtomicBoolean allNoOps = new AtomicBoolean(true);
>, <Line: +            actuallyApply(changes, rollbackRequested, allNoOps, appliedChanges);
>, <Line: +            if (rollbackRequested.get()) {
>, <Line: +                rollBack(appliedChanges);
>, <Line: +            if (rollbackRequested.get()) {
>, <Line: +            if (allNoOps.get()) {
>, <Line: +    protected void actuallyApply(List<? extends OWLOntologyChange> changes, AtomicBoolean rollbackRequested,
>, <Line: +        AtomicBoolean allNoOps, List<OWLOntologyChange> appliedChanges) {
>, <Line: +        for (OWLOntologyChange change : changes) {
>, <Line: +            // once rollback is requested by a failed change, do not carry
>, <Line: +            // out any more changes
>, <Line: +            if (!rollbackRequested.get()) {
>, <Line: +                assert change != null;
>, <Line: +                ChangeApplied enactChangeApplication = enactChangeApplication(change);
>, <Line: +                if (enactChangeApplication == ChangeApplied.UNSUCCESSFULLY) {
>, <Line: +                    rollbackRequested.set(true);
>, <Line: +                }
>, <Line: +                if (enactChangeApplication == ChangeApplied.SUCCESSFULLY) {
>, <Line: +                    allNoOps.set(false);
>, <Line: +                    appliedChanges.add(change);
>, <Line: +                }
>, <Line: +                fireChangeApplied(change);
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +    protected void rollBack(List<OWLOntologyChange> appliedChanges) {
>, <Line: +        for (OWLOntologyChange c : appliedChanges) {
>, <Line: +            if (enactChangeApplication(c.reverseChange()) == ChangeApplied.UNSUCCESSFULLY) {
>, <Line: +                // rollback could not complete, throw an exception
>, <Line: +                throw new OWLRuntimeException(
>, <Line: +                    "Rollback of changes unsuccessful: Change " + c + " could not be rolled back");
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +            IRI documentIRI = computeDocumentIRI(ontologyID);
>, <Line: +    protected IRI computeDocumentIRI(OWLOntologyID ontologyID) {
>, <Line: +        IRI documentIRI = getDocumentIRIFromMappers(ontologyID);
>, <Line: +        if (documentIRI == null) {
>, <Line: +            if (!ontologyID.isAnonymous()) {
>, <Line: +                documentIRI = ontologyID.getDefaultDocumentIRI().orElse(null);
>, <Line: +            } else {
>, <Line: +                documentIRI = IRI.generateDocumentIRI();
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return documentIRI;
>, <Line: +    }
>]
[<Line: -            boolean rollbackRequested = false;
>, <Line: -            boolean allNoOps = true;
>, <Line: -            for (OWLOntologyChange change : changes) {
>, <Line: -                // once rollback is requested by a failed change, do not carry
>, <Line: -                // out any more changes
>, <Line: -                if (!rollbackRequested) {
>, <Line: -                    assert change != null;
>, <Line: -                    ChangeApplied enactChangeApplication = enactChangeApplication(change);
>, <Line: -                    if (enactChangeApplication == ChangeApplied.UNSUCCESSFULLY) {
>, <Line: -                        rollbackRequested = true;
>, <Line: -                    }
>, <Line: -                    if (enactChangeApplication == ChangeApplied.SUCCESSFULLY) {
>, <Line: -                        allNoOps = false;
>, <Line: -                        appliedChanges.add(change);
>, <Line: -                    }
>, <Line: -                    fireChangeApplied(change);
>, <Line: -                }
>, <Line: -            }
>, <Line: -            if (rollbackRequested) {
>, <Line: -                for (OWLOntologyChange c : appliedChanges) {
>, <Line: -                    ChangeApplied enactChangeApplication = enactChangeApplication(c.reverseChange());
>, <Line: -                    if (enactChangeApplication == ChangeApplied.UNSUCCESSFULLY) {
>, <Line: -                        // rollback could not complete, throw an exception
>, <Line: -                        throw new OWLRuntimeException(
>, <Line: -                            "Rollback of changes unsuccessful: Change " + c + " could not be rolled back");
>, <Line: -                    }
>, <Line: -                }
>, <Line: -            if (rollbackRequested) {
>, <Line: -            if (allNoOps) {
>, <Line: -            IRI documentIRI = getDocumentIRIFromMappers(ontologyID);
>, <Line: -            if (documentIRI == null) {
>, <Line: -                if (!ontologyID.isAnonymous()) {
>, <Line: -                    documentIRI = ontologyID.getDefaultDocumentIRI().orElse(null);
>, <Line: -                } else {
>, <Line: -                    documentIRI = IRI.generateDocumentIRI();
>, <Line: -                }
>, <Line: -            }
>]