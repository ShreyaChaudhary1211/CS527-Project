[<Line: +package org.semanticweb.owlapitools.decomposition.test;
>, <Line: +import static org.junit.Assert.assertEquals;
>, <Line: +import static org.semanticweb.owlapi.util.OWLAPIStreamUtils.*;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Set;
>, <Line: +import java.util.stream.Stream;
>, <Line: +import org.junit.Ignore;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.runner.RunWith;
>, <Line: +import org.junit.runners.Parameterized;
>, <Line: +import org.junit.runners.Parameterized.Parameters;
>, <Line: +import org.semanticweb.owlapi.api.test.baseclasses.TestBase;
>, <Line: +import org.semanticweb.owlapi.apibinding.OWLManager;
>, <Line: +import org.semanticweb.owlapi.io.StringDocumentSource;
>, <Line: +import org.semanticweb.owlapi.model.*;
>, <Line: +import uk.ac.manchester.cs.atomicdecomposition.AtomicDecomposition;
>, <Line: +import uk.ac.manchester.cs.atomicdecomposition.AtomicDecompositionImpl;
>, <Line: +import uk.ac.manchester.cs.owlapi.modularity.ModuleType;
>, <Line: +import uk.ac.manchester.cs.owlapi.modularity.SyntacticLocalityModuleExtractor;
>, <Line: +@SuppressWarnings("javadoc")
>, <Line: +@RunWith(Parameterized.class)
>, <Line: +public class OldModularisationEquivalenceTestCase extends TestBase {
>, <Line: +    public static final String KOALA = "<?xml version=\"1.0\"?>\n"
>, <Line: +        + "<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\" xmlns:owl=\"http://www.w3.org/2002/07/owl#\" xmlns=\"http://protege.stanford.edu/plugins/owl/owl-library/koala.owl#\" xml:base=\"http://protege.stanford.edu/plugins/owl/owl-library/koala.owl\">\n"
>, <Line: +        + "  <owl:Ontology rdf:about=\"\"/>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Female\"><owl:equivalentClass><owl:Restriction><owl:onProperty><owl:FunctionalProperty rdf:about=\"#hasGender\"/></owl:onProperty><owl:hasValue><Gender rdf:ID=\"female\"/></owl:hasValue></owl:Restriction></owl:equivalentClass></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Marsupials\"><owl:disjointWith><owl:Class rdf:about=\"#Person\"/></owl:disjointWith><rdfs:subClassOf><owl:Class rdf:about=\"#Animal\"/></rdfs:subClassOf></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Student\"><owl:equivalentClass><owl:Class><owl:intersectionOf rdf:parseType=\"Collection\"><owl:Class rdf:about=\"#Person\"/><owl:Restriction><owl:onProperty><owl:FunctionalProperty rdf:about=\"#isHardWorking\"/></owl:onProperty><owl:hasValue rdf:datatype=\"http://www.w3.org/2001/XMLSchema#boolean\">true</owl:hasValue></owl:Restriction><owl:Restriction><owl:someValuesFrom><owl:Class rdf:about=\"#University\"/></owl:someValuesFrom><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasHabitat\"/></owl:onProperty></owl:Restriction></owl:intersectionOf></owl:Class></owl:equivalentClass></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"KoalaWithPhD\"><owl:versionInfo>1.2</owl:versionInfo><owl:equivalentClass><owl:Class><owl:intersectionOf rdf:parseType=\"Collection\"><owl:Restriction><owl:hasValue><Degree rdf:ID=\"PhD\"/></owl:hasValue><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasDegree\"/></owl:onProperty></owl:Restriction><owl:Class rdf:about=\"#Koala\"/></owl:intersectionOf></owl:Class></owl:equivalentClass></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"University\"><rdfs:subClassOf><owl:Class rdf:ID=\"Habitat\"/></rdfs:subClassOf></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Koala\"><rdfs:subClassOf><owl:Restriction><owl:hasValue rdf:datatype=\"http://www.w3.org/2001/XMLSchema#boolean\">false</owl:hasValue><owl:onProperty><owl:FunctionalProperty rdf:about=\"#isHardWorking\"/></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:someValuesFrom><owl:Class rdf:about=\"#DryEucalyptForest\"/></owl:someValuesFrom><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasHabitat\"/></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf rdf:resource=\"#Marsupials\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Animal\"><rdfs:seeAlso>Male</rdfs:seeAlso><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasHabitat\"/></owl:onProperty><owl:minCardinality rdf:datatype=\"http://www.w3.org/2001/XMLSchema#int\">1</owl:minCardinality></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf><owl:Restriction><owl:cardinality rdf:datatype=\"http://www.w3.org/2001/XMLSchema#int\">1</owl:cardinality><owl:onProperty><owl:FunctionalProperty rdf:about=\"#hasGender\"/></owl:onProperty></owl:Restriction></rdfs:subClassOf><owl:versionInfo>1.1</owl:versionInfo></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Forest\"><rdfs:subClassOf rdf:resource=\"#Habitat\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Rainforest\"><rdfs:subClassOf rdf:resource=\"#Forest\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"GraduateStudent\"><rdfs:subClassOf><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasDegree\"/></owl:onProperty><owl:someValuesFrom><owl:Class><owl:oneOf rdf:parseType=\"Collection\"><Degree rdf:ID=\"BA\"/><Degree rdf:ID=\"BS\"/></owl:oneOf></owl:Class></owl:someValuesFrom></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf rdf:resource=\"#Student\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Parent\"><owl:equivalentClass><owl:Class><owl:intersectionOf rdf:parseType=\"Collection\"><owl:Class rdf:about=\"#Animal\"/><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasChildren\"/></owl:onProperty><owl:minCardinality rdf:datatype=\"http://www.w3.org/2001/XMLSchema#int\">1</owl:minCardinality></owl:Restriction></owl:intersectionOf></owl:Class></owl:equivalentClass><rdfs:subClassOf rdf:resource=\"#Animal\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"DryEucalyptForest\"><rdfs:subClassOf rdf:resource=\"#Forest\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Quokka\"><rdfs:subClassOf><owl:Restriction><owl:hasValue rdf:datatype=\"http://www.w3.org/2001/XMLSchema#boolean\">true</owl:hasValue><owl:onProperty><owl:FunctionalProperty rdf:about=\"#isHardWorking\"/></owl:onProperty></owl:Restriction></rdfs:subClassOf><rdfs:subClassOf rdf:resource=\"#Marsupials\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"TasmanianDevil\"><rdfs:subClassOf rdf:resource=\"#Marsupials\"/></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"MaleStudentWith3Daughters\"><owl:equivalentClass><owl:Class><owl:intersectionOf rdf:parseType=\"Collection\"><owl:Class rdf:about=\"#Student\"/><owl:Restriction><owl:onProperty><owl:FunctionalProperty rdf:about=\"#hasGender\"/></owl:onProperty><owl:hasValue><Gender rdf:ID=\"male\"/></owl:hasValue></owl:Restriction><owl:Restriction><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasChildren\"/></owl:onProperty><owl:cardinality rdf:datatype=\"http://www.w3.org/2001/XMLSchema#int\">3</owl:cardinality></owl:Restriction><owl:Restriction><owl:allValuesFrom rdf:resource=\"#Female\"/><owl:onProperty><owl:ObjectProperty rdf:about=\"#hasChildren\"/></owl:onProperty></owl:Restriction></owl:intersectionOf></owl:Class></owl:equivalentClass></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Degree\"/>\n  <owl:Class rdf:ID=\"Gender\"/>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Male\"><owl:equivalentClass><owl:Restriction><owl:hasValue rdf:resource=\"#male\"/><owl:onProperty><owl:FunctionalProperty rdf:about=\"#hasGender\"/></owl:onProperty></owl:Restriction></owl:equivalentClass></owl:Class>\n"
>, <Line: +        + "  <owl:Class rdf:ID=\"Person\"><rdfs:subClassOf rdf:resource=\"#Animal\"/><owl:disjointWith rdf:resource=\"#Marsupials\"/></owl:Class>\n"
>, <Line: +        + "  <owl:ObjectProperty rdf:ID=\"hasHabitat\"><rdfs:range rdf:resource=\"#Habitat\"/><rdfs:domain rdf:resource=\"#Animal\"/></owl:ObjectProperty>\n"
>, <Line: +        + "  <owl:ObjectProperty rdf:ID=\"hasDegree\"><rdfs:domain rdf:resource=\"#Person\"/><rdfs:range rdf:resource=\"#Degree\"/></owl:ObjectProperty>\n"
>, <Line: +        + "  <owl:ObjectProperty rdf:ID=\"hasChildren\"><rdfs:range rdf:resource=\"#Animal\"/><rdfs:domain rdf:resource=\"#Animal\"/></owl:ObjectProperty>\n"
>, <Line: +        + "  <owl:FunctionalProperty rdf:ID=\"hasGender\"><rdfs:range rdf:resource=\"#Gender\"/><rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#ObjectProperty\"/><rdfs:domain rdf:resource=\"#Animal\"/></owl:FunctionalProperty>\n"
>, <Line: +        + "  <owl:FunctionalProperty rdf:ID=\"isHardWorking\"><rdfs:range rdf:resource=\"http://www.w3.org/2001/XMLSchema#boolean\"/><rdfs:domain rdf:resource=\"#Person\"/><rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#DatatypeProperty\"/></owl:FunctionalProperty>\n"
>, <Line: +        + "  <Degree rdf:ID=\"MA\"/>\n</rdf:RDF>";
>, <Line: +    private static String ns = "http://protege.stanford.edu/plugins/owl/owl-library/koala.owl#";
>, <Line: +    private static OWLDataFactory f = OWLManager.getOWLDataFactory();
>, <Line: +    private static Set<OWLEntity> l(String... s) {
>, <Line: +        return asSet(Stream.of(s).map(st -> f.getOWLClass(ns, st)), OWLEntity.class);
>, <Line: +    }
>, <Line: +    @Parameters(name = "{0}")
>, <Line: +    public static List<Set<OWLEntity>> params() {
>, <Line: +        List<Set<OWLEntity>> l = new ArrayList<>();
>, <Line: +        l.add(l("Person"));
>, <Line: +        l.add(l("Habitat"));
>, <Line: +        l.add(l("Forest"));
>, <Line: +        l.add(l("Degree"));
>, <Line: +        l.add(l("Parent"));
>, <Line: +        l.add(l("GraduateStudent"));
>, <Line: +        l.add(l("Rainforest"));
>, <Line: +        l.add(l("Marsupials"));
>, <Line: +        l.add(l("KoalaWithPhD"));
>, <Line: +        l.add(l("TasmanianDevil"));
>, <Line: +        l.add(l("University"));
>, <Line: +        l.add(l("Animal"));
>, <Line: +        l.add(l("Male"));
>, <Line: +        l.add(l("MaleStudentWith3Daughters"));
>, <Line: +        l.add(l("Female"));
>, <Line: +        l.add(l("Koala"));
>, <Line: +        l.add(l("Student"));
>, <Line: +        l.add(l("Quokka"));
>, <Line: +        l.add(l("Gender"));
>, <Line: +        l.add(l("DryEucalyptForest"));
>, <Line: +        l.add(l("GraduateStudent", "Koala", "KoalaWithPhD", "MaleStudentWith3Daughters", "Person", "Quokka",
>, <Line: +            "Student"));
>, <Line: +        l.add(l("DryEucalyptForest", "Forest", "Habitat", "Koala", "KoalaWithPhD", "Quokka", "Rainforest",
>, <Line: +            "University"));
>, <Line: +        l.add(l("DryEucalyptForest", "Forest", "Koala", "KoalaWithPhD", "Quokka", "Rainforest"));
>, <Line: +        l.add(l("Degree", "Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "MaleStudentWith3Daughters", "Parent", "Quokka"));
>, <Line: +        l.add(l("GraduateStudent", "Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Quokka", "Rainforest"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Marsupials", "Quokka", "TasmanianDevil"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Quokka", "TasmanianDevil"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Quokka", "University"));
>, <Line: +        l.add(l("Animal", "Female", "GraduateStudent", "Koala", "KoalaWithPhD", "Male", "MaleStudentWith3Daughters",
>, <Line: +            "Marsupials", "Parent", "Person", "Quokka", "Student", "TasmanianDevil"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Male", "MaleStudentWith3Daughters", "Quokka"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "MaleStudentWith3Daughters", "Quokka"));
>, <Line: +        l.add(l("Female", "Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        l.add(l("GraduateStudent", "Koala", "KoalaWithPhD", "MaleStudentWith3Daughters", "Quokka", "Student"));
>, <Line: +        l.add(l("Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        l.add(l("Gender", "Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        l.add(l("DryEucalyptForest", "Koala", "KoalaWithPhD", "Quokka"));
>, <Line: +        return l;
>, <Line: +    }
>, <Line: +    private Set<OWLEntity> signature;
>, <Line: +    public OldModularisationEquivalenceTestCase(Set<OWLEntity> l) {
>, <Line: +        signature = l;
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @Ignore
>, <Line: +    public void testModularizationWithAtomicDecompositionStar() throws OWLException {
>, <Line: +        OWLOntology o = m.loadOntologyFromOntologyDocument(new StringDocumentSource(KOALA));
>, <Line: +        List<OWLAxiom> module1 = asList(getADModule1(o, signature, ModuleType.STAR).stream().sorted());
>, <Line: +        List<OWLAxiom> module2 = asList(getTraditionalModule(m, o, signature, ModuleType.STAR).stream().filter(ax -> ax
>, <Line: +            .isLogicalAxiom()).sorted());
>, <Line: +        makeAssertion(module1, module2);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testModularizationWithAtomicDecompositionTop() throws OWLException {
>, <Line: +        OWLOntology o = m.loadOntologyFromOntologyDocument(new StringDocumentSource(KOALA));
>, <Line: +        List<OWLAxiom> module1 = asList(getADModule1(o, signature, ModuleType.TOP).stream().sorted());
>, <Line: +        List<OWLAxiom> module2 = asList(getTraditionalModule(m, o, signature, ModuleType.TOP).stream().filter(ax -> ax
>, <Line: +            .isLogicalAxiom()).sorted());
>, <Line: +        makeAssertion(module1, module2);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testModularizationWithAtomicDecompositionBottom() throws OWLException {
>, <Line: +        OWLOntology o = m.loadOntologyFromOntologyDocument(new StringDocumentSource(KOALA));
>, <Line: +        List<OWLAxiom> module1 = asList(getADModule1(o, signature, ModuleType.BOT).stream().sorted());
>, <Line: +        List<OWLAxiom> module2 = asList(getTraditionalModule(m, o, signature, ModuleType.BOT).stream().filter(ax -> ax
>, <Line: +            .isLogicalAxiom()).sorted());
>, <Line: +        makeAssertion(module1, module2);
>, <Line: +    }
>, <Line: +    protected void makeAssertion(List<OWLAxiom> module1, List<OWLAxiom> module2) {
>, <Line: +        List<OWLAxiom> l = new ArrayList<>(module1);
>, <Line: +        module1.removeAll(module2);
>, <Line: +        module2.removeAll(l);
>, <Line: +        String s1 = module1.toString().replace(ns, "");
>, <Line: +        String s2 = module2.toString().replace(ns, "");
>, <Line: +        if (!s1.equals(s2)) {
>, <Line: +            System.out.println("OldModularisationEquivalenceTestCase.testModularizationWithAtomicDecomposition() \n"
>, <Line: +                + s1 + "\n" + s2);
>, <Line: +        }
>, <Line: +        assertEquals(s1, s2);
>, <Line: +    }
>, <Line: +    protected Set<OWLAxiom> getTraditionalModule(OWLOntologyManager m, OWLOntology o, Set<OWLEntity> seedSig,
>, <Line: +        ModuleType type) {
>, <Line: +        SyntacticLocalityModuleExtractor sme = new SyntacticLocalityModuleExtractor(m, o, type);
>, <Line: +        return sme.extract(seedSig);
>, <Line: +    }
>, <Line: +    // protected Set<OWLAxiom> getADModule(OWLOntology o, Set<OWLEntity> sig) {
>, <Line: +    // OntologyBasedModularizer om = new OntologyBasedModularizer(o,
>, <Line: +    // ModuleMethod.SYNTACTIC_STANDARD);
>, <Line: +    // return new HashSet<>(om.getModule(sig.stream(), ModuleType.STAR));
>, <Line: +    // }
>, <Line: +    protected Set<OWLAxiom> getADModule1(OWLOntology o, Set<OWLEntity> sig, ModuleType m) {
>, <Line: +        AtomicDecomposition ad = new AtomicDecompositionImpl(o);
>, <Line: +        return asSet(ad.getModule(sig.stream(), false, m));
>, <Line: +    }
>, <Line: +}
>]
[]