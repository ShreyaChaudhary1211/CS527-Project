[<Line: +    protected final Map<OWLOntologyID, OntologyConfigurator> ontologyConfigurationsByOntologyID =
>, <Line: +        OntologyConfigurator ontologyConfig =
>, <Line: +        if (ontologyConfig != null && !ontologyConfig.shouldLoadAnnotations() && change.isAddAxiom()
>, <Line: +            && change.getAxiom() instanceof OWLAnnotationAxiom) {
>, <Line: +        return loadOntology(ontologyIRI, false, configProvider);
>, <Line: +        OntologyConfigurator configuration) throws OWLOntologyCreationException {
>, <Line: +        return loadOntology(null, new IRIDocumentSource(documentIRI, null, null), configProvider);
>, <Line: +        return loadOntology(null, documentSource, configProvider);
>, <Line: +        OntologyConfigurator conf) throws OWLOntologyCreationException {
>, <Line: +        OWLOntologyDocumentSource documentSource, OntologyConfigurator configuration)
>, <Line: +        OntologyConfigurator configuration) throws OWLOntologyCreationException {
>, <Line: +        configProvider = (OntologyConfigurator) stream.readObject();
>, <Line: +        stream.writeObject(getOntologyConfigurator());
>, <Line: +        OntologyConfigurator configuration) throws OWLOntologyCreationException {
>, <Line: +            makeLoadImportRequest(declaration, getOntologyConfigurator());
>, <Line: +        OntologyConfigurator configuration) {
>, <Line: +            if (!configuration.isImportIgnored(iri) && !importedIRIs.containsKey(iri)) {
>]
[<Line: -import org.semanticweb.owlapi.model.OWLOntologyLoaderConfiguration;
>, <Line: -import org.semanticweb.owlapi.model.OWLOntologyWriterConfiguration;
>, <Line: -    protected final Map<OWLOntologyID, OWLOntologyLoaderConfiguration> ontologyConfigurationsByOntologyID =
>, <Line: -    private transient Optional<OWLOntologyLoaderConfiguration> loaderConfig = emptyOptional();
>, <Line: -    private transient Optional<OWLOntologyWriterConfiguration> writerConfig = emptyOptional();
>, <Line: -    @Override
>, <Line: -    public void setOntologyLoaderConfiguration(OWLOntologyLoaderConfiguration newConfig) {
>, <Line: -        writeLock.lock();
>, <Line: -        try {
>, <Line: -            loaderConfig = optional(newConfig);
>, <Line: -        } finally {
>, <Line: -            writeLock.unlock();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public void setOntologyWriterConfiguration(OWLOntologyWriterConfiguration newConfig) {
>, <Line: -        writeLock.lock();
>, <Line: -        try {
>, <Line: -            writerConfig = optional(newConfig);
>, <Line: -        } finally {
>, <Line: -            writeLock.unlock();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public OWLOntologyLoaderConfiguration getOntologyLoaderConfiguration() {
>, <Line: -        readLock.lock();
>, <Line: -        try {
>, <Line: -            if (loaderConfig.isPresent()) {
>, <Line: -                return loaderConfig.get();
>, <Line: -            }
>, <Line: -            return configProvider.buildLoaderConfiguration();
>, <Line: -        } finally {
>, <Line: -            readLock.unlock();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public OWLOntologyWriterConfiguration getOntologyWriterConfiguration() {
>, <Line: -        readLock.lock();
>, <Line: -        try {
>, <Line: -            if (writerConfig.isPresent()) {
>, <Line: -                return writerConfig.get();
>, <Line: -            }
>, <Line: -            return configProvider.buildWriterConfiguration();
>, <Line: -        } finally {
>, <Line: -            readLock.unlock();
>, <Line: -        }
>, <Line: -    }
>, <Line: -        OWLOntologyLoaderConfiguration ontologyConfig =
>, <Line: -        if (ontologyConfig != null && !ontologyConfig.isLoadAnnotationAxioms()
>, <Line: -            && change.isAddAxiom() && change.getAxiom() instanceof OWLAnnotationAxiom) {
>, <Line: -        return loadOntology(ontologyIRI, false, getOntologyLoaderConfiguration());
>, <Line: -        OWLOntologyLoaderConfiguration configuration) throws OWLOntologyCreationException {
>, <Line: -        return loadOntology(null, new IRIDocumentSource(documentIRI, null, null),
>, <Line: -            getOntologyLoaderConfiguration());
>, <Line: -        return loadOntology(null, documentSource, getOntologyLoaderConfiguration());
>, <Line: -        OWLOntologyLoaderConfiguration conf) throws OWLOntologyCreationException {
>, <Line: -        OWLOntologyDocumentSource documentSource, OWLOntologyLoaderConfiguration configuration)
>, <Line: -        OWLOntologyLoaderConfiguration configuration) throws OWLOntologyCreationException {
>, <Line: -        loaderConfig = optional((OWLOntologyLoaderConfiguration) stream.readObject());
>, <Line: -        stream.writeObject(getOntologyLoaderConfiguration());
>, <Line: -        OWLOntologyLoaderConfiguration configuration) throws OWLOntologyCreationException {
>, <Line: -            makeLoadImportRequest(declaration, getOntologyLoaderConfiguration());
>, <Line: -        OWLOntologyLoaderConfiguration configuration) {
>, <Line: -            if (!configuration.isIgnoredImport(iri) && !importedIRIs.containsKey(iri)) {
>]