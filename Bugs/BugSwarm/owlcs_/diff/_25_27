[<Line: +import org.semanticweb.owlapi.model.OntologyConfigurator;
>, <Line: +    private static final Set<String> SKIPPED_QUALIFIERS = Sets.newHashSet("gci_relation",
>, <Line: +        "gci_filler", "cardinality", "minCardinality", "maxCardinality", "all_some", "all_only");
>, <Line: +    private final com.google.common.cache.LoadingCache<String, IRI> idToIRICache =
>, <Line: +        CacheBuilder.newBuilder().maximumSize(1024).build(new CacheLoader<String, IRI>() {
>, <Line: +            new OntologyConfigurator());
>, <Line: +     *        added
>, <Line: +     * @throws OBOFormatParserException the oBO format parser exception
>, <Line: +     *         {@link #convertURL(String iri, String outFile, OWLOntologyManager manager)}
>, <Line: +        OBOFormatOWLAPIParser parser =
>, <Line: +            new OBOFormatOWLAPIParser((obo) -> obo.addDefaultOntologyHeader(defaultOnt));
>, <Line: +        new IRIDocumentSource(IRI.create(iri)).acceptParser(parser, o, new OntologyConfigurator());
>, <Line: +            manager.getOntologyConfigurator());
>, <Line: +                IRI vIRI =
>, <Line: +                    IRI.create(DEFAULT_IRI_PREFIX + ontOboId + '/' + dv + '/' + ontOboId + ".owl");
>, <Line: +            manager.applyChange(new SetOntologyID(in, new OWLOntologyID(
>, <Line: +                optional(IRI.create(DEFAULT_IRI_PREFIX, defaultIDSpace)), emptyOptional())));
>, <Line: +            manager.makeLoadImportRequest(owlImportsDeclaration, new OntologyConfigurator());
>, <Line: +        OWLAnnotationProperty p =
>, <Line: +            fac.getOWLAnnotationProperty(Obo2OWLVocabulary.IRI_OIO_LogicalDefinitionViewRelation);
>, <Line: +                headerFrame.getTagValues(tag, String.class)
>, <Line: +                    .forEach(s -> getOwlOntology().add(OwlStringTools.translate(s, manager)));
>, <Line: +        // Generate deprecated and replaced_by details for alternate
>, <Line: +        // identifier
>, <Line: +        add(translateAltIds(termFrame.getClauses(t), cls.getIRI(), true)));
>, <Line: +                    fac.getOWLAnnotationProperty(Obo2OWLVocabulary.IRI_IAO_0100001.iri),
>, <Line: +                fac.getOWLAnnotation(fac.getOWLAnnotationProperty(Obo2OWLConstants.IRI_IAO_0000231),
>, <Line: +                    trAnnotationProp(IRI_PROP_ISREVERSIBLEPROPERTYCHAIN), trLiteral("true"));
>, <Line: +                        trTagToAnnotationProp(OboFormatTag.TAG_HAS_SYNONYM_TYPE.getTag()),
>, <Line: +        } else if (relFrame != null
>, <Line: +            && Boolean.TRUE.equals(relFrame.getTagValue(OboFormatTag.TAG_IS_CLASS_LEVEL_TAG))) {
>]
[<Line: -import org.semanticweb.owlapi.model.OWLOntologyLoaderConfiguration;
>, <Line: -    private static final Set<String> SKIPPED_QUALIFIERS =
>, <Line: -        Sets.newHashSet("gci_relation", "gci_filler", "cardinality", "minCardinality",
>, <Line: -            "maxCardinality", "all_some", "all_only");
>, <Line: -    private final com.google.common.cache.LoadingCache<String, IRI> idToIRICache = CacheBuilder
>, <Line: -        .newBuilder().maximumSize(1024).build(new CacheLoader<String, IRI>() {
>, <Line: -            new OWLOntologyLoaderConfiguration());
>, <Line: -     * added
>, <Line: -     * @throws OBOFormatParserException the oBO format parser exception {@link #convertURL(String
>, <Line: -     * iri, String outFile, OWLOntologyManager manager)}
>, <Line: -        OBOFormatOWLAPIParser parser = new OBOFormatOWLAPIParser(
>, <Line: -            (obo) -> obo.addDefaultOntologyHeader(defaultOnt));
>, <Line: -        new IRIDocumentSource(IRI.create(iri)).acceptParser(parser, o,
>, <Line: -            new OWLOntologyLoaderConfiguration());
>, <Line: -            manager.getOntologyLoaderConfiguration());
>, <Line: -                IRI vIRI = IRI.create(
>, <Line: -                    DEFAULT_IRI_PREFIX + ontOboId + '/' + dv + '/' + ontOboId + ".owl");
>, <Line: -            manager.applyChange(new SetOntologyID(in,
>, <Line: -                new OWLOntologyID(optional(
>, <Line: -                    IRI.create(DEFAULT_IRI_PREFIX, defaultIDSpace)),
>, <Line: -                    emptyOptional())));
>, <Line: -            manager.makeLoadImportRequest(owlImportsDeclaration,
>, <Line: -                new OWLOntologyLoaderConfiguration());
>, <Line: -        OWLAnnotationProperty p = fac.getOWLAnnotationProperty(
>, <Line: -            Obo2OWLVocabulary.IRI_OIO_LogicalDefinitionViewRelation);
>, <Line: -                headerFrame.getTagValues(tag, String.class).forEach(
>, <Line: -                    s -> getOwlOntology().add(OwlStringTools.translate(s, manager)));
>, <Line: -            // Generate deprecated and replaced_by details for alternate
>, <Line: -            // identifier
>, <Line: -            add(translateAltIds(termFrame.getClauses(t), cls.getIRI(), true)));
>, <Line: -                    fac.getOWLAnnotationProperty(
>, <Line: -                        Obo2OWLVocabulary.IRI_IAO_0100001.iri),
>, <Line: -                fac.getOWLAnnotation(
>, <Line: -                    fac.getOWLAnnotationProperty(
>, <Line: -                        Obo2OWLConstants.IRI_IAO_0000231),
>, <Line: -                    trAnnotationProp(IRI_PROP_ISREVERSIBLEPROPERTYCHAIN),
>, <Line: -                    trLiteral("true"));
>, <Line: -                        trTagToAnnotationProp(
>, <Line: -                            OboFormatTag.TAG_HAS_SYNONYM_TYPE.getTag()),
>, <Line: -        } else if (relFrame != null && Boolean.TRUE
>, <Line: -            .equals(relFrame.getTagValue(OboFormatTag.TAG_IS_CLASS_LEVEL_TAG))) {
>]