[<Line: +import java.util.Optional;
>, <Line: +	protected final IOperationMonitor opMonitor;
>, <Line: +	protected final CommandInvocation buildCommand;
>, <Line: +		this.opMonitor = assertNotNull(opHandler);
>, <Line: +		String buildCommand = assertNotNull(buildTarget.getEffectiveBuildCommand());
>, <Line: +		this.buildCommand = assertNotNull(new CommandInvocation(buildCommand, toolManager, Optional.of(project)));
>, <Line: +		return buildCommand.getEffectiveCommandLine();
>, <Line: +		processBuildOutput(runBuildTool(opMonitor, pb, pm), pm);
>]
[<Line: -import org.eclipse.debug.core.DebugPlugin;
>, <Line: -import melnorme.lang.ide.core.operations.build.BuildManager.BuildType;
>, <Line: -import melnorme.utilbox.collections.ArrayList2;
>, <Line: -	protected final IOperationMonitor opHandler;
>, <Line: -	protected final BuildType buildType;
>, <Line: -	protected final String buildCommand;
>, <Line: -		this.opHandler = assertNotNull(opHandler);
>, <Line: -		this.buildType = assertNotNull(buildTarget.getBuildType());
>, <Line: -		this.buildCommand = assertNotNull(buildTarget.getEffectiveBuildCommand());
>, <Line: -	public BuildType getBuildType() {
>, <Line: -		return buildType;
>, <Line: -	}
>, <Line: -	public String getBuildTypeName() {
>, <Line: -		return buildType.getName();
>, <Line: -	}
>, <Line: -		return evaluateBuildCommand(buildCommand);
>, <Line: -	}
>, <Line: -	protected ArrayList2<String> evaluateBuildCommand(String toolCommandLine) throws CommonException {
>, <Line: -		VariablesResolver variablesManager = getToolManager().getVariablesManager(project);
>, <Line: -		toolCommandLine = variablesManager.performStringSubstitution(toolCommandLine);
>, <Line: -		String[] evaluatedArguments = DebugPlugin.parseArguments(toolCommandLine);
>, <Line: -		return new ArrayList2<>(evaluatedArguments);
>, <Line: -		processBuildOutput(runBuildTool(opHandler, pb, pm), pm);
>]