[]
[<Line: -/*******************************************************************************
>, <Line: - * Copyright (c) 2015, 2015 IBM Corporation and others.
>, <Line: - * All rights reserved. This program and the accompanying materials
>, <Line: - * are made available under the terms of the Eclipse Public License v1.0
>, <Line: - * which accompanies this distribution, and is available at
>, <Line: - * http://www.eclipse.org/legal/epl-v10.html
>, <Line: - *
>, <Line: - * Contributors:
>, <Line: - *     Bruno Medeiros - initial API and implementation
>, <Line: - *******************************************************************************/
>, <Line: -package melnorme.lang.ide.ui.utils.operations;
>, <Line: -import org.eclipse.core.runtime.CoreException;
>, <Line: -import org.eclipse.core.runtime.IProgressMonitor;
>, <Line: -import org.eclipse.core.runtime.IStatus;
>, <Line: -import org.eclipse.core.runtime.Status;
>, <Line: -import org.eclipse.core.runtime.jobs.Job;
>, <Line: -import org.eclipse.swt.widgets.Display;
>, <Line: -import melnorme.lang.ide.core.utils.operation.CoreOperationRunnable;
>, <Line: -import melnorme.lang.ide.ui.utils.UIOperationsStatusHandler;
>, <Line: -import melnorme.utilbox.concurrency.OperationCancellation;
>, <Line: -// TODO need to refactor this so that can be used with any AbstractUIOperation
>, <Line: -public abstract class EclipseJobUIOperation extends AbstractUIOperation {
>, <Line: -	public EclipseJobUIOperation(String operationName) {
>, <Line: -		super(operationName);
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected void performBackgroundComputation() throws OperationCancellation, CoreException {
>, <Line: -		new Job(getOperationName()) {
>, <Line: -			@Override
>, <Line: -			protected IStatus run(IProgressMonitor monitor) {
>, <Line: -				try {
>, <Line: -					((CoreOperationRunnable) (pm) -> doBackgroundComputation(pm)).coreAdaptedRun(monitor);
>, <Line: -				} catch(CoreException ce) {
>, <Line: -					Display.getDefault().asyncExec(
>, <Line: -						() -> UIOperationsStatusHandler.handleOperationStatus(getOperationName(), ce));
>, <Line: -				} catch(OperationCancellation e) {
>, <Line: -					return Status.CANCEL_STATUS;
>, <Line: -				}
>, <Line: -				return Status.OK_STATUS;
>, <Line: -			}
>, <Line: -		}
>, <Line: -		.schedule();
>, <Line: -	}
>, <Line: -}
>]