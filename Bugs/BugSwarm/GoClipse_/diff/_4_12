[]
[<Line: -/*******************************************************************************
>, <Line: - * Copyright (c) 2010, 2011 IBM Corporation and others.
>, <Line: - * All rights reserved. This program and the accompanying materials
>, <Line: - * are made available under the terms of the Eclipse Public License v1.0
>, <Line: - * which accompanies this distribution, and is available at
>, <Line: - * http://www.eclipse.org/legal/epl-v10.html
>, <Line: - *
>, <Line: - * Contributors:
>, <Line: - *     Bruno Medeiros - initial API and implementation
>, <Line: - *******************************************************************************/
>, <Line: -package melnorme.lang.ide.core.text.format;
>, <Line: -import static melnorme.utilbox.core.CoreUtil.array;
>, <Line: -import org.eclipse.jface.text.BadLocationException;
>, <Line: -import org.eclipse.jface.text.DocumentCommand;
>, <Line: -import org.eclipse.jface.text.IDocument;
>, <Line: -import org.eclipse.jface.text.ITextViewer;
>, <Line: -import melnorme.lang.ide.core.text.BlockHeuristicsScannner;
>, <Line: -import melnorme.lang.ide.core.text.BlockHeuristicsScannner.BlockTokenRule;
>, <Line: -import melnorme.utilbox.misc.ArrayUtil;
>, <Line: -public class LangAutoEditStrategyExt extends LangAutoEditStrategy {
>, <Line: -	protected final String partitioning;
>, <Line: -	protected final String contentType;
>, <Line: -	protected final ILangAutoEditsPreferencesAccessExt preferences;
>, <Line: -	public LangAutoEditStrategyExt(String partitioning, String contentType, ITextViewer viewer,
>, <Line: -			ILangAutoEditsPreferencesAccessExt preferences) {
>, <Line: -		super(viewer, preferences);
>, <Line: -		this.partitioning = partitioning;
>, <Line: -		this.contentType = contentType;
>, <Line: -		this.preferences = preferences;
>, <Line: -	}
>, <Line: -	public static interface ILangAutoEditsPreferencesAccessExt extends ILangAutoEditsPreferencesAccess {
>, <Line: -		public boolean parenthesesAsBlocks();
>, <Line: -	}
>, <Line: -	protected boolean parenthesesAsBlocks;
>, <Line: -	@Override
>, <Line: -	public void customizeDocumentCommand(IDocument doc, DocumentCommand cmd) {
>, <Line: -		parenthesesAsBlocks = preferences.parenthesesAsBlocks();
>, <Line: -		super.customizeDocumentCommand(doc, cmd);
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected BlockHeuristicsScannner createBlockHeuristicsScanner(IDocument doc) {
>, <Line: -		BlockTokenRule[] blockTokens = array(new BlockTokenRule('{', '}'));
>, <Line: -		if(parenthesesAsBlocks) {
>, <Line: -			blockTokens = ArrayUtil.concat(blockTokens, new BlockTokenRule('(', ')'));
>, <Line: -		}
>, <Line: -		return new BlockHeuristicsScannner(doc, partitioning, contentType, blockTokens);
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected void smartIndentOnKeypress(IDocument doc, DocumentCommand cmd) throws BadLocationException {
>, <Line: -//		rubyAutoEditStrategy.smartIndentOnKeypress(doc, cmd);
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected void smartPaste(IDocument doc, DocumentCommand cmd) throws BadLocationException {
>, <Line: -		//rubyAutoEditStrategy.smartPaste(doc, cmd);
>, <Line: -	}
>, <Line: -}
>]