[<Line: +import static melnorme.utilbox.core.Assert.AssertNamespace.assertNotNull;
>, <Line: +	protected final String source;
>, <Line: +		this.document = assertNotNull(document);
>, <Line: +		this.source = document.get();
>, <Line: +	protected final int readPreviousCharacter() {
>, <Line: +			ITypedRegion partition;
>, <Line: +			try {
>, <Line: +				partition = getPartition(pos-1);
>, <Line: +			} catch(BadLocationException e) {
>, <Line: +				return token = TOKEN_OUTSIDE;
>, <Line: +			}
>, <Line: +			pos--;
>, <Line: +				return token = source.charAt(pos);
>, <Line: +	protected final int readNextCharacter() {
>, <Line: +			ITypedRegion partition;
>, <Line: +			try {
>, <Line: +				partition = getPartition(charPos);
>, <Line: +			} catch(BadLocationException e) {
>, <Line: +				return token = TOKEN_OUTSIDE;
>, <Line: +			}
>, <Line: +			pos++;
>, <Line: +				return token = source.charAt(charPos);
>]
[<Line: -		Assert.isLegal(document != null);
>, <Line: -		this.document = document;
>, <Line: -	protected final int readPreviousCharacter() throws BadLocationException {
>, <Line: -			pos--;
>, <Line: -			ITypedRegion partition = getPartition(pos);
>, <Line: -				return token = document.getChar(pos);
>, <Line: -	protected final int readNextCharacter() throws BadLocationException {
>, <Line: -			pos++;
>, <Line: -			ITypedRegion partition = getPartition(charPos);
>, <Line: -				return token = document.getChar(charPos);
>]