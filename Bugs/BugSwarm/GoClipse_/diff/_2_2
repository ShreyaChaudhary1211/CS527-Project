[<Line: +				buildTargets.add(
>, <Line: +					createDefaultBuildTarget(project, newBundleInfo, buildConfig, buildType, newBuildTargetData));
>, <Line: +	protected BuildTarget createDefaultBuildTarget(IProject project, BundleInfo newBundleInfo,
>, <Line: +			BuildConfiguration buildConfig, BuildType buildType, BuildTargetData buildTargetData) {
>, <Line: +		return new BuildTarget(project, newBundleInfo, buildTargetData, buildType, buildConfig);
>, <Line: +	}
>, <Line: +		if(buildTypeName == null || buildTypeName.isEmpty()) {
>, <Line: +	public BuildTarget createBuildTarget(IProject project, BuildTargetDataView buildTargetData) 
>, <Line: +			throws CommonException {
>, <Line: +	public BuildTarget getFirstDefinedBuildTarget(IProject project, BuildType buildType) throws CommonException {
>, <Line: +		ProjectBuildInfo buildInfo = getBuildInfo(project);
>, <Line: +		assertNotNull(buildType);
>, <Line: +		BuildTarget foundBT = buildInfo.getBuildTargets().findElement((bt) -> bt.getBuildType() == buildType);
>, <Line: +		if(foundBT == null) {
>, <Line: +			throw CommonException.fromMsgFormat(BuildManagerMessages.NO_BUILD_TARGET_FOUND_FOR_BUILD_TYPE_0, buildType.getName());
>, <Line: +		}
>, <Line: +		return foundBT;
>, <Line: +	}
>, <Line: +		IOperationMonitor buildOp = getToolManager().startNewBuildOperation();
>, <Line: +		return newBuildOperation(buildOp, project, true, targetsToBuild);
>, <Line: +		assertNotNull(opMonitor);
>]
[<Line: -				buildTargets.add(new BuildTarget(project, newBundleInfo, newBuildTargetData, buildType, buildConfig));
>, <Line: -		if(buildTypeName == null) {
>, <Line: -	public BuildTarget createBuildTarget(IProject project, BuildTargetDataView buildTargetData) throws CommonException {
>, <Line: -		return newBuildOperation(null, project, true, targetsToBuild);
>]