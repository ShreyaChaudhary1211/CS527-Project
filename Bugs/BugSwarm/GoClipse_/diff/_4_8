[<Line: +/*******************************************************************************
>, <Line: + * Copyright (c) 2015 Bruno Medeiros and other Contributors.
>, <Line: + * All rights reserved. This program and the accompanying materials
>, <Line: + * are made available under the terms of the Eclipse Public License v1.0
>, <Line: + * which accompanies this distribution, and is available at
>, <Line: + * http://www.eclipse.org/legal/epl-v10.html
>, <Line: + *
>, <Line: + * Contributors:
>, <Line: + *     Bruno Medeiros - initial API and implementation
>, <Line: + *******************************************************************************/
>, <Line: +package melnorme.lang.ide.core.text.format;
>, <Line: +import org.eclipse.jface.text.BadLocationException;
>, <Line: +import org.eclipse.jface.text.DocumentCommand;
>, <Line: +import org.eclipse.jface.text.IAutoEditStrategy;
>, <Line: +import org.eclipse.jface.text.IDocument;
>, <Line: +import org.eclipse.jface.text.IRegion;
>, <Line: +import org.eclipse.jface.text.ITextViewer;
>, <Line: +import org.eclipse.jface.text.ITextViewerExtension;
>, <Line: +import org.eclipse.swt.SWT;
>, <Line: +import org.eclipse.swt.custom.VerifyKeyListener;
>, <Line: +import org.eclipse.swt.events.VerifyEvent;
>, <Line: +import org.eclipse.swt.widgets.Event;
>, <Line: +import melnorme.lang.ide.core.LangCore;
>, <Line: +import melnorme.lang.ide.core.text.TextSourceUtils;
>, <Line: +public abstract class AbstractAutoEditStrategy implements IAutoEditStrategy {
>, <Line: +	protected Event lastKeyEvent;
>, <Line: +	public AbstractAutoEditStrategy(ITextViewer viewer) {
>, <Line: +		lastKeyEvent = new Event();
>, <Line: +		if (viewer instanceof ITextViewerExtension) {
>, <Line: +			VerifyKeyRecorder verifyKeyRecorder = new VerifyKeyRecorder();
>, <Line: +			((ITextViewerExtension) viewer).appendVerifyKeyListener(verifyKeyRecorder);
>, <Line: +			// Minor leak issue: we should remove verifyKeyRecorder if viewer is unconfigured
>, <Line: +		} else {
>, <Line: +			// allways use blank event in lastKeyEvent
>, <Line: +		}
>, <Line: +	}
>, <Line: +	public final class VerifyKeyRecorder implements VerifyKeyListener {
>, <Line: +		@Override
>, <Line: +		public void verifyKey(VerifyEvent event) {
>, <Line: +			lastKeyEvent.character = event.character;
>, <Line: +			lastKeyEvent.keyCode = event.keyCode;
>, <Line: +			lastKeyEvent.stateMask = event.stateMask;
>, <Line: +		}
>, <Line: +	}
>, <Line: +	protected boolean keyWasBackspace() {
>, <Line: +		return lastKeyEvent.character == SWT.BS;
>, <Line: +	}
>, <Line: +	protected boolean keyWasDelete() {
>, <Line: +		return lastKeyEvent.character == SWT.DEL;
>, <Line: +	}
>, <Line: +	protected boolean keyWasEnter() {
>, <Line: +		return lastKeyEvent.character == SWT.CR;
>, <Line: +	}
>, <Line: +	/* -----------------  ----------------- */
>, <Line: +	protected String docContents;
>, <Line: +	@Override
>, <Line: +	public void customizeDocumentCommand(IDocument doc, DocumentCommand cmd) {
>, <Line: +		if (cmd.doit == false)
>, <Line: +			return;
>, <Line: +		docContents = doc.get();
>, <Line: +		try {
>, <Line: +			doCustomizeDocumentCommand(doc, cmd);
>, <Line: +		} catch (BadLocationException e) {
>, <Line: +			LangCore.logError("BadLocationException in " + getClass().getSimpleName() + ".", e);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	protected abstract void doCustomizeDocumentCommand(IDocument doc, DocumentCommand cmd) 
>, <Line: +			throws BadLocationException;
>, <Line: +	@SuppressWarnings("unused")
>, <Line: +	public boolean isSimpleNewLineKeyPress(DocumentCommand cmd) {
>, <Line: +		return keyWasEnter();
>, <Line: +	}
>, <Line: +	public static boolean isSimpleKeyPressCommand(DocumentCommand cmd) {
>, <Line: +		return cmd.length == 0 && cmd.text.length() == 1;
>, <Line: +	}
>, <Line: +	/* -----------------  utils  ----------------- */
>, <Line: +	public String getLineIndentForOffset(int offset) {
>, <Line: +		return TextSourceUtils.getLineIndentForOffset(docContents, offset);
>, <Line: +	}
>, <Line: +	public String getLineIndentForLineStart(int lineStart) {
>, <Line: +		return TextSourceUtils.getLineIndentForLineStart(docContents, lineStart);
>, <Line: +	}
>, <Line: +	public String getLineIndentForLineStart(int lineStart, int end) {
>, <Line: +		return TextSourceUtils.getLineIndentForLineStart(docContents, lineStart, end);
>, <Line: +	}
>, <Line: +	public int findEndOfIndent(int offset) {
>, <Line: +		return TextSourceUtils.findEndOfIndent(docContents, offset);
>, <Line: +	}
>, <Line: +	/* -----------------  ----------------- */
>, <Line: +	public static int getRegionEnd(IRegion region) {
>, <Line: +		return region.getOffset() + region.getLength();
>, <Line: +	}
>, <Line: +	protected static boolean equalsDocumentString(String expectedIndentStr, IDocument doc, IRegion lineRegion)
>, <Line: +			throws BadLocationException {
>, <Line: +		int length = Math.min(lineRegion.getLength(), expectedIndentStr.length());
>, <Line: +		String lineIndent = doc.get(lineRegion.getOffset(), length);
>, <Line: +		return expectedIndentStr.equals(lineIndent);
>, <Line: +	}
>, <Line: +}
>]
[]