[<Line: +    protected static void sendOK(RestRequest restRequest) {
>, <Line: +       completeRequest(restRequest, httpResponse);
>, <Line: +    protected static <T extends MessageLite> void sendOK(RestRequest restRequest, T responseMsg, Schema<T> responseSchema) throws HttpException {
>, <Line: +        completeRequest(restRequest, httpResponse);
>, <Line: +    protected static void sendOK(RestRequest restRequest, MediaType contentType, ByteBuf body) {
>, <Line: +            completeRequest(restRequest, httpResponse);
>, <Line: +            completeRequest(restRequest, httpResponse);
>, <Line: +    private static void completeRequest(RestRequest restRequest, HttpResponse httpResponse) {
>, <Line: +        ChannelFuture cf = HttpRequestHandler.sendOK(restRequest.getChannelHandlerContext(), restRequest.getHttpRequest(), httpResponse);
>, <Line: +        cf.addListener(l -> {
>, <Line: +            restRequest.getCompletableFuture().complete(null);
>, <Line: +        });
>, <Line: +    }
>, <Line: +    protected static void sendRestError(RestRequest req, HttpResponseStatus status, Throwable t) {
>, <Line: +        return verifyParameterWithId(req, mdb, pathName).getRequestedId();
>, <Line: +        return verifyParameterWithId(req, mdb, pathName).getItem();
>, <Line: +    protected static NameDescriptionWithId<Parameter> verifyParameterWithId(RestRequest req, XtceDb mdb, String pathName) throws NotFoundException {
>, <Line: +    protected static class NameDescriptionWithId<T extends NameDescription> {
>, <Line: +        final private T item;
>, <Line: +        private final NamedObjectId requestedId;
>, <Line: +        public T getItem() {
>, <Line: +            return item;
>, <Line: +        }
>, <Line: +        public NamedObjectId getRequestedId() {
>, <Line: +            return requestedId;
>, <Line: +        }
>]
[<Line: -    protected static ChannelFuture sendOK(RestRequest restRequest) {
>, <Line: -        ChannelHandlerContext ctx = restRequest.getChannelHandlerContext();
>, <Line: -        return HttpRequestHandler.sendOK(ctx, restRequest.getHttpRequest(), httpResponse);
>, <Line: -    protected static <T extends MessageLite> ChannelFuture sendOK(RestRequest restRequest, T responseMsg, Schema<T> responseSchema) throws HttpException {
>, <Line: -        return HttpRequestHandler.sendOK(restRequest.getChannelHandlerContext(), restRequest.getHttpRequest(), httpResponse);
>, <Line: -    protected static ChannelFuture sendOK(RestRequest restRequest, MediaType contentType, ByteBuf body) {
>, <Line: -        ChannelHandlerContext ctx = restRequest.getChannelHandlerContext();
>, <Line: -            return HttpRequestHandler.sendOK(ctx, restRequest.getHttpRequest(), httpResponse);
>, <Line: -            return HttpRequestHandler.sendOK(ctx, restRequest.getHttpRequest(), httpResponse);
>, <Line: -    static void sendRestError(RestRequest req, HttpResponseStatus status, Throwable t) {
>, <Line: -        return verifyParameterWithId(req, mdb, pathName).requestedId;
>, <Line: -        return verifyParameterWithId(req, mdb, pathName).item;
>, <Line: -    private static NameDescriptionWithId<Parameter> verifyParameterWithId(RestRequest req, XtceDb mdb, String pathName) throws NotFoundException {
>, <Line: -    private static class NameDescriptionWithId<T extends NameDescription> {
>, <Line: -        T item;
>, <Line: -        NamedObjectId requestedId;
>]