[<Line: +import org.yamcs.utils.DeprecationInfo;
>, <Line: +@Deprecated
>, <Line: +@DeprecationInfo(info="Use the class with the same name from the org.yamcs.archive package")
>, <Line: +public class CommandHistoryRecorder extends org.yamcs.archive.CommandHistoryRecorder {
>, <Line: +        super(instance);
>]
[<Line: -import org.slf4j.Logger;
>, <Line: -import org.slf4j.LoggerFactory;
>, <Line: -import org.yamcs.tctm.TcUplinkerAdapter;
>, <Line: -import org.yamcs.yarch.Stream;
>, <Line: -import org.yamcs.yarch.StreamSubscriber;
>, <Line: -import org.yamcs.yarch.TableWriter;
>, <Line: -import org.yamcs.yarch.TupleDefinition;
>, <Line: -import org.yamcs.yarch.YarchDatabase;
>, <Line: -import com.google.common.util.concurrent.AbstractService;
>, <Line: -/**
>, <Line: - * Records command history
>, <Line: - * the key is formed by generation time, origin and sequence number
>, <Line: - * the value is formed by a arbitrary number of attributes
>, <Line: - * 
>, <Line: - * 
>, <Line: - * @author nm
>, <Line: - *
>, <Line: - */
>, <Line: -public class CommandHistoryRecorder extends AbstractService {
>, <Line: -    final String instance;
>, <Line: -    static TupleDefinition eventTpdef; 
>, <Line: -    final Logger log;
>, <Line: -    final public static String TABLE_NAME="cmdhist"; 
>, <Line: -        this.instance=instance;
>, <Line: -        log=LoggerFactory.getLogger(this.getClass().getName()+"["+instance+"]");
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    protected void doStart() {
>, <Line: -        YarchDatabase ydb=YarchDatabase.getInstance(instance);
>, <Line: -        String keycols=TcUplinkerAdapter.TC_TUPLE_DEFINITION.getStringDefinition1();
>, <Line: -        try {
>, <Line: -            if(ydb.getTable("cmdhist")==null) {
>, <Line: -                String q="create table cmdhist ("+keycols+", PRIMARY KEY(gentime, origin, seqNum)) histogram(cmdName) partition by time(gentime) table_format=compressed";
>, <Line: -                ydb.execute(q);
>, <Line: -            }
>, <Line: -            Stream stream=ydb.getStream(YarchCommandHistoryAdapter.REALTIME_CMDHIST_STREAM_NAME);
>, <Line: -            if(stream==null) {
>, <Line: -                log.error("The stream "+YarchCommandHistoryAdapter.REALTIME_CMDHIST_STREAM_NAME+" has not been found");
>, <Line: -                notifyFailed(new Exception("The stream "+YarchCommandHistoryAdapter.REALTIME_CMDHIST_STREAM_NAME+" has not been found"));
>, <Line: -                return;
>, <Line: -            }
>, <Line: -            ydb.execute("upsert_append into "+TABLE_NAME+" select * from "+YarchCommandHistoryAdapter.REALTIME_CMDHIST_STREAM_NAME);
>, <Line: -            stream=ydb.getStream(YarchCommandHistoryAdapter.DUMP_CMDHIST_STREAM_NAME);
>, <Line: -            if(stream==null) {
>, <Line: -                log.error("The stream "+YarchCommandHistoryAdapter.DUMP_CMDHIST_STREAM_NAME+" has not been found");
>, <Line: -                notifyFailed(new Exception("The stream "+YarchCommandHistoryAdapter.DUMP_CMDHIST_STREAM_NAME+" has not been found"));
>, <Line: -                return;
>, <Line: -            }
>, <Line: -            ydb.execute("upsert_append into "+TABLE_NAME+" select * from "+YarchCommandHistoryAdapter.DUMP_CMDHIST_STREAM_NAME);
>, <Line: -        } catch (Exception e) {
>, <Line: -            //e.printStackTrace();
>, <Line: -            log.error("Failed to setup the recording",e);
>, <Line: -            notifyFailed(e);
>, <Line: -            return;
>, <Line: -        }
>, <Line: -        notifyStarted();
>, <Line: -    @Override
>, <Line: -    protected void doStop() {
>, <Line: -        YarchDatabase ydb=YarchDatabase.getInstance(instance);
>, <Line: -        Stream stream=ydb.getStream(YarchCommandHistoryAdapter.REALTIME_CMDHIST_STREAM_NAME);
>, <Line: -        for(StreamSubscriber ss:stream.getSubscribers()) {
>, <Line: -            if(ss instanceof TableWriter) {
>, <Line: -                if("cmdhist".equals(((TableWriter)ss).getTableDefinition().getName()))
>, <Line: -                    stream.removeSubscriber(ss);
>, <Line: -            }
>, <Line: -        }
>, <Line: -        notifyStopped();
>, <Line: -    }
>]