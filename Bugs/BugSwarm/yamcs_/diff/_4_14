[<Line: +import java.util.concurrent.CompletableFuture;
>, <Line: +    final CompletableFuture<Void> cf;
>, <Line: +    /**
>, <Line: +     * 
>, <Line: +     * @param cf is the completable future of the rest request - used to end exceptionally in case of error
>, <Line: +     */
>, <Line: +    public RestParameterReplayListener(CompletableFuture<Void> cf) {
>, <Line: +        this.cf = cf;
>, <Line: +    /**
>, <Line: +     * 
>, <Line: +     * @param pos
>, <Line: +     * @param limit
>, <Line: +     * @param cf is the completable future of the rest request - used to end exceptionally in case of error
>, <Line: +     */
>, <Line: +    public RestParameterReplayListener(long pos, int limit, CompletableFuture<Void> cf) {
>, <Line: +        this.cf = cf;
>, <Line: +    public void replayFailed(Throwable t){
>, <Line: +        cf.completeExceptionally(t);
>, <Line: +    }
>]
[<Line: -    public RestParameterReplayListener() {
>, <Line: -    public RestParameterReplayListener(long pos, int limit) {
>]