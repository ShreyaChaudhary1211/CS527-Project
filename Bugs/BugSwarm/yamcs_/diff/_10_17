[<Line: +package org.yamcs.algorithms;
>, <Line: +import static org.junit.Assert.assertEquals;
>, <Line: +import static org.junit.Assert.assertNotNull;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Map;
>, <Line: +import org.junit.After;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.BeforeClass;
>, <Line: +import org.junit.Test;
>, <Line: +import org.yamcs.ConfigurationException;
>, <Line: +import org.yamcs.InvalidIdentification;
>, <Line: +import org.yamcs.ProcessorException;
>, <Line: +import org.yamcs.ProcessorFactory;
>, <Line: +import org.yamcs.RefMdbPacketGenerator;
>, <Line: +import org.yamcs.YConfiguration;
>, <Line: +import org.yamcs.YProcessor;
>, <Line: +import org.yamcs.api.EventProducerFactory;
>, <Line: +import org.yamcs.management.ManagementService;
>, <Line: +import org.yamcs.parameter.ParameterConsumer;
>, <Line: +import org.yamcs.parameter.ParameterProvider;
>, <Line: +import org.yamcs.parameter.ParameterRequestManagerImpl;
>, <Line: +import org.yamcs.parameter.ParameterValue;
>, <Line: +import org.yamcs.tctm.SimpleTcTmService;
>, <Line: +import org.yamcs.utils.ValueUtility;
>, <Line: +import org.yamcs.xtce.Algorithm;
>, <Line: +import org.yamcs.xtce.InputParameter;
>, <Line: +import org.yamcs.xtce.Parameter;
>, <Line: +import org.yamcs.xtce.XtceDb;
>, <Line: +import org.yamcs.xtceproc.XtceDbFactory;
>, <Line: +/**
>, <Line: + * Just a small sanity check to verify python/jython still works.
>, <Line: + * Uses algorithms in the spreadsheet that are interpreted the same in javascript and python
>, <Line: + */
>, <Line: +public class AlgorithmManagerJavaTest {
>, <Line: +    @BeforeClass
>, <Line: +    public static void setUpBeforeClass() throws Exception {
>, <Line: +        YConfiguration.setup(instance);
>, <Line: +        ManagementService.setup(false);
>, <Line: +        XtceDbFactory.reset();
>, <Line: +    }
>, <Line: +    static String instance = "refmdb";
>, <Line: +    private XtceDb db;
>, <Line: +    private YProcessor c;
>, <Line: +    private RefMdbPacketGenerator tmGenerator;
>, <Line: +    private ParameterRequestManagerImpl prm;
>, <Line: +    @Before
>, <Line: +    public void beforeEachTest() throws ConfigurationException, ProcessorException {
>, <Line: +        EventProducerFactory.setMockup(true);
>, <Line: +        db=XtceDbFactory.getInstance(instance);
>, <Line: +        assertNotNull(db.getParameter("/REFMDB/SUBSYS1/FloatPara1_1_2"));
>, <Line: +        tmGenerator=new RefMdbPacketGenerator();
>, <Line: +        List<ParameterProvider> paramProviderList = new ArrayList<ParameterProvider>();
>, <Line: +        Map<String, Object> jslib = new HashMap<String, Object>();
>, <Line: +        Map<String, Object> config = new HashMap<String, Object>();
>, <Line: +        jslib.put("python", Arrays.asList("mdb/algolib.py"));
>, <Line: +        jslib.put("JavaScript", Arrays.asList("mdb/algolib.js"));
>, <Line: +        config.put("libraries", jslib);
>, <Line: +        AlgorithmManager am = new AlgorithmManager(instance, config);
>, <Line: +        paramProviderList.add(am);
>, <Line: +        SimpleTcTmService tmtcs = new SimpleTcTmService(tmGenerator, paramProviderList, null);
>, <Line: +        c=ProcessorFactory.create(instance, "AlgorithmManagerJavaTest", "refmdb", tmtcs, "junit");
>, <Line: +        prm=c.getParameterRequestManager();
>, <Line: +    }
>, <Line: +    @After
>, <Line: +    public void afterEachTest() { // Prevents us from wrapping our code in try-finally
>, <Line: +        c.quit();
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testJavaAlgo1() throws InvalidIdentification {
>, <Line: +        final ArrayList<ParameterValue> params=new ArrayList<ParameterValue>();
>, <Line: +        Parameter p = prm.getParameter("/REFMDB/SUBSYS1/AlgoJavaFloat1");
>, <Line: +        prm.addRequest(p, new ParameterConsumer() {
>, <Line: +            @Override
>, <Line: +            public void updateItems(int subscriptionId, List<ParameterValue> items) {
>, <Line: +        	params.addAll(items);
>, <Line: +            }
>, <Line: +        });
>, <Line: +        c.start();
>, <Line: +        tmGenerator.generate_PKT1_1();
>, <Line: +        assertEquals(1, params.size());
>, <Line: +        assertEquals(0.1672918, params.get(0).getEngValue().getDoubleValue(), 0.001);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testJavaAlgo2() throws InvalidIdentification {
>, <Line: +        final ArrayList<ParameterValue> params=new ArrayList<ParameterValue>();
>, <Line: +        Parameter p = prm.getParameter("/REFMDB/SUBSYS1/AlgoJavaFloat2");
>, <Line: +        prm.addRequest(p, new ParameterConsumer() {
>, <Line: +            @Override
>, <Line: +            public void updateItems(int subscriptionId, List<ParameterValue> items) {
>, <Line: +                params.addAll(items);
>, <Line: +            }
>, <Line: +        });
>, <Line: +        c.start();
>, <Line: +        tmGenerator.generate_PKT1_1();
>, <Line: +        assertEquals(1, params.size());
>, <Line: +        assertEquals(3.3672918, params.get(0).getEngValue().getDoubleValue(), 0.001);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testJavaAlgo3() throws InvalidIdentification {
>, <Line: +        final ArrayList<ParameterValue> params=new ArrayList<ParameterValue>();
>, <Line: +        Parameter p = prm.getParameter("/REFMDB/SUBSYS1/AlgoJavaFloat3");
>, <Line: +        prm.addRequest(p, new ParameterConsumer() {
>, <Line: +            @Override
>, <Line: +            public void updateItems(int subscriptionId, List<ParameterValue> items) {
>, <Line: +                params.addAll(items);
>, <Line: +            }
>, <Line: +        });
>, <Line: +        c.start();
>, <Line: +        tmGenerator.generate_PKT1_1();
>, <Line: +        assertEquals(1, params.size());
>, <Line: +        assertEquals(8.2672918, params.get(0).getEngValue().getDoubleValue(), 0.001);
>, <Line: +    }
>, <Line: +    public static class MyAlgo1 extends AbstractAlgorithmExecutor {
>, <Line: +        float v;
>, <Line: +        public MyAlgo1(Algorithm algorithmDef, AlgorithmExecutionContext execCtx) {
>, <Line: +            super(algorithmDef, execCtx);
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public List<ParameterValue> runAlgorithm(long acqTime, long genTime) {
>, <Line: +            Parameter p = algorithmDef.getOutputSet().get(0).getParameter();
>, <Line: +            ParameterValue pv = new ParameterValue(p);
>, <Line: +            pv.setEngineeringValue(ValueUtility.getDoubleValue(v));
>, <Line: +            return Arrays.asList(pv);
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        protected void updateInput(InputParameter inputParameter, ParameterValue newValue) {
>, <Line: +            v = newValue.getEngValue().getFloatValue();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class MyAlgo2 extends AbstractAlgorithmExecutor {
>, <Line: +        double x;
>, <Line: +        float v;
>, <Line: +        public MyAlgo2(Algorithm algorithmDef, AlgorithmExecutionContext execCtx, Double x) {
>, <Line: +            super(algorithmDef, execCtx);
>, <Line: +            this.x = x;
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public List<ParameterValue> runAlgorithm(long acqTime, long genTime) {
>, <Line: +            Parameter p = algorithmDef.getOutputSet().get(0).getParameter();
>, <Line: +            ParameterValue pv = new ParameterValue(p);
>, <Line: +            pv.setEngineeringValue(ValueUtility.getDoubleValue(x+v));
>, <Line: +            return Arrays.asList(pv);
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        protected void updateInput(InputParameter inputParameter, ParameterValue newValue) {
>, <Line: +            v = newValue.getEngValue().getFloatValue();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class MyAlgo3 extends AbstractAlgorithmExecutor {
>, <Line: +        int a;
>, <Line: +        double b;
>, <Line: +        String c;
>, <Line: +        float v;
>, <Line: +        public MyAlgo3(Algorithm algorithmDef, AlgorithmExecutionContext execCtx, Map<String, Object> m) {
>, <Line: +            super(algorithmDef, execCtx);
>, <Line: +            this.a = (Integer) m.get("a");
>, <Line: +            this.b = (Double) m.get("b");
>, <Line: +            this.c = (String) m.get("c");
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public List<ParameterValue> runAlgorithm(long acqTime, long genTime) {
>, <Line: +            Parameter p = algorithmDef.getOutputSet().get(0).getParameter();
>, <Line: +            ParameterValue pv = new ParameterValue(p);
>, <Line: +            pv.setEngineeringValue(ValueUtility.getDoubleValue(a+b+c.length()+v));
>, <Line: +            return Arrays.asList(pv);
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        protected void updateInput(InputParameter inputParameter, ParameterValue newValue) {
>, <Line: +            v = newValue.getEngValue().getFloatValue();
>, <Line: +        }
>, <Line: +    }
>, <Line: +}
>]
[]