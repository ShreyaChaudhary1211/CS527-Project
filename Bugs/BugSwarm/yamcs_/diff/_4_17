[<Line: +import org.yamcs.YamcsException;
>, <Line: +            log.debug("R{}: Handling REST Request {} {}", restReq.getRequestId(), req.getMethod(), uri);
>, <Line: +                log.info("R{}: No route matching URI: '{}'", restReq.getRequestId(), req.getUri());
>, <Line: +            log.info("R{}: Method {} not allowed for URI: '{}'", restReq.getRequestId(), req.getMethod(), req.getUri());
>, <Line: +            match.routeConfig.handle.invoke(target, req);
>, <Line: +            req.getCompletableFuture().whenComplete((channelFuture, e) -> {
>, <Line: +                if(e!=null) {
>, <Line: +                    handleException(req, e);
>, <Line: +                } else {
>, <Line: +                    log.debug("R{}: REST request execution finished successfully", req.getRequestId());
>, <Line: +        } catch(Throwable t) {
>, <Line: +            handleException(req, t);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    private void handleException(RestRequest req, Throwable t) {
>, <Line: +        if(t instanceof InternalServerErrorException) {
>, <Line: +            InternalServerErrorException e = (InternalServerErrorException)t;
>, <Line: +            log.error("R{}: Reporting internal server error to client", req.getRequestId(), e);
>, <Line: +        } else if (t instanceof HttpException) {
>, <Line: +            HttpException e = (HttpException)t;
>, <Line: +            log.warn("R{}: Sending nominal exception back to client: {}", req.getRequestId(), e.getMessage());
>, <Line: +        } else if (t instanceof YamcsException) {
>, <Line: +            log.warn("R{}: Reporting internal server error to client: {}", req.getRequestId(), t.getMessage());
>, <Line: +            RestHandler.sendRestError(req, HttpResponseStatus.INTERNAL_SERVER_ERROR, t);
>, <Line: +        } else {
>, <Line: +            log.error("R{}: Unexpected error " + t, req.getRequestId(), t);
>, <Line: +    }
>, <Line: +        public void getApiOverview(RestRequest req) throws HttpException {
>, <Line: +            sendOK(req, responseb.build(), SchemaRest.GetApiOverviewResponse.WRITE);
>]
[<Line: -import io.netty.channel.ChannelFuture;
>, <Line: -import io.netty.channel.ChannelFutureListener;
>, <Line: -                log.info("No route matching URI: '{}'", req.getUri());
>, <Line: -            log.info("Method {} not allowed for URI: '{}'", req.getMethod(), req.getUri());
>, <Line: -            // FIXME handleRequest must never return null! Futures are used to follow up on handling
>, <Line: -            ChannelFuture responseFuture = (ChannelFuture) match.routeConfig.handle.invoke(target, req);
>, <Line: -            if (responseFuture == null) return; // Allowed, when the specific handler prefers to do this
>, <Line: -            /**
>, <Line: -             * Follow-up on the successful write, to provide some hints when a future was not actually
>, <Line: -             * successfully delivered.
>, <Line: -             */
>, <Line: -            responseFuture.addListener(new ChannelFutureListener() {
>, <Line: -                @Override
>, <Line: -                public void operationComplete(ChannelFuture future) throws Exception {
>, <Line: -                    if (!future.isSuccess()) {
>, <Line: -                        log.error("Error writing out response to client", future.cause());
>, <Line: -                        future.channel().close();
>, <Line: -                    }
>, <Line: -        } catch (InternalServerErrorException e) {
>, <Line: -            log.error("Reporting internal server error to client", e);
>, <Line: -        } catch (HttpException e) {
>, <Line: -            log.warn("Sending nominal exception back to client: {}", e.getMessage());
>, <Line: -        } catch (Throwable t) {
>, <Line: -            log.error("Unexpected error " + t, t);
>, <Line: -    }
>, <Line: -        public ChannelFuture getApiOverview(RestRequest req) throws HttpException {
>, <Line: -            return sendOK(req, responseb.build(), SchemaRest.GetApiOverviewResponse.WRITE);
>]