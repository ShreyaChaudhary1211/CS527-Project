[<Line: +package org.yamcs.hornetq;
>, <Line: +import org.apache.activemq.artemis.api.core.SimpleString;
>, <Line: +import org.yamcs.archive.EventRecorder;
>, <Line: +import org.yamcs.yarch.Stream;
>, <Line: +import org.yamcs.yarch.YarchDatabase;
>, <Line: +import com.google.common.util.concurrent.AbstractService;
>, <Line: +/**
>, <Line: + * Receives event data from Artemis queues and publishes into yamcs streams
>, <Line: + * @author nm
>, <Line: + *
>, <Line: + */
>, <Line: +public class ArtemisEventDataLink extends AbstractService {
>, <Line: +    String instance;
>, <Line: +    StreamAdapter rtStreamAdapter, dumpStreamAdapter;
>, <Line: +    public ArtemisEventDataLink(String instance) {
>, <Line: +        this.instance = instance;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected void doStart() {
>, <Line: +        try {
>, <Line: +            YarchDatabase ydb = YarchDatabase.getInstance(instance);
>, <Line: +            Stream realtimeEventStream=ydb.getStream(EventRecorder.REALTIME_EVENT_STREAM_NAME);
>, <Line: +            rtStreamAdapter = new StreamAdapter(realtimeEventStream, new SimpleString(instance+".events_realtime"), new EventTupleTranslator());
>, <Line: +            Stream dumpEventStream=ydb.getStream(EventRecorder.DUMP_EVENT_STREAM_NAME);
>, <Line: +            dumpStreamAdapter = new StreamAdapter(dumpEventStream, new SimpleString(instance+".events_dump"), new EventTupleTranslator());
>, <Line: +        } catch (Exception e){
>, <Line: +            notifyFailed(e);
>, <Line: +        }
>, <Line: +        notifyStarted();
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected void doStop() {
>, <Line: +        rtStreamAdapter.quit();
>, <Line: +        dumpStreamAdapter.quit();
>, <Line: +        notifyStopped();
>, <Line: +    }
>, <Line: +}
>]
[]