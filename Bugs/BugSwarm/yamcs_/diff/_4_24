[<Line: +import java.util.concurrent.CompletableFuture;
>, <Line: +     * @param req
>, <Line: +     *        rest request
>, <Line: +     * @throws HttpException 
>, <Line: +    public void getParameterSamples(RestRequest req) throws HttpException {
>, <Line: +        CompletableFuture<Void> completableFuture = req.getCompletableFuture();
>, <Line: +        RestReplays.replay(instance, req.getAuthToken(), rr.build(), new RestReplayListener() {
>, <Line: +            @Override
>, <Line: +            public void replayFinished() {
>, <Line: +                TimeSeries.Builder series = TimeSeries.newBuilder();
>, <Line: +                for (Sample s : sampler.collect()) {
>, <Line: +                    series.addSample(ArchiveHelper.toGPBSample(s));
>, <Line: +                }
>, <Line: +                try {
>, <Line: +                    sendOK(req, series.build(), SchemaPvalue.TimeSeries.WRITE);
>, <Line: +                } catch (HttpException e) { //error encoding data 
>, <Line: +                    completableFuture.completeExceptionally(e);
>, <Line: +                }
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public void replayFailed(Throwable t) {
>, <Line: +                completableFuture.completeExceptionally(t);
>, <Line: +            }
>, <Line: +        });
>, <Line: +    public void listParameterHistory(RestRequest req) throws HttpException {
>, <Line: +        String pathName = req.getRouteParam("name");
>, <Line: +        NameDescriptionWithId<Parameter> p = verifyParameterWithId(req, mdb, pathName);
>, <Line: +        ReplayRequest rr = ArchiveHelper.toParameterReplayRequest(req, p.getItem(), true);
>, <Line: +        CompletableFuture<Void> completableFuture = req.getCompletableFuture();
>, <Line: +                List<NamedObjectId> idList = Arrays.asList(p.getRequestedId());
>, <Line: +                RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit, completableFuture) {
>, <Line: +                            completableFuture.completeExceptionally(e);
>, <Line: +                    public void replayFinished() {
>, <Line: +                        sendOK(req, MediaType.CSV, buf);
>, <Line: +                    }
>, <Line: +                RestReplays.replay(instance, req.getAuthToken(), rr, replayListener);
>, <Line: +            RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit, completableFuture) {
>, <Line: +                @Override
>, <Line: +                public void replayFinished() {
>, <Line: +                    try {
>, <Line: +                        sendOK(req, resultb.build(), SchemaPvalue.ParameterData.WRITE);
>, <Line: +                    } catch (HttpException e) { //error encoding data
>, <Line: +                        completableFuture.completeExceptionally(e);
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            RestReplays.replay(instance, req.getAuthToken(), rr, replayListener);
>]
[<Line: -    public ChannelFuture getParameterSamples(RestRequest req) throws HttpException {
>, <Line: -        RestReplays.replayAndWait(instance, req.getAuthToken(), rr.build(), new RestReplayListener() {
>, <Line: -        });
>, <Line: -        TimeSeries.Builder series = TimeSeries.newBuilder();
>, <Line: -        for (Sample s : sampler.collect()) {
>, <Line: -            series.addSample(ArchiveHelper.toGPBSample(s));
>, <Line: -        }
>, <Line: -        return sendOK(req, series.build(), SchemaPvalue.TimeSeries.WRITE);
>, <Line: -    public ChannelFuture listParameterHistory(RestRequest req) throws HttpException {
>, <Line: -        NamedObjectId requestedId = verifyParameterId(req, mdb, req.getRouteParam("name"));
>, <Line: -        Parameter p = mdb.getParameter(requestedId);
>, <Line: -        ReplayRequest rr = ArchiveHelper.toParameterReplayRequest(req, p, true);
>, <Line: -                List<NamedObjectId> idList = Arrays.asList(requestedId);
>, <Line: -                RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit) {
>, <Line: -                RestReplays.replayAndWait(instance, req.getAuthToken(), rr, replayListener);
>, <Line: -            return sendOK(req, MediaType.CSV, buf);
>, <Line: -            RestParameterReplayListener replayListener = new RestParameterReplayListener(pos, limit) {
>, <Line: -            RestReplays.replayAndWait(instance, req.getAuthToken(), rr, replayListener);
>, <Line: -            return sendOK(req, resultb.build(), SchemaPvalue.ParameterData.WRITE);
>]