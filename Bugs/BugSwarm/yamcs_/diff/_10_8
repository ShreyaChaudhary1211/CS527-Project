[<Line: +package org.yamcs.tctm;
>, <Line: +import java.io.IOException;
>, <Line: +import java.net.DatagramPacket;
>, <Line: +import java.net.DatagramSocket;
>, <Line: +import java.util.Map;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +import org.yamcs.ConfigurationException;
>, <Line: +import org.yamcs.YConfiguration;
>, <Line: +import org.yamcs.protobuf.Pvalue.ParameterData;
>, <Line: +import com.google.common.util.concurrent.AbstractExecutionThreadService;
>, <Line: +/**
>, <Line: + * Receives PP data via UDP. 
>, <Line: + * 
>, <Line: + * The UDP packets are protobuf encoded ParameterData.
>, <Line: + * We don't use any checksum, assume it's done by UDP.
>, <Line: + * 
>, <Line: + * @author nm
>, <Line: + *
>, <Line: + */
>, <Line: +public class UdpParameterDataLink extends AbstractExecutionThreadService implements ParameterDataLink {
>, <Line: +    private volatile int validDatagramCount = 0;
>, <Line: +    private volatile int invalidDatagramCount = 0;
>, <Line: +    private volatile boolean disabled=false;
>, <Line: +    private DatagramSocket udpSocket;
>, <Line: +    private String group="239.192.0.1";
>, <Line: +    private int port=31002;
>, <Line: +    ParameterSink ppListener;
>, <Line: +    private Logger log=LoggerFactory.getLogger(this.getClass().getName());
>, <Line: +    int MAX_LENGTH=10*1024;
>, <Line: +    DatagramPacket datagram = new DatagramPacket(new byte[MAX_LENGTH], MAX_LENGTH);
>, <Line: +    /**
>, <Line: +     * Creates a new UDP data link
>, <Line: +     * @param instance 
>, <Line: +     * @param name 
>, <Line: +     * @param config 
>, <Line: +     * @param spec
>, <Line: +     * @throws ConfigurationException if port is not defined in the config 
>, <Line: +     */
>, <Line: +    public UdpParameterDataLink(String instance, String name, Map<String, Object> config) throws ConfigurationException  {
>, <Line: +        port = YConfiguration.getInt(config, "port");
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void startUp() throws IOException {
>, <Line: +        udpSocket = new DatagramSocket(port);
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void run() {
>, <Line: +        while(isRunning()) {
>, <Line: +            ParameterData pd = getNextData();
>, <Line: +            if(pd!=null) {
>, <Line: +                ppListener.updateParams(pd.getGenerationTime(),  pd.getGroup(), pd.getSeqNum(), pd.getParameterList());
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * 
>, <Line: +     * Called to retrieve the next packet.
>, <Line: +     * It blocks in readinng on the UDP socket  
>, <Line: +     * @return anything that looks as a valid packet, just the size is taken into account to decide if it's valid or not
>, <Line: +     */
>, <Line: +    public ParameterData getNextData() {
>, <Line: +        while(isRunning() && disabled) {
>, <Line: +            try {
>, <Line: +                Thread.sleep(1000);
>, <Line: +            } catch (InterruptedException e) {
>, <Line: +                return null;
>, <Line: +            }
>, <Line: +        }
>, <Line: +        try {
>, <Line: +            udpSocket.receive(datagram);
>, <Line: +            ParameterData.Builder pdb = ParameterData.newBuilder().mergeFrom(datagram.getData(), datagram.getOffset(), datagram.getLength());
>, <Line: +            validDatagramCount++;
>, <Line: +            return pdb.build();
>, <Line: +        } catch (IOException e) {
>, <Line: +            log.warn("exception when receiving parameter data: {}'", e.getMessage());
>, <Line: +            invalidDatagramCount++;
>, <Line: +        }
>, <Line: +        return null;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public String getLinkStatus() {
>, <Line: +        return disabled?"DISABLED":"OK";
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * returns statistics with the number of datagram received and the number of invalid datagrams
>, <Line: +     */
>, <Line: +    @Override
>, <Line: +    public String getDetailedStatus() {
>, <Line: +        if(disabled) {
>, <Line: +            return "DISABLED";
>, <Line: +        } else {
>, <Line: +            return String.format("OK (%s:%d)\nValid datagrams received: %d\nInvalid datagrams received: %d",
>, <Line: +                    group, port, validDatagramCount, invalidDatagramCount);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Sets the disabled to true such that getNextPacket ignores the received datagrams
>, <Line: +     */
>, <Line: +    @Override
>, <Line: +    public void disable() {
>, <Line: +        disabled=true;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Sets the disabled to false such that getNextPacket does not ignore the received datagrams
>, <Line: +     */
>, <Line: +    @Override
>, <Line: +    public void enable() {
>, <Line: +        disabled=false;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public boolean isDisabled() {
>, <Line: +        return disabled;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public long getDataCount() {
>, <Line: +        return validDatagramCount;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void setParameterSink(ParameterSink ppListener) {
>, <Line: +        this.ppListener = ppListener;
>, <Line: +    }
>, <Line: +}
>]
[]