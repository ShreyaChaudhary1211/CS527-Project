[]
[<Line: -import sys
>, <Line: -import json
>, <Line: -import time
>, <Line: -import unittest
>, <Line: -import requests
>, <Line: -import argparse
>, <Line: -from test import test_support
>, <Line: -BASE_URI = '192.168.33.20:8080/baragon/v2'
>, <Line: -AUTH_KEY = ''
>, <Line: -MASTER_AUTH_KEY = ''
>, <Line: -LOAD_BALANCER_GROUP = 'vagrant'
>, <Line: -UPSTREAM = 'example.com:80'
>, <Line: -def build_json(requestId, serviceId, basePath, addUpstream, removeUpstream, replace=None, options={}, template=None):
>, <Line: -    data = {
>, <Line: -        'loadBalancerRequestId': requestId,
>, <Line: -        'loadBalancerService': {
>, <Line: -            'serviceId': serviceId,
>, <Line: -            'owners': ['someuser@example.com'],
>, <Line: -            'serviceBasePath': basePath,
>, <Line: -            'loadBalancerGroups': [LOAD_BALANCER_GROUP],
>, <Line: -            'options': options,
>, <Line: -            'templateName': template
>, <Line: -        }
>, <Line: -    }
>, <Line: -    if addUpstream:
>, <Line: -        data['addUpstreams'] = [{
>, <Line: -            'upstream': addUpstream,
>, <Line: -            'requestId': requestId
>, <Line: -        }]
>, <Line: -    else:
>, <Line: -        data['addUpstreams'] = []
>, <Line: -    if type(removeUpstream) == list:
>, <Line: -        data['removeUpstreams'] = removeUpstream
>, <Line: -    elif removeUpstream:
>, <Line: -        data['removeUpstreams'] = [{
>, <Line: -            'upstream': removeUpstream,
>, <Line: -            'requestId': requestId
>, <Line: -        }]
>, <Line: -    else:
>, <Line: -        data['removeUpstreams'] = []
>, <Line: -    if replace:
>, <Line: -        data['replaceServiceId'] = replace
>, <Line: -    return json.dumps(data)
>, <Line: -def get_request_response(requestId):
>, <Line: -    uri = '{0}/request/{1}'.format(BASE_URI, requestId)
>, <Line: -    params = {'authkey': AUTH_KEY}
>, <Line: -    try:
>, <Line: -        response = requests.get(uri, params=params)
>, <Line: -        while response.json()['loadBalancerState'] == 'WAITING' or response.json()['loadBalancerState'] == 'CANCELING':
>, <Line: -            time.sleep(2)
>, <Line: -            response = requests.get(uri, params=params)
>, <Line: -        return response.json()
>, <Line: -    except:
>, <Line: -        return None
>, <Line: -def undo_request(serviceId, rename=False):
>, <Line: -    try:
>, <Line: -        service = get_service(serviceId)
>, <Line: -        service = service.json() if service.status_code != 404 else None
>, <Line: -        if service:
>, <Line: -            params = {'authkey': AUTH_KEY}
>, <Line: -            headers = {'Content-type': 'application/json'}
>, <Line: -            uri = '{0}/request'.format(BASE_URI)
>, <Line: -            json_data = build_json(serviceId + '-revert', serviceId, service['service']['serviceBasePath'], [], service['upstreams'])
>, <Line: -            post_response = requests.post(uri,data=json_data, params=params, headers=headers)
>, <Line: -            post_response.raise_for_status()
>, <Line: -            return get_request_response(serviceId + '-revert')
>, <Line: -    except:
>, <Line: -        if not rename:
>, <Line: -            print "Couldn't revert request for {0}, clean up might have to be done manually".format(serviceId)
>, <Line: -def remove_service(serviceId, renamed=False):
>, <Line: -    uri = '{0}/state/{1}'.format(BASE_URI, serviceId)
>, <Line: -    params = {'authkey': AUTH_KEY}
>, <Line: -    try:
>, <Line: -        response = requests.delete(uri, params=params)
>, <Line: -        response.raise_for_status()
>, <Line: -    except:
>, <Line: -        if not renamed:
>, <Line: -            print "Couldn't remove service {0}, clean up might have to be done manually".format(serviceId)
>, <Line: -def get_service(serviceId):
>, <Line: -    uri = '{0}/state/{1}'.format(BASE_URI, serviceId)
>, <Line: -    params = {'authkey': AUTH_KEY}
>, <Line: -    try:
>, <Line: -        response = requests.get(uri, params=params)
>, <Line: -        return response
>, <Line: -    except:
>, <Line: -        return None
>, <Line: -class Service(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -    def test_status(self):
>, <Line: -        uri = '{0}/status'.format(BASE_URI)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(response.json().has_key('leader'))
>, <Line: -    def test_state(self):
>, <Line: -        uri = '{0}/state'.format(BASE_URI)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(response.json()[0].has_key('service'))
>, <Line: -    def test_get_service(self):
>, <Line: -        uri = '{0}/state'.format(BASE_URI)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(response.json()[0].has_key('service'))
>, <Line: -        serviceId = response.json()[0]['service']['serviceId']
>, <Line: -        uri = '{0}/state/{1}'.format(BASE_URI, serviceId)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(response.json().has_key('service'))
>, <Line: -    def test_workers(self):
>, <Line: -        uri = '{0}/workers'.format(BASE_URI)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertEqual(type(response.json()), list)
>, <Line: -    def test_auth(self):
>, <Line: -        if MASTER_AUTH_KEY and AUTH_KEY:
>, <Line: -            uri = '{0}/auth/keys'.format(BASE_URI)
>, <Line: -            response = requests.get(uri, params={'authkey': MASTER_AUTH_KEY})
>, <Line: -            self.assertEqual(response.status_code, 200)
>, <Line: -            self.assertTrue(response.json()[0].has_key('value'))
>, <Line: -    def test_load_balancers(self):
>, <Line: -        uri = '{0}/load-balancer'.format(BASE_URI)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertEqual(type(response.json()), list)
>, <Line: -    def test_cluster_agents(self):
>, <Line: -        uri = '{0}/load-balancer/{1}/agents'.format(BASE_URI, LOAD_BALANCER_GROUP)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(response.json()[0].has_key('baseAgentUri'))
>, <Line: -    def test_cluster_known_agents(self):
>, <Line: -        uri = '{0}/load-balancer/{1}/known-agents'.format(BASE_URI, LOAD_BALANCER_GROUP)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(response.json()[0].has_key('baseAgentUri'))
>, <Line: -    def test_cluster_base_paths(self):
>, <Line: -        uri = '{0}/load-balancer/{1}/base-path/all'.format(BASE_URI, LOAD_BALANCER_GROUP)
>, <Line: -        response = requests.get(uri, params=self.params)
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(type(response.json()), list)
>, <Line: -        basePath = response.json()[0]
>, <Line: -        uri = '{0}/load-balancer/{1}/base-path'.format(BASE_URI, LOAD_BALANCER_GROUP)
>, <Line: -        response = requests.get(uri, params={'authkey': AUTH_KEY, 'basePath': basePath})
>, <Line: -        self.assertEqual(response.status_code, 200)
>, <Line: -        self.assertTrue(response.json().has_key('serviceId'))
>, <Line: -# TODO - test deletes
>, <Line: -#    def test_delete_base_path(self):
>, <Line: -#    def test_delete_known_agent(self):
>, <Line: -#    def test_delete_auth_key(self):
>, <Line: -class ValidRequest(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_valid_request(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            return True
>, <Line: -        else:
>, <Line: -            raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up... ')
>, <Line: -        undo_request(self.randomId)
>, <Line: -        remove_service(self.randomId)
>, <Line: -class ValidBasePathChange(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_valid_request(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            newId = self.randomId + '-2'
>, <Line: -            sys.stderr.write('Trying to post {0}... '.format(self.randomId + '-2'))
>, <Line: -            json_data = build_json(newId, self.randomId, '/{0}'.format(newId), UPSTREAM, None, None, {})
>, <Line: -            post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(post_response.status_code, 200)
>, <Line: -            result = get_request_response(newId)
>, <Line: -            if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -                uri = '{0}/load-balancer/test/base-path/all'.format(BASE_URI)
>, <Line: -                basePaths = requests.get(uri, params=self.params).json()
>, <Line: -                if '/{0}'.format(newId) not in basePaths:
>, <Line: -                    return True
>, <Line: -            else:
>, <Line: -                raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up... ')
>, <Line: -        undo_request(self.randomId)
>, <Line: -        remove_service(self.randomId)
>, <Line: -class ValidRequestInvalidReplaceId(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_valid_request_invalid_replace_id(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, 'someotherservice', {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            return True
>, <Line: -        else:
>, <Line: -            raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up... ')
>, <Line: -        undo_request(self.randomId)
>, <Line: -        remove_service(self.randomId)
>, <Line: -class BasePathConflict(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_base_path_conflict_no_replace_id(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            newId = self.randomId + '-conflict'
>, <Line: -            sys.stderr.write('Attempting request with basePath conflict... ')
>, <Line: -            conflict_json_data = build_json(newId, newId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -            response = requests.post(self.uri,data=conflict_json_data, params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(response.status_code, 200)
>, <Line: -            result = get_request_response(newId)
>, <Line: -            self.assertEqual(result['loadBalancerState'], 'INVALID_REQUEST_NOOP')
>, <Line: -        else:
>, <Line: -            raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up... ')
>, <Line: -        undo_request(self.randomId, True)
>, <Line: -        remove_service(self.randomId, True)
>, <Line: -class BasePathConflictInvalidReplaceId(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_base_path_conflict_invalid_replace_id(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            newId = self.randomId + '-conflict'
>, <Line: -            sys.stderr.write('Attempting request with basePath conflict... ')
>, <Line: -            conflict_json_data = build_json(newId, newId, '/{0}'.format(self.randomId), UPSTREAM, None, 'someotherservice', {})
>, <Line: -            response = requests.post(self.uri,data=conflict_json_data, params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(response.status_code, 200)
>, <Line: -            result = get_request_response(newId)
>, <Line: -            self.assertEqual(result['loadBalancerState'], 'INVALID_REQUEST_NOOP')
>, <Line: -        else:
>, <Line: -            raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up... ')
>, <Line: -        undo_request(self.randomId)
>, <Line: -        remove_service(self.randomId)
>, <Line: -        undo_request(self.randomId + '-conflict', True)
>, <Line: -        remove_service(self.randomId, True)
>, <Line: -class DeleteServiceId(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_delete_service(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), [], None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            sys.stderr.write('deleting service... ')
>, <Line: -            uri = '{0}/state/{1}'.format(BASE_URI, self.randomId)
>, <Line: -            response = requests.delete(uri, params=self.params)
>, <Line: -            result = get_request_response(response.json()['loadBalancerRequestId'])
>, <Line: -            self.assertEqual(result['loadBalancerState'], 'SUCCESS')
>, <Line: -class ValidBasePathRename(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        timestamp = str(time.time()).replace('.','')
>, <Line: -        self.randomId = 'Request' + timestamp
>, <Line: -        self.renameId = 'Request' + timestamp + '-rename'
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_base_path_change(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            sys.stderr.write('trying to rename to {0}'.format(self.renameId))
>, <Line: -            json_rename_data = build_json(self.renameId, self.renameId, '/{0}'.format(self.randomId), UPSTREAM, None, self.randomId, {})
>, <Line: -            post_rename_response = requests.post(self.uri,data=json_rename_data, params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(post_rename_response.status_code, 200)
>, <Line: -            rename_result = get_request_response(self.renameId)
>, <Line: -            if rename_result['loadBalancerState'] == 'SUCCESS':
>, <Line: -                service_response = get_service(self.renameId)
>, <Line: -                if service_response and service_response.status_code == 200:
>, <Line: -                    self.assertEqual('/{0}'.format(self.randomId), service_response.json()['service']['serviceBasePath'])
>, <Line: -                    return True
>, <Line: -        raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up...')
>, <Line: -        undo_request(self.randomId, True)
>, <Line: -        undo_request(self.renameId)
>, <Line: -        remove_service(self.randomId, True)
>, <Line: -        remove_service(self.renameId)
>, <Line: -class ValidBasePathServiceIdChange(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        timestamp = str(time.time()).replace('.','')
>, <Line: -        self.randomId = 'Request' + timestamp
>, <Line: -        self.renameId = 'Request' + timestamp + '-rename'
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_base_path_change(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            sys.stderr.write('trying to rename to {0}'.format(self.renameId))
>, <Line: -            json_rename_data = build_json(self.renameId, self.renameId, '/{0}'.format(self.renameId), UPSTREAM, None, self.randomId, {})
>, <Line: -            post_rename_response = requests.post(self.uri,data=json_rename_data, params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(post_rename_response.status_code, 200)
>, <Line: -            rename_result = get_request_response(self.renameId)
>, <Line: -            if rename_result['loadBalancerState'] == 'SUCCESS':
>, <Line: -                service_response = get_service(self.renameId)
>, <Line: -                if service_response and service_response.status_code == 200:
>, <Line: -                    self.assertEqual('/{0}'.format(self.renameId), service_response.json()['service']['serviceBasePath'])
>, <Line: -                    self.assertEqual(get_service(self.randomId).status_code, 404)
>, <Line: -                    return True
>, <Line: -        raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up...')
>, <Line: -        remove_service(self.randomId, True)
>, <Line: -        remove_service(self.renameId)
>, <Line: -class InvalidRequest(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.randomIdReplace = 'Request' + str(time.time()).replace('.','') + '-invalidreplace'
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_invalid_request(self):
>, <Line: -        sys.stderr.write('Posting {0} and waiting for revert... '.format(self.randomId))
>, <Line: -        options = {'nginxExtraConfigs': ['rewrite /this_is_invalid_yo']}
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, options)
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        self.assertEqual(result['loadBalancerState'], 'FAILED')
>, <Line: -        self.assertEqual(result['agentResponses']['REVERT'][0]['statusCode'], 200)
>, <Line: -    def test_invalid_request_invalid_replace_id(self):
>, <Line: -        sys.stderr.write('Posting {0} and waiting for revert... '.format(self.randomId))
>, <Line: -        options = {'nginxExtraConfigs': ['rewrite /this_is_invalid_yo']}
>, <Line: -        json_data = build_json(self.randomIdReplace, self.randomIdReplace, '/{0}'.format(self.randomIdReplace), UPSTREAM, None, 'someotherservice', options)
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomIdReplace)
>, <Line: -        self.assertEqual(result['loadBalancerState'], 'FAILED')
>, <Line: -        self.assertEqual(result['agentResponses']['REVERT'][0]['statusCode'], 200)
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up... ')
>, <Line: -        undo_request(self.randomId, True)
>, <Line: -        remove_service(self.randomId, True)
>, <Line: -class InvalidRequestWithBasePathChange(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        timestamp = str(time.time()).replace('.','')
>, <Line: -        self.randomId = 'Request' + timestamp
>, <Line: -        self.renameId = 'Request' + timestamp + '-rename'
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_invalid_request_base_path_change(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            sys.stderr.write('trying to rename to {0}...'.format(self.renameId))
>, <Line: -            options = {'nginxExtraConfigs': ['rewrite /this_is_invalid_yo']}
>, <Line: -            json_rename_data = build_json(self.renameId, self.renameId, '/{0}'.format(self.randomId), UPSTREAM, None, self.randomId, options)
>, <Line: -            post_rename_response = requests.post(self.uri,data=json_rename_data, params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(post_rename_response.status_code, 200)
>, <Line: -            rename_result = get_request_response(self.renameId)
>, <Line: -            self.assertEqual(rename_result['loadBalancerState'], 'FAILED')
>, <Line: -            self.assertEqual(rename_result['agentResponses']['REVERT'][0]['statusCode'], 200)
>, <Line: -            self.assertEqual(get_service(self.randomId).json()['service']['serviceBasePath'], '/{0}'.format(self.randomId))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up...')
>, <Line: -        undo_request(self.randomId)
>, <Line: -        undo_request(self.renameId, True)
>, <Line: -        remove_service(self.randomId)
>, <Line: -        remove_service(self.renameId, True)
>, <Line: -class InvalidTemplateName(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_invalid_template_name(self):
>, <Line: -        sys.stderr.write('Posting {0} and waiting for revert... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, None, 'invalidtemplatename')
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        self.assertEqual(result['loadBalancerState'], 'INVALID_REQUEST_NOOP')
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up...')
>, <Line: -        undo_request(self.randomId, True)
>, <Line: -        remove_service(self.randomId, True)
>, <Line: -class CancelledRequest(unittest.TestCase):
>, <Line: -    def setUp(self):
>, <Line: -        self.randomId = 'Request' + str(time.time()).replace('.','')
>, <Line: -        self.params = {'authkey': AUTH_KEY}
>, <Line: -        self.headers = {'Content-type': 'application/json'}
>, <Line: -        self.uri = '{0}/request'.format(BASE_URI)
>, <Line: -    def test_cancel_request(self):
>, <Line: -        sys.stderr.write('Trying to post {0}... '.format(self.randomId))
>, <Line: -        json_data = build_json(self.randomId, self.randomId, '/{0}'.format(self.randomId), UPSTREAM, None, None, {})
>, <Line: -        post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -        self.assertEqual(post_response.status_code, 200)
>, <Line: -        result = get_request_response(self.randomId)
>, <Line: -        if result['loadBalancerState'] == 'SUCCESS':
>, <Line: -            newId = self.randomId + '-2'
>, <Line: -            sys.stderr.write('Trying to post {0}... '.format(self.randomId + '-2'))
>, <Line: -            json_data = build_json(newId, self.randomId, '/{0}'.format(newId), '{0}{1}'.format('new', UPSTREAM), None, None, {})
>, <Line: -            post_response = requests.post(self.uri,data=json_data, params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(post_response.status_code, 200)
>, <Line: -            cancel_response = requests.delete('{0}/{1}'.format(self.uri, newId), params=self.params, headers=self.headers)
>, <Line: -            self.assertEqual(cancel_response.status_code, 200)
>, <Line: -            result = get_request_response(newId)
>, <Line: -            if result['loadBalancerState'] == 'CANCELED':
>, <Line: -                service_uri = '{0}/state/{1}'.format(BASE_URI, self.randomId)
>, <Line: -                service_response = requests.get(service_uri, params=self.params, headers=self.headers)
>, <Line: -                self.assertEqual(service_response.json()['upstreams'][0]['upstream'], UPSTREAM)
>, <Line: -            else:
>, <Line: -                raise Exception('Request failed, result was: {0}'.format(json_data))
>, <Line: -    def tearDown(self):
>, <Line: -        sys.stderr.write('Cleaning up... ')
>, <Line: -        undo_request(self.randomId)
>, <Line: -        remove_service(self.randomId)
>, <Line: -def test_main(args):
>, <Line: -    global BASE_URI
>, <Line: -    global AUTH_KEY
>, <Line: -    global MASTER_AUTH_KEY
>, <Line: -    global LOAD_BALANCER_GROUP
>, <Line: -    global UPSTREAM
>, <Line: -    BASE_URI = args.uri
>, <Line: -    AUTH_KEY = args.key
>, <Line: -    MASTER_AUTH_KEY = args.master
>, <Line: -    LOAD_BALANCER_GROUP = args.lbGroup
>, <Line: -    UPSTREAM = args.upstream
>, <Line: -    if args.service:
>, <Line: -        test_support.run_unittest(Service)
>, <Line: -    else:
>, <Line: -        test_support.run_unittest(
>, <Line: -            Service,
>, <Line: -            DeleteServiceId,
>, <Line: -            ValidRequest,
>, <Line: -            ValidRequestInvalidReplaceId,
>, <Line: -            ValidBasePathServiceIdChange,
>, <Line: -            ValidBasePathChange,
>, <Line: -            BasePathConflict,
>, <Line: -            BasePathConflictInvalidReplaceId,
>, <Line: -            ValidBasePathRename,
>, <Line: -            InvalidRequest,
>, <Line: -            InvalidRequestWithBasePathChange,
>, <Line: -            InvalidTemplateName,
>, <Line: -            CancelledRequest
>, <Line: -        )
>, <Line: -if __name__ == '__main__':
>, <Line: -    parser = argparse.ArgumentParser(description='Baragon testing input')
>, <Line: -    parser.add_argument('-u', '--uri', dest='uri', help='BaragonService base uri', default='192.168.33.20:8080/baragon/v2')
>, <Line: -    parser.add_argument('-k', '--key', dest='key', help='BaragonService auth key')
>, <Line: -    parser.add_argument('-m', '--master', dest='master', help='BaragonService master key')
>, <Line: -    parser.add_argument('--upstream', dest='upstream', help='Default upstream to use in requests', default='example.com:80')
>, <Line: -    parser.add_argument('-l', '--lbGroup', dest='lbGroup', help='Load balancer group to test with', default='vagrant')
>, <Line: -    parser.add_argument('-s', '--service', dest='service', help='only run tests on BaragonService (no tests involving agent responses)', action='store_true')
>, <Line: -    args = parser.parse_args()
>, <Line: -    test_main(args)
>]