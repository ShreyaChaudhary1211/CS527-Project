[<Line: +import java.util.Date;
>, <Line: +import org.apache.curator.framework.CuratorFramework;
>, <Line: +import org.apache.curator.framework.api.PathAndBytesable;
>, <Line: +import org.apache.zookeeper.CreateMode;
>, <Line: +import org.apache.zookeeper.KeeperException;
>, <Line: +import org.apache.zookeeper.data.Stat;
>, <Line: +    return deleteNode(path, false);
>, <Line: +  }
>, <Line: +  protected boolean deleteNode(String path, boolean recursive) {
>, <Line: +      if (recursive) {
>, <Line: +        curatorFramework.delete().deletingChildrenIfNeeded().forPath(path);
>, <Line: +      } else {
>, <Line: +        curatorFramework.delete().forPath(path);
>, <Line: +      }
>, <Line: +  protected Optional<Long> getUpdatedAt(String path) {
>, <Line: +    try {
>, <Line: +      Stat stat = curatorFramework.checkExists().forPath(path);
>, <Line: +      return Optional.of(stat.getMtime());
>, <Line: +    } catch (KeeperException.NoNodeException e) {
>, <Line: +      return Optional.absent();
>, <Line: +    } catch (Exception e) {
>, <Line: +      throw Throwables.propagate(e);
>, <Line: +    }
>, <Line: +  }
>]
[<Line: -import org.apache.curator.framework.CuratorFramework;
>, <Line: -import org.apache.curator.framework.api.PathAndBytesable;
>, <Line: -import org.apache.zookeeper.CreateMode;
>, <Line: -import org.apache.zookeeper.KeeperException;
>, <Line: -      curatorFramework.delete().forPath(path);
>]