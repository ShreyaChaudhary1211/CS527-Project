[<Line: +package com.hubspot.baragon.service.listeners;
>, <Line: +import java.util.concurrent.ScheduledExecutorService;
>, <Line: +import java.util.concurrent.ScheduledFuture;
>, <Line: +import java.util.concurrent.TimeUnit;
>, <Line: +import javax.inject.Named;
>, <Line: +import com.google.inject.Inject;
>, <Line: +import com.hubspot.baragon.service.BaragonServiceModule;
>, <Line: +import com.hubspot.baragon.service.config.BaragonConfiguration;
>, <Line: +import com.hubspot.baragon.service.worker.RequestPurgingWorker;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +public class RequestPurgingListener extends AbstractLatchListener {
>, <Line: +  private static final Logger LOG = LoggerFactory.getLogger(RequestPurgingListener.class);
>, <Line: +  private final ScheduledExecutorService executorService;
>, <Line: +  private final BaragonConfiguration configuration;
>, <Line: +  private final RequestPurgingWorker requestPurgingWorker;
>, <Line: +  private ScheduledFuture<?> requestPurgerWorkerFuture = null;
>, <Line: +  @Inject
>, <Line: +  public RequestPurgingListener(@Named(BaragonServiceModule.BARAGON_SERVICE_SCHEDULED_EXECUTOR) ScheduledExecutorService executorService,
>, <Line: +                                BaragonConfiguration configuration,
>, <Line: +                                RequestPurgingWorker requestPurgingWorker) {
>, <Line: +    this.executorService = executorService;
>, <Line: +    this.configuration = configuration;
>, <Line: +    this.requestPurgingWorker = requestPurgingWorker;
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  public void isLeader() {
>, <Line: +    LOG.info("We are the leader! Starting Old Request Purger...");
>, <Line: +    if (requestPurgerWorkerFuture != null) {
>, <Line: +      requestPurgerWorkerFuture.cancel(false);
>, <Line: +    }
>, <Line: +    requestPurgerWorkerFuture = executorService.scheduleAtFixedRate(
>, <Line: +      requestPurgingWorker,
>, <Line: +      configuration.getHistoryConfiguration().getWorkerInitialDelayHours(),
>, <Line: +      configuration.getHistoryConfiguration().getPurgeEveryHours(),
>, <Line: +      TimeUnit.HOURS
>, <Line: +    );
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  public void notLeader() {
>, <Line: +    LOG.info("We are not the leader!");
>, <Line: +    requestPurgerWorkerFuture.cancel(false);
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  public boolean isEnabled() {
>, <Line: +    return configuration.getHistoryConfiguration().isEnabled();
>, <Line: +  }
>, <Line: +}
>]
[]