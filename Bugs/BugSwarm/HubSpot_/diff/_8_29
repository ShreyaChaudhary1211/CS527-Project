[<Line: +import com.hubspot.baragon.models.BaragonAuthKey;
>, <Line: +import org.apache.curator.framework.CuratorFramework;
>, <Line: +import org.apache.curator.framework.CuratorFrameworkFactory;
>, <Line: +import org.apache.curator.framework.recipes.cache.PathChildrenCache;
>, <Line: +import org.apache.curator.framework.state.ConnectionState;
>, <Line: +import org.apache.curator.retry.ExponentialBackoffRetry;
>, <Line: +  @Named(BARAGON_AUTH_KEY)
>, <Line: +  public Optional<String> providesBaragonAuthKey(AuthConfiguration authConfiguration) {
>, <Line: +    return authConfiguration.getKey();
>]
[<Line: -import com.hubspot.horizon.HttpConfig;
>, <Line: -import com.hubspot.horizon.apache.ApacheHttpClient;
>, <Line: -import com.hubspot.baragon.models.BaragonAuthKey;
>, <Line: -import com.hubspot.horizon.HttpClient;
>, <Line: -import org.apache.curator.framework.CuratorFramework;
>, <Line: -import org.apache.curator.framework.CuratorFrameworkFactory;
>, <Line: -import org.apache.curator.framework.recipes.cache.PathChildrenCache;
>, <Line: -import org.apache.curator.framework.state.ConnectionState;
>, <Line: -import org.apache.curator.retry.ExponentialBackoffRetry;
>, <Line: -import com.amazonaws.auth.BasicAWSCredentials;
>, <Line: -import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;
>, <Line: -import com.hubspot.baragon.config.HttpClientConfiguration;
>, <Line: -import com.hubspot.baragon.config.ElbConfiguration;
>, <Line: -import com.ning.http.client.AsyncHttpClient;
>, <Line: -import com.ning.http.client.AsyncHttpClientConfig;
>, <Line: -  public static final String BARAGON_SERVICE_HTTP_CLIENT = "baragon.service.http.client";
>, <Line: -  public static final String BARAGON_AGENT_HTTP_CLIENT = "baragon.agent.http.client";
>, <Line: -  public static final String BARAGON_AWS_ELB_CLIENT = "baragon.aws.elb.client";
>, <Line: -  @Provides
>, <Line: -  @Singleton
>, <Line: -  @Named(BARAGON_SERVICE_HTTP_CLIENT)
>, <Line: -  public AsyncHttpClient providesHttpClient(HttpClientConfiguration config) {
>, <Line: -    AsyncHttpClientConfig.Builder builder = new AsyncHttpClientConfig.Builder();
>, <Line: -    builder.setMaxRequestRetry(config.getMaxRequestRetry());
>, <Line: -    builder.setRequestTimeoutInMs(config.getRequestTimeoutInMs());
>, <Line: -    builder.setFollowRedirects(true);
>, <Line: -    builder.setConnectionTimeoutInMs(config.getConnectionTimeoutInMs());
>, <Line: -    builder.setUserAgent(config.getUserAgent());
>, <Line: -    return new AsyncHttpClient(builder.build());
>, <Line: -  }
>, <Line: -  @Provides
>, <Line: -  @Singleton
>, <Line: -  @Named(BARAGON_AGENT_HTTP_CLIENT)
>, <Line: -  public HttpClient providesApacheHttpClient(HttpClientConfiguration config, ObjectMapper objectMapper) {
>, <Line: -    HttpConfig.Builder configBuilder = HttpConfig.newBuilder()
>, <Line: -      .setRequestTimeoutSeconds(config.getRequestTimeoutInMs() / 1000)
>, <Line: -      .setUserAgent(config.getUserAgent())
>, <Line: -      .setConnectTimeoutSeconds(config.getConnectionTimeoutInMs() / 1000)
>, <Line: -      .setFollowRedirects(true)
>, <Line: -      .setMaxRetries(config.getMaxRequestRetry())
>, <Line: -      .setObjectMapper(objectMapper);
>, <Line: -    return new ApacheHttpClient(configBuilder.build());
>, <Line: -  }
>, <Line: -  @Provides
>, <Line: -  @Named(BARAGON_AUTH_KEY)
>, <Line: -  public Optional<String> providesBaragonAuthKey(AuthConfiguration authConfiguration) {
>, <Line: -    return authConfiguration.getKey();
>, <Line: -  }
>, <Line: -  @Named(BARAGON_AWS_ELB_CLIENT)
>, <Line: -  public AmazonElasticLoadBalancingClient providesAwsElbClient(Optional<ElbConfiguration> configuration) {
>, <Line: -    if (configuration.isPresent() && configuration.get().getAwsAccessKeyId() != null && configuration.get().getAwsAccessKeySecret() != null) {
>, <Line: -      return new AmazonElasticLoadBalancingClient(new BasicAWSCredentials(configuration.get().getAwsAccessKeyId(), configuration.get().getAwsAccessKeySecret()));
>, <Line: -    } else {
>, <Line: -      return new AmazonElasticLoadBalancingClient();
>, <Line: -    }
>]