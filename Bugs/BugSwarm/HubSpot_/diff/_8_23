[<Line: +import java.util.Collections;
>, <Line: +import java.util.List;
>, <Line: +import javax.validation.Valid;
>, <Line: +import javax.validation.constraints.NotNull;
>, <Line: +import javax.validation.constraints.Pattern;
>, <Line: +  @NotNull
>, <Line: +  private final boolean noValidate;
>, <Line: +  @NotNull
>, <Line: +  private final boolean noReload;
>, <Line: +                        @JsonProperty("action") Optional<RequestAction> action,
>, <Line: +                        @JsonProperty("noValidate") boolean noValidate,
>, <Line: +                        @JsonProperty("noReload") boolean noReload) {
>, <Line: +    this.noValidate = Objects.firstNonNull(noValidate, false);
>, <Line: +    this.noReload = noReload;
>, <Line: +  }
>, <Line: +  public BaragonRequest(String loadBalancerRequestId, BaragonService loadBalancerService, List<UpstreamInfo> addUpstreams, List<UpstreamInfo> removeUpstreams, List<UpstreamInfo> replaceUpstreams, Optional<String> replaceServiceId, Optional<RequestAction> action) {
>, <Line: +    this(loadBalancerRequestId, loadBalancerService, addUpstreams, removeUpstreams, replaceUpstreams, replaceServiceId, action, false, false);
>, <Line: +    this(loadBalancerRequestId, loadBalancerService, addUpstreams, removeUpstreams, Collections.<UpstreamInfo>emptyList(),Optional.<String>absent(), Optional.of(RequestAction.UPDATE), false, false);
>, <Line: +    this(loadBalancerRequestId, loadBalancerService, addUpstreams, removeUpstreams, Collections.<UpstreamInfo>emptyList(), replaceServiceId, Optional.of(RequestAction.UPDATE), false, false);
>, <Line: +  public boolean isNoValidate() {
>, <Line: +    return noValidate;
>, <Line: +  }
>, <Line: +  public boolean isNoReload() {
>, <Line: +    return noReload;
>, <Line: +  }
>, <Line: +        ", noValidate=" + noValidate +
>, <Line: +        ", noReload=" + noReload +
>, <Line: +    if (!noValidate == request.noValidate) {
>, <Line: +      return false;
>, <Line: +    }
>, <Line: +    if (!noReload == request.noReload) {
>, <Line: +      return false;
>, <Line: +    }
>, <Line: +    result = 31 * result + (noValidate ? 1 : 0);
>, <Line: +    result = 31 * result + (noReload ? 1 : 0);
>]
[<Line: -import javax.validation.Valid;
>, <Line: -import javax.validation.constraints.NotNull;
>, <Line: -import javax.validation.constraints.Pattern;
>, <Line: -import java.util.Collections;
>, <Line: -import java.util.List;
>, <Line: -                        @JsonProperty("action") Optional<RequestAction> action) {
>, <Line: -    this(loadBalancerRequestId, loadBalancerService, addUpstreams, removeUpstreams, Collections.<UpstreamInfo>emptyList(),Optional.<String>absent(), Optional.of(RequestAction.UPDATE));
>, <Line: -    this(loadBalancerRequestId, loadBalancerService, addUpstreams, removeUpstreams, Collections.<UpstreamInfo>emptyList(), replaceServiceId, Optional.of(RequestAction.UPDATE));
>]