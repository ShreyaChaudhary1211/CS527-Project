[<Line: +import org.apache.curator.framework.CuratorFramework;
>, <Line: +import org.apache.curator.framework.api.PathAndBytesable;
>, <Line: +import org.apache.zookeeper.CreateMode;
>, <Line: +import org.apache.zookeeper.KeeperException;
>, <Line: +import org.apache.zookeeper.data.Stat;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +import com.hubspot.baragon.utils.JavaUtils;
>, <Line: +  private static final Logger LOG = LoggerFactory.getLogger(AbstractDataStore.class);
>, <Line: +  protected void log(String type, Optional<Integer> numItems, Optional<Integer> bytes, long start, String path) {
>, <Line: +    LOG.debug(String.format("%s (items: %s) (bytes: %s) in %s (%s)", type, numItems.or(1), bytes.or(0), JavaUtils.duration(start), path));
>, <Line: +  }
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +      Stat stat = curatorFramework.checkExists().forPath(path);
>, <Line: +      log("Fetched", Optional.<Integer>absent(), Optional.<Integer>absent(), start, path);
>, <Line: +      return stat != null;
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +      log("Saved", Optional.<Integer>absent(), Optional.of(serializedInfo.length), start, path);
>, <Line: +  protected <T> Optional<T> readFromZk(final String path, final Class<T> klass) {
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +        log("Fetched", Optional.<Integer>absent(), Optional.of(data.length), start, path);
>, <Line: +  protected <T> Optional<T> readFromZk(final String path, final TypeReference<T> typeReference) {
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +        log("Fetched", Optional.<Integer>absent(), Optional.of(data.length), start, path);
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +      final String result = curatorFramework.create().creatingParentsIfNeeded().forPath(path);
>, <Line: +      log("Created", Optional.<Integer>absent(), Optional.<Integer>absent(), start, path);
>, <Line: +      return result;
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +      final String result = curatorFramework.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(path);
>, <Line: +      log("Created", Optional.<Integer>absent(), Optional.<Integer>absent(), start, path);
>, <Line: +      return result;
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +      final String result = curatorFramework.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(path, serializedValue);
>, <Line: +      log("Created", Optional.<Integer>absent(), Optional.of(serializedValue.length), start, path);
>, <Line: +      return result;
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +        log("Deleted", Optional.<Integer>absent(), Optional.<Integer>absent(), start, path);
>, <Line: +        log("Deleted", Optional.<Integer>absent(), Optional.<Integer>absent(), start, path);
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +      List<String> children = curatorFramework.getChildren().forPath(path);
>, <Line: +      log("Fetched", Optional.of(children.size()), Optional.<Integer>absent(), start, path);
>, <Line: +      return children;
>, <Line: +    final long start = System.currentTimeMillis();
>, <Line: +      log("Fetched", Optional.<Integer>absent(), Optional.<Integer>absent(), start, path);
>]
[<Line: -import org.apache.curator.framework.CuratorFramework;
>, <Line: -import org.apache.curator.framework.api.PathAndBytesable;
>, <Line: -import org.apache.zookeeper.CreateMode;
>, <Line: -import org.apache.zookeeper.KeeperException;
>, <Line: -import org.apache.zookeeper.data.Stat;
>, <Line: -      return curatorFramework.checkExists().forPath(path) != null;
>, <Line: -  protected <T> Optional<T> readFromZk(String path, final Class<T> klass) {
>, <Line: -  protected <T> Optional<T> readFromZk(String path, final TypeReference<T> typeReference) {
>, <Line: -      return curatorFramework.create().creatingParentsIfNeeded().forPath(path);
>, <Line: -      return curatorFramework.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(path);
>, <Line: -      return curatorFramework.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(path, serializedValue);
>, <Line: -      return curatorFramework.getChildren().forPath(path);
>]