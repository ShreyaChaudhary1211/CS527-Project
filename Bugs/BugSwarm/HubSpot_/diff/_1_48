[<Line: +import com.amazonaws.auth.BasicAWSCredentials;
>, <Line: +import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;
>, <Line: +import com.google.common.base.Optional;
>, <Line: +import com.google.inject.name.Named;
>, <Line: +import com.hubspot.baragon.service.config.ElbConfiguration;
>, <Line: +import com.hubspot.baragon.service.listeners.AbstractLatchListener;
>, <Line: +import com.hubspot.baragon.service.listeners.ElbSyncWorkerListener;
>, <Line: +import com.hubspot.baragon.service.listeners.RequestPurgingListener;
>, <Line: +import com.hubspot.baragon.service.listeners.RequestWorkerListener;
>, <Line: +import com.ning.http.client.AsyncHttpClient;
>, <Line: +import com.ning.http.client.AsyncHttpClientConfig;
>, <Line: +import io.dropwizard.jetty.HttpConnectorFactory;
>, <Line: +import io.dropwizard.server.SimpleServerFactory;
>, <Line: +import org.apache.curator.framework.recipes.leader.LeaderLatch;
>, <Line: +  public static final String BARAGON_SERVICE_HTTP_CLIENT = "baragon.service.http.client";
>, <Line: +  public static final String BARAGON_AWS_ELB_CLIENT = "baragon.aws.elb.client";
>, <Line: +    latchBinder.addBinding().to(RequestPurgingListener.class);
>, <Line: +    return Executors.newScheduledThreadPool(3);
>, <Line: +  @Provides
>, <Line: +  @Singleton
>, <Line: +  @Named(BARAGON_SERVICE_HTTP_CLIENT)
>, <Line: +  public AsyncHttpClient providesHttpClient(HttpClientConfiguration config) {
>, <Line: +    AsyncHttpClientConfig.Builder builder = new AsyncHttpClientConfig.Builder();
>, <Line: +    builder.setMaxRequestRetry(config.getMaxRequestRetry());
>, <Line: +    builder.setRequestTimeoutInMs(config.getRequestTimeoutInMs());
>, <Line: +    builder.setFollowRedirects(true);
>, <Line: +    builder.setConnectionTimeoutInMs(config.getConnectionTimeoutInMs());
>, <Line: +    builder.setUserAgent(config.getUserAgent());
>, <Line: +    return new AsyncHttpClient(builder.build());
>, <Line: +  }
>, <Line: +  @Provides
>, <Line: +  @Named(BARAGON_AWS_ELB_CLIENT)
>, <Line: +  public AmazonElasticLoadBalancingClient providesAwsElbClient(Optional<ElbConfiguration> configuration) {
>, <Line: +    if (configuration.isPresent() && configuration.get().getAwsAccessKeyId() != null && configuration.get().getAwsAccessKeySecret() != null) {
>, <Line: +      return new AmazonElasticLoadBalancingClient(new BasicAWSCredentials(configuration.get().getAwsAccessKeyId(), configuration.get().getAwsAccessKeySecret()));
>, <Line: +    } else {
>, <Line: +      return new AmazonElasticLoadBalancingClient();
>, <Line: +    }
>, <Line: +  }
>]
[<Line: -import com.google.common.base.Optional;
>, <Line: -import com.hubspot.baragon.config.ElbConfiguration;
>, <Line: -import com.hubspot.baragon.service.listeners.AbstractLatchListener;
>, <Line: -import com.hubspot.baragon.service.listeners.ElbSyncWorkerListener;
>, <Line: -import com.hubspot.baragon.service.listeners.RequestWorkerListener;
>, <Line: -import io.dropwizard.jetty.HttpConnectorFactory;
>, <Line: -import io.dropwizard.server.SimpleServerFactory;
>, <Line: -import org.apache.curator.framework.recipes.leader.LeaderLatch;
>, <Line: -import com.google.inject.name.Named;
>, <Line: -    return Executors.newScheduledThreadPool(2);
>]