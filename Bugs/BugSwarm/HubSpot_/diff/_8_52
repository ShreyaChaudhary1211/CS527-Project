[<Line: +package com.hubspot.baragon.service.config;
>, <Line: +import javax.validation.constraints.Min;
>, <Line: +import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
>, <Line: +import com.fasterxml.jackson.annotation.JsonProperty;
>, <Line: +@JsonIgnoreProperties( ignoreUnknown = true )
>, <Line: +public class HistoryConfiguration {
>, <Line: +  @JsonProperty("enabled")
>, <Line: +  boolean enabled = true;
>, <Line: +  @JsonProperty("workerInitialDelayHours")
>, <Line: +  int workerInitialDelayHours = 0;
>, <Line: +  @JsonProperty("purgeOldRequests")
>, <Line: +  boolean purgeOldRequests = false;
>, <Line: +  @JsonProperty("purgeOldRequestsAfterDays")
>, <Line: +  @Min(1)
>, <Line: +  int purgeOldRequestsAfterDays = 30;
>, <Line: +  @JsonProperty("purgeWhenDateNotFound")
>, <Line: +  boolean purgeWhenDateNotFound = false;
>, <Line: +  @JsonProperty("purgeEveryHours")
>, <Line: +  @Min(1)
>, <Line: +  int purgeEveryHours = 24;
>, <Line: +  @JsonProperty("maxRequestsPerService")
>, <Line: +  int maxRequestsPerService = 1000;
>, <Line: +  @JsonProperty("maxResponsesToFetch")
>, <Line: +  int maxResponsesToFetch = 1000;
>, <Line: +  public boolean isEnabled() {
>, <Line: +    return enabled;
>, <Line: +  }
>, <Line: +  public void setEnabled(boolean enabled) {
>, <Line: +    this.enabled = enabled;
>, <Line: +  }
>, <Line: +  public int getWorkerInitialDelayHours() {
>, <Line: +    return workerInitialDelayHours;
>, <Line: +  }
>, <Line: +  public void setWorkerInitialDelayHours(int workerInitialDelayHours) {
>, <Line: +    this.workerInitialDelayHours = workerInitialDelayHours;
>, <Line: +  }
>, <Line: +  public boolean isPurgeOldRequests() {
>, <Line: +    return purgeOldRequests;
>, <Line: +  }
>, <Line: +  public void setPurgeOldRequests(boolean purgeOldRequests) {
>, <Line: +    this.purgeOldRequests = purgeOldRequests;
>, <Line: +  }
>, <Line: +  public int getPurgeOldRequestsAfterDays() {
>, <Line: +    return purgeOldRequestsAfterDays;
>, <Line: +  }
>, <Line: +  public boolean isPurgeWhenDateNotFound() {
>, <Line: +    return purgeWhenDateNotFound;
>, <Line: +  }
>, <Line: +  public void setPurgeWhenDateNotFound(boolean purgeWhenDateNotFound) {
>, <Line: +    this.purgeWhenDateNotFound = purgeWhenDateNotFound;
>, <Line: +  }
>, <Line: +  public void setPurgeOldRequestsAfterDays(int purgeOldRequestsAfterDays) {
>, <Line: +    this.purgeOldRequestsAfterDays = purgeOldRequestsAfterDays;
>, <Line: +  }
>, <Line: +  public int getPurgeEveryHours() {
>, <Line: +    return purgeEveryHours;
>, <Line: +  }
>, <Line: +  public void setPurgeEveryHours(int purgeEveryHours) {
>, <Line: +    this.purgeEveryHours = purgeEveryHours;
>, <Line: +  }
>, <Line: +  public int getMaxRequestsPerService() {
>, <Line: +    return maxRequestsPerService;
>, <Line: +  }
>, <Line: +  public void setMaxRequestsPerService(int maxRequestsPerService) {
>, <Line: +    this.maxRequestsPerService = maxRequestsPerService;
>, <Line: +  }
>, <Line: +  public int getMaxResponsesToFetch() {
>, <Line: +    return maxResponsesToFetch;
>, <Line: +  }
>, <Line: +  public void setMaxResponsesToFetch(int maxResponsesToFetch) {
>, <Line: +    this.maxResponsesToFetch = maxResponsesToFetch;
>, <Line: +  }
>, <Line: +}
>]
[]