[<Line: +package org.mp4parser.muxer.tracks.h264;
>, <Line: +import org.mp4parser.muxer.tracks.h264.parsing.model.SeqParameterSet;
>, <Line: +import org.mp4parser.muxer.tracks.h264.parsing.read.CAVLCReader;
>, <Line: +import java.io.ByteArrayInputStream;
>, <Line: +import java.io.IOException;
>, <Line: +import java.io.InputStream;
>, <Line: +/**
>, <Line: + * Created by sannies on 15.08.2015.
>, <Line: + */
>, <Line: +public class SEIMessage {
>, <Line: +    int payloadType = 0;
>, <Line: +    int payloadSize = 0;
>, <Line: +    boolean removal_delay_flag;
>, <Line: +    int cpb_removal_delay;
>, <Line: +    int dpb_removal_delay;
>, <Line: +    boolean clock_timestamp_flag;
>, <Line: +    int pic_struct;
>, <Line: +    int ct_type;
>, <Line: +    int nuit_field_based_flag;
>, <Line: +    int counting_type;
>, <Line: +    int full_timestamp_flag;
>, <Line: +    int discontinuity_flag;
>, <Line: +    int cnt_dropped_flag;
>, <Line: +    int n_frames;
>, <Line: +    int seconds_value;
>, <Line: +    int minutes_value;
>, <Line: +    int hours_value;
>, <Line: +    int time_offset_length;
>, <Line: +    int time_offset;
>, <Line: +    SeqParameterSet sps;
>, <Line: +    public SEIMessage(InputStream is, SeqParameterSet sps) throws IOException {
>, <Line: +        this.sps = sps;
>, <Line: +        is.read();
>, <Line: +        int datasize = is.available();
>, <Line: +        int read = 0;
>, <Line: +        while (read < datasize) {
>, <Line: +            payloadType = 0;
>, <Line: +            payloadSize = 0;
>, <Line: +            int last_payload_type_bytes = is.read();
>, <Line: +            read++;
>, <Line: +            while (last_payload_type_bytes == 0xff) {
>, <Line: +                payloadType += last_payload_type_bytes;
>, <Line: +                last_payload_type_bytes = is.read();
>, <Line: +                read++;
>, <Line: +            }
>, <Line: +            payloadType += last_payload_type_bytes;
>, <Line: +            int last_payload_size_bytes = is.read();
>, <Line: +            read++;
>, <Line: +            while (last_payload_size_bytes == 0xff) {
>, <Line: +                payloadSize += last_payload_size_bytes;
>, <Line: +                last_payload_size_bytes = is.read();
>, <Line: +                read++;
>, <Line: +            }
>, <Line: +            payloadSize += last_payload_size_bytes;
>, <Line: +            if (datasize - read >= payloadSize) {
>, <Line: +                if (payloadType == 1) { // pic_timing is what we are interested in!
>, <Line: +                    if (sps.vuiParams != null && (sps.vuiParams.nalHRDParams != null || sps.vuiParams.vclHRDParams != null || sps.vuiParams.pic_struct_present_flag)) {
>, <Line: +                        byte[] data = new byte[payloadSize];
>, <Line: +                        is.read(data);
>, <Line: +                        read += payloadSize;
>, <Line: +                        CAVLCReader reader = new CAVLCReader(new ByteArrayInputStream(data));
>, <Line: +                        if (sps.vuiParams.nalHRDParams != null || sps.vuiParams.vclHRDParams != null) {
>, <Line: +                            removal_delay_flag = true;
>, <Line: +                            cpb_removal_delay = reader.readU(sps.vuiParams.nalHRDParams.cpb_removal_delay_length_minus1 + 1, "SEI: cpb_removal_delay");
>, <Line: +                            dpb_removal_delay = reader.readU(sps.vuiParams.nalHRDParams.dpb_output_delay_length_minus1 + 1, "SEI: dpb_removal_delay");
>, <Line: +                        } else {
>, <Line: +                            removal_delay_flag = false;
>, <Line: +                        }
>, <Line: +                        if (sps.vuiParams.pic_struct_present_flag) {
>, <Line: +                            pic_struct = reader.readU(4, "SEI: pic_struct");
>, <Line: +                            int numClockTS;
>, <Line: +                            switch (pic_struct) {
>, <Line: +                                case 0:
>, <Line: +                                case 1:
>, <Line: +                                case 2:
>, <Line: +                                default:
>, <Line: +                                    numClockTS = 1;
>, <Line: +                                    break;
>, <Line: +                                case 3:
>, <Line: +                                case 4:
>, <Line: +                                case 7:
>, <Line: +                                    numClockTS = 2;
>, <Line: +                                    break;
>, <Line: +                                case 5:
>, <Line: +                                case 6:
>, <Line: +                                case 8:
>, <Line: +                                    numClockTS = 3;
>, <Line: +                                    break;
>, <Line: +                            }
>, <Line: +                            for (int i = 0; i < numClockTS; i++) {
>, <Line: +                                clock_timestamp_flag = reader.readBool("pic_timing SEI: clock_timestamp_flag[" + i + "]");
>, <Line: +                                if (clock_timestamp_flag) {
>, <Line: +                                    ct_type = reader.readU(2, "pic_timing SEI: ct_type");
>, <Line: +                                    nuit_field_based_flag = reader.readU(1, "pic_timing SEI: nuit_field_based_flag");
>, <Line: +                                    counting_type = reader.readU(5, "pic_timing SEI: counting_type");
>, <Line: +                                    full_timestamp_flag = reader.readU(1, "pic_timing SEI: full_timestamp_flag");
>, <Line: +                                    discontinuity_flag = reader.readU(1, "pic_timing SEI: discontinuity_flag");
>, <Line: +                                    cnt_dropped_flag = reader.readU(1, "pic_timing SEI: cnt_dropped_flag");
>, <Line: +                                    n_frames = reader.readU(8, "pic_timing SEI: n_frames");
>, <Line: +                                    if (full_timestamp_flag == 1) {
>, <Line: +                                        seconds_value = reader.readU(6, "pic_timing SEI: seconds_value");
>, <Line: +                                        minutes_value = reader.readU(6, "pic_timing SEI: minutes_value");
>, <Line: +                                        hours_value = reader.readU(5, "pic_timing SEI: hours_value");
>, <Line: +                                    } else {
>, <Line: +                                        if (reader.readBool("pic_timing SEI: seconds_flag")) {
>, <Line: +                                            seconds_value = reader.readU(6, "pic_timing SEI: seconds_value");
>, <Line: +                                            if (reader.readBool("pic_timing SEI: minutes_flag")) {
>, <Line: +                                                minutes_value = reader.readU(6, "pic_timing SEI: minutes_value");
>, <Line: +                                                if (reader.readBool("pic_timing SEI: hours_flag")) {
>, <Line: +                                                    hours_value = reader.readU(5, "pic_timing SEI: hours_value");
>, <Line: +                                                }
>, <Line: +                                            }
>, <Line: +                                        }
>, <Line: +                                    }
>, <Line: +                                    if (true) {
>, <Line: +                                        if (sps.vuiParams.nalHRDParams != null) {
>, <Line: +                                            time_offset_length = sps.vuiParams.nalHRDParams.time_offset_length;
>, <Line: +                                        } else if (sps.vuiParams.vclHRDParams != null) {
>, <Line: +                                            time_offset_length = sps.vuiParams.vclHRDParams.time_offset_length;
>, <Line: +                                        } else {
>, <Line: +                                            time_offset_length = 24;
>, <Line: +                                        }
>, <Line: +                                        time_offset = reader.readU(24, "pic_timing SEI: time_offset");
>, <Line: +                                    }
>, <Line: +                                }
>, <Line: +                            }
>, <Line: +                        }
>, <Line: +                    } else {
>, <Line: +                        for (int i = 0; i < payloadSize; i++) {
>, <Line: +                            is.read();
>, <Line: +                            read++;
>, <Line: +                        }
>, <Line: +                    }
>, <Line: +                } else {
>, <Line: +                    for (int i = 0; i < payloadSize; i++) {
>, <Line: +                        is.read();
>, <Line: +                        read++;
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            } else {
>, <Line: +                read = datasize;
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public String toString() {
>, <Line: +        String out = "SEIMessage{" +
>, <Line: +                "payloadType=" + payloadType +
>, <Line: +                ", payloadSize=" + payloadSize;
>, <Line: +        if (payloadType == 1) {
>, <Line: +            if (sps.vuiParams.nalHRDParams != null || sps.vuiParams.vclHRDParams != null) {
>, <Line: +                out += ", cpb_removal_delay=" + cpb_removal_delay +
>, <Line: +                        ", dpb_removal_delay=" + dpb_removal_delay;
>, <Line: +            }
>, <Line: +            if (sps.vuiParams.pic_struct_present_flag) {
>, <Line: +                out += ", pic_struct=" + pic_struct;
>, <Line: +                if (clock_timestamp_flag) {
>, <Line: +                    out += ", ct_type=" + ct_type +
>, <Line: +                            ", nuit_field_based_flag=" + nuit_field_based_flag +
>, <Line: +                            ", counting_type=" + counting_type +
>, <Line: +                            ", full_timestamp_flag=" + full_timestamp_flag +
>, <Line: +                            ", discontinuity_flag=" + discontinuity_flag +
>, <Line: +                            ", cnt_dropped_flag=" + cnt_dropped_flag +
>, <Line: +                            ", n_frames=" + n_frames +
>, <Line: +                            ", seconds_value=" + seconds_value +
>, <Line: +                            ", minutes_value=" + minutes_value +
>, <Line: +                            ", hours_value=" + hours_value +
>, <Line: +                            ", time_offset_length=" + time_offset_length +
>, <Line: +                            ", time_offset=" + time_offset;
>, <Line: +                }
>, <Line: +            }
>, <Line: +        }
>, <Line: +        out += '}';
>, <Line: +        return out;
>, <Line: +    }
>, <Line: +}
>]
[]