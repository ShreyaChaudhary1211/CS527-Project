[]
[<Line: -package com.mp4parser.streaming;
>, <Line: -import com.coremedia.iso.boxes.SampleDescriptionBox;
>, <Line: -import com.coremedia.iso.boxes.TrackHeaderBox;
>, <Line: -import com.googlecode.mp4parser.authoring.Track;
>, <Line: -import java.util.concurrent.BlockingQueue;
>, <Line: -public interface StreamingTrack {
>, <Line: -    long getTimescale();
>, <Line: -    BlockingQueue<StreamingSample> getSamples();
>, <Line: -    /**
>, <Line: -     * Returns false if and only if the BlockingQueue returned by getSamples() is empty
>, <Line: -     * and the streams source is depleted.
>, <Line: -     *
>, <Line: -     * @return false if we can stop processing
>, <Line: -     */
>, <Line: -    boolean hasMoreSamples();
>, <Line: -    /**
>, <Line: -     * Returns the original TrackHeaderBox. Changes on the returned box should always
>, <Line: -     * be visible. Do not return a copy or create on the fly.
>, <Line: -     *
>, <Line: -     * @return the original TrackHeaderBox
>, <Line: -     */
>, <Line: -    TrackHeaderBox getTrackHeaderBox();
>, <Line: -    String getHandler();
>, <Line: -    String getLanguage();
>, <Line: -    SampleDescriptionBox getSampleDescriptionBox();
>, <Line: -    <T extends TrackExtension> T getTrackExtension(Class<T> clazz);
>, <Line: -    void addTrackExtension(TrackExtension trackExtension);
>, <Line: -    void removeTrackExtension(Class<? extends TrackExtension> clazz);
>, <Line: -}
>]