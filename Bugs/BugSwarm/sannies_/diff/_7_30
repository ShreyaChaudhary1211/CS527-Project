[<Line: +import org.mp4parser.Container;
>, <Line: +import org.mp4parser.muxer.Movie;
>, <Line: +import org.mp4parser.muxer.Track;
>, <Line: +import org.mp4parser.muxer.builder.DefaultMp4Builder;
>, <Line: +import org.mp4parser.muxer.container.mp4.MovieCreator;
>, <Line: +import org.mp4parser.muxer.tracks.ClippedTrack;
>, <Line: +    public ServeMp4(Movie movie) {
>, <Line: +        this.movie = movie;
>, <Line: +    }
>, <Line: +    private static double correctTimeToSyncSample(Track track, double cutHere, boolean next) {
>, <Line: +        double[] timeOfSyncSamples = new double[track.getSyncSamples().length];
>, <Line: +        long currentSample = 0;
>, <Line: +        double currentTime = 0;
>, <Line: +        for (int i = 0; i < track.getSampleDurations().length; i++) {
>, <Line: +            long delta = track.getSampleDurations()[i];
>, <Line: +            if (Arrays.binarySearch(track.getSyncSamples(), currentSample + 1) >= 0) {
>, <Line: +                // samples always start with 1 but we start with zero therefore +1
>, <Line: +                timeOfSyncSamples[Arrays.binarySearch(track.getSyncSamples(), currentSample + 1)] = currentTime;
>, <Line: +            }
>, <Line: +            currentTime += (double) delta / (double) track.getTrackMetaData().getTimescale();
>, <Line: +            currentSample++;
>, <Line: +        }
>, <Line: +        double previous = 0;
>, <Line: +        for (double timeOfSyncSample : timeOfSyncSamples) {
>, <Line: +            if (timeOfSyncSample > cutHere) {
>, <Line: +                if (next) {
>, <Line: +                    return timeOfSyncSample;
>, <Line: +                } else {
>, <Line: +                    return previous;
>, <Line: +                }
>, <Line: +            }
>, <Line: +            previous = timeOfSyncSample;
>, <Line: +        }
>, <Line: +        return timeOfSyncSamples[timeOfSyncSamples.length - 1];
>, <Line: +            movie.addTrack(new ClippedTrack(track, startSample, endSample));
>]
[<Line: -import com.coremedia.iso.boxes.Container;
>, <Line: -import com.googlecode.mp4parser.authoring.Movie;
>, <Line: -import com.googlecode.mp4parser.authoring.Track;
>, <Line: -import com.googlecode.mp4parser.authoring.builder.DefaultMp4Builder;
>, <Line: -import com.googlecode.mp4parser.authoring.container.mp4.MovieCreator;
>, <Line: -import com.googlecode.mp4parser.authoring.tracks.CroppedTrack;
>, <Line: -    public ServeMp4(Movie movie) {
>, <Line: -        this.movie = movie;
>, <Line: -            movie.addTrack(new CroppedTrack(track, startSample, endSample));
>, <Line: -    private static double correctTimeToSyncSample(Track track, double cutHere, boolean next) {
>, <Line: -        double[] timeOfSyncSamples = new double[track.getSyncSamples().length];
>, <Line: -        long currentSample = 0;
>, <Line: -        double currentTime = 0;
>, <Line: -        for (int i = 0; i < track.getSampleDurations().length; i++) {
>, <Line: -            long delta = track.getSampleDurations()[i];
>, <Line: -            if (Arrays.binarySearch(track.getSyncSamples(), currentSample + 1) >= 0) {
>, <Line: -                // samples always start with 1 but we start with zero therefore +1
>, <Line: -                timeOfSyncSamples[Arrays.binarySearch(track.getSyncSamples(), currentSample + 1)] = currentTime;
>, <Line: -            }
>, <Line: -            currentTime += (double) delta / (double) track.getTrackMetaData().getTimescale();
>, <Line: -            currentSample++;
>, <Line: -        }
>, <Line: -        double previous = 0;
>, <Line: -        for (double timeOfSyncSample : timeOfSyncSamples) {
>, <Line: -            if (timeOfSyncSample > cutHere) {
>, <Line: -                if (next) {
>, <Line: -                    return timeOfSyncSample;
>, <Line: -                } else {
>, <Line: -                    return previous;
>, <Line: -                }
>, <Line: -            }
>, <Line: -            previous = timeOfSyncSample;
>, <Line: -        }
>, <Line: -        return timeOfSyncSamples[timeOfSyncSamples.length - 1];
>, <Line: -    }
>]