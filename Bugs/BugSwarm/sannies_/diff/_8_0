[<Line: +        xmlSubtitleSampleEntry.setNamespace(join(",", getAllNamespaces(ttmls.get(0))));
>, <Line: +        xmlSubtitleSampleEntry.setAuxiliaryMimeTypes(join(",", new ArrayList<String>(mimeTypes).toArray(new String[mimeTypes.size()])));
>, <Line: +    private static String join(String joiner, String[] i) {
>, <Line: +        StringBuilder result = new StringBuilder();
>, <Line: +        for (String s : i) {
>, <Line: +            result.append(s).append(joiner);
>, <Line: +        }
>, <Line: +        result.setLength(result.length()-1);
>, <Line: +        return result.toString();
>, <Line: +    }
>, <Line: +    private static long latestTimestamp(Document document) {
>, <Line: +        XPathFactory xPathfactory = XPathFactory.newInstance();
>, <Line: +        XPath xpath = xPathfactory.newXPath();
>, <Line: +        xpath.setNamespaceContext(TtmlHelpers.NAMESPACE_CONTEXT);
>, <Line: +        try {
>, <Line: +            XPathExpression xp = xpath.compile("//*[name()='p']");
>, <Line: +            NodeList timedNodes = (NodeList) xp.evaluate(document, XPathConstants.NODESET);
>, <Line: +            long lastTimeStamp = 0;
>, <Line: +            for (int i = 0; i < timedNodes.getLength(); i++) {
>, <Line: +                lastTimeStamp = Math.max(getEndTime(timedNodes.item(i)), lastTimeStamp);
>, <Line: +            }
>, <Line: +            return lastTimeStamp;
>, <Line: +        } catch (XPathExpressionException e) {
>, <Line: +            throw new RuntimeException(e);
>, <Line: +        }
>, <Line: +    }
>]
[<Line: -        xmlSubtitleSampleEntry.setNamespace(String.join(",", getAllNamespaces(ttmls.get(0))));
>, <Line: -        xmlSubtitleSampleEntry.setAuxiliaryMimeTypes(String.join(",", new ArrayList<String>(mimeTypes).toArray(new String[mimeTypes.size()])));
>]