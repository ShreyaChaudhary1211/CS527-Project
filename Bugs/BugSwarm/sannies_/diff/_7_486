[<Line: +package org.mp4parser.muxer.samples;
>, <Line: +import org.mp4parser.Box;
>, <Line: +import org.mp4parser.Container;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.*;
>, <Line: +import org.mp4parser.muxer.RandomAccessSource;
>, <Line: +import org.mp4parser.muxer.Sample;
>, <Line: +import org.mp4parser.tools.Offsets;
>, <Line: +import org.mp4parser.tools.Path;
>, <Line: +import static org.mp4parser.tools.CastUtils.l2i;
>, <Line: +    Container isofile;
>, <Line: +    HashMap<TrackFragmentBox, MovieFragmentBox> traf2moof = new HashMap<TrackFragmentBox, MovieFragmentBox>();
>, <Line: +    private RandomAccessSource randomAccess;
>, <Line: +    public FragmentedMp4SampleList(long track, Container isofile, RandomAccessSource randomAccess) {
>, <Line: +        this.isofile = isofile;
>, <Line: +        this.randomAccess = randomAccess;
>, <Line: +        List<TrackBox> tbs = Path.getPaths(isofile, "moov[0]/trak");
>, <Line: +        List<TrackExtendsBox> trexs = Path.getPaths(isofile, "moov[0]/mvex[0]/trex");
>, <Line: +        for (MovieFragmentBox moof : isofile.getBoxes(MovieFragmentBox.class)) {
>, <Line: +                    traf2moof.put(trackFragmentBox, moof);
>, <Line: +        for (Box b : boxes) {
>, <Line: +        MovieFragmentBox moof = traf2moof.get(trackFragmentBox);
>, <Line: +                            //if (tfhd.isDefaultBaseIsMoof()) {
>, <Line: +                            offset += Offsets.find(isofile, moof, 0);
>, <Line: +                            //} else {
>, <Line: +                            //    throw new RuntimeException("Rethink this case");
>, <Line: +                            //}
>, <Line: +                            trunData = randomAccess.get(offset, size);
>, <Line: +                        sampleSize = trackRunEntries.get(sampleIndexWithInTraf - previousTrunsSize).getSampleSize();
>, <Line: +                            return (ByteBuffer) ((ByteBuffer) finalTrunData.position(finalOffset)).slice().limit(l2i(sampleSize));
>, <Line: +        for (MovieFragmentBox moof : isofile.getBoxes(MovieFragmentBox.class)) {
>]
[<Line: -package com.googlecode.mp4parser.authoring.samples;
>, <Line: -import com.coremedia.iso.IsoFile;
>, <Line: -import com.coremedia.iso.boxes.Box;
>, <Line: -import com.coremedia.iso.boxes.Container;
>, <Line: -import com.coremedia.iso.boxes.TrackBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.*;
>, <Line: -import com.googlecode.mp4parser.authoring.Sample;
>, <Line: -import com.googlecode.mp4parser.util.Path;
>, <Line: -import static com.googlecode.mp4parser.util.CastUtils.l2i;
>, <Line: -/**
>, <Line: - * Created by sannies on 25.05.13.
>, <Line: - */
>, <Line: -    Container topLevel;
>, <Line: -    IsoFile[] fragments;
>, <Line: -    public FragmentedMp4SampleList(long track, Container topLevel, IsoFile... fragments) {
>, <Line: -        this.topLevel = topLevel;
>, <Line: -        this.fragments = fragments;
>, <Line: -        List<TrackBox> tbs = Path.getPaths(topLevel, "moov[0]/trak");
>, <Line: -        List<TrackExtendsBox> trexs = Path.getPaths(topLevel, "moov[0]/mvex[0]/trex");
>, <Line: -        for (MovieFragmentBox moof : topLevel.getBoxes(MovieFragmentBox.class)) {
>, <Line: -        if (fragments != null) {
>, <Line: -            for (IsoFile fragment : fragments) {
>, <Line: -                for (MovieFragmentBox moof : fragment.getBoxes(MovieFragmentBox.class)) {
>, <Line: -                    for (TrackFragmentBox trackFragmentBox : moof.getBoxes(TrackFragmentBox.class)) {
>, <Line: -                        if (trackFragmentBox.getTrackFragmentHeaderBox().getTrackId() == trackBox.getTrackHeaderBox().getTrackId()) {
>, <Line: -                            trafs.add(trackFragmentBox);
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                }
>, <Line: -            }
>, <Line: -        }
>, <Line: -        for (int i = 0; i < boxes.size(); i++) {
>, <Line: -            Box b = boxes.get(i);
>, <Line: -        MovieFragmentBox moof = ((MovieFragmentBox) trackFragmentBox.getParent());
>, <Line: -                        Container base;
>, <Line: -                            base = moof.getParent();
>, <Line: -                            base = moof;
>, <Line: -                            //System.err.println("Mapped trun - offset: " + offset + " - size: " + size);
>, <Line: -                            trunData = base.getByteBuffer(offset, size);
>, <Line: -                        sampleSize = trackRunEntries.get(sampleIndexWithInTraf- previousTrunsSize).getSampleSize();
>, <Line: -                            return (ByteBuffer) ((ByteBuffer)finalTrunData.position(finalOffset)).slice().limit(l2i(sampleSize));
>, <Line: -        for (MovieFragmentBox moof : topLevel.getBoxes(MovieFragmentBox.class)) {
>, <Line: -        for (IsoFile fragment : fragments) {
>, <Line: -            for (MovieFragmentBox moof : fragment.getBoxes(MovieFragmentBox.class)) {
>, <Line: -                for (TrackFragmentBox trackFragmentBox : moof.getBoxes(TrackFragmentBox.class)) {
>, <Line: -                    if (trackFragmentBox.getTrackFragmentHeaderBox().getTrackId() == trackBox.getTrackHeaderBox().getTrackId()) {
>, <Line: -                        for (TrackRunBox trackRunBox : trackFragmentBox.getBoxes(TrackRunBox.class)) {
>, <Line: -                            i += trackRunBox.getSampleCount();
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                }
>, <Line: -            }
>, <Line: -        }
>]