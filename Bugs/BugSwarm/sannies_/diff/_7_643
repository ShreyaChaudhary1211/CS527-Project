[<Line: +package org.mp4parser.streaming.input.mp4;
>, <Line: +import java.io.IOException;
>, <Line: +import java.io.OutputStream;
>, <Line: +import java.util.Arrays;
>, <Line: +import static org.mp4parser.tools.CastUtils.l2i;
>, <Line: +public class DiscardingByteArrayOutputStream extends OutputStream {
>, <Line: +    /**
>, <Line: +     * The buffer where data is stored.
>, <Line: +     */
>, <Line: +    protected byte buf[];
>, <Line: +    /**
>, <Line: +     * The number of valid bytes in the buffer.
>, <Line: +     */
>, <Line: +    protected int count;
>, <Line: +    protected long startOffset = 0;
>, <Line: +    /**
>, <Line: +     * Creates a new byte array output stream. The buffer capacity is
>, <Line: +     * initially 32 bytes, though its size increases if necessary.
>, <Line: +     */
>, <Line: +    public DiscardingByteArrayOutputStream() {
>, <Line: +        this(32);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Creates a new byte array output stream, with a buffer capacity of
>, <Line: +     * the specified size, in bytes.
>, <Line: +     *
>, <Line: +     * @param size the initial size.
>, <Line: +     * @throws IllegalArgumentException if size is negative.
>, <Line: +     */
>, <Line: +    public DiscardingByteArrayOutputStream(int size) {
>, <Line: +        if (size < 0) {
>, <Line: +            throw new IllegalArgumentException("Negative initial size: "
>, <Line: +                    + size);
>, <Line: +        }
>, <Line: +        buf = new byte[size];
>, <Line: +    }
>, <Line: +    public byte[] get(long start, int count) {
>, <Line: +        byte[] result = new byte[count];
>, <Line: +        try {
>, <Line: +            System.arraycopy(buf, l2i(start - startOffset), result, 0, count);
>, <Line: +        } catch (ArrayIndexOutOfBoundsException e) {
>, <Line: +            System.out.println("start: " + start + " count: " + count + " startOffset:" + startOffset + " count:" + count + " len(buf):" + buf.length + " (start - startOffset):" + (start - startOffset));
>, <Line: +            throw e;
>, <Line: +        }
>, <Line: +        return result;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Increases the capacity if necessary to ensure that it can hold
>, <Line: +     * at least the number of elements specified by the minimum
>, <Line: +     * capacity argument.
>, <Line: +     *
>, <Line: +     * @param minCapacity the desired minimum capacity
>, <Line: +     * @throws OutOfMemoryError if {@code minCapacity < 0}.  This is
>, <Line: +     *                          interpreted as a request for the unsatisfiably large capacity
>, <Line: +     *                          {@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.
>, <Line: +     */
>, <Line: +    private void ensureCapacity(int minCapacity) {
>, <Line: +        // overflow-conscious code
>, <Line: +        if (minCapacity - buf.length > 0)
>, <Line: +            grow(minCapacity);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Increases the capacity to ensure that it can hold at least the
>, <Line: +     * number of elements specified by the minimum capacity argument.
>, <Line: +     *
>, <Line: +     * @param minCapacity the desired minimum capacity
>, <Line: +     */
>, <Line: +    private void grow(int minCapacity) {
>, <Line: +        // overflow-conscious code
>, <Line: +        int oldCapacity = buf.length;
>, <Line: +        int newCapacity = oldCapacity << 1;
>, <Line: +        if (newCapacity - minCapacity < 0)
>, <Line: +            newCapacity = minCapacity;
>, <Line: +        if (newCapacity < 0) {
>, <Line: +            if (minCapacity < 0) // overflow
>, <Line: +                throw new OutOfMemoryError();
>, <Line: +            newCapacity = Integer.MAX_VALUE;
>, <Line: +        }
>, <Line: +        buf = Arrays.copyOf(buf, newCapacity);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Writes the specified byte to this byte array output stream.
>, <Line: +     *
>, <Line: +     * @param b the byte to be written.
>, <Line: +     */
>, <Line: +    public synchronized void write(int b) {
>, <Line: +        ensureCapacity(count + 1);
>, <Line: +        buf[count] = (byte) b;
>, <Line: +        count += 1;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Writes <code>len</code> bytes from the specified byte array
>, <Line: +     * starting at offset <code>off</code> to this byte array output stream.
>, <Line: +     *
>, <Line: +     * @param b   the data.
>, <Line: +     * @param off the start offset in the data.
>, <Line: +     * @param len the number of bytes to write.
>, <Line: +     */
>, <Line: +    public synchronized void write(byte b[], int off, int len) {
>, <Line: +        if ((off < 0) || (off > b.length) || (len < 0) ||
>, <Line: +                ((off + len) - b.length > 0)) {
>, <Line: +            throw new IndexOutOfBoundsException();
>, <Line: +        }
>, <Line: +        ensureCapacity(count + len);
>, <Line: +        System.arraycopy(b, off, buf, count, len);
>, <Line: +        count += len;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Resets the <code>count</code> field of this byte array output
>, <Line: +     * stream to zero, so that all currently accumulated output in the
>, <Line: +     * output stream is discarded. The output stream can be used again,
>, <Line: +     * reusing the already allocated buffer space.
>, <Line: +     *
>, <Line: +     * @see java.io.ByteArrayInputStream#count
>, <Line: +     */
>, <Line: +    public synchronized void reset() {
>, <Line: +        count = 0;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Creates a newly allocated byte array. Its size is the current
>, <Line: +     * size of this output stream and the valid contents of the buffer
>, <Line: +     * have been copied into it.
>, <Line: +     *
>, <Line: +     * @return the current contents of this output stream, as a byte array.
>, <Line: +     * @see java.io.ByteArrayOutputStream#size()
>, <Line: +     */
>, <Line: +    public synchronized byte toByteArray()[] {
>, <Line: +        return Arrays.copyOf(buf, count);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Returns the current size of the buffer.
>, <Line: +     *
>, <Line: +     * @return the value of the <code>count</code> field, which is the number
>, <Line: +     * of valid bytes in this output stream.
>, <Line: +     * @see java.io.ByteArrayOutputStream#count
>, <Line: +     */
>, <Line: +    public synchronized int size() {
>, <Line: +        return count;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Converts the buffer's contents into a string decoding bytes using the
>, <Line: +     * platform's default character set. The length of the new <tt>String</tt>
>, <Line: +     * is a function of the character set, and hence may not be equal to the
>, <Line: +     * size of the buffer.
>, <Line: +     * This method always replaces malformed-input and unmappable-character
>, <Line: +     * sequences with the default replacement string for the platform's
>, <Line: +     * default character set. The {@linkplain java.nio.charset.CharsetDecoder}
>, <Line: +     * class should be used when more control over the decoding process is
>, <Line: +     * required.
>, <Line: +     *
>, <Line: +     * @return String decoded from the buffer's contents.
>, <Line: +     * @since JDK1.1
>, <Line: +     */
>, <Line: +    public synchronized String toString() {
>, <Line: +        return new String(buf, 0, count);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in
>, <Line: +     * this class can be called after the stream has been closed without
>, <Line: +     * generating an <tt>IOException</tt>.
>, <Line: +     */
>, <Line: +    public void close() throws IOException {
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Returns the last index that is available.
>, <Line: +     *
>, <Line: +     * @return the overall size (not taking discarded bytes into account)
>, <Line: +     */
>, <Line: +    public synchronized long available() {
>, <Line: +        return startOffset + count;
>, <Line: +    }
>, <Line: +    public synchronized void discardTo(long n) {
>, <Line: +        //System.err.println("discard up to pos " + n);
>, <Line: +        System.arraycopy(buf, l2i(n - startOffset), buf, 0, l2i(buf.length - (n - startOffset)));
>, <Line: +        count -= (n - startOffset);
>, <Line: +        startOffset = n;
>, <Line: +    }
>, <Line: +}
>]
[]