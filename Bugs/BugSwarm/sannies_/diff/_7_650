[<Line: +package org.mp4parser.streaming.input.h264;
>, <Line: +import org.junit.Test;
>, <Line: +import org.mp4parser.IsoFile;
>, <Line: +import org.mp4parser.muxer.InMemRandomAccessSourceImpl;
>, <Line: +import org.mp4parser.muxer.Sample;
>, <Line: +import org.mp4parser.muxer.samples.SampleList;
>, <Line: +import org.mp4parser.streaming.StreamingTrack;
>, <Line: +import org.mp4parser.streaming.output.mp4.FragmentedMp4Writer;
>, <Line: +import java.io.ByteArrayInputStream;
>, <Line: +import java.io.ByteArrayOutputStream;
>, <Line: +import java.nio.channels.Channels;
>, <Line: +import java.util.Collections;
>, <Line: +import java.util.List;
>, <Line: +import java.util.concurrent.ExecutorService;
>, <Line: +import java.util.concurrent.Executors;
>, <Line: +/**
>, <Line: + * Created by sannies on 16.08.2015.
>, <Line: + */
>, <Line: +public class H264AnnexBTrackTest {
>, <Line: +    ExecutorService es = Executors.newCachedThreadPool();
>, <Line: +    @Test
>, <Line: +    public void testMuxing() throws Exception {
>, <Line: +        H264AnnexBTrack b = new H264AnnexBTrack(H264AnnexBTrackTest.class.getResourceAsStream("/org/mp4parser/streaming/input/h264/tos.h264"));
>, <Line: +        //H264AnnexBTrack b = new H264AnnexBTrack(new FileInputStream("C:\\dev\\mp4parser\\out.264"));
>, <Line: +        ByteArrayOutputStream baos = new ByteArrayOutputStream();
>, <Line: +        FragmentedMp4Writer writer = new FragmentedMp4Writer(Collections.<StreamingTrack>singletonList(b), Channels.newChannel(baos));
>, <Line: +        //MultiTrackFragmentedMp4Writer writer = new MultiTrackFragmentedMp4Writer(new StreamingTrack[]{b}, new ByteArrayOutputStream());
>, <Line: +        b.call();
>, <Line: +        writer.close();
>, <Line: +        IsoFile isoFile = new IsoFile(Channels.newChannel(new ByteArrayInputStream(baos.toByteArray())));
>, <Line: +        Walk.through(isoFile);
>, <Line: +        List<Sample> s = new SampleList(1, isoFile, new InMemRandomAccessSourceImpl(baos.toByteArray()));
>, <Line: +        for (Sample sample : s) {
>, <Line: +//            System.err.println("s: " + sample.getSize());
>, <Line: +            sample.asByteBuffer();
>, <Line: +        }
>, <Line: +    }
>, <Line: +}
>]
[]