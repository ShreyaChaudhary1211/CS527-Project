[<Line: +/*
>, <Line: +Copyright (c) 2011 Stanislav Vitvitskiy
>, <Line: +Permission is hereby granted, free of charge, to any person obtaining a copy of this
>, <Line: +software and associated documentation files (the "Software"), to deal in the Software
>, <Line: +without restriction, including without limitation the rights to use, copy, modify,
>, <Line: +merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
>, <Line: +permit persons to whom the Software is furnished to do so, subject to the following
>, <Line: +conditions:
>, <Line: +The above copyright notice and this permission notice shall be included in all copies or
>, <Line: +substantial portions of the Software.
>, <Line: +THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
>, <Line: +INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
>, <Line: +PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
>, <Line: +FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
>, <Line: +TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
>, <Line: +OR OTHER DEALINGS IN THE SOFTWARE.
>, <Line: +*/
>, <Line: +package org.mp4parser.streaming.input.h264.spspps;
>, <Line: +import java.io.IOException;
>, <Line: +import java.nio.ByteBuffer;
>, <Line: +import java.util.Arrays;
>, <Line: +/**
>, <Line: + * Picture Parameter Set entity of H264 bitstream
>, <Line: + * <p>
>, <Line: + * capable to serialize / deserialize with CAVLC bitstream</p>
>, <Line: + *
>, <Line: + * @author Stanislav Vitvitskiy
>, <Line: + */
>, <Line: +public class PictureParameterSet {
>, <Line: +    public boolean entropy_coding_mode_flag;
>, <Line: +    public int num_ref_idx_l0_active_minus1;
>, <Line: +    public int num_ref_idx_l1_active_minus1;
>, <Line: +    public int slice_group_change_rate_minus1;
>, <Line: +    public int pic_parameter_set_id;
>, <Line: +    public int seq_parameter_set_id;
>, <Line: +    public boolean bottom_field_pic_order_in_frame_present_flag;
>, <Line: +    public int num_slice_groups_minus1;
>, <Line: +    public int slice_group_map_type;
>, <Line: +    public boolean weighted_pred_flag;
>, <Line: +    public int weighted_bipred_idc;
>, <Line: +    public int pic_init_qp_minus26;
>, <Line: +    public int pic_init_qs_minus26;
>, <Line: +    public int chroma_qp_index_offset;
>, <Line: +    public boolean deblocking_filter_control_present_flag;
>, <Line: +    public boolean constrained_intra_pred_flag;
>, <Line: +    public boolean redundant_pic_cnt_present_flag;
>, <Line: +    public int[] top_left;
>, <Line: +    public int[] bottom_right;
>, <Line: +    public int[] run_length_minus1;
>, <Line: +    public boolean slice_group_change_direction_flag;
>, <Line: +    public int[] slice_group_id;
>, <Line: +    public PPSExt extended;
>, <Line: +    public static PictureParameterSet read(ByteBuffer bb) throws IOException {
>, <Line: +        ByteBufferBitreader reader = new ByteBufferBitreader(bb);
>, <Line: +        PictureParameterSet pps = new PictureParameterSet();
>, <Line: +        pps.pic_parameter_set_id = reader.readUE();
>, <Line: +        pps.seq_parameter_set_id = reader.readUE();
>, <Line: +        pps.entropy_coding_mode_flag = reader
>, <Line: +                .readBool();
>, <Line: +        pps.bottom_field_pic_order_in_frame_present_flag = reader
>, <Line: +                .readBool();
>, <Line: +        pps.num_slice_groups_minus1 = reader
>, <Line: +                .readUE();
>, <Line: +        if (pps.num_slice_groups_minus1 > 0) {
>, <Line: +            pps.slice_group_map_type = reader
>, <Line: +                    .readUE();
>, <Line: +            pps.top_left = new int[pps.num_slice_groups_minus1 + 1];
>, <Line: +            pps.bottom_right = new int[pps.num_slice_groups_minus1 + 1];
>, <Line: +            pps.run_length_minus1 = new int[pps.num_slice_groups_minus1 + 1];
>, <Line: +            if (pps.slice_group_map_type == 0)
>, <Line: +                for (int iGroup = 0; iGroup <= pps.num_slice_groups_minus1; iGroup++)
>, <Line: +                    pps.run_length_minus1[iGroup] = reader
>, <Line: +                            .readUE();
>, <Line: +            else if (pps.slice_group_map_type == 2)
>, <Line: +                for (int iGroup = 0; iGroup < pps.num_slice_groups_minus1; iGroup++) {
>, <Line: +                    pps.top_left[iGroup] = reader.readUE();
>, <Line: +                    pps.bottom_right[iGroup] = reader
>, <Line: +                            .readUE();
>, <Line: +                }
>, <Line: +            else if (pps.slice_group_map_type == 3
>, <Line: +                    || pps.slice_group_map_type == 4
>, <Line: +                    || pps.slice_group_map_type == 5) {
>, <Line: +                pps.slice_group_change_direction_flag = reader
>, <Line: +                        .readBool();
>, <Line: +                pps.slice_group_change_rate_minus1 = reader
>, <Line: +                        .readUE();
>, <Line: +            } else if (pps.slice_group_map_type == 6) {
>, <Line: +                int NumberBitsPerSliceGroupId;
>, <Line: +                if (pps.num_slice_groups_minus1 + 1 > 4)
>, <Line: +                    NumberBitsPerSliceGroupId = 3;
>, <Line: +                else if (pps.num_slice_groups_minus1 + 1 > 2)
>, <Line: +                    NumberBitsPerSliceGroupId = 2;
>, <Line: +                else
>, <Line: +                    NumberBitsPerSliceGroupId = 1;
>, <Line: +                int pic_size_in_map_units_minus1 = reader
>, <Line: +                        .readUE();
>, <Line: +                pps.slice_group_id = new int[pic_size_in_map_units_minus1 + 1];
>, <Line: +                for (int i = 0; i <= pic_size_in_map_units_minus1; i++) {
>, <Line: +                    pps.slice_group_id[i] = (int) reader.readNBit(
>, <Line: +                            NumberBitsPerSliceGroupId);
>, <Line: +                }
>, <Line: +            }
>, <Line: +        }
>, <Line: +        pps.num_ref_idx_l0_active_minus1 = reader
>, <Line: +                .readUE();
>, <Line: +        pps.num_ref_idx_l1_active_minus1 = reader
>, <Line: +                .readUE();
>, <Line: +        pps.weighted_pred_flag = reader.readBool();
>, <Line: +        pps.weighted_bipred_idc = (int) reader.readNBit(2);
>, <Line: +        pps.pic_init_qp_minus26 = reader.readSE();
>, <Line: +        pps.pic_init_qs_minus26 = reader.readSE();
>, <Line: +        pps.chroma_qp_index_offset = reader
>, <Line: +                .readSE();
>, <Line: +        pps.deblocking_filter_control_present_flag = reader
>, <Line: +                .readBool();
>, <Line: +        pps.constrained_intra_pred_flag = reader
>, <Line: +                .readBool();
>, <Line: +        pps.redundant_pic_cnt_present_flag = reader
>, <Line: +                .readBool();
>, <Line: +        if (reader.moreRBSPData()) {
>, <Line: +            pps.extended = new PictureParameterSet.PPSExt();
>, <Line: +            pps.extended.transform_8x8_mode_flag = reader
>, <Line: +                    .readBool();
>, <Line: +            boolean pic_scaling_matrix_present_flag = reader
>, <Line: +                    .readBool();
>, <Line: +            if (pic_scaling_matrix_present_flag) {
>, <Line: +                for (int i = 0; i < 6 + 2 * (pps.extended.transform_8x8_mode_flag ? 1
>, <Line: +                        : 0); i++) {
>, <Line: +                    boolean pic_scaling_list_present_flag = reader
>, <Line: +                            .readBool();
>, <Line: +                    if (pic_scaling_list_present_flag) {
>, <Line: +                        pps.extended.scalindMatrix.ScalingList4x4 = new ScalingList[8];
>, <Line: +                        pps.extended.scalindMatrix.ScalingList8x8 = new ScalingList[8];
>, <Line: +                        if (i < 6) {
>, <Line: +                            pps.extended.scalindMatrix.ScalingList4x4[i] = ScalingList
>, <Line: +                                    .read(reader, 16);
>, <Line: +                        } else {
>, <Line: +                            pps.extended.scalindMatrix.ScalingList8x8[i - 6] = ScalingList
>, <Line: +                                    .read(reader, 64);
>, <Line: +                        }
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            pps.extended.second_chroma_qp_index_offset = reader
>, <Line: +                    .readSE();
>, <Line: +        }
>, <Line: +        // reader.readTrailingBits();
>, <Line: +        return pps;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public int hashCode() {
>, <Line: +        final int prime = 31;
>, <Line: +        int result = 1;
>, <Line: +        result = prime * result + Arrays.hashCode(bottom_right);
>, <Line: +        result = prime * result + chroma_qp_index_offset;
>, <Line: +        result = prime * result + (constrained_intra_pred_flag ? 1231 : 1237);
>, <Line: +        result = prime * result
>, <Line: +                + (deblocking_filter_control_present_flag ? 1231 : 1237);
>, <Line: +        result = prime * result + (entropy_coding_mode_flag ? 1231 : 1237);
>, <Line: +        result = prime * result
>, <Line: +                + ((extended == null) ? 0 : extended.hashCode());
>, <Line: +        result = prime * result + num_ref_idx_l0_active_minus1;
>, <Line: +        result = prime * result + num_ref_idx_l1_active_minus1;
>, <Line: +        result = prime * result + num_slice_groups_minus1;
>, <Line: +        result = prime * result + pic_init_qp_minus26;
>, <Line: +        result = prime * result + pic_init_qs_minus26;
>, <Line: +        result = prime * result + (bottom_field_pic_order_in_frame_present_flag ? 1231 : 1237);
>, <Line: +        result = prime * result + pic_parameter_set_id;
>, <Line: +        result = prime * result
>, <Line: +                + (redundant_pic_cnt_present_flag ? 1231 : 1237);
>, <Line: +        result = prime * result + Arrays.hashCode(run_length_minus1);
>, <Line: +        result = prime * result + seq_parameter_set_id;
>, <Line: +        result = prime * result
>, <Line: +                + (slice_group_change_direction_flag ? 1231 : 1237);
>, <Line: +        result = prime * result + slice_group_change_rate_minus1;
>, <Line: +        result = prime * result + Arrays.hashCode(slice_group_id);
>, <Line: +        result = prime * result + slice_group_map_type;
>, <Line: +        result = prime * result + Arrays.hashCode(top_left);
>, <Line: +        result = prime * result + weighted_bipred_idc;
>, <Line: +        result = prime * result + (weighted_pred_flag ? 1231 : 1237);
>, <Line: +        return result;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public boolean equals(Object obj) {
>, <Line: +        if (this == obj)
>, <Line: +            return true;
>, <Line: +        if (obj == null)
>, <Line: +            return false;
>, <Line: +        if (getClass() != obj.getClass())
>, <Line: +            return false;
>, <Line: +        PictureParameterSet other = (PictureParameterSet) obj;
>, <Line: +        if (!Arrays.equals(bottom_right, other.bottom_right))
>, <Line: +            return false;
>, <Line: +        if (chroma_qp_index_offset != other.chroma_qp_index_offset)
>, <Line: +            return false;
>, <Line: +        if (constrained_intra_pred_flag != other.constrained_intra_pred_flag)
>, <Line: +            return false;
>, <Line: +        if (deblocking_filter_control_present_flag != other.deblocking_filter_control_present_flag)
>, <Line: +            return false;
>, <Line: +        if (entropy_coding_mode_flag != other.entropy_coding_mode_flag)
>, <Line: +            return false;
>, <Line: +        if (extended == null) {
>, <Line: +            if (other.extended != null)
>, <Line: +                return false;
>, <Line: +        } else if (!extended.equals(other.extended))
>, <Line: +            return false;
>, <Line: +        if (num_ref_idx_l0_active_minus1 != other.num_ref_idx_l0_active_minus1)
>, <Line: +            return false;
>, <Line: +        if (num_ref_idx_l1_active_minus1 != other.num_ref_idx_l1_active_minus1)
>, <Line: +            return false;
>, <Line: +        if (num_slice_groups_minus1 != other.num_slice_groups_minus1)
>, <Line: +            return false;
>, <Line: +        if (pic_init_qp_minus26 != other.pic_init_qp_minus26)
>, <Line: +            return false;
>, <Line: +        if (pic_init_qs_minus26 != other.pic_init_qs_minus26)
>, <Line: +            return false;
>, <Line: +        if (bottom_field_pic_order_in_frame_present_flag != other.bottom_field_pic_order_in_frame_present_flag)
>, <Line: +            return false;
>, <Line: +        if (pic_parameter_set_id != other.pic_parameter_set_id)
>, <Line: +            return false;
>, <Line: +        if (redundant_pic_cnt_present_flag != other.redundant_pic_cnt_present_flag)
>, <Line: +            return false;
>, <Line: +        if (!Arrays.equals(run_length_minus1, other.run_length_minus1))
>, <Line: +            return false;
>, <Line: +        if (seq_parameter_set_id != other.seq_parameter_set_id)
>, <Line: +            return false;
>, <Line: +        if (slice_group_change_direction_flag != other.slice_group_change_direction_flag)
>, <Line: +            return false;
>, <Line: +        if (slice_group_change_rate_minus1 != other.slice_group_change_rate_minus1)
>, <Line: +            return false;
>, <Line: +        if (!Arrays.equals(slice_group_id, other.slice_group_id))
>, <Line: +            return false;
>, <Line: +        if (slice_group_map_type != other.slice_group_map_type)
>, <Line: +            return false;
>, <Line: +        if (!Arrays.equals(top_left, other.top_left))
>, <Line: +            return false;
>, <Line: +        if (weighted_bipred_idc != other.weighted_bipred_idc)
>, <Line: +            return false;
>, <Line: +        if (weighted_pred_flag != other.weighted_pred_flag)
>, <Line: +            return false;
>, <Line: +        return true;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public String toString() {
>, <Line: +        return "PictureParameterSet{" +
>, <Line: +                "\n       entropy_coding_mode_flag=" + entropy_coding_mode_flag +
>, <Line: +                ",\n       num_ref_idx_l0_active_minus1=" + num_ref_idx_l0_active_minus1 +
>, <Line: +                ",\n       num_ref_idx_l1_active_minus1=" + num_ref_idx_l1_active_minus1 +
>, <Line: +                ",\n       slice_group_change_rate_minus1=" + slice_group_change_rate_minus1 +
>, <Line: +                ",\n       pic_parameter_set_id=" + pic_parameter_set_id +
>, <Line: +                ",\n       seq_parameter_set_id=" + seq_parameter_set_id +
>, <Line: +                ",\n       pic_order_present_flag=" + bottom_field_pic_order_in_frame_present_flag +
>, <Line: +                ",\n       num_slice_groups_minus1=" + num_slice_groups_minus1 +
>, <Line: +                ",\n       slice_group_map_type=" + slice_group_map_type +
>, <Line: +                ",\n       weighted_pred_flag=" + weighted_pred_flag +
>, <Line: +                ",\n       weighted_bipred_idc=" + weighted_bipred_idc +
>, <Line: +                ",\n       pic_init_qp_minus26=" + pic_init_qp_minus26 +
>, <Line: +                ",\n       pic_init_qs_minus26=" + pic_init_qs_minus26 +
>, <Line: +                ",\n       chroma_qp_index_offset=" + chroma_qp_index_offset +
>, <Line: +                ",\n       deblocking_filter_control_present_flag=" + deblocking_filter_control_present_flag +
>, <Line: +                ",\n       constrained_intra_pred_flag=" + constrained_intra_pred_flag +
>, <Line: +                ",\n       redundant_pic_cnt_present_flag=" + redundant_pic_cnt_present_flag +
>, <Line: +                ",\n       top_left=" + top_left +
>, <Line: +                ",\n       bottom_right=" + bottom_right +
>, <Line: +                ",\n       run_length_minus1=" + run_length_minus1 +
>, <Line: +                ",\n       slice_group_change_direction_flag=" + slice_group_change_direction_flag +
>, <Line: +                ",\n       slice_group_id=" + slice_group_id +
>, <Line: +                ",\n       extended=" + extended +
>, <Line: +                '}';
>, <Line: +    }
>, <Line: +    public static class PPSExt {
>, <Line: +        public boolean transform_8x8_mode_flag;
>, <Line: +        public ScalingMatrix scalindMatrix = new ScalingMatrix();
>, <Line: +        public int second_chroma_qp_index_offset;
>, <Line: +        public boolean[] pic_scaling_list_present_flag;
>, <Line: +        @Override
>, <Line: +        public String toString() {
>, <Line: +            return "PPSExt{" +
>, <Line: +                    "transform_8x8_mode_flag=" + transform_8x8_mode_flag +
>, <Line: +                    ", scalindMatrix=" + scalindMatrix +
>, <Line: +                    ", second_chroma_qp_index_offset=" + second_chroma_qp_index_offset +
>, <Line: +                    ", pic_scaling_list_present_flag=" + pic_scaling_list_present_flag +
>, <Line: +                    '}';
>, <Line: +        }
>, <Line: +    }
>, <Line: +}
>]
[]