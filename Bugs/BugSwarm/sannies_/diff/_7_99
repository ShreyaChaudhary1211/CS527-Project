[]
[<Line: -package com.mp4parser.streaming.rawformats;
>, <Line: -import com.coremedia.iso.boxes.SampleDescriptionBox;
>, <Line: -import com.coremedia.iso.boxes.TrackHeaderBox;
>, <Line: -import com.googlecode.mp4parser.FileDataSourceImpl;
>, <Line: -import com.googlecode.mp4parser.authoring.Sample;
>, <Line: -import com.googlecode.mp4parser.authoring.tracks.h264.H264TrackImpl;
>, <Line: -import com.mp4parser.streaming.*;
>, <Line: -import java.io.FileNotFoundException;
>, <Line: -import java.io.FileOutputStream;
>, <Line: -import java.io.IOException;
>, <Line: -import java.nio.ByteBuffer;
>, <Line: -import java.util.List;
>, <Line: -import java.util.concurrent.ArrayBlockingQueue;
>, <Line: -import java.util.concurrent.BlockingQueue;
>, <Line: -/**
>, <Line: - * Created by sannies on 25.05.2015.
>, <Line: - */
>, <Line: -public class H264TrackAdapter extends AbstractStreamingTrack {
>, <Line: -    H264TrackImpl h264Track;
>, <Line: -    public H264TrackAdapter(final H264TrackImpl h264Track) throws InterruptedException {
>, <Line: -        this.h264Track = h264Track;
>, <Line: -        samples = new ArrayBlockingQueue<StreamingSample>(100, true);
>, <Line: -        new Thread() {
>, <Line: -            @Override
>, <Line: -            public void run() {
>, <Line: -                try {
>, <Line: -                    parse();
>, <Line: -                } catch (InterruptedException e) {
>, <Line: -                    e.printStackTrace();
>, <Line: -                }
>, <Line: -            }
>, <Line: -        }.start();
>, <Line: -        stsd = h264Track.getSampleDescriptionBox();
>, <Line: -    }
>, <Line: -    public void parse() throws InterruptedException {
>, <Line: -        List<Sample> oldsamples = h264Track.getSamples();
>, <Line: -        for (int i = 0; i < oldsamples.size(); i++) {
>, <Line: -            System.err.println("Jo! " + i + " of " + oldsamples.size());
>, <Line: -            final long duration = h264Track.getSampleDurations()[i];
>, <Line: -            final Sample sample = oldsamples.get(i);
>, <Line: -            samples.put(new StreamingSample() {
>, <Line: -                public ByteBuffer getContent() {
>, <Line: -                    return sample.asByteBuffer().duplicate();
>, <Line: -                }
>, <Line: -                public long getDuration() {
>, <Line: -                    return duration;
>, <Line: -                }
>, <Line: -                public SampleExtension[] getExtensions() {
>, <Line: -                    return new SampleExtension[0];
>, <Line: -                }
>, <Line: -            });
>, <Line: -        }
>, <Line: -        System.err.println("Jo!");
>, <Line: -    }
>, <Line: -    public long getTimescale() {
>, <Line: -        return h264Track.getTrackMetaData().getTimescale();
>, <Line: -    }
>, <Line: -    public String getHandler() {
>, <Line: -        return h264Track.getHandler();
>, <Line: -    }
>, <Line: -    public String getLanguage() {
>, <Line: -        return h264Track.getTrackMetaData().getLanguage();
>, <Line: -    }
>, <Line: -    public static void main(String[] args) throws IOException, InterruptedException {
>, <Line: -        H264TrackImpl h264Track = new H264TrackImpl(new FileDataSourceImpl("c:\\content\\big_buck_bunny_1080p_h264-2min.h264"));
>, <Line: -        final StreamingTrack streamingTrack = new H264TrackAdapter(h264Track);
>, <Line: -        MultiTrackFragmentedMp4Writer mp4Writer
>, <Line: -                = new MultiTrackFragmentedMp4Writer(new StreamingTrack[]{streamingTrack}, new FileOutputStream("output.mp4"));
>, <Line: -        mp4Writer.write();
>, <Line: -    }
>, <Line: -}
>]