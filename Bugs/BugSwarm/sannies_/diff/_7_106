[<Line: +package org.mp4parser;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.MovieBox;
>, <Line: +import org.mp4parser.support.DoNotParseDetail;
>, <Line: +import org.mp4parser.support.Logger;
>, <Line: +import java.io.*;
>, <Line: +import java.nio.channels.ReadableByteChannel;
>, <Line: +    private ReadableByteChannel readableByteChannel;
>, <Line: +    public IsoFile(String file) throws IOException {
>, <Line: +        this(new FileInputStream(file).getChannel(), new PropertyBoxParserImpl());
>, <Line: +    public IsoFile(File file) throws IOException {
>, <Line: +        this(new FileInputStream(file).getChannel(), new PropertyBoxParserImpl());
>, <Line: +    }
>, <Line: +     * @param readableByteChannel the data source
>, <Line: +    public IsoFile(ReadableByteChannel readableByteChannel) throws IOException {
>, <Line: +        this(readableByteChannel, new PropertyBoxParserImpl());
>, <Line: +    public IsoFile(ReadableByteChannel readableByteChannel, BoxParser boxParser) throws IOException {
>, <Line: +        this.readableByteChannel = readableByteChannel;
>, <Line: +        initContainer(readableByteChannel, -1, boxParser);
>, <Line: +        this.readableByteChannel.close();
>, <Line: +        return "model(" + readableByteChannel.toString() + ")";
>]
[<Line: -package com.coremedia.iso;
>, <Line: -import com.coremedia.iso.boxes.Box;
>, <Line: -import com.coremedia.iso.boxes.MovieBox;
>, <Line: -import com.googlecode.mp4parser.BasicContainer;
>, <Line: -import com.googlecode.mp4parser.DataSource;
>, <Line: -import com.googlecode.mp4parser.FileDataSourceImpl;
>, <Line: -import com.googlecode.mp4parser.annotations.DoNotParseDetail;
>, <Line: -import com.googlecode.mp4parser.util.Logger;
>, <Line: -import java.io.Closeable;
>, <Line: -import java.io.File;
>, <Line: -import java.io.IOException;
>, <Line: -import java.io.UnsupportedEncodingException;
>, <Line: -    /**
>, <Line: -     * Shortcut constructor that creates a <code>DataSource</code> from the
>, <Line: -     * given filename and pass it to the {@link IsoFile#IsoFile(DataSource)}
>, <Line: -     * constructor.
>, <Line: -     *
>, <Line: -     * @param filename of the MP4 file to be parsed
>, <Line: -     * @throws IOException in case I/O error
>, <Line: -     */
>, <Line: -    public IsoFile(String filename) throws IOException {
>, <Line: -        this(new FileDataSourceImpl(new File(filename)));
>, <Line: -     * @param dataSource the data source
>, <Line: -    public IsoFile(DataSource dataSource) throws IOException {
>, <Line: -        this(dataSource, new PropertyBoxParserImpl());
>, <Line: -    public IsoFile(DataSource dataSource, BoxParser boxParser) throws IOException {
>, <Line: -        initContainer(dataSource, dataSource.size(), boxParser);
>, <Line: -        this.dataSource.close();
>, <Line: -        return "model(" + dataSource.toString() + ")";
>]