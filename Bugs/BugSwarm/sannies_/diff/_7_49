[<Line: +import org.apache.commons.io.FileUtils;
>, <Line: +import org.apache.commons.io.IOUtils;
>, <Line: +import org.mp4parser.Box;
>, <Line: +import org.mp4parser.Container;
>, <Line: +import org.mp4parser.IsoFile;
>, <Line: +import org.mp4parser.boxes.UnknownBox;
>, <Line: +import org.mp4parser.boxes.apple.AppleGPSCoordinatesBox;
>, <Line: +import org.mp4parser.boxes.apple.AppleItemListBox;
>, <Line: +import org.mp4parser.boxes.apple.AppleNameBox;
>, <Line: +import org.mp4parser.boxes.apple.Utf8AppleDataBox;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.*;
>, <Line: +import org.mp4parser.boxes.microsoft.XtraBox;
>, <Line: +import org.mp4parser.tools.Path;
>, <Line: +    public static final boolean DEBUG = true;
>, <Line: +    public static final String WM_RATING_TAG = "WM/SharedUserRating";
>, <Line: +    public static final int WM_RATING_VALS[] = {0, 1, 25, 50, 75, 99};
>, <Line: +    public static final String WM_TAGS_TAG = "WM/Category";
>, <Line: +    //http://stackoverflow.com/questions/3389348/parse-any-date-in-java
>, <Line: +    private static final HashMap<String, String> DATE_FORMAT_REGEXPS = new HashMap<String, String>() {
>, <Line: +        {
>, <Line: +            put("^\\d{8}$", "yyyyMMdd");
>, <Line: +            put("^\\d{1,2}-\\d{1,2}-\\d{4}$", "dd-MM-yyyy");
>, <Line: +            put("^\\d{4}-\\d{1,2}-\\d{1,2}$", "yyyy-MM-dd");
>, <Line: +            put("^\\d{1,2}/\\d{1,2}/\\d{4}$", "MM/dd/yyyy");
>, <Line: +            put("^\\d{4}/\\d{1,2}/\\d{1,2}$", "yyyy/MM/dd");
>, <Line: +            put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}$", "dd MMM yyyy");
>, <Line: +            put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}$", "dd MMMM yyyy");
>, <Line: +            put("^\\d{12}$", "yyyyMMddHHmm");
>, <Line: +            put("^\\d{8}\\s\\d{4}$", "yyyyMMdd HHmm");
>, <Line: +            put("^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}$", "dd-MM-yyyy HH:mm");
>, <Line: +            put("^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}$", "yyyy-MM-dd HH:mm");
>, <Line: +            put("^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}$", "MM/dd/yyyy HH:mm");
>, <Line: +            put("^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}$", "yyyy/MM/dd HH:mm");
>, <Line: +            put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}$", "dd MMM yyyy HH:mm");
>, <Line: +            put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}$", "dd MMMM yyyy HH:mm");
>, <Line: +            put("^\\d{14}$", "yyyyMMddHHmmss");
>, <Line: +            put("^\\d{8}\\s\\d{6}$", "yyyyMMdd HHmmss");
>, <Line: +            put("^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd-MM-yyyy HH:mm:ss");
>, <Line: +            put("^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy-MM-dd HH:mm:ss");
>, <Line: +            put("^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "MM/dd/yyyy HH:mm:ss");
>, <Line: +            put("^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy/MM/dd HH:mm:ss");
>, <Line: +            put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd MMM yyyy HH:mm:ss");
>, <Line: +            put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd MMMM yyyy HH:mm:ss");
>, <Line: +        }
>, <Line: +    };
>, <Line: +    private long originalUserDataSize = 0;
>, <Line: +    private XtraBox xtraBox;
>, <Line: +    private UserDataBox userDataBox;
>, <Line: +    private MetaBox metaBox;
>, <Line: +    private IsoFile isoFile;
>, <Line: +    public MetaDataTool(String path) throws IOException {
>, <Line: +        //The source I copied this from created 2 new files, a temp file and a target file
>, <Line: +        //I'm not sure this is necessary, but maybe when you make changes it's edited in-place?
>, <Line: +        //Anyway, just to be safe I'm keeping it so no operations are done on original file
>, <Line: +        if (userDataBox != null) {
>, <Line: +            originalUserDataSize = userDataBox.getSize();
>, <Line: +    }
>, <Line: +    public static void main(String[] args) {
>, <Line: +        if (args.length != 7 && args.length != 1) {
>, <Line: +            System.err.println("Usage: java -jar metaDatTool.jar <inputFile> <outputFile> <title> <createDate> <userRating> <; separated tags> <gps coordinates>");
>, <Line: +            System.err.println("  Use * for any value to keep the existing value, use an empty value to delete the current value");
>, <Line: +            System.err.println("  Example: java -jar metaDataTool.jar myFile.mp4 newFile.mp4 \"New Title\" \"*\" 5 \"myTag 1;myTag 2\" \"\"");
>, <Line: +            System.err.println("  This would retitle it, leave the create date alone, set the rating to 5 stars, ");
>, <Line: +            System.err.println("  replace any tags with 'myTag 1' and 'myTag 2' and delete the existing GPS coordinates");
>, <Line: +            System.err.println("Other usage: java -jar metaDataToo.jar <inputFile>");
>, <Line: +            System.err.println("  Prints a dump of all tags in the file");
>, <Line: +            System.exit(1);
>, <Line: +        if (args.length == 1) {
>, <Line: +            MetaDataTool mdt;
>, <Line: +            try {
>, <Line: +                mdt = new MetaDataTool(args[0]);
>, <Line: +                mdt.dumpBoxes();
>, <Line: +                System.exit(0);
>, <Line: +            } catch (IOException e) {
>, <Line: +                e.printStackTrace();
>, <Line: +            }
>, <Line: +        }
>, <Line: +        int i = 0;
>, <Line: +        String inFile = args[i++];
>, <Line: +        String outFile = args[i++];
>, <Line: +        String title = args[i++];
>, <Line: +        String createDate = args[i++];
>, <Line: +        String userRating = args[i++];
>, <Line: +        String tags = args[i++];
>, <Line: +        String gpsCoords = args[i++];
>, <Line: +            System.out.println("================= BEFORE ===================");
>, <Line: +            MetaDataTool mdt = new MetaDataTool(inFile);
>, <Line: +            mdt.dumpBoxes();
>, <Line: +            if (!"*".equals(title)) {
>, <Line: +                mdt.setTitle(title);
>, <Line: +            }
>, <Line: +            if (!"*".equals(createDate)) {
>, <Line: +                Date inputDate = parseDate(createDate);
>, <Line: +                mdt.setMediaCreateDate(inputDate);
>, <Line: +                mdt.setMediaModificationDate(inputDate);
>, <Line: +            }
>, <Line: +            if (!"*".equals(userRating)) {
>, <Line: +                if ("".equals(userRating)) {
>, <Line: +                    mdt.removeWindowsMediaTag(WM_RATING_TAG);
>, <Line: +                } else {
>, <Line: +                    mdt.setWindowsMediaRating(Integer.valueOf(userRating));
>, <Line: +                }
>, <Line: +            }
>, <Line: +            if (!"*".equals(tags)) {
>, <Line: +                if ("".equals(tags)) {
>, <Line: +                    mdt.removeWindowsMediaTag(WM_TAGS_TAG);
>, <Line: +                } else {
>, <Line: +                    String tagsAr[] = tags.split(";");
>, <Line: +                    mdt.setWindowsMediaTags(tagsAr);
>, <Line: +                }
>, <Line: +            }
>, <Line: +            if (!"*".equals(gpsCoords)) {
>, <Line: +                mdt.setGpsCoordinates(gpsCoords);
>, <Line: +            }
>, <Line: +            mdt.writeMp4(outFile);
>, <Line: +            if (DEBUG) {
>, <Line: +                mdt = new MetaDataTool(outFile);
>, <Line: +                System.out.println("================= AFTER ===================");
>, <Line: +                mdt.dumpBoxes();
>, <Line: +            }
>, <Line: +        } catch (Exception e) {
>, <Line: +            e.printStackTrace();
>, <Line: +    }
>, <Line: +    private static String getIndentation(int indent) {
>, <Line: +        char c[] = new char[indent];
>, <Line: +        for (int i = 0; i < indent; i++) {
>, <Line: +            c[i] = ' ';
>, <Line: +        return new String(c);
>, <Line: +    }
>, <Line: +    private static void dumpBoxes(Container container, int indent) {
>, <Line: +        String meInd = getIndentation(indent);
>, <Line: +        String subInd = getIndentation(indent + 2);
>, <Line: +        System.out.println(meInd + container.getClass().getName());
>, <Line: +        for (Box box : container.getBoxes()) {
>, <Line: +            if (box instanceof Container) {
>, <Line: +                dumpBoxes((Container) box, indent + 2);
>, <Line: +            } else {
>, <Line: +                try {
>, <Line: +                    if (box instanceof UnknownBox) {
>, <Line: +                        System.out.println(subInd + box.getClass().getName() + "[" + box.getSize() + "/" + box.getType() + "]:" + box.toString());
>, <Line: +                    } else if (box instanceof Utf8AppleDataBox) {
>, <Line: +                        System.out.println(subInd + box.getClass().getName() + ": " + box.getType() + ": " + box.toString() + ": " + ((Utf8AppleDataBox) box).getValue());
>, <Line: +                    } else {
>, <Line: +                        System.out.println(subInd + box.getClass().getName() + ": " + box.getType() + "[" + box.getSize() + "]: " + box.toString());
>, <Line: +                    }
>, <Line: +                } catch (Exception e) {
>, <Line: +                    System.err.println("Error parsing " + box.getClass().getSimpleName() + " box: " + e);
>, <Line: +                    e.printStackTrace(System.err);
>, <Line: +                }
>, <Line: +            }
>, <Line: +    }
>, <Line: +        List<SampleTableBox> sampleTableBoxes = Path.getPaths(tempIsoFile, "/moov[0]/trak/mdia[0]/minf[0]/stbl[0]");
>, <Line: +        for (SampleTableBox sampleTableBox : sampleTableBoxes) {
>, <Line: +            List<Box> stblChildren = new ArrayList<Box>(sampleTableBox.getBoxes());
>, <Line: +            ChunkOffsetBox chunkOffsetBox = Path.getPath(sampleTableBox, "stco");
>, <Line: +            if (chunkOffsetBox == null) {
>, <Line: +                stblChildren.remove(Path.getPath(sampleTableBox, "co64"));
>, <Line: +            }
>, <Line: +            assert chunkOffsetBox != null;
>, <Line: +            long[] cOffsets = chunkOffsetBox.getChunkOffsets();
>, <Line: +            sampleTableBox.setBoxes(stblChildren);
>, <Line: +    public static void deleteQuietly(File f) {
>, <Line: +        try {
>, <Line: +            f.delete();
>, <Line: +        } catch (Exception ioe) {
>, <Line: +            //ignore
>, <Line: +        }
>, <Line: +    public static Box getBox(Container outer, String type) {
>, <Line: +        List<Box> list = getBoxes(outer, new String[]{type});
>, <Line: +        return list.get(0);
>, <Line: +    public static List<Box> getBoxes(Container outer, String types[], List<Box> list) {
>, <Line: +        for (Box box : outer.getBoxes()) {
>, <Line: +            for (String type : types) {
>, <Line: +                if (box.getType().equals(type)) {
>, <Line: +                    list.add(box);
>, <Line: +                }
>, <Line: +            }
>, <Line: +            if (box instanceof Container) {
>, <Line: +                getBoxes((Container) box, types, list);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return list;
>, <Line: +    }
>, <Line: +    public static List<Box> getBoxes(Container outer, String types[]) {
>, <Line: +        List<Box> list = new ArrayList<Box>();
>, <Line: +        return getBoxes(outer, types, list);
>, <Line: +    }
>, <Line: +    public static Date parseDate(String dateString) throws ParseException {
>, <Line: +        String formatString = determineDateFormat(dateString);
>, <Line: +        if (formatString == null) {
>, <Line: +            return null;
>, <Line: +        }
>, <Line: +        SimpleDateFormat sdf = new SimpleDateFormat(formatString);
>, <Line: +        return sdf.parse(dateString);
>, <Line: +    }
>, <Line: +    public void setWindowsMediaRating(int rating) { //0-5
>, <Line: +        if (rating < 0 || rating > 5) {
>, <Line: +            throw new RuntimeException("Invalid rating, 0-5 only");
>, <Line: +        }
>, <Line: +        if (rating == 0) {
>, <Line: +            removeWindowsMediaTag(WM_RATING_TAG);
>, <Line: +        } else {
>, <Line: +            setWindowsMediaLong(WM_RATING_TAG, WM_RATING_VALS[rating]);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public void setWindowsMediaTags(String tags[]) {
>, <Line: +        if (tags == null || tags.length == 0) {
>, <Line: +            removeWindowsMediaTag(WM_TAGS_TAG);
>, <Line: +        } else {
>, <Line: +            setWindowsMediaStrings(WM_TAGS_TAG, tags);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    private void setMediaDate(Date date, boolean create) {
>, <Line: +        List<Box> headers = getBoxes(isoFile, new String[]{MovieHeaderBox.TYPE, MediaHeaderBox.TYPE, TrackHeaderBox.TYPE});
>, <Line: +        boolean set = false;
>, <Line: +        for (Box header : headers) {
>, <Line: +            if (header instanceof MediaHeaderBox) {
>, <Line: +                set = true;
>, <Line: +                if (create) {
>, <Line: +                    ((MediaHeaderBox) header).setCreationTime(date);
>, <Line: +                } else {
>, <Line: +                    ((MediaHeaderBox) header).setModificationTime(date);
>, <Line: +                }
>, <Line: +            } else if (header instanceof MovieHeaderBox) {
>, <Line: +                set = true;
>, <Line: +                if (create) {
>, <Line: +                    ((MovieHeaderBox) header).setCreationTime(date);
>, <Line: +                } else {
>, <Line: +                    ((MovieHeaderBox) header).setModificationTime(date);
>, <Line: +                }
>, <Line: +            } else if (header instanceof TrackHeaderBox) {
>, <Line: +                set = true;
>, <Line: +                if (create) {
>, <Line: +                    ((TrackHeaderBox) header).setCreationTime(date);
>, <Line: +                } else {
>, <Line: +                    ((TrackHeaderBox) header).setModificationTime(date);
>, <Line: +                }
>, <Line: +            }
>, <Line: +        }
>, <Line: +        setWindowsMediaDate("WM/EncodingTime", date);
>, <Line: +        if (!set) {
>, <Line: +            throw new RuntimeException("Can't yet add MovieHeaderBox or MediaHeaderBox and none were preset to set create and/or modify date");
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public void setGpsCoordinates(String iso6709String) {
>, <Line: +        AppleGPSCoordinatesBox coordBox = (AppleGPSCoordinatesBox) getBox(isoFile, AppleGPSCoordinatesBox.TYPE);
>, <Line: +        if (coordBox == null) {
>, <Line: +            UserDataBox udb = getUserDataBox();
>, <Line: +            coordBox = new AppleGPSCoordinatesBox();
>, <Line: +            udb.addBox(coordBox);
>, <Line: +        }
>, <Line: +        coordBox.setValue(iso6709String);
>, <Line: +    }
>, <Line: +    public void setMediaCreateDate(Date date) {
>, <Line: +        setMediaDate(date, true);
>, <Line: +    }
>, <Line: +    public void setMediaModificationDate(Date date) {
>, <Line: +        setMediaDate(date, false);
>, <Line: +    }
>, <Line: +    public void setTitle(String title) {
>, <Line: +        AppleNameBox titleBox = (AppleNameBox) getBox(isoFile, AppleNameBox.TYPE);
>, <Line: +        if (titleBox == null) {
>, <Line: +            AppleItemListBox itemList = getItemListBox();
>, <Line: +            titleBox = new AppleNameBox();
>, <Line: +            itemList.addBox(titleBox);
>, <Line: +        }
>, <Line: +        titleBox.setValue(title);
>, <Line: +    }
>, <Line: +    private AppleItemListBox getItemListBox() {
>, <Line: +        AppleItemListBox itemList = (AppleItemListBox) getBox(isoFile, AppleItemListBox.TYPE);
>, <Line: +        if (itemList == null) {
>, <Line: +            MetaBox mb = getMetaBox();
>, <Line: +            itemList = new AppleItemListBox();
>, <Line: +            mb.addBox(itemList);
>, <Line: +        }
>, <Line: +        return itemList;
>, <Line: +    }
>, <Line: +    @SuppressWarnings("deprecation")
>, <Line: +    public void setMediaModificationDate(String date) {
>, <Line: +        setMediaModificationDate(new Date(Date.parse(date))); //Deprecated, but also the easiest way to do this quickly
>, <Line: +    }
>, <Line: +    @SuppressWarnings("deprecation")
>, <Line: +    public void setMediaCreateDate(String date) {
>, <Line: +        try {
>, <Line: +            setMediaCreateDate(new Date(Date.parse(date))); //Deprecated, but also the easiest way to do this quickly
>, <Line: +        } catch (IllegalArgumentException e) {
>, <Line: +            throw new RuntimeException("Unable to parse date '" + date + "'", e);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public void setWindowsMediaDate(String tagName, Date dateVal) {
>, <Line: +        XtraBox xb = getXtraBox();
>, <Line: +        xb.setTagValue(tagName, dateVal);
>, <Line: +    }
>, <Line: +    public void setWindowsMediaLong(String tagName, long longVal) {
>, <Line: +        XtraBox xb = getXtraBox();
>, <Line: +        xb.setTagValue(tagName, longVal);
>, <Line: +    }
>, <Line: +    public void setWindowsMediaStrings(String tagName, String values[]) {
>, <Line: +        XtraBox xb = getXtraBox();
>, <Line: +        xb.setTagValues(tagName, values);
>, <Line: +    }
>, <Line: +    public void removeWindowsMediaTag(String tagName) {
>, <Line: +        XtraBox xb = getXtraBox();
>, <Line: +        xb.removeTag(tagName);
>, <Line: +    }
>, <Line: +    private UserDataBox getUserDataBox() {
>, <Line: +        if (userDataBox == null) {
>, <Line: +            userDataBox = new UserDataBox();
>, <Line: +            isoFile.getMovieBox().addBox(userDataBox);
>, <Line: +        }
>, <Line: +        return userDataBox;
>, <Line: +    }
>, <Line: +    private MetaBox getMetaBox() {
>, <Line: +        if (metaBox == null) {
>, <Line: +            UserDataBox ud = getUserDataBox();
>, <Line: +            metaBox = (MetaBox) getBox(ud, MetaBox.TYPE);
>, <Line: +            if (metaBox == null) {
>, <Line: +                metaBox = new MetaBox();
>, <Line: +                ud.addBox(metaBox);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return metaBox;
>, <Line: +    }
>, <Line: +    private XtraBox getXtraBox() {
>, <Line: +        if (xtraBox == null) {
>, <Line: +            UserDataBox ud = getUserDataBox(); //Create user data box if necessary
>, <Line: +            xtraBox = (XtraBox) getBox(ud, XtraBox.TYPE);
>, <Line: +            if (xtraBox == null) {
>, <Line: +                xtraBox = new XtraBox();
>, <Line: +                ud.addBox(xtraBox);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return xtraBox;
>, <Line: +    }
>, <Line: +    public void writeMp4(String filename) throws IOException {
>, <Line: +        long finalUserDataSize = 0;
>, <Line: +        if (userDataBox != null) {
>, <Line: +            finalUserDataSize = userDataBox.getSize();
>, <Line: +        }
>, <Line: +        if (needsOffsetCorrection(isoFile)) {
>, <Line: +            correctChunkOffsets(isoFile, finalUserDataSize - originalUserDataSize);
>, <Line: +        }
>, <Line: +        FileOutputStream videoFileOutputStream = null;
>, <Line: +        try {
>, <Line: +            videoFileOutputStream = new FileOutputStream(filename);
>, <Line: +            isoFile.getBox(videoFileOutputStream.getChannel());
>, <Line: +        } finally {
>, <Line: +            closeQuietly(isoFile);
>, <Line: +            IOUtils.closeQuietly(videoFileOutputStream);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public void dumpBoxes() {
>, <Line: +        dumpBoxes(isoFile, 0);
>]
[<Line: -import java.util.LinkedList;
>, <Line: -import org.apache.commons.io.FileUtils;
>, <Line: -import org.apache.commons.io.IOUtils;
>, <Line: -import com.coremedia.iso.IsoFile;
>, <Line: -import com.coremedia.iso.boxes.Box;
>, <Line: -import com.coremedia.iso.boxes.ChunkOffsetBox;
>, <Line: -import com.coremedia.iso.boxes.Container;
>, <Line: -import com.coremedia.iso.boxes.MediaHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.MetaBox;
>, <Line: -import com.coremedia.iso.boxes.MovieHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.StaticChunkOffsetBox;
>, <Line: -import com.coremedia.iso.boxes.TrackHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.UnknownBox;
>, <Line: -import com.coremedia.iso.boxes.UserDataBox;
>, <Line: -import com.coremedia.iso.boxes.apple.AppleItemListBox;
>, <Line: -import com.googlecode.mp4parser.boxes.apple.AppleGPSCoordinatesBox;
>, <Line: -import com.googlecode.mp4parser.boxes.apple.AppleNameBox;
>, <Line: -import com.googlecode.mp4parser.boxes.apple.Utf8AppleDataBox;
>, <Line: -import com.googlecode.mp4parser.boxes.microsoft.XtraBox;
>, <Line: -import com.googlecode.mp4parser.util.Path;
>, <Line: - *
>, <Line: -	public static final boolean DEBUG = true;
>, <Line: -	public static void main(String[] args) {
>, <Line: -		if( args.length != 7 && args.length != 1 ) {
>, <Line: -			System.err.println( "Usage: java -jar metaDatTool.jar <inputFile> <outputFile> <title> <createDate> <userRating> <; separated tags> <gps coordinates>" );
>, <Line: -			System.err.println( "  Use * for any value to keep the existing value, use an empty value to delete the current value" );
>, <Line: -			System.err.println( "  Example: java -jar metaDataTool.jar myFile.mp4 newFile.mp4 \"New Title\" \"*\" 5 \"myTag 1;myTag 2\" \"\"" );
>, <Line: -			System.err.println( "  This would retitle it, leave the create date alone, set the rating to 5 stars, " );
>, <Line: -			System.err.println( "  replace any tags with 'myTag 1' and 'myTag 2' and delete the existing GPS coordinates" );
>, <Line: -			System.err.println( "Other usage: java -jar metaDataToo.jar <inputFile>" );
>, <Line: -			System.err.println( "  Prints a dump of all tags in the file" );
>, <Line: -			System.exit( 1 );
>, <Line: -		}
>, <Line: -		if( args.length == 1 ) {
>, <Line: -			MetaDataTool mdt;
>, <Line: -			try {
>, <Line: -				mdt = new MetaDataTool( args[0] );
>, <Line: -				mdt.dumpBoxes();
>, <Line: -				System.exit( 0 );
>, <Line: -			} catch (IOException e) {
>, <Line: -				e.printStackTrace();
>, <Line: -			}
>, <Line: -		}
>, <Line: -		int i = 0;
>, <Line: -		String inFile = args[i++];
>, <Line: -		String outFile = args[i++];
>, <Line: -		String title = args[i++];
>, <Line: -		String createDate = args[i++];
>, <Line: -		String userRating = args[i++];
>, <Line: -		String tags = args[i++];
>, <Line: -		String gpsCoords = args[i++];
>, <Line: -		try {
>, <Line: -			System.out.println( "================= BEFORE ===================" );
>, <Line: -			MetaDataTool mdt = new MetaDataTool( inFile );
>, <Line: -			mdt.dumpBoxes();
>, <Line: -			if( !"*".equals( title ) ) {
>, <Line: -				mdt.setTitle( title );
>, <Line: -			}
>, <Line: -			if( !"*".equals( createDate ) ) {
>, <Line: -				Date inputDate = parseDate( createDate );
>, <Line: -				mdt.setMediaCreateDate( inputDate );
>, <Line: -				mdt.setMediaModificationDate( inputDate );
>, <Line: -			}
>, <Line: -			if( !"*".equals( userRating ) ) {
>, <Line: -				if( "".equals( userRating ) ) {
>, <Line: -					mdt.removeWindowsMediaTag( WM_RATING_TAG );
>, <Line: -				}
>, <Line: -				else {
>, <Line: -					mdt.setWindowsMediaRating( Integer.valueOf( userRating ) );
>, <Line: -				}
>, <Line: -			}
>, <Line: -			if( !"*".equals( tags ) ) {
>, <Line: -				if( "".equals( tags ) ) {
>, <Line: -					mdt.removeWindowsMediaTag( WM_TAGS_TAG );
>, <Line: -				}
>, <Line: -				else {
>, <Line: -					String tagsAr[] = tags.split( ";" );
>, <Line: -					mdt.setWindowsMediaTags( tagsAr );
>, <Line: -				}
>, <Line: -			}
>, <Line: -			if( !"*".equals( gpsCoords ) ) {
>, <Line: -				mdt.setGpsCoordinates( gpsCoords );
>, <Line: -			}
>, <Line: -			mdt.writeMp4( outFile );
>, <Line: -			if( DEBUG ) {
>, <Line: -				mdt = new MetaDataTool( outFile );
>, <Line: -				System.out.println( "================= AFTER ===================" );
>, <Line: -				mdt.dumpBoxes();
>, <Line: -			}
>, <Line: -		}
>, <Line: -		catch( Exception e ) {
>, <Line: -			e.printStackTrace();
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private long originalUserDataSize = 0;
>, <Line: -	private XtraBox xtraBox;
>, <Line: -	private UserDataBox userDataBox;
>, <Line: -	private MetaBox metaBox;
>, <Line: -	private IsoFile isoFile;
>, <Line: -	public MetaDataTool( String path ) throws IOException {
>, <Line: -		//The source I copied this from created 2 new files, a temp file and a target file
>, <Line: -		//I'm not sure this is necessary, but maybe when you make changes it's edited in-place?
>, <Line: -		//Anyway, just to be safe I'm keeping it so no operations are done on original file
>, <Line: -        if( userDataBox != null ) {
>, <Line: -        	originalUserDataSize = userDataBox.getSize();
>, <Line: -	}
>, <Line: -	public static final String WM_RATING_TAG = "WM/SharedUserRating";
>, <Line: -	public static final int WM_RATING_VALS[] = { 0, 1, 25, 50, 75, 99 };
>, <Line: -	public void setWindowsMediaRating( int rating ) { //0-5
>, <Line: -		if( rating < 0 || rating > 5 ) {
>, <Line: -			throw new RuntimeException( "Invalid rating, 0-5 only" );
>, <Line: -		}
>, <Line: -		if( rating == 0 ) {
>, <Line: -			removeWindowsMediaTag( WM_RATING_TAG );
>, <Line: -		}
>, <Line: -		else {
>, <Line: -			setWindowsMediaLong( WM_RATING_TAG, WM_RATING_VALS[rating] );
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public static final String WM_TAGS_TAG = "WM/Category";
>, <Line: -	public void setWindowsMediaTags( String tags[] ) {
>, <Line: -		if( tags == null || tags.length == 0 ) {
>, <Line: -			removeWindowsMediaTag( WM_TAGS_TAG );
>, <Line: -		}
>, <Line: -		else {
>, <Line: -			setWindowsMediaStrings( WM_TAGS_TAG, tags );
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void setMediaDate( Date date, boolean create ) {
>, <Line: -		List<Box> headers = getBoxes( isoFile, new String[] { MovieHeaderBox.TYPE, MediaHeaderBox.TYPE, TrackHeaderBox.TYPE } );
>, <Line: -		boolean set = false;
>, <Line: -		for( Box header : headers ) {
>, <Line: -			if( header instanceof MediaHeaderBox ) {
>, <Line: -				set = true;
>, <Line: -				if( create ) {
>, <Line: -					((MediaHeaderBox)header).setCreationTime( date );
>, <Line: -				}
>, <Line: -				else {
>, <Line: -					((MediaHeaderBox)header).setModificationTime( date );
>, <Line: -				}
>, <Line: -			}
>, <Line: -			else if( header instanceof MovieHeaderBox ) {
>, <Line: -				set = true;
>, <Line: -				if( create ) {
>, <Line: -					((MovieHeaderBox)header).setCreationTime(date);
>, <Line: -				}
>, <Line: -				else {
>, <Line: -					((MovieHeaderBox)header).setModificationTime(date);
>, <Line: -				}
>, <Line: -			}
>, <Line: -			else if( header instanceof TrackHeaderBox ) {
>, <Line: -				set = true;
>, <Line: -				if( create ) {
>, <Line: -					((TrackHeaderBox)header).setCreationTime(date);
>, <Line: -				}
>, <Line: -				else {
>, <Line: -					((TrackHeaderBox)header).setModificationTime(date);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}
>, <Line: -		setWindowsMediaDate( "WM/EncodingTime", date );
>, <Line: -		if( !set ) {
>, <Line: -			throw new RuntimeException( "Can't yet add MovieHeaderBox or MediaHeaderBox and none were preset to set create and/or modify date" );
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public void setGpsCoordinates( String iso6709String ) {
>, <Line: -		AppleGPSCoordinatesBox coordBox = (AppleGPSCoordinatesBox)getBox( isoFile, AppleGPSCoordinatesBox.TYPE );
>, <Line: -		if( coordBox == null ) {
>, <Line: -			UserDataBox udb = getUserDataBox();
>, <Line: -			coordBox = new AppleGPSCoordinatesBox();
>, <Line: -			udb.addBox( coordBox );
>, <Line: -		}
>, <Line: -		coordBox.setValue( iso6709String );
>, <Line: -	}
>, <Line: -	public void setMediaCreateDate( Date date ) {
>, <Line: -		setMediaDate( date, true );
>, <Line: -	}
>, <Line: -	public void setMediaModificationDate( Date date ) {
>, <Line: -		setMediaDate( date, false );
>, <Line: -	}
>, <Line: -	public void setTitle( String title ) {
>, <Line: -		AppleNameBox titleBox = (AppleNameBox)getBox( isoFile, AppleNameBox.TYPE );
>, <Line: -		if( titleBox == null ) {
>, <Line: -			AppleItemListBox itemList = getItemListBox();
>, <Line: -			titleBox = new AppleNameBox();
>, <Line: -			itemList.addBox( titleBox );
>, <Line: -		}
>, <Line: -		titleBox.setValue( title );
>, <Line: -	}
>, <Line: -	private AppleItemListBox getItemListBox() {
>, <Line: -		AppleItemListBox itemList = (AppleItemListBox)getBox( isoFile, AppleItemListBox.TYPE );
>, <Line: -		if( itemList == null ) {
>, <Line: -			MetaBox mb = getMetaBox();
>, <Line: -			itemList = new AppleItemListBox();
>, <Line: -			mb.addBox( itemList );
>, <Line: -		}
>, <Line: -		return itemList;
>, <Line: -	}
>, <Line: -	@SuppressWarnings("deprecation")
>, <Line: -	public void setMediaModificationDate( String date ) {
>, <Line: -		setMediaModificationDate( new Date( Date.parse( date ) ) ); //Deprecated, but also the easiest way to do this quickly
>, <Line: -	}
>, <Line: -	@SuppressWarnings("deprecation")
>, <Line: -	public void setMediaCreateDate( String date ) {
>, <Line: -		try {
>, <Line: -			setMediaCreateDate( new Date( Date.parse( date ) ) ); //Deprecated, but also the easiest way to do this quickly
>, <Line: -		} catch( IllegalArgumentException e ) {
>, <Line: -			throw new RuntimeException( "Unable to parse date '" + date + "'", e );
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public void setWindowsMediaDate( String tagName, Date dateVal ) {
>, <Line: -		XtraBox xb = getXtraBox();
>, <Line: -		xb.setTagValue( tagName, dateVal );
>, <Line: -	}
>, <Line: -	public void setWindowsMediaLong( String tagName, long longVal ) {
>, <Line: -		XtraBox xb = getXtraBox();
>, <Line: -		xb.setTagValue( tagName, longVal );
>, <Line: -	}
>, <Line: -	public void setWindowsMediaStrings( String tagName, String values[] ) {
>, <Line: -		XtraBox xb = getXtraBox();
>, <Line: -		xb.setTagValues( tagName, values );
>, <Line: -	}
>, <Line: -	public void removeWindowsMediaTag( String tagName ) {
>, <Line: -		XtraBox xb = getXtraBox();
>, <Line: -		xb.removeTag( tagName );
>, <Line: -	}
>, <Line: -	private UserDataBox getUserDataBox() {
>, <Line: -		if( userDataBox == null ) {
>, <Line: -			userDataBox = new UserDataBox();
>, <Line: -			isoFile.getMovieBox().addBox( userDataBox );
>, <Line: -		}
>, <Line: -		return userDataBox;
>, <Line: -	}
>, <Line: -	private MetaBox getMetaBox() {
>, <Line: -		if( metaBox == null ) {
>, <Line: -			UserDataBox ud = getUserDataBox();
>, <Line: -			metaBox = (MetaBox) getBox( ud, MetaBox.TYPE );
>, <Line: -			if( metaBox == null ) {
>, <Line: -				metaBox = new MetaBox();
>, <Line: -                ud.addBox(metaBox);
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return metaBox;
>, <Line: -	}
>, <Line: -	private XtraBox getXtraBox() {
>, <Line: -		if( xtraBox == null ) {
>, <Line: -			UserDataBox ud = getUserDataBox(); //Create user data box if necessary
>, <Line: -			xtraBox = (XtraBox)getBox( ud, XtraBox.TYPE );
>, <Line: -			if( xtraBox == null ) {
>, <Line: -				xtraBox = new XtraBox();
>, <Line: -				ud.addBox( xtraBox );
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return xtraBox;
>, <Line: -	}
>, <Line: -	public void writeMp4( String filename ) throws IOException {
>, <Line: -        long finalUserDataSize = 0;
>, <Line: -		if( userDataBox != null ) {
>, <Line: -			finalUserDataSize = userDataBox.getSize();
>, <Line: -		}
>, <Line: -        if (needsOffsetCorrection(isoFile)) {
>, <Line: -            correctChunkOffsets(isoFile, finalUserDataSize - originalUserDataSize);
>, <Line: -        FileOutputStream videoFileOutputStream = null;
>, <Line: -	        videoFileOutputStream = new FileOutputStream(filename);
>, <Line: -	        isoFile.getBox(videoFileOutputStream.getChannel());
>, <Line: -        finally {
>, <Line: -        	closeQuietly(isoFile);
>, <Line: -        	IOUtils.closeQuietly(videoFileOutputStream);
>, <Line: -	}
>, <Line: -	private static String getIndentation( int indent ) {
>, <Line: -		char c[] = new char[indent];
>, <Line: -		for( int i = 0; i < indent; i++ ) {
>, <Line: -			c[i] = ' ';
>, <Line: -		}
>, <Line: -		return new String( c );
>, <Line: -	}
>, <Line: -	public void dumpBoxes() {
>, <Line: -		dumpBoxes( isoFile, 0 );
>, <Line: -	}
>, <Line: -	private static void dumpBoxes( Container container, int indent ) {
>, <Line: -		String meInd = getIndentation( indent );
>, <Line: -		String subInd = getIndentation( indent + 2 );
>, <Line: -		System.out.println( meInd +  container.getClass().getName() );
>, <Line: -		for (Box box : container.getBoxes() ) {
>, <Line: -        	if( box instanceof Container ) {
>, <Line: -        		dumpBoxes( (Container)box, indent + 2 );
>, <Line: -        	}
>, <Line: -        	else {
>, <Line: -        		try {
>, <Line: -	        		if( box instanceof UnknownBox ) {
>, <Line: -	        			System.out.println( subInd + box.getClass().getName() + "[" + box.getSize() + "/" + box.getType() + "]:" + box.toString() );
>, <Line: -	        		}
>, <Line: -		        	else if( box instanceof Utf8AppleDataBox ) {
>, <Line: -	        			System.out.println( subInd + box.getClass().getName() + ": " + box.getType() + ": " + box.toString() + ": " + ((Utf8AppleDataBox)box).getValue() );
>, <Line: -		        	}
>, <Line: -		        	else {
>, <Line: -	        			System.out.println( subInd + box.getClass().getName() + ": " + box.getType() + "[" + box.getSize() + "]: " + box.toString() );
>, <Line: -		        	}
>, <Line: -        		}
>, <Line: -        		catch( Exception e ) {
>, <Line: -        			System.err.println( "Error parsing " + box.getClass().getSimpleName() + " box: " + e );
>, <Line: -        			e.printStackTrace( System.err );
>, <Line: -        		}
>, <Line: -    		}
>, <Line: -	}
>, <Line: -        List<Box> chunkOffsetBoxes = Path.getPaths(tempIsoFile, "/moov[0]/trak/mdia[0]/minf[0]/stbl[0]/stco[0]");
>, <Line: -        for (Box chunkOffsetBox : chunkOffsetBoxes) {
>, <Line: -            LinkedList<Box> stblChildren = new LinkedList<Box>(chunkOffsetBox.getParent().getBoxes());
>, <Line: -            long[] cOffsets = ((ChunkOffsetBox) chunkOffsetBox).getChunkOffsets();
>, <Line: -            chunkOffsetBox.getParent().setBoxes(stblChildren);
>, <Line: -    public static void deleteQuietly( File f ) {
>, <Line: -    	try {
>, <Line: -    		f.delete();
>, <Line: -    	}
>, <Line: -    	catch( Exception ioe ) {
>, <Line: -    		//ignore
>, <Line: -    	}
>, <Line: -    public static Box getBox( Container outer, String type ) {
>, <Line: -    	List<Box> list = getBoxes( outer, new String[] { type } );
>, <Line: -    	return list.get( 0 );
>, <Line: -    }
>, <Line: -    public static List<Box> getBoxes( Container outer, String types[], List<Box> list ) {
>, <Line: -		for (Box box : outer.getBoxes() ) {
>, <Line: -        	for( int i = 0; i < types.length; i++ ) {
>, <Line: -        		if( box.getType().equals( types[i] ) ) {
>, <Line: -        			list.add( box );
>, <Line: -        		}
>, <Line: -        	}
>, <Line: -			if( box instanceof Container ) {
>, <Line: -        		getBoxes( (Container)box, types, list );
>, <Line: -        	}
>, <Line: -		}
>, <Line: -		return list;
>, <Line: -    }
>, <Line: -    public static List<Box> getBoxes( Container outer, String types[] ) {
>, <Line: -		List<Box> list = new ArrayList<Box>();
>, <Line: -    	return getBoxes( outer, types, list );
>, <Line: -    //http://stackoverflow.com/questions/3389348/parse-any-date-in-java
>, <Line: -    private static final HashMap<String, String> DATE_FORMAT_REGEXPS = new HashMap<String, String>() { {
>, <Line: -        put("^\\d{8}$", "yyyyMMdd");
>, <Line: -        put("^\\d{1,2}-\\d{1,2}-\\d{4}$", "dd-MM-yyyy");
>, <Line: -        put("^\\d{4}-\\d{1,2}-\\d{1,2}$", "yyyy-MM-dd");
>, <Line: -        put("^\\d{1,2}/\\d{1,2}/\\d{4}$", "MM/dd/yyyy");
>, <Line: -        put("^\\d{4}/\\d{1,2}/\\d{1,2}$", "yyyy/MM/dd");
>, <Line: -        put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}$", "dd MMM yyyy");
>, <Line: -        put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}$", "dd MMMM yyyy");
>, <Line: -        put("^\\d{12}$", "yyyyMMddHHmm");
>, <Line: -        put("^\\d{8}\\s\\d{4}$", "yyyyMMdd HHmm");
>, <Line: -        put("^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}$", "dd-MM-yyyy HH:mm");
>, <Line: -        put("^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}$", "yyyy-MM-dd HH:mm");
>, <Line: -        put("^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}$", "MM/dd/yyyy HH:mm");
>, <Line: -        put("^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}$", "yyyy/MM/dd HH:mm");
>, <Line: -        put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}$", "dd MMM yyyy HH:mm");
>, <Line: -        put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}$", "dd MMMM yyyy HH:mm");
>, <Line: -        put("^\\d{14}$", "yyyyMMddHHmmss");
>, <Line: -        put("^\\d{8}\\s\\d{6}$", "yyyyMMdd HHmmss");
>, <Line: -        put("^\\d{1,2}-\\d{1,2}-\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd-MM-yyyy HH:mm:ss");
>, <Line: -        put("^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy-MM-dd HH:mm:ss");
>, <Line: -        put("^\\d{1,2}/\\d{1,2}/\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "MM/dd/yyyy HH:mm:ss");
>, <Line: -        put("^\\d{4}/\\d{1,2}/\\d{1,2}\\s\\d{1,2}:\\d{2}:\\d{2}$", "yyyy/MM/dd HH:mm:ss");
>, <Line: -        put("^\\d{1,2}\\s[a-z]{3}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd MMM yyyy HH:mm:ss");
>, <Line: -        put("^\\d{1,2}\\s[a-z]{4,}\\s\\d{4}\\s\\d{1,2}:\\d{2}:\\d{2}$", "dd MMMM yyyy HH:mm:ss");
>, <Line: -    } };
>, <Line: -    public static Date parseDate( String dateString ) throws ParseException {
>, <Line: -    	String formatString = determineDateFormat( dateString );
>, <Line: -    	if( formatString == null ) {
>, <Line: -    		return null;
>, <Line: -    	}
>, <Line: -    	SimpleDateFormat sdf = new SimpleDateFormat( formatString );
>, <Line: -    	return sdf.parse( dateString );
>]