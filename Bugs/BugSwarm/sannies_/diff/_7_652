[<Line: +/*  
>, <Line: + * Copyright 2008 CoreMedia AG, Hamburg
>, <Line: + *
>, <Line: + * Licensed under the Apache License, Version 2.0 (the License); 
>, <Line: + * you may not use this file except in compliance with the License. 
>, <Line: + * You may obtain a copy of the License at 
>, <Line: + * 
>, <Line: + *     http://www.apache.org/licenses/LICENSE-2.0 
>, <Line: + * 
>, <Line: + * Unless required by applicable law or agreed to in writing, software 
>, <Line: + * distributed under the License is distributed on an AS IS BASIS, 
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
>, <Line: + * See the License for the specific language governing permissions and 
>, <Line: + * limitations under the License. 
>, <Line: + */
>, <Line: +package org.mp4parser.streaming.input.h264;
>, <Line: +import org.mp4parser.Box;
>, <Line: +import org.mp4parser.Container;
>, <Line: +import org.mp4parser.ParsableBox;
>, <Line: +import org.mp4parser.support.AbstractBox;
>, <Line: +import java.beans.BeanInfo;
>, <Line: +import java.beans.IntrospectionException;
>, <Line: +import java.beans.Introspector;
>, <Line: +import java.beans.PropertyDescriptor;
>, <Line: +import java.lang.reflect.InvocationTargetException;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.Collection;
>, <Line: +import java.util.List;
>, <Line: +/**
>, <Line: + * Walks through a Container and its children to see that no getter throws any exception.
>, <Line: + */
>, <Line: +public final class Walk {
>, <Line: +    private static final Collection<String> skipList = Arrays.asList("class",
>, <Line: +            "boxes",
>, <Line: +            "type",
>, <Line: +            "size",
>, <Line: +            "displayName",
>, <Line: +            "contentSize",
>, <Line: +            "offset",
>, <Line: +            "header",
>, <Line: +            "version",
>, <Line: +            "flags",
>, <Line: +            "isoFile",
>, <Line: +            "parent",
>, <Line: +            "omaDrmData",
>, <Line: +            "content",
>, <Line: +            "tracks",
>, <Line: +            "sampleSizeAtIndex",
>, <Line: +            "offset",
>, <Line: +            "sampleCount");
>, <Line: +    private Walk() {
>, <Line: +    }
>, <Line: +    public static void through(Container container) throws IntrospectionException, IllegalAccessException, InvocationTargetException {
>, <Line: +        for (Box b : container.getBoxes()) {
>, <Line: +            List<Box> myBoxes = (List<Box>) container.getBoxes(b.getClass());
>, <Line: +            boolean found = false;
>, <Line: +            for (Box myBox : myBoxes) {
>, <Line: +                if (myBox == b) {
>, <Line: +                    found = true;
>, <Line: +                }
>, <Line: +            }
>, <Line: +            if (!found) {
>, <Line: +                throw new RuntimeException("Didn't find the box");
>, <Line: +            }
>, <Line: +            if (b instanceof Container) {
>, <Line: +                Walk.through((Container) b);
>, <Line: +            }
>, <Line: +            b.toString(); // Just test if some execption is trown
>, <Line: +            BeanInfo beanInfo = Introspector.getBeanInfo(b.getClass());
>, <Line: +            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
>, <Line: +            for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {
>, <Line: +                String name = propertyDescriptor.getName();
>, <Line: +                if (!Walk.skipList.contains(name) &&
>, <Line: +                        propertyDescriptor.getReadMethod() != null &&
>, <Line: +                        !ParsableBox.class.isAssignableFrom(propertyDescriptor.getReadMethod().getReturnType())) {
>, <Line: +                    propertyDescriptor.getReadMethod().invoke(b, (Object[]) null);
>, <Line: +                }
>, <Line: +            }
>, <Line: +            if (b instanceof AbstractBox) {
>, <Line: +                assert ((AbstractBox) b).isParsed() : "Box (" + b.getClass().getSimpleName() + ") is not parsed.";
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +}
>]
[]