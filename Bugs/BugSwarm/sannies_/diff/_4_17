[<Line: +package org.mp4parser.streaming.input.h264.spspps;
>, <Line: +import java.io.IOException;
>, <Line: +import java.nio.BufferUnderflowException;
>, <Line: +import java.nio.ByteBuffer;
>, <Line: +public class ByteBufferBitreader {
>, <Line: +    ByteBuffer buffer;
>, <Line: +    int nBit;
>, <Line: +    private int currentByte;
>, <Line: +    private int nextByte;
>, <Line: +    public ByteBufferBitreader(ByteBuffer buffer) {
>, <Line: +        this.buffer = buffer;
>, <Line: +        currentByte = get();
>, <Line: +        nextByte = get();
>, <Line: +    }
>, <Line: +    public int get() {
>, <Line: +        try {
>, <Line: +            int i = buffer.get();
>, <Line: +            i = i < 0 ? i + 256 : i;
>, <Line: +            return i;
>, <Line: +        } catch (BufferUnderflowException e) {
>, <Line: +            return -1;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public int read1Bit() throws IOException {
>, <Line: +        if (nBit == 8) {
>, <Line: +            advance();
>, <Line: +            if (currentByte == -1) {
>, <Line: +                return -1;
>, <Line: +            }
>, <Line: +        }
>, <Line: +        int res = (currentByte >> (7 - nBit)) & 1;
>, <Line: +        nBit++;
>, <Line: +        return res;
>, <Line: +    }
>, <Line: +    private void advance() throws IOException {
>, <Line: +        currentByte = nextByte;
>, <Line: +        nextByte = get();
>, <Line: +        nBit = 0;
>, <Line: +    }
>, <Line: +    public int readUE() throws IOException {
>, <Line: +        int cnt = 0;
>, <Line: +        while (read1Bit() == 0) {
>, <Line: +            cnt++;
>, <Line: +        }
>, <Line: +        int res = 0;
>, <Line: +        if (cnt > 0) {
>, <Line: +            res = (int) ((1 << cnt) - 1 + readNBit(cnt));
>, <Line: +        }
>, <Line: +        return res;
>, <Line: +    }
>, <Line: +    public long readNBit(int n) throws IOException {
>, <Line: +        if (n > 64)
>, <Line: +            throw new IllegalArgumentException("Can not readByte more then 64 bit");
>, <Line: +        long val = 0;
>, <Line: +        for (int i = 0; i < n; i++) {
>, <Line: +            val <<= 1;
>, <Line: +            val |= read1Bit();
>, <Line: +        }
>, <Line: +        return val;
>, <Line: +    }
>, <Line: +    public boolean readBool() throws IOException {
>, <Line: +        return read1Bit() != 0;
>, <Line: +    }
>, <Line: +    public int readSE() throws IOException {
>, <Line: +        int val = readUE();
>, <Line: +        int sign = ((val & 0x1) << 1) - 1;
>, <Line: +        val = ((val >> 1) + (val & 0x1)) * sign;
>, <Line: +        return val;
>, <Line: +    }
>, <Line: +    public boolean moreRBSPData() throws IOException {
>, <Line: +        if (nBit == 8) {
>, <Line: +            advance();
>, <Line: +        }
>, <Line: +        int tail = 1 << (8 - nBit - 1);
>, <Line: +        int mask = ((tail << 1) - 1);
>, <Line: +        boolean hasTail = (currentByte & mask) == tail;
>, <Line: +        return !(currentByte == -1 || (nextByte == -1 && hasTail));
>, <Line: +    }
>, <Line: +}
>]
[]