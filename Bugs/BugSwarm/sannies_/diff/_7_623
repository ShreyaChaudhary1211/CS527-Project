[<Line: +package org.mp4parser.streaming.input.aac;
>, <Line: +import org.mp4parser.boxes.iso14496.part1.objectdescriptors.AudioSpecificConfig;
>, <Line: +import org.mp4parser.boxes.iso14496.part1.objectdescriptors.DecoderConfigDescriptor;
>, <Line: +import org.mp4parser.boxes.iso14496.part1.objectdescriptors.ESDescriptor;
>, <Line: +import org.mp4parser.boxes.iso14496.part1.objectdescriptors.SLConfigDescriptor;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.SampleDescriptionBox;
>, <Line: +import org.mp4parser.boxes.iso14496.part14.ESDescriptorBox;
>, <Line: +import org.mp4parser.boxes.sampleentry.AudioSampleEntry;
>, <Line: +import org.mp4parser.streaming.extensions.DefaultSampleFlagsTrackExtension;
>, <Line: +import org.mp4parser.streaming.extensions.TrackIdTrackExtension;
>, <Line: +import org.mp4parser.streaming.input.AbstractStreamingTrack;
>, <Line: +import org.mp4parser.streaming.input.StreamingSampleImpl;
>, <Line: +import java.io.EOFException;
>, <Line: +import java.io.IOException;
>, <Line: +import java.io.InputStream;
>, <Line: +import java.nio.ByteBuffer;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.Map;
>, <Line: +import java.util.concurrent.Callable;
>, <Line: +import java.util.concurrent.CountDownLatch;
>, <Line: +import java.util.logging.Logger;
>, <Line: +public class AdtsAacStreamingTrack extends AbstractStreamingTrack implements Callable<Void> {
>, <Line: +    private static Map<Integer, Integer> samplingFrequencyIndexMap = new HashMap<Integer, Integer>();
>, <Line: +    private static Logger LOG = Logger.getLogger(AdtsAacStreamingTrack.class.getName());
>, <Line: +    static {
>, <Line: +        samplingFrequencyIndexMap.put(96000, 0);
>, <Line: +        samplingFrequencyIndexMap.put(88200, 1);
>, <Line: +        samplingFrequencyIndexMap.put(64000, 2);
>, <Line: +        samplingFrequencyIndexMap.put(48000, 3);
>, <Line: +        samplingFrequencyIndexMap.put(44100, 4);
>, <Line: +        samplingFrequencyIndexMap.put(32000, 5);
>, <Line: +        samplingFrequencyIndexMap.put(24000, 6);
>, <Line: +        samplingFrequencyIndexMap.put(22050, 7);
>, <Line: +        samplingFrequencyIndexMap.put(16000, 8);
>, <Line: +        samplingFrequencyIndexMap.put(12000, 9);
>, <Line: +        samplingFrequencyIndexMap.put(11025, 10);
>, <Line: +        samplingFrequencyIndexMap.put(8000, 11);
>, <Line: +        samplingFrequencyIndexMap.put(0x0, 96000);
>, <Line: +        samplingFrequencyIndexMap.put(0x1, 88200);
>, <Line: +        samplingFrequencyIndexMap.put(0x2, 64000);
>, <Line: +        samplingFrequencyIndexMap.put(0x3, 48000);
>, <Line: +        samplingFrequencyIndexMap.put(0x4, 44100);
>, <Line: +        samplingFrequencyIndexMap.put(0x5, 32000);
>, <Line: +        samplingFrequencyIndexMap.put(0x6, 24000);
>, <Line: +        samplingFrequencyIndexMap.put(0x7, 22050);
>, <Line: +        samplingFrequencyIndexMap.put(0x8, 16000);
>, <Line: +        samplingFrequencyIndexMap.put(0x9, 12000);
>, <Line: +        samplingFrequencyIndexMap.put(0xa, 11025);
>, <Line: +        samplingFrequencyIndexMap.put(0xb, 8000);
>, <Line: +    }
>, <Line: +    CountDownLatch gotFirstSample = new CountDownLatch(1);
>, <Line: +    SampleDescriptionBox stsd = null;
>, <Line: +    private InputStream is;
>, <Line: +    private boolean closed;
>, <Line: +    private AdtsHeader firstHeader;
>, <Line: +    private String lang = "und";
>, <Line: +    private long avgBitrate;
>, <Line: +    private long maxBitrate;
>, <Line: +    public AdtsAacStreamingTrack(InputStream is, long avgBitrate, long maxBitrate) {
>, <Line: +        this.avgBitrate = avgBitrate;
>, <Line: +        this.maxBitrate = maxBitrate;
>, <Line: +        assert is != null;
>, <Line: +        this.is = is;
>, <Line: +        DefaultSampleFlagsTrackExtension defaultSampleFlagsTrackExtension = new DefaultSampleFlagsTrackExtension();
>, <Line: +        defaultSampleFlagsTrackExtension.setIsLeading(2);
>, <Line: +        defaultSampleFlagsTrackExtension.setSampleDependsOn(2);
>, <Line: +        defaultSampleFlagsTrackExtension.setSampleIsDependedOn(2);
>, <Line: +        defaultSampleFlagsTrackExtension.setSampleHasRedundancy(2);
>, <Line: +        defaultSampleFlagsTrackExtension.setSampleIsNonSyncSample(false);
>, <Line: +        this.addTrackExtension(defaultSampleFlagsTrackExtension);
>, <Line: +    }
>, <Line: +    public boolean isClosed() {
>, <Line: +        return closed;
>, <Line: +    }
>, <Line: +    public synchronized SampleDescriptionBox getSampleDescriptionBox() {
>, <Line: +        waitForFirstSample();
>, <Line: +        if (stsd == null) {
>, <Line: +            stsd = new SampleDescriptionBox();
>, <Line: +            AudioSampleEntry audioSampleEntry = new AudioSampleEntry("mp4a");
>, <Line: +            if (firstHeader.channelconfig == 7) {
>, <Line: +                audioSampleEntry.setChannelCount(8);
>, <Line: +            } else {
>, <Line: +                audioSampleEntry.setChannelCount(firstHeader.channelconfig);
>, <Line: +            }
>, <Line: +            audioSampleEntry.setSampleRate(firstHeader.sampleRate);
>, <Line: +            audioSampleEntry.setDataReferenceIndex(1);
>, <Line: +            audioSampleEntry.setSampleSize(16);
>, <Line: +            ESDescriptorBox esds = new ESDescriptorBox();
>, <Line: +            ESDescriptor descriptor = new ESDescriptor();
>, <Line: +            descriptor.setEsId(0);
>, <Line: +            SLConfigDescriptor slConfigDescriptor = new SLConfigDescriptor();
>, <Line: +            slConfigDescriptor.setPredefined(2);
>, <Line: +            descriptor.setSlConfigDescriptor(slConfigDescriptor);
>, <Line: +            DecoderConfigDescriptor decoderConfigDescriptor = new DecoderConfigDescriptor();
>, <Line: +            decoderConfigDescriptor.setObjectTypeIndication(0x40);
>, <Line: +            decoderConfigDescriptor.setStreamType(5);
>, <Line: +            decoderConfigDescriptor.setBufferSizeDB(1536);
>, <Line: +            decoderConfigDescriptor.setMaxBitRate(maxBitrate);
>, <Line: +            decoderConfigDescriptor.setAvgBitRate(avgBitrate);
>, <Line: +            AudioSpecificConfig audioSpecificConfig = new AudioSpecificConfig();
>, <Line: +            audioSpecificConfig.setOriginalAudioObjectType(2); // AAC LC
>, <Line: +            audioSpecificConfig.setSamplingFrequencyIndex(firstHeader.sampleFrequencyIndex);
>, <Line: +            audioSpecificConfig.setChannelConfiguration(firstHeader.channelconfig);
>, <Line: +            decoderConfigDescriptor.setAudioSpecificInfo(audioSpecificConfig);
>, <Line: +            descriptor.setDecoderConfigDescriptor(decoderConfigDescriptor);
>, <Line: +            esds.setEsDescriptor(descriptor);
>, <Line: +            audioSampleEntry.addBox(esds);
>, <Line: +            stsd.addBox(audioSampleEntry);
>, <Line: +        }
>, <Line: +        return stsd;
>, <Line: +    }
>, <Line: +    void waitForFirstSample() {
>, <Line: +        try {
>, <Line: +            gotFirstSample.await();
>, <Line: +        } catch (InterruptedException e) {
>, <Line: +            throw new RuntimeException(e);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public long getTimescale() {
>, <Line: +        waitForFirstSample();
>, <Line: +        return firstHeader.sampleRate;
>, <Line: +    }
>, <Line: +    public String getHandler() {
>, <Line: +        return "soun";
>, <Line: +    }
>, <Line: +    public String getLanguage() {
>, <Line: +        return lang;
>, <Line: +    }
>, <Line: +    public void setLanguage(String lang) {
>, <Line: +        this.lang = lang;
>, <Line: +    }
>, <Line: +    public void close() throws IOException {
>, <Line: +        closed = true;
>, <Line: +        is.close();
>, <Line: +    }
>, <Line: +    private AdtsHeader readADTSHeader(InputStream fis) throws IOException {
>, <Line: +        AdtsHeader hdr = new AdtsHeader();
>, <Line: +        int x = fis.read(); // A
>, <Line: +        int syncword = x << 4;
>, <Line: +        x = fis.read();
>, <Line: +        if (x == -1) {
>, <Line: +            return null;
>, <Line: +        }
>, <Line: +        syncword += (x >> 4);
>, <Line: +        if (syncword != 0xfff) {
>, <Line: +            throw new IOException("Expected Start Word 0xfff");
>, <Line: +        }
>, <Line: +        hdr.mpegVersion = (x & 0x8) >> 3;
>, <Line: +        hdr.layer = (x & 0x6) >> 1;
>, <Line: +        ; // C
>, <Line: +        hdr.protectionAbsent = (x & 0x1);  // D
>, <Line: +        x = fis.read();
>, <Line: +        hdr.profile = ((x & 0xc0) >> 6) + 1;  // E
>, <Line: +        //System.err.println(String.format("Profile %s", audioObjectTypes.get(hdr.profile)));
>, <Line: +        hdr.sampleFrequencyIndex = (x & 0x3c) >> 2;
>, <Line: +        assert hdr.sampleFrequencyIndex != 15;
>, <Line: +        hdr.sampleRate = samplingFrequencyIndexMap.get(hdr.sampleFrequencyIndex); // F
>, <Line: +        hdr.channelconfig = (x & 1) << 2; // H
>, <Line: +        x = fis.read();
>, <Line: +        hdr.channelconfig += (x & 0xc0) >> 6;
>, <Line: +        hdr.original = (x & 0x20) >> 5; // I
>, <Line: +        hdr.home = (x & 0x10) >> 4; // J
>, <Line: +        hdr.copyrightedStream = (x & 0x8) >> 3; // K
>, <Line: +        hdr.copyrightStart = (x & 0x4) >> 2; // L
>, <Line: +        hdr.frameLength = (x & 0x3) << 9;  // M
>, <Line: +        x = fis.read();
>, <Line: +        hdr.frameLength += (x << 3);
>, <Line: +        x = fis.read();
>, <Line: +        hdr.frameLength += (x & 0xe0) >> 5;
>, <Line: +        hdr.bufferFullness = (x & 0x1f) << 6;
>, <Line: +        x = fis.read();
>, <Line: +        hdr.bufferFullness += (x & 0xfc) >> 2;
>, <Line: +        hdr.numAacFramesPerAdtsFrame = ((x & 0x3)) + 1;
>, <Line: +        if (hdr.numAacFramesPerAdtsFrame != 1) {
>, <Line: +            throw new IOException("This muxer can only work with 1 AAC frame per ADTS frame");
>, <Line: +        }
>, <Line: +        if (hdr.protectionAbsent == 0) {
>, <Line: +            int crc1 = fis.read();
>, <Line: +            int crc2 = fis.read();
>, <Line: +        }
>, <Line: +        return hdr;
>, <Line: +    }
>, <Line: +    public Void call() throws Exception {
>, <Line: +        AdtsHeader header;
>, <Line: +        int i = 1;
>, <Line: +        try {
>, <Line: +            while ((header = readADTSHeader(is)) != null) {
>, <Line: +                if (firstHeader == null) {
>, <Line: +                    firstHeader = header;
>, <Line: +                    gotFirstSample.countDown();
>, <Line: +                }
>, <Line: +                byte[] frame = new byte[header.frameLength - header.getSize()];
>, <Line: +                int n = 0;
>, <Line: +                while (n < frame.length) {
>, <Line: +                    int count = is.read(frame, n, frame.length - n);
>, <Line: +                    if (count < 0)
>, <Line: +                        throw new EOFException();
>, <Line: +                    n += count;
>, <Line: +                }
>, <Line: +                //System.err.println("Sample " + i++);
>, <Line: +                sampleSink.acceptSample(new StreamingSampleImpl(ByteBuffer.wrap(frame), 1024), this);
>, <Line: +            }
>, <Line: +        } catch (EOFException e) {
>, <Line: +            LOG.info("Done reading ADTS AAC file.");
>, <Line: +        }
>, <Line: +        return null;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public String toString() {
>, <Line: +        TrackIdTrackExtension trackIdTrackExtension = this.getTrackExtension(TrackIdTrackExtension.class);
>, <Line: +        if (trackIdTrackExtension != null) {
>, <Line: +            return "AdtsAacStreamingTrack{trackId=" + trackIdTrackExtension.getTrackId() + "}";
>, <Line: +        } else {
>, <Line: +            return "AdtsAacStreamingTrack{}";
>, <Line: +        }
>, <Line: +    }
>, <Line: +}
>]
[]