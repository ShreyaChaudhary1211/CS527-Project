[<Line: +package org.mp4parser.muxer.samples;
>, <Line: +import org.mp4parser.Container;
>, <Line: +import org.mp4parser.muxer.RandomAccessSource;
>, <Line: +import org.mp4parser.muxer.Sample;
>, <Line: +import org.mp4parser.tools.Path;
>, <Line: +import java.util.AbstractList;
>, <Line: +import java.util.List;
>, <Line: +/**
>, <Line: + * Creates a list of <code>ByteBuffer</code>s that represent the samples of a given track.
>, <Line: + */
>, <Line: +public class SampleList extends AbstractList<Sample> {
>, <Line: +    List<Sample> samples;
>, <Line: +    public SampleList(long trackId, Container isofile, RandomAccessSource source) {
>, <Line: +        if (Path.getPaths(isofile, "moov/mvex/trex").isEmpty()) {
>, <Line: +            samples = new DefaultMp4SampleList(trackId, isofile, source);
>, <Line: +        } else {
>, <Line: +            samples = new FragmentedMp4SampleList(trackId, isofile, source);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public Sample get(int index) {
>, <Line: +        return samples.get(index);
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public int size() {
>, <Line: +        return samples.size();
>, <Line: +    }
>, <Line: +}
>]
[]