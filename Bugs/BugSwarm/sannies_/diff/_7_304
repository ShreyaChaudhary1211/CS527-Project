[<Line: +package org.mp4parser.boxes.sampleentry;
>, <Line: +import org.mp4parser.Box;
>, <Line: +import org.mp4parser.BoxParser;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.ProtectionSchemeInformationBox;
>, <Line: +import org.mp4parser.tools.CastUtils;
>, <Line: +import org.mp4parser.tools.IsoTypeReader;
>, <Line: +import org.mp4parser.tools.IsoTypeWriter;
>, <Line: +import java.nio.channels.ReadableByteChannel;
>, <Line: +     * @see ProtectionSchemeInformationBox
>, <Line: +    public void setChannelCount(int channelCount) {
>, <Line: +        this.channelCount = channelCount;
>, <Line: +    }
>, <Line: +    public void setSampleSize(int sampleSize) {
>, <Line: +        this.sampleSize = sampleSize;
>, <Line: +    }
>, <Line: +    public void setSampleRate(long sampleRate) {
>, <Line: +        this.sampleRate = sampleRate;
>, <Line: +    }
>, <Line: +    public void setSoundVersion(int soundVersion) {
>, <Line: +        this.soundVersion = soundVersion;
>, <Line: +    }
>, <Line: +    public void setCompressionId(int compressionId) {
>, <Line: +        this.compressionId = compressionId;
>, <Line: +    }
>, <Line: +    public void setPacketSize(int packetSize) {
>, <Line: +        this.packetSize = packetSize;
>, <Line: +    }
>, <Line: +    public void setSamplesPerPacket(long samplesPerPacket) {
>, <Line: +        this.samplesPerPacket = samplesPerPacket;
>, <Line: +    }
>, <Line: +    public void setBytesPerPacket(long bytesPerPacket) {
>, <Line: +        this.bytesPerPacket = bytesPerPacket;
>, <Line: +    }
>, <Line: +    public void setBytesPerFrame(long bytesPerFrame) {
>, <Line: +        this.bytesPerFrame = bytesPerFrame;
>, <Line: +    }
>, <Line: +    public void setBytesPerSample(long bytesPerSample) {
>, <Line: +        this.bytesPerSample = bytesPerSample;
>, <Line: +    }
>, <Line: +    public void setSoundVersion2Data(byte[] soundVersion2Data) {
>, <Line: +        this.soundVersion2Data = soundVersion2Data;
>, <Line: +    public int getReserved1() {
>, <Line: +        return reserved1;
>, <Line: +    public long getReserved2() {
>, <Line: +        return reserved2;
>, <Line: +    public void setReserved2(long reserved2) {
>, <Line: +        this.reserved2 = reserved2;
>, <Line: +    public void parse(ReadableByteChannel dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
>, <Line: +            final ByteBuffer owmaSpecifics = ByteBuffer.allocate(CastUtils.l2i(remaining));
>]
[<Line: -package com.coremedia.iso.boxes.sampleentry;
>, <Line: -import com.coremedia.iso.BoxParser;
>, <Line: -import com.coremedia.iso.IsoTypeReader;
>, <Line: -import com.coremedia.iso.IsoTypeWriter;
>, <Line: -import com.coremedia.iso.boxes.Box;
>, <Line: -import com.coremedia.iso.boxes.Container;
>, <Line: -import com.googlecode.mp4parser.DataSource;
>, <Line: -import static com.googlecode.mp4parser.util.CastUtils.l2i;
>, <Line: -     * @see com.coremedia.iso.boxes.ProtectionSchemeInformationBox
>, <Line: -    public int getReserved1() {
>, <Line: -        return reserved1;
>, <Line: -    }
>, <Line: -    public long getReserved2() {
>, <Line: -        return reserved2;
>, <Line: -    }
>, <Line: -    public void setChannelCount(int channelCount) {
>, <Line: -        this.channelCount = channelCount;
>, <Line: -    }
>, <Line: -    public void setSampleSize(int sampleSize) {
>, <Line: -        this.sampleSize = sampleSize;
>, <Line: -    }
>, <Line: -    public void setSampleRate(long sampleRate) {
>, <Line: -        this.sampleRate = sampleRate;
>, <Line: -    }
>, <Line: -    public void setSoundVersion(int soundVersion) {
>, <Line: -        this.soundVersion = soundVersion;
>, <Line: -    }
>, <Line: -    public void setCompressionId(int compressionId) {
>, <Line: -        this.compressionId = compressionId;
>, <Line: -    }
>, <Line: -    public void setPacketSize(int packetSize) {
>, <Line: -        this.packetSize = packetSize;
>, <Line: -    }
>, <Line: -    public void setSamplesPerPacket(long samplesPerPacket) {
>, <Line: -        this.samplesPerPacket = samplesPerPacket;
>, <Line: -    }
>, <Line: -    public void setBytesPerPacket(long bytesPerPacket) {
>, <Line: -        this.bytesPerPacket = bytesPerPacket;
>, <Line: -    }
>, <Line: -    public void setBytesPerFrame(long bytesPerFrame) {
>, <Line: -        this.bytesPerFrame = bytesPerFrame;
>, <Line: -    public void setBytesPerSample(long bytesPerSample) {
>, <Line: -        this.bytesPerSample = bytesPerSample;
>, <Line: -    public void setReserved2(long reserved2) {
>, <Line: -        this.reserved2 = reserved2;
>, <Line: -    public void setSoundVersion2Data(byte[] soundVersion2Data) {
>, <Line: -        this.soundVersion2Data = soundVersion2Data;
>, <Line: -    public void parse(DataSource dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
>, <Line: -            final ByteBuffer owmaSpecifics = ByteBuffer.allocate(l2i(remaining));
>, <Line: -                public Container getParent() {
>, <Line: -                    return AudioSampleEntry.this;
>, <Line: -                }
>, <Line: -                public void setParent(Container parent) {
>, <Line: -                    assert parent == AudioSampleEntry.this : "you cannot diswown this special box";
>, <Line: -                }
>, <Line: -                public long getOffset() {
>, <Line: -                    return 0;
>, <Line: -                }
>, <Line: -                public void parse(DataSource dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
>, <Line: -                    throw new RuntimeException("NotImplemented");
>, <Line: -                }
>]