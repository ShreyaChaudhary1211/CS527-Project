[]
[<Line: -package com.googlecode.mp4parser.util;/*
>, <Line: - * Licensed to the Apache Software Foundation (ASF) under one or more
>, <Line: - * contributor license agreements.  See the NOTICE file distributed with
>, <Line: - * this work for additional information regarding copyright ownership.
>, <Line: - * The ASF licenses this file to You under the Apache License, Version 2.0
>, <Line: - * (the "License"); you may not use this file except in compliance with
>, <Line: - * the License.  You may obtain a copy of the License at
>, <Line: - * 
>, <Line: - *      http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - * 
>, <Line: - * Unless required by applicable law or agreed to in writing, software
>, <Line: - * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - * See the License for the specific language governing permissions and
>, <Line: - * limitations under the License.
>, <Line: - */
>, <Line: -/*
>, <Line: - * Note: originally released under the GNU LGPL v2.1, 
>, <Line: - * but rereleased by the original author under the ASF license (above).
>, <Line: - */
>, <Line: -/**
>, <Line: - * <p>A hash map that uses primitive ints for the key rather than objects.</p>
>, <Line: - * <p>Note that this class is for internal optimization purposes only, and may
>, <Line: - * not be supported in future releases of Apache Commons Lang.  Utilities of
>, <Line: - * this sort may be included in future releases of Apache Commons Collections.</p>
>, <Line: - *
>, <Line: - * @author Justin Couch
>, <Line: - * @author Alex Chaffee (alex@apache.org)
>, <Line: - * @author Stephen Colebourne
>, <Line: - * @version $Revision: 561230 $
>, <Line: - * @see java.util.HashMap
>, <Line: - * @since 2.0
>, <Line: - */
>, <Line: -public class IntHashMap {
>, <Line: -    /**
>, <Line: -     * The hash table data.
>, <Line: -     */
>, <Line: -    private transient Entry table[];
>, <Line: -    /**
>, <Line: -     * The total number of entries in the hash table.
>, <Line: -     */
>, <Line: -    private transient int count;
>, <Line: -    /**
>, <Line: -     * The table is rehashed when its size exceeds this threshold.  (The
>, <Line: -     * value of this field is (int)(capacity * loadFactor).)
>, <Line: -     *
>, <Line: -     * @serial
>, <Line: -     */
>, <Line: -    private int threshold;
>, <Line: -    /**
>, <Line: -     * The load factor for the hashtable.
>, <Line: -     *
>, <Line: -     * @serial
>, <Line: -     */
>, <Line: -    private float loadFactor;
>, <Line: -    /**
>, <Line: -     * <p>Innerclass that acts as a datastructure to create a new entry in the
>, <Line: -     * table.</p>
>, <Line: -     */
>, <Line: -    private static class Entry {
>, <Line: -        int hash;
>, <Line: -        int key;
>, <Line: -        Object value;
>, <Line: -        Entry next;
>, <Line: -        /**
>, <Line: -         * <p>Create a new entry with the given values.</p>
>, <Line: -         *
>, <Line: -         * @param hash  The code used to hash the object with
>, <Line: -         * @param key   The key used to enter this in the table
>, <Line: -         * @param value The value for this key
>, <Line: -         * @param next  A reference to the next entry in the table
>, <Line: -         */
>, <Line: -        protected Entry(int hash, int key, Object value, Entry next) {
>, <Line: -            this.hash = hash;
>, <Line: -            this.key = key;
>, <Line: -            this.value = value;
>, <Line: -            this.next = next;
>, <Line: -        }
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Constructs a new, empty hashtable with a default capacity and load
>, <Line: -     * factor, which is <code>20</code> and <code>0.75</code> respectively.</p>
>, <Line: -     */
>, <Line: -    public IntHashMap() {
>, <Line: -        this(20, 0.75f);
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Constructs a new, empty hashtable with the specified initial capacity
>, <Line: -     * and default load factor, which is <code>0.75</code>.</p>
>, <Line: -     *
>, <Line: -     * @param initialCapacity the initial capacity of the hashtable.
>, <Line: -     * @throws IllegalArgumentException if the initial capacity is less
>, <Line: -     *                                  than zero.
>, <Line: -     */
>, <Line: -    public IntHashMap(int initialCapacity) {
>, <Line: -        this(initialCapacity, 0.75f);
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Constructs a new, empty hashtable with the specified initial
>, <Line: -     * capacity and the specified load factor.</p>
>, <Line: -     *
>, <Line: -     * @param initialCapacity the initial capacity of the hashtable.
>, <Line: -     * @param loadFactor      the load factor of the hashtable.
>, <Line: -     * @throws IllegalArgumentException if the initial capacity is less
>, <Line: -     *                                  than zero, or if the load factor is nonpositive.
>, <Line: -     */
>, <Line: -    public IntHashMap(int initialCapacity, float loadFactor) {
>, <Line: -        super();
>, <Line: -        if (initialCapacity < 0) {
>, <Line: -            throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);
>, <Line: -        }
>, <Line: -        if (loadFactor <= 0) {
>, <Line: -            throw new IllegalArgumentException("Illegal Load: " + loadFactor);
>, <Line: -        }
>, <Line: -        if (initialCapacity == 0) {
>, <Line: -            initialCapacity = 1;
>, <Line: -        }
>, <Line: -        this.loadFactor = loadFactor;
>, <Line: -        table = new Entry[initialCapacity];
>, <Line: -        threshold = (int) (initialCapacity * loadFactor);
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Returns the number of keys in this hashtable.</p>
>, <Line: -     *
>, <Line: -     * @return the number of keys in this hashtable.
>, <Line: -     */
>, <Line: -    public int size() {
>, <Line: -        return count;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Tests if this hashtable maps no keys to values.</p>
>, <Line: -     *
>, <Line: -     * @return <code>true</code> if this hashtable maps no keys to values;
>, <Line: -     *         <code>false</code> otherwise.
>, <Line: -     */
>, <Line: -    public boolean isEmpty() {
>, <Line: -        return count == 0;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Tests if some key maps into the specified value in this hashtable.
>, <Line: -     * This operation is more expensive than the <code>containsKey</code>
>, <Line: -     * method.</p>
>, <Line: -     * <p>Note that this method is identical in functionality to containsValue,
>, <Line: -     * (which is part of the Map interface in the collections framework).</p>
>, <Line: -     *
>, <Line: -     * @param value a value to search for.
>, <Line: -     * @return <code>true</code> if and only if some key maps to the
>, <Line: -     *         <code>value</code> argument in this hashtable as
>, <Line: -     *         determined by the <tt>equals</tt> method;
>, <Line: -     *         <code>false</code> otherwise.
>, <Line: -     * @throws NullPointerException if the value is <code>null</code>.
>, <Line: -     * @see #containsKey(int)
>, <Line: -     * @see #containsValue(Object)
>, <Line: -     * @see java.util.Map
>, <Line: -     */
>, <Line: -    public boolean contains(Object value) {
>, <Line: -        if (value == null) {
>, <Line: -            throw new NullPointerException();
>, <Line: -        }
>, <Line: -        Entry tab[] = table;
>, <Line: -        for (int i = tab.length; i-- > 0; ) {
>, <Line: -            for (Entry e = tab[i]; e != null; e = e.next) {
>, <Line: -                if (e.value.equals(value)) {
>, <Line: -                    return true;
>, <Line: -                }
>, <Line: -            }
>, <Line: -        }
>, <Line: -        return false;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Returns <code>true</code> if this HashMap maps one or more keys
>, <Line: -     * to this value.</p>
>, <Line: -     * <p>Note that this method is identical in functionality to contains
>, <Line: -     * (which predates the Map interface).</p>
>, <Line: -     *
>, <Line: -     * @param value value whose presence in this HashMap is to be tested.
>, <Line: -     * @return boolean <code>true</code> if the value is contained
>, <Line: -     * @see java.util.Map
>, <Line: -     * @since JDK1.2
>, <Line: -     */
>, <Line: -    public boolean containsValue(Object value) {
>, <Line: -        return contains(value);
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Tests if the specified object is a key in this hashtable.</p>
>, <Line: -     *
>, <Line: -     * @param key possible key.
>, <Line: -     * @return <code>true</code> if and only if the specified object is a
>, <Line: -     *         key in this hashtable, as determined by the <tt>equals</tt>
>, <Line: -     *         method; <code>false</code> otherwise.
>, <Line: -     * @see #contains(Object)
>, <Line: -     */
>, <Line: -    public boolean containsKey(int key) {
>, <Line: -        Entry tab[] = table;
>, <Line: -        int hash = key;
>, <Line: -        int index = (hash & 0x7FFFFFFF) % tab.length;
>, <Line: -        for (Entry e = tab[index]; e != null; e = e.next) {
>, <Line: -            if (e.hash == hash) {
>, <Line: -                return true;
>, <Line: -            }
>, <Line: -        }
>, <Line: -        return false;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Returns the value to which the specified key is mapped in this map.</p>
>, <Line: -     *
>, <Line: -     * @param key a key in the hashtable.
>, <Line: -     * @return the value to which the key is mapped in this hashtable;
>, <Line: -     *         <code>null</code> if the key is not mapped to any value in
>, <Line: -     *         this hashtable.
>, <Line: -     * @see #put(int, Object)
>, <Line: -     */
>, <Line: -    public Object get(int key) {
>, <Line: -        Entry tab[] = table;
>, <Line: -        int hash = key;
>, <Line: -        int index = (hash & 0x7FFFFFFF) % tab.length;
>, <Line: -        for (Entry e = tab[index]; e != null; e = e.next) {
>, <Line: -            if (e.hash == hash) {
>, <Line: -                return e.value;
>, <Line: -            }
>, <Line: -        }
>, <Line: -        return null;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Increases the capacity of and internally reorganizes this
>, <Line: -     * hashtable, in order to accommodate and access its entries more
>, <Line: -     * efficiently.</p>
>, <Line: -     * <p>This method is called automatically when the number of keys
>, <Line: -     * in the hashtable exceeds this hashtable's capacity and load
>, <Line: -     * factor.</p>
>, <Line: -     */
>, <Line: -    protected void rehash() {
>, <Line: -        int oldCapacity = table.length;
>, <Line: -        Entry oldMap[] = table;
>, <Line: -        int newCapacity = oldCapacity * 2 + 1;
>, <Line: -        Entry newMap[] = new Entry[newCapacity];
>, <Line: -        threshold = (int) (newCapacity * loadFactor);
>, <Line: -        table = newMap;
>, <Line: -        for (int i = oldCapacity; i-- > 0; ) {
>, <Line: -            for (Entry old = oldMap[i]; old != null; ) {
>, <Line: -                Entry e = old;
>, <Line: -                old = old.next;
>, <Line: -                int index = (e.hash & 0x7FFFFFFF) % newCapacity;
>, <Line: -                e.next = newMap[index];
>, <Line: -                newMap[index] = e;
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Maps the specified <code>key</code> to the specified
>, <Line: -     * <code>value</code> in this hashtable. The key cannot be
>, <Line: -     * <code>null</code>. </p>
>, <Line: -     * <p>The value can be retrieved by calling the <code>get</code> method
>, <Line: -     * with a key that is equal to the original key.</p>
>, <Line: -     *
>, <Line: -     * @param key   the hashtable key.
>, <Line: -     * @param value the value.
>, <Line: -     * @return the previous value of the specified key in this hashtable,
>, <Line: -     *         or <code>null</code> if it did not have one.
>, <Line: -     * @throws NullPointerException if the key is <code>null</code>.
>, <Line: -     * @see #get(int)
>, <Line: -     */
>, <Line: -    public Object put(int key, Object value) {
>, <Line: -        // Makes sure the key is not already in the hashtable.
>, <Line: -        Entry tab[] = table;
>, <Line: -        int hash = key;
>, <Line: -        int index = (hash & 0x7FFFFFFF) % tab.length;
>, <Line: -        for (Entry e = tab[index]; e != null; e = e.next) {
>, <Line: -            if (e.hash == hash) {
>, <Line: -                Object old = e.value;
>, <Line: -                e.value = value;
>, <Line: -                return old;
>, <Line: -            }
>, <Line: -        }
>, <Line: -        if (count >= threshold) {
>, <Line: -            // Rehash the table if the threshold is exceeded
>, <Line: -            rehash();
>, <Line: -            tab = table;
>, <Line: -            index = (hash & 0x7FFFFFFF) % tab.length;
>, <Line: -        }
>, <Line: -        // Creates the new entry.
>, <Line: -        Entry e = new Entry(hash, key, value, tab[index]);
>, <Line: -        tab[index] = e;
>, <Line: -        count++;
>, <Line: -        return null;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Removes the key (and its corresponding value) from this
>, <Line: -     * hashtable.</p>
>, <Line: -     * <p>This method does nothing if the key is not present in the
>, <Line: -     * hashtable.</p>
>, <Line: -     *
>, <Line: -     * @param key the key that needs to be removed.
>, <Line: -     * @return the value to which the key had been mapped in this hashtable,
>, <Line: -     *         or <code>null</code> if the key did not have a mapping.
>, <Line: -     */
>, <Line: -    public Object remove(int key) {
>, <Line: -        Entry tab[] = table;
>, <Line: -        int hash = key;
>, <Line: -        int index = (hash & 0x7FFFFFFF) % tab.length;
>, <Line: -        for (Entry e = tab[index], prev = null; e != null; prev = e, e = e.next) {
>, <Line: -            if (e.hash == hash) {
>, <Line: -                if (prev != null) {
>, <Line: -                    prev.next = e.next;
>, <Line: -                } else {
>, <Line: -                    tab[index] = e.next;
>, <Line: -                }
>, <Line: -                count--;
>, <Line: -                Object oldValue = e.value;
>, <Line: -                e.value = null;
>, <Line: -                return oldValue;
>, <Line: -            }
>, <Line: -        }
>, <Line: -        return null;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * <p>Clears this hashtable so that it contains no keys.</p>
>, <Line: -     */
>, <Line: -    public synchronized void clear() {
>, <Line: -        Entry tab[] = table;
>, <Line: -        for (int index = tab.length; --index >= 0; ) {
>, <Line: -            tab[index] = null;
>, <Line: -        }
>, <Line: -        count = 0;
>, <Line: -    }
>, <Line: -}
>]