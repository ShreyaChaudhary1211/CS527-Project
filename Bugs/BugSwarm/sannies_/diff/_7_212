[<Line: +package org.mp4parser.boxes.iso14496.part12;
>, <Line: +import org.mp4parser.BoxParser;
>, <Line: +import org.mp4parser.Container;
>, <Line: +import org.mp4parser.ParsableBox;
>, <Line: +import org.mp4parser.tools.CastUtils;
>, <Line: +import org.mp4parser.tools.IsoTypeWriter;
>, <Line: +import java.nio.channels.ReadableByteChannel;
>, <Line: +public class FreeBox implements ParsableBox {
>, <Line: +    List<ParsableBox> replacers = new LinkedList<ParsableBox>();
>, <Line: +        for (ParsableBox replacer : replacers) {
>, <Line: +        for (ParsableBox replacer : replacers) {
>, <Line: +    public void parse(ReadableByteChannel dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
>, <Line: +        data = ByteBuffer.allocate(CastUtils.l2i(contentSize));
>, <Line: +        int bytesRead = 0;
>, <Line: +        int b;
>, <Line: +        while (((((b = dataSource.read(data))) + bytesRead) < contentSize)) {
>, <Line: +            bytesRead += b;
>, <Line: +    public void addAndReplace(ParsableBox parsableBox) {
>, <Line: +        data.position(CastUtils.l2i(parsableBox.getSize()));
>, <Line: +        replacers.add(parsableBox);
>]
[<Line: -package com.coremedia.iso.boxes;
>, <Line: -import com.coremedia.iso.BoxParser;
>, <Line: -import com.coremedia.iso.IsoTypeWriter;
>, <Line: -import com.googlecode.mp4parser.util.ChannelHelper;
>, <Line: -import com.googlecode.mp4parser.DataSource;
>, <Line: -import static com.googlecode.mp4parser.util.CastUtils.l2i;
>, <Line: -public class FreeBox implements Box {
>, <Line: -    List<Box> replacers = new LinkedList<Box>();
>, <Line: -    public long getOffset() {
>, <Line: -        return offset;
>, <Line: -    }
>, <Line: -        for (Box replacer : replacers) {
>, <Line: -    public Container getParent() {
>, <Line: -        return parent;
>, <Line: -    }
>, <Line: -    public void setParent(Container parent) {
>, <Line: -        this.parent = parent;
>, <Line: -    }
>, <Line: -        for (Box replacer : replacers) {
>, <Line: -    public void parse(DataSource dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
>, <Line: -        this.offset = dataSource.position() - header.remaining();
>, <Line: -        if (contentSize > 1024 * 1024) {
>, <Line: -            // It's quite expensive to map a file into the memory. Just do it when the box is larger than a MB.
>, <Line: -            data = dataSource.map(dataSource.position(), contentSize);
>, <Line: -            dataSource.position(dataSource.position() + contentSize);
>, <Line: -        } else {
>, <Line: -            assert contentSize < Integer.MAX_VALUE;
>, <Line: -            data = ByteBuffer.allocate(l2i(contentSize));
>, <Line: -            dataSource.read(data);
>, <Line: -    public void addAndReplace(Box box) {
>, <Line: -        data.position(l2i(box.getSize()));
>, <Line: -        replacers.add(box);
>]