[<Line: +package org.mp4parser.boxes.apple;
>, <Line: +import org.mp4parser.support.AbstractBox;
>, <Line: +import org.mp4parser.support.DoNotParseDetail;
>, <Line: +import org.mp4parser.tools.IsoTypeReader;
>, <Line: +import org.mp4parser.tools.IsoTypeWriter;
>, <Line: +    int dataType;
>, <Line: +    int dataCountry;
>, <Line: +    int dataLanguage;
>, <Line: +    protected AppleDataBox(String type, int dataType) {
>, <Line: +        super(type);
>, <Line: +        this.dataType = dataType;
>, <Line: +    }
>, <Line: +    public String getLanguageString() {
>, <Line: +        String lang = language.get("" + dataLanguage);
>, <Line: +        if (lang == null) {
>, <Line: +            ByteBuffer b = ByteBuffer.wrap(new byte[2]);
>, <Line: +            IsoTypeWriter.writeUInt16(b, dataLanguage);
>, <Line: +            b.reset();
>, <Line: +            return new Locale(IsoTypeReader.readIso639(b)).getDisplayLanguage();
>, <Line: +        } else {
>, <Line: +            return lang;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected long getContentSize() {
>, <Line: +        return getDataLength() + 16;
>, <Line: +        // actualdatalength + dataheader
>, <Line: +    }
>, <Line: +    public int getDataType() {
>, <Line: +        return dataType;
>, <Line: +    }
>, <Line: +    public int getDataCountry() {
>, <Line: +        return dataCountry;
>, <Line: +    }
>, <Line: +    public void setDataCountry(int dataCountry) {
>, <Line: +        this.dataCountry = dataCountry;
>, <Line: +    }
>, <Line: +    public int getDataLanguage() {
>, <Line: +        return dataLanguage;
>, <Line: +    }
>, <Line: +    public void setDataLanguage(int dataLanguage) {
>, <Line: +        this.dataLanguage = dataLanguage;
>, <Line: +    }
>, <Line: +    @DoNotParseDetail
>, <Line: +    protected ByteBuffer parseDataLength4ccTypeCountryLanguageAndReturnRest(ByteBuffer content) {
>, <Line: +        int dataLength = content.getInt();
>, <Line: +        int data4cc = content.getInt(); // 'data'
>, <Line: +        dataType = content.getInt();
>, <Line: +        dataCountry = content.getShort();
>, <Line: +        if (dataCountry < 0) {
>, <Line: +            dataCountry += (1 << 16);
>, <Line: +        }
>, <Line: +        dataLanguage = content.getShort();
>, <Line: +        if (dataLanguage < 0) {
>, <Line: +            dataLanguage += (1 << 16);
>, <Line: +        }
>, <Line: +        ByteBuffer data = (ByteBuffer) content.duplicate().slice().limit(dataLength - 16);
>, <Line: +        content.position(dataLength - 16 + content.position());
>, <Line: +        return data;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected void _parseDetails(ByteBuffer content) {
>, <Line: +        ByteBuffer data = parseDataLength4ccTypeCountryLanguageAndReturnRest(content);
>, <Line: +        parseData(data);
>, <Line: +    }
>, <Line: +    protected void getContent(ByteBuffer byteBuffer) {
>, <Line: +        writeDataLength4ccTypeCountryLanguage(byteBuffer);
>, <Line: +        byteBuffer.put(writeData());
>, <Line: +    }
>, <Line: +    protected abstract byte[] writeData();
>, <Line: +    protected abstract void parseData(ByteBuffer data);
>, <Line: +    protected abstract int getDataLength();
>, <Line: +    @DoNotParseDetail
>, <Line: +    protected void writeDataLength4ccTypeCountryLanguage(ByteBuffer content) {
>, <Line: +        content.putInt(getDataLength() + 16);
>, <Line: +        content.put("data".getBytes());
>, <Line: +        content.putInt(dataType);
>, <Line: +        IsoTypeWriter.writeUInt16(content, dataCountry);
>, <Line: +        IsoTypeWriter.writeUInt16(content, dataLanguage);
>, <Line: +    }
>]
[<Line: -package com.googlecode.mp4parser.boxes.apple;
>, <Line: -import com.coremedia.iso.IsoTypeReader;
>, <Line: -import com.coremedia.iso.IsoTypeWriter;
>, <Line: -import com.googlecode.mp4parser.AbstractBox;
>, <Line: -import com.googlecode.mp4parser.annotations.DoNotParseDetail;
>, <Line: -    int dataType;
>, <Line: -    int dataCountry;
>, <Line: -    int dataLanguage;
>, <Line: -    protected AppleDataBox(String type, int dataType) {
>, <Line: -        super(type);
>, <Line: -        this.dataType = dataType;
>, <Line: -    }
>, <Line: -    public String getLanguageString() {
>, <Line: -        String lang = language.get("" + dataLanguage);
>, <Line: -        if (lang == null) {
>, <Line: -            ByteBuffer b = ByteBuffer.wrap(new byte[2]);
>, <Line: -            IsoTypeWriter.writeUInt16(b, dataLanguage);
>, <Line: -            b.reset();
>, <Line: -            return new Locale(IsoTypeReader.readIso639(b)).getDisplayLanguage();
>, <Line: -        } else {
>, <Line: -            return lang;
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    protected long getContentSize() {
>, <Line: -        return getDataLength() + 16;
>, <Line: -        // actualdatalength + dataheader
>, <Line: -    }
>, <Line: -    public int getDataType() {
>, <Line: -        return dataType;
>, <Line: -    }
>, <Line: -    public int getDataCountry() {
>, <Line: -        return dataCountry;
>, <Line: -    }
>, <Line: -    public void setDataCountry(int dataCountry) {
>, <Line: -        this.dataCountry = dataCountry;
>, <Line: -    }
>, <Line: -    public int getDataLanguage() {
>, <Line: -        return dataLanguage;
>, <Line: -    }
>, <Line: -    public void setDataLanguage(int dataLanguage) {
>, <Line: -        this.dataLanguage = dataLanguage;
>, <Line: -    }
>, <Line: -    @DoNotParseDetail
>, <Line: -    protected ByteBuffer parseDataLength4ccTypeCountryLanguageAndReturnRest(ByteBuffer content) {
>, <Line: -        int dataLength = content.getInt();
>, <Line: -        int data4cc = content.getInt(); // 'data'
>, <Line: -        dataType = content.getInt();
>, <Line: -        dataCountry = content.getShort();
>, <Line: -        if (dataCountry < 0) {
>, <Line: -            dataCountry += (1 << 16);
>, <Line: -        }
>, <Line: -        dataLanguage = content.getShort();
>, <Line: -        if (dataLanguage < 0) {
>, <Line: -            dataLanguage += (1 << 16);
>, <Line: -        }
>, <Line: -        ByteBuffer data = (ByteBuffer) content.duplicate().slice().limit(dataLength - 16);
>, <Line: -        content.position(dataLength - 16 + content.position());
>, <Line: -        return data;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    protected void _parseDetails(ByteBuffer content) {
>, <Line: -        ByteBuffer data = parseDataLength4ccTypeCountryLanguageAndReturnRest(content);
>, <Line: -        parseData(data);
>, <Line: -    }
>, <Line: -    protected void getContent(ByteBuffer byteBuffer) {
>, <Line: -        writeDataLength4ccTypeCountryLanguage(byteBuffer);
>, <Line: -        byteBuffer.put(writeData());
>, <Line: -    }
>, <Line: -    protected abstract byte[] writeData();
>, <Line: -    protected abstract void parseData(ByteBuffer data);
>, <Line: -    protected abstract int getDataLength();
>, <Line: -    @DoNotParseDetail
>, <Line: -    protected void writeDataLength4ccTypeCountryLanguage(ByteBuffer content) {
>, <Line: -        content.putInt(getDataLength() + 16);
>, <Line: -        content.put("data".getBytes());
>, <Line: -        content.putInt(dataType);
>, <Line: -        IsoTypeWriter.writeUInt16(content, dataCountry);
>, <Line: -        IsoTypeWriter.writeUInt16(content, dataLanguage);
>, <Line: -    }
>]