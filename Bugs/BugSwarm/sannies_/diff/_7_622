[<Line: +package org.mp4parser.streaming.input;
>, <Line: +import org.mp4parser.streaming.SampleExtension;
>, <Line: +import org.mp4parser.streaming.StreamingSample;
>, <Line: +import java.nio.ByteBuffer;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.List;
>, <Line: +public class StreamingSampleImpl implements StreamingSample {
>, <Line: +    private ByteBuffer s;
>, <Line: +    private long duration;
>, <Line: +    private HashMap<Class<? extends SampleExtension>, SampleExtension> sampleExtensions = new HashMap<Class<? extends SampleExtension>, SampleExtension>();
>, <Line: +    public StreamingSampleImpl(ByteBuffer s, long duration) {
>, <Line: +        this.s = s.duplicate();
>, <Line: +        this.duration = duration;
>, <Line: +    }
>, <Line: +    public StreamingSampleImpl(byte[] sample, long duration) {
>, <Line: +        this.duration = duration;
>, <Line: +        s = ByteBuffer.wrap(sample);
>, <Line: +    }
>, <Line: +    public StreamingSampleImpl(List<ByteBuffer> nals, long duration) {
>, <Line: +        this.duration = duration;
>, <Line: +        int size = 0;
>, <Line: +        for (ByteBuffer nal : nals) {
>, <Line: +            size += 4;
>, <Line: +            size += nal.limit();
>, <Line: +        }
>, <Line: +        s = ByteBuffer.allocate(size);
>, <Line: +        for (ByteBuffer nal : nals) {
>, <Line: +            s.put((byte) ((nal.limit() & 0xff000000) >> 24));
>, <Line: +            s.put((byte) ((nal.limit() & 0xff0000) >> 16));
>, <Line: +            s.put((byte) ((nal.limit() & 0xff00) >> 8));
>, <Line: +            s.put((byte) ((nal.limit() & 0xff)));
>, <Line: +            s.put((ByteBuffer) nal.rewind());
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public ByteBuffer getContent() {
>, <Line: +        return s;
>, <Line: +    }
>, <Line: +    public long getDuration() {
>, <Line: +        return duration;
>, <Line: +    }
>, <Line: +    public <T extends SampleExtension> T getSampleExtension(Class<T> clazz) {
>, <Line: +        return (T) sampleExtensions.get(clazz);
>, <Line: +    }
>, <Line: +    public void addSampleExtension(SampleExtension sampleExtension) {
>, <Line: +        sampleExtensions.put(sampleExtension.getClass(), sampleExtension);
>, <Line: +    }
>, <Line: +    public <T extends SampleExtension> T removeSampleExtension(Class<T> clazz) {
>, <Line: +        return (T) sampleExtensions.remove(clazz);
>, <Line: +    }
>, <Line: +}
>]
[]