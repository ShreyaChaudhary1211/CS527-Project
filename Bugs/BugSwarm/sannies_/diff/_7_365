[]
[<Line: -package com.googlecode.mp4parser;
>, <Line: -import com.coremedia.iso.boxes.FileTypeBox;
>, <Line: -import org.junit.Assert;
>, <Line: -import org.junit.Test;
>, <Line: -import java.io.ByteArrayOutputStream;
>, <Line: -import java.io.IOException;
>, <Line: -import java.nio.ByteBuffer;
>, <Line: -import java.nio.channels.Channels;
>, <Line: -import java.nio.channels.WritableByteChannel;
>, <Line: -import java.security.SecureRandom;
>, <Line: -import java.util.Arrays;
>, <Line: -import static org.junit.Assert.*;
>, <Line: -public class BasicContainerTest {
>, <Line: -    @Test
>, <Line: -    public void testGetByteBuffer() throws IOException {
>, <Line: -        BasicContainer bc = new BasicContainer();
>, <Line: -        FileTypeBox ftyp1 = new FileTypeBox("1234", 213, Arrays.asList("cenc", "denc", "benc"));
>, <Line: -        FileTypeBox ftyp2 = new FileTypeBox("1234", 2213, Arrays.asList("cenc", "denc", "benc"));
>, <Line: -        FileTypeBox ftyp3 = new FileTypeBox("1234", 22213, Arrays.asList("cenc", "denc", "benc"));
>, <Line: -        bc.addBox(ftyp1);
>, <Line: -        bc.addBox(ftyp2);
>, <Line: -        bc.addBox(ftyp3);
>, <Line: -        ByteArrayOutputStream orig = new ByteArrayOutputStream();
>, <Line: -        WritableByteChannel wc = Channels.newChannel(orig);
>, <Line: -        bc.writeContainer(wc);
>, <Line: -        for (int i = 0; i < orig.size(); i++) {
>, <Line: -            ByteBuffer bb1 = bc.getByteBuffer(0, i);
>, <Line: -            ByteBuffer bb2 = bc.getByteBuffer(i, orig.size() - i);
>, <Line: -            ByteArrayOutputStream check = new ByteArrayOutputStream();
>, <Line: -            WritableByteChannel wcCheck = Channels.newChannel(check);
>, <Line: -            wcCheck.write(bb1);
>, <Line: -            wcCheck.write(bb2);
>, <Line: -            Assert.assertArrayEquals("Test " + i, orig.toByteArray(), check.toByteArray());
>, <Line: -        }
>, <Line: -        SecureRandom random = new SecureRandom();
>, <Line: -        for (int i = 0; i < 100; i++) {
>, <Line: -            int firstLen = random.nextInt(orig.size()-1);
>, <Line: -            int secondLen = random.nextInt(orig.size() - firstLen );
>, <Line: -            ByteBuffer bb1 = bc.getByteBuffer(0, firstLen);
>, <Line: -            ByteBuffer bb2 = bc.getByteBuffer(firstLen, secondLen);
>, <Line: -            ByteBuffer bb3 = bc.getByteBuffer(firstLen + secondLen, orig.size() - (firstLen + secondLen));
>, <Line: -            ByteArrayOutputStream check = new ByteArrayOutputStream();
>, <Line: -            WritableByteChannel wcCheck = Channels.newChannel(check);
>, <Line: -            wcCheck.write(bb1);
>, <Line: -            wcCheck.write(bb2);
>, <Line: -            wcCheck.write(bb3);
>, <Line: -            Assert.assertArrayEquals("Test " + firstLen + "|" + secondLen , orig.toByteArray(), check.toByteArray());
>, <Line: -        }
>, <Line: -    }
>, <Line: -}
>]