[<Line: +package org.mp4parser.boxes.iso14496.part12;
>, <Line: +import org.mp4parser.support.AbstractFullBox;
>, <Line: +import org.mp4parser.tools.CastUtils;
>, <Line: +import org.mp4parser.tools.IsoTypeReader;
>, <Line: +import org.mp4parser.tools.IsoTypeWriter;
>, <Line: +    public TrackRunBox() {
>, <Line: +        super(TYPE);
>, <Line: +    public List<Entry> getEntries() {
>, <Line: +        return entries;
>, <Line: +    public void setEntries(List<Entry> entries) {
>, <Line: +        this.entries = entries;
>, <Line: +            dataOffset = CastUtils.l2i(IsoTypeReader.readUInt32(content));
>, <Line: +    public void setDataOffsetPresent(boolean v) {
>, <Line: +        if (v) {
>, <Line: +            setFlags(getFlags() | 0x01);
>, <Line: +        } else {
>, <Line: +            setFlags(getFlags() & (0xFFFFFF ^ 0x1));
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public boolean isSampleDurationPresent() {
>, <Line: +        return (getFlags() & 0x100) == 0x100;
>, <Line: +    }
>, <Line: +    public boolean isSampleFlagsPresent() {
>, <Line: +        return (getFlags() & 0x400) == 0x400;
>, <Line: +    }
>, <Line: +    public boolean isSampleCompositionTimeOffsetPresent() {
>, <Line: +        return (getFlags() & 0x800) == 0x800;
>, <Line: +    }
>, <Line: +    public void setDataOffset(int dataOffset) {
>, <Line: +        if (dataOffset == -1) {
>, <Line: +            setFlags(getFlags() & (0xFFFFFF ^ 1));
>, <Line: +        } else {
>, <Line: +            setFlags(getFlags() | 0x1); // turn on dataoffset
>, <Line: +        }
>, <Line: +        this.dataOffset = dataOffset;
>, <Line: +    }
>, <Line: +    public static class Entry {
>, <Line: +        private long sampleDuration;
>, <Line: +        private long sampleSize;
>, <Line: +        private SampleFlags sampleFlags;
>, <Line: +        private long sampleCompositionTimeOffset;
>, <Line: +        public Entry() {
>, <Line: +        }
>, <Line: +        public Entry(long sampleDuration, long sampleSize, SampleFlags sampleFlags, int sampleCompositionTimeOffset) {
>, <Line: +            this.sampleDuration = sampleDuration;
>, <Line: +            this.sampleSize = sampleSize;
>, <Line: +            this.sampleFlags = sampleFlags;
>, <Line: +            this.sampleCompositionTimeOffset = sampleCompositionTimeOffset;
>, <Line: +        }
>, <Line: +        public long getSampleDuration() {
>, <Line: +            return sampleDuration;
>, <Line: +        }
>, <Line: +        public void setSampleDuration(long sampleDuration) {
>, <Line: +            this.sampleDuration = sampleDuration;
>, <Line: +        }
>, <Line: +        public long getSampleSize() {
>, <Line: +            return sampleSize;
>, <Line: +        }
>, <Line: +        public void setSampleSize(long sampleSize) {
>, <Line: +            this.sampleSize = sampleSize;
>, <Line: +        }
>, <Line: +        public SampleFlags getSampleFlags() {
>, <Line: +            return sampleFlags;
>, <Line: +        }
>, <Line: +        public void setSampleFlags(SampleFlags sampleFlags) {
>, <Line: +            this.sampleFlags = sampleFlags;
>, <Line: +        }
>, <Line: +        public long getSampleCompositionTimeOffset() {
>, <Line: +            return sampleCompositionTimeOffset;
>, <Line: +        }
>, <Line: +        public void setSampleCompositionTimeOffset(int sampleCompositionTimeOffset) {
>, <Line: +            this.sampleCompositionTimeOffset = sampleCompositionTimeOffset;
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public String toString() {
>, <Line: +            return "Entry{" +
>, <Line: +                    "duration=" + sampleDuration +
>, <Line: +                    ", size=" + sampleSize +
>, <Line: +                    ", dlags=" + sampleFlags +
>, <Line: +                    ", compTimeOffset=" + sampleCompositionTimeOffset +
>, <Line: +                    '}';
>, <Line: +        }
>]
[<Line: -package com.coremedia.iso.boxes.fragment;
>, <Line: -import com.coremedia.iso.IsoTypeReader;
>, <Line: -import com.coremedia.iso.IsoTypeWriter;
>, <Line: -import com.googlecode.mp4parser.AbstractFullBox;
>, <Line: -import static com.googlecode.mp4parser.util.CastUtils.l2i;
>, <Line: -    public List<Entry> getEntries() {
>, <Line: -        return entries;
>, <Line: -    public static class Entry {
>, <Line: -        private long sampleDuration;
>, <Line: -        private long sampleSize;
>, <Line: -        private SampleFlags sampleFlags;
>, <Line: -        private long sampleCompositionTimeOffset;
>, <Line: -        public Entry() {
>, <Line: -        }
>, <Line: -        public Entry(long sampleDuration, long sampleSize, SampleFlags sampleFlags, int sampleCompositionTimeOffset) {
>, <Line: -            this.sampleDuration = sampleDuration;
>, <Line: -            this.sampleSize = sampleSize;
>, <Line: -            this.sampleFlags = sampleFlags;
>, <Line: -            this.sampleCompositionTimeOffset = sampleCompositionTimeOffset;
>, <Line: -        }
>, <Line: -        public long getSampleDuration() {
>, <Line: -            return sampleDuration;
>, <Line: -        }
>, <Line: -        public long getSampleSize() {
>, <Line: -            return sampleSize;
>, <Line: -        }
>, <Line: -        public SampleFlags getSampleFlags() {
>, <Line: -            return sampleFlags;
>, <Line: -        }
>, <Line: -        public long getSampleCompositionTimeOffset() {
>, <Line: -            return sampleCompositionTimeOffset;
>, <Line: -        }
>, <Line: -        public void setSampleDuration(long sampleDuration) {
>, <Line: -            this.sampleDuration = sampleDuration;
>, <Line: -        }
>, <Line: -        public void setSampleSize(long sampleSize) {
>, <Line: -            this.sampleSize = sampleSize;
>, <Line: -        }
>, <Line: -        public void setSampleFlags(SampleFlags sampleFlags) {
>, <Line: -            this.sampleFlags = sampleFlags;
>, <Line: -        }
>, <Line: -        public void setSampleCompositionTimeOffset(int sampleCompositionTimeOffset) {
>, <Line: -            this.sampleCompositionTimeOffset = sampleCompositionTimeOffset;
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        public String toString() {
>, <Line: -            return "Entry{" +
>, <Line: -                    "duration=" + sampleDuration +
>, <Line: -                    ", size=" + sampleSize +
>, <Line: -                    ", dlags=" + sampleFlags +
>, <Line: -                    ", compTimeOffset=" + sampleCompositionTimeOffset +
>, <Line: -                    '}';
>, <Line: -        }
>, <Line: -    public void setDataOffset(int dataOffset) {
>, <Line: -        if (dataOffset == -1) {
>, <Line: -            setFlags(getFlags() & (0xFFFFFF ^ 1));
>, <Line: -        } else {
>, <Line: -            setFlags(getFlags() | 0x1); // turn on dataoffset
>, <Line: -        }
>, <Line: -        this.dataOffset = dataOffset;
>, <Line: -    public TrackRunBox() {
>, <Line: -        super(TYPE);
>, <Line: -    }
>, <Line: -            dataOffset = l2i(IsoTypeReader.readUInt32(content));
>, <Line: -    public boolean isSampleDurationPresent() {
>, <Line: -        return (getFlags() & 0x100) == 0x100;
>, <Line: -    }
>, <Line: -    public boolean isSampleFlagsPresent() {
>, <Line: -        return (getFlags() & 0x400) == 0x400;
>, <Line: -    }
>, <Line: -    public boolean isSampleCompositionTimeOffsetPresent() {
>, <Line: -        return (getFlags() & 0x800) == 0x800;
>, <Line: -    }
>, <Line: -    public void setDataOffsetPresent(boolean v) {
>, <Line: -        if (v) {
>, <Line: -            setFlags(getFlags() | 0x01);
>, <Line: -        } else {
>, <Line: -            setFlags(getFlags() & (0xFFFFFF ^ 0x1));
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public void setEntries(List<Entry> entries) {
>, <Line: -        this.entries = entries;
>]