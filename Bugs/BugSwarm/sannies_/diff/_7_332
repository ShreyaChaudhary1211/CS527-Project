[<Line: +package org.mp4parser.support;
>, <Line: +import org.mp4parser.BoxParser;
>, <Line: +import org.mp4parser.IsoFile;
>, <Line: +import org.mp4parser.ParsableBox;
>, <Line: +import org.mp4parser.boxes.UserBox;
>, <Line: +import org.mp4parser.tools.Hex;
>, <Line: +import org.mp4parser.tools.IsoTypeWriter;
>, <Line: +import java.nio.channels.ReadableByteChannel;
>, <Line: +import static org.mp4parser.tools.CastUtils.l2i;
>, <Line: +public abstract class AbstractBox implements ParsableBox {
>, <Line: +    protected ByteBuffer content;
>, <Line: +    private byte[] userType;
>, <Line: +    public void parse(ReadableByteChannel dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
>, <Line: +        while ((content.position() < contentSize)) {
>, <Line: +            if (dataSource.read(content) == -1) {
>, <Line: +                LOG.logError(this + " might have been truncated by file end. bytesRead=" + content.position() + " contentSize=" + contentSize);
>, <Line: +                break;
>, <Line: +            }
>, <Line: +        content.position(0);
>, <Line: +        long size = isParsed ? getContentSize() : content.limit();
>]
[<Line: -package com.googlecode.mp4parser;
>, <Line: -import com.coremedia.iso.BoxParser;
>, <Line: -import com.coremedia.iso.Hex;
>, <Line: -import com.coremedia.iso.IsoFile;
>, <Line: -import com.coremedia.iso.IsoTypeWriter;
>, <Line: -import com.coremedia.iso.boxes.Box;
>, <Line: -import com.coremedia.iso.boxes.Container;
>, <Line: -import com.coremedia.iso.boxes.UserBox;
>, <Line: -import com.googlecode.mp4parser.annotations.DoNotParseDetail;
>, <Line: -import com.googlecode.mp4parser.util.Logger;
>, <Line: -import com.googlecode.mp4parser.util.Path;
>, <Line: -import static com.googlecode.mp4parser.util.CastUtils.l2i;
>, <Line: -public abstract class AbstractBox implements Box {
>, <Line: -    private byte[] userType;
>, <Line: -    private Container parent;
>, <Line: -    private ByteBuffer content;
>, <Line: -    long offset;
>, <Line: -    DataSource dataSource;
>, <Line: -    public long getOffset() {
>, <Line: -        return offset;
>, <Line: -    }
>, <Line: -    public void parse(DataSource dataSource, ByteBuffer header, long contentSize, BoxParser boxParser) throws IOException {
>, <Line: -        this.offset = dataSource.position() - header.remaining();
>, <Line: -        this.dataSource = dataSource;
>, <Line: -        while (content.remaining() > 0) {
>, <Line: -            dataSource.read(content);
>, <Line: -        content.position(0);
>, <Line: -        long size = isParsed ? getContentSize() : content != null ? content.limit() : 0;
>, <Line: -    @DoNotParseDetail
>, <Line: -    public Container getParent() {
>, <Line: -        return parent;
>, <Line: -    }
>, <Line: -    @DoNotParseDetail
>, <Line: -    public void setParent(Container parent) {
>, <Line: -        this.parent = parent;
>, <Line: -    }
>, <Line: -    @DoNotParseDetail
>, <Line: -    public String getPath() {
>, <Line: -        return Path.createPath(this);
>, <Line: -    }
>]