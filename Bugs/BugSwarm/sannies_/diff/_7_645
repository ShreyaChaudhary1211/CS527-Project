[<Line: +package org.mp4parser.streaming.output.mp4;
>, <Line: +import org.mp4parser.Box;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.*;
>, <Line: +import org.mp4parser.streaming.StreamingTrack;
>, <Line: +import org.mp4parser.streaming.extensions.DimensionTrackExtension;
>, <Line: +import org.mp4parser.streaming.extensions.TrackIdTrackExtension;
>, <Line: +import java.util.LinkedList;
>, <Line: +import java.util.List;
>, <Line: +public abstract class DefaultBoxes {
>, <Line: +    public Box createFtyp() {
>, <Line: +        List<String> minorBrands = new LinkedList<String>();
>, <Line: +        minorBrands.add("isom");
>, <Line: +        minorBrands.add("iso2");
>, <Line: +        minorBrands.add("avc1");
>, <Line: +        minorBrands.add("iso6");
>, <Line: +        minorBrands.add("mp41");
>, <Line: +        return new FileTypeBox("isom", 512, minorBrands);
>, <Line: +    }
>, <Line: +    protected Box createMdiaHdlr(StreamingTrack streamingTrack) {
>, <Line: +        HandlerBox hdlr = new HandlerBox();
>, <Line: +        hdlr.setHandlerType(streamingTrack.getHandler());
>, <Line: +        return hdlr;
>, <Line: +    }
>, <Line: +    protected Box createMdia(StreamingTrack streamingTrack) {
>, <Line: +        MediaBox mdia = new MediaBox();
>, <Line: +        mdia.addBox(createMdhd(streamingTrack));
>, <Line: +        mdia.addBox(createMdiaHdlr(streamingTrack));
>, <Line: +        mdia.addBox(createMinf(streamingTrack));
>, <Line: +        return mdia;
>, <Line: +    }
>, <Line: +    abstract protected Box createMdhd(StreamingTrack streamingTrack);
>, <Line: +    abstract protected Box createMvhd();
>, <Line: +    protected Box createMinf(StreamingTrack streamingTrack) {
>, <Line: +        MediaInformationBox minf = new MediaInformationBox();
>, <Line: +        if (streamingTrack.getHandler().equals("vide")) {
>, <Line: +            minf.addBox(new VideoMediaHeaderBox());
>, <Line: +        } else if (streamingTrack.getHandler().equals("soun")) {
>, <Line: +            minf.addBox(new SoundMediaHeaderBox());
>, <Line: +        } else if (streamingTrack.getHandler().equals("text")) {
>, <Line: +            minf.addBox(new NullMediaHeaderBox());
>, <Line: +        } else if (streamingTrack.getHandler().equals("subt")) {
>, <Line: +            minf.addBox(new SubtitleMediaHeaderBox());
>, <Line: +        } else if (streamingTrack.getHandler().equals("hint")) {
>, <Line: +            minf.addBox(new HintMediaHeaderBox());
>, <Line: +        } else if (streamingTrack.getHandler().equals("sbtl")) {
>, <Line: +            minf.addBox(new NullMediaHeaderBox());
>, <Line: +        }
>, <Line: +        minf.addBox(createDinf());
>, <Line: +        minf.addBox(createStbl(streamingTrack));
>, <Line: +        return minf;
>, <Line: +    }
>, <Line: +    protected Box createStbl(StreamingTrack streamingTrack) {
>, <Line: +        SampleTableBox stbl = new SampleTableBox();
>, <Line: +        stbl.addBox(streamingTrack.getSampleDescriptionBox());
>, <Line: +        stbl.addBox(new TimeToSampleBox());
>, <Line: +        stbl.addBox(new SampleToChunkBox());
>, <Line: +        stbl.addBox(new SampleSizeBox());
>, <Line: +        stbl.addBox(new StaticChunkOffsetBox());
>, <Line: +        return stbl;
>, <Line: +    }
>, <Line: +    protected DataInformationBox createDinf() {
>, <Line: +        DataInformationBox dinf = new DataInformationBox();
>, <Line: +        DataReferenceBox dref = new DataReferenceBox();
>, <Line: +        dinf.addBox(dref);
>, <Line: +        DataEntryUrlBox url = new DataEntryUrlBox();
>, <Line: +        url.setFlags(1);
>, <Line: +        dref.addBox(url);
>, <Line: +        return dinf;
>, <Line: +    }
>, <Line: +    protected Box createTrak(StreamingTrack streamingTrack) {
>, <Line: +        TrackBox trackBox = new TrackBox();
>, <Line: +        trackBox.addBox(createTkhd(streamingTrack));
>, <Line: +        trackBox.addBox(createMdia(streamingTrack));
>, <Line: +        return trackBox;
>, <Line: +    }
>, <Line: +    protected Box createTkhd(StreamingTrack streamingTrack) {
>, <Line: +        TrackHeaderBox tkhd = new TrackHeaderBox();
>, <Line: +        tkhd.setTrackId(streamingTrack.getTrackExtension(TrackIdTrackExtension.class).getTrackId());
>, <Line: +        DimensionTrackExtension dte = streamingTrack.getTrackExtension(DimensionTrackExtension.class);
>, <Line: +        if (dte != null) {
>, <Line: +            tkhd.setHeight(dte.getHeight());
>, <Line: +            tkhd.setWidth(dte.getWidth());
>, <Line: +        }
>, <Line: +        return tkhd;
>, <Line: +    }
>, <Line: +}
>]
[]