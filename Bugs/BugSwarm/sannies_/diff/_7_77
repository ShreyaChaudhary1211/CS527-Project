[]
[<Line: -package com.googlecode.mp4parser;
>, <Line: -import com.coremedia.iso.BoxParser;
>, <Line: -import com.coremedia.iso.boxes.Box;
>, <Line: -import com.coremedia.iso.boxes.Container;
>, <Line: -import com.googlecode.mp4parser.util.LazyList;
>, <Line: -import com.googlecode.mp4parser.util.Logger;
>, <Line: -import java.io.ByteArrayOutputStream;
>, <Line: -import java.io.Closeable;
>, <Line: -import java.io.EOFException;
>, <Line: -import java.io.IOException;
>, <Line: -import java.nio.ByteBuffer;
>, <Line: -import java.nio.channels.Channels;
>, <Line: -import java.nio.channels.WritableByteChannel;
>, <Line: -import java.util.*;
>, <Line: -import static com.googlecode.mp4parser.util.CastUtils.l2i;
>, <Line: -/**
>, <Line: - * Created by sannies on 18.05.13.
>, <Line: - */
>, <Line: -public class BasicContainer implements Container, Iterator<Box>, Closeable {
>, <Line: -    private static final Box EOF = new AbstractBox("eof ") {
>, <Line: -        @Override
>, <Line: -        protected long getContentSize() {
>, <Line: -            return 0;
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        protected void getContent(ByteBuffer byteBuffer) {
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        protected void _parseDetails(ByteBuffer content) {
>, <Line: -        }
>, <Line: -    };
>, <Line: -    private static Logger LOG = Logger.getLogger(BasicContainer.class);
>, <Line: -    protected BoxParser boxParser;
>, <Line: -    protected DataSource dataSource;
>, <Line: -    Box lookahead = null;
>, <Line: -    long parsePosition = 0;
>, <Line: -    long startPosition = 0;
>, <Line: -    long endPosition = 0;
>, <Line: -    private List<Box> boxes = new ArrayList<Box>();
>, <Line: -    public BasicContainer() {
>, <Line: -    }
>, <Line: -    public List<Box> getBoxes() {
>, <Line: -        if (dataSource != null && lookahead != EOF) {
>, <Line: -            return new LazyList<Box>(boxes, this);
>, <Line: -        } else {
>, <Line: -            return boxes;
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public void setBoxes(List<Box> boxes) {
>, <Line: -        this.boxes = new ArrayList<Box>(boxes);
>, <Line: -        this.lookahead = EOF;
>, <Line: -        this.dataSource = null;
>, <Line: -    }
>, <Line: -    protected long getContainerSize() {
>, <Line: -        long contentSize = 0;
>, <Line: -        for (int i = 0; i < getBoxes().size(); i++) {
>, <Line: -            // it's quicker to iterate an array list like that since no iterator
>, <Line: -            // needs to be instantiated
>, <Line: -            contentSize += boxes.get(i).getSize();
>, <Line: -        }
>, <Line: -        return contentSize;
>, <Line: -    }
>, <Line: -    @SuppressWarnings("unchecked")
>, <Line: -    public <T extends Box> List<T> getBoxes(Class<T> clazz) {
>, <Line: -        List<T> boxesToBeReturned = null;
>, <Line: -        T oneBox = null;
>, <Line: -        List<Box> boxes = getBoxes();
>, <Line: -        for (int i = 0; i < boxes.size(); i++) {
>, <Line: -            Box boxe = boxes.get(i);
>, <Line: -            //clazz.isInstance(boxe) / clazz == boxe.getClass()?
>, <Line: -            // I hereby finally decide to use isInstance
>, <Line: -            if (clazz.isInstance(boxe)) {
>, <Line: -                if (oneBox == null) {
>, <Line: -                    oneBox = (T) boxe;
>, <Line: -                } else {
>, <Line: -                    if (boxesToBeReturned == null) {
>, <Line: -                        boxesToBeReturned = new ArrayList<T>(2);
>, <Line: -                        boxesToBeReturned.add(oneBox);
>, <Line: -                    }
>, <Line: -                    boxesToBeReturned.add((T) boxe);
>, <Line: -                }
>, <Line: -            }
>, <Line: -        }
>, <Line: -        if (boxesToBeReturned != null) {
>, <Line: -            return boxesToBeReturned;
>, <Line: -        } else if (oneBox != null) {
>, <Line: -            return Collections.singletonList(oneBox);
>, <Line: -        } else {
>, <Line: -            return Collections.emptyList();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @SuppressWarnings("unchecked")
>, <Line: -    public <T extends Box> List<T> getBoxes(Class<T> clazz, boolean recursive) {
>, <Line: -        List<T> boxesToBeReturned = new ArrayList<T>(2);
>, <Line: -        List<Box> boxes = getBoxes();
>, <Line: -        for (int i = 0; i < boxes.size(); i++) {
>, <Line: -            Box boxe = boxes.get(i);
>, <Line: -            //clazz.isInstance(boxe) / clazz == boxe.getClass()?
>, <Line: -            // I hereby finally decide to use isInstance
>, <Line: -            if (clazz.isInstance(boxe)) {
>, <Line: -                boxesToBeReturned.add((T) boxe);
>, <Line: -            }
>, <Line: -            if (recursive && boxe instanceof Container) {
>, <Line: -                boxesToBeReturned.addAll(((Container) boxe).getBoxes(clazz, recursive));
>, <Line: -            }
>, <Line: -        }
>, <Line: -        return boxesToBeReturned;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Add <code>box</code> to the container and sets the parent correctly. If <code>box</code> is <code>null</code>
>, <Line: -     * nochange will be performed and no error thrown.
>, <Line: -     *
>, <Line: -     * @param box will be added to the container
>, <Line: -     */
>, <Line: -    public void addBox(Box box) {
>, <Line: -        if (box != null) {
>, <Line: -            boxes = new ArrayList<Box>(getBoxes());
>, <Line: -            box.setParent(this);
>, <Line: -            boxes.add(box);
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public void initContainer(DataSource dataSource, long containerSize, BoxParser boxParser) throws IOException {
>, <Line: -        this.dataSource = dataSource;
>, <Line: -        this.parsePosition = this.startPosition = dataSource.position();
>, <Line: -        dataSource.position(dataSource.position() + containerSize);
>, <Line: -        this.endPosition = dataSource.position();
>, <Line: -        this.boxParser = boxParser;
>, <Line: -    }
>, <Line: -    public void remove() {
>, <Line: -        throw new UnsupportedOperationException();
>, <Line: -    }
>, <Line: -    public boolean hasNext() {
>, <Line: -        if (lookahead == EOF) {
>, <Line: -            return false;
>, <Line: -        }
>, <Line: -        if (lookahead != null) {
>, <Line: -            return true;
>, <Line: -        } else {
>, <Line: -            try {
>, <Line: -                lookahead = next();
>, <Line: -                return true;
>, <Line: -            } catch (NoSuchElementException e) {
>, <Line: -                lookahead = EOF;
>, <Line: -                return false;
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public Box next() {
>, <Line: -        if (lookahead != null && lookahead != EOF) {
>, <Line: -            Box b = lookahead;
>, <Line: -            lookahead = null;
>, <Line: -            return b;
>, <Line: -        } else {
>, <Line: -           // LOG.logDebug("Parsing next() box");
>, <Line: -            if (dataSource == null || parsePosition >= endPosition) {
>, <Line: -                lookahead = EOF;
>, <Line: -                throw new NoSuchElementException();
>, <Line: -            }
>, <Line: -            try {
>, <Line: -                synchronized (dataSource) {
>, <Line: -                    dataSource.position(parsePosition);
>, <Line: -                    Box b = boxParser.parseBox(dataSource, this);
>, <Line: -                    //System.err.println(b.getType());
>, <Line: -                    parsePosition = dataSource.position();
>, <Line: -                    return b;
>, <Line: -                }
>, <Line: -            } catch (EOFException e) {
>, <Line: -                throw new NoSuchElementException();
>, <Line: -            } catch (IOException e) {
>, <Line: -                throw new NoSuchElementException();
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public String toString() {
>, <Line: -        StringBuilder buffer = new StringBuilder();
>, <Line: -        buffer.append(this.getClass().getSimpleName()).append("[");
>, <Line: -        for (int i = 0; i < boxes.size(); i++) {
>, <Line: -            if (i > 0) {
>, <Line: -                buffer.append(";");
>, <Line: -            }
>, <Line: -            buffer.append(boxes.get(i).toString());
>, <Line: -        }
>, <Line: -        buffer.append("]");
>, <Line: -        return buffer.toString();
>, <Line: -    }
>, <Line: -    public final void writeContainer(WritableByteChannel bb) throws IOException {
>, <Line: -        for (Box box : getBoxes()) {
>, <Line: -            box.getBox(bb);
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public ByteBuffer getByteBuffer(long rangeStart, long size) throws IOException {
>, <Line: -        if (this.dataSource != null) {
>, <Line: -            synchronized (this.dataSource) {
>, <Line: -                return this.dataSource.map(this.startPosition + rangeStart, size);
>, <Line: -            }
>, <Line: -        } else {
>, <Line: -            ByteBuffer out = ByteBuffer.allocate(l2i(size));
>, <Line: -            long rangeEnd = rangeStart + size;
>, <Line: -            long boxStart;
>, <Line: -            long boxEnd = 0;
>, <Line: -            for (Box box : boxes) {
>, <Line: -                boxStart = boxEnd;
>, <Line: -                boxEnd = boxStart + box.getSize();
>, <Line: -                if (!(boxEnd <= rangeStart || boxStart >= rangeEnd)) {
>, <Line: -                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
>, <Line: -                    WritableByteChannel wbc = Channels.newChannel(baos);
>, <Line: -                    box.getBox(wbc);
>, <Line: -                    wbc.close();
>, <Line: -                    if (boxStart >= rangeStart && boxEnd <= rangeEnd) {
>, <Line: -                        out.put(baos.toByteArray());
>, <Line: -                        // within -> use full box
>, <Line: -                    } else if (boxStart < rangeStart && boxEnd > rangeEnd) {
>, <Line: -                        // around -> use 'middle' of box
>, <Line: -                        int length = l2i(box.getSize() - (rangeStart - boxStart) - (boxEnd - rangeEnd));
>, <Line: -                        out.put(baos.toByteArray(), l2i(rangeStart - boxStart), length);
>, <Line: -                    } else if (boxStart < rangeStart && boxEnd <= rangeEnd) {
>, <Line: -                        // endwith
>, <Line: -                        int length = l2i(box.getSize() - (rangeStart - boxStart));
>, <Line: -                        out.put(baos.toByteArray(), l2i(rangeStart - boxStart), length);
>, <Line: -                    } else if (boxStart >= rangeStart && boxEnd > rangeEnd) {
>, <Line: -                        int length = l2i(box.getSize() - (boxEnd - rangeEnd));
>, <Line: -                        out.put(baos.toByteArray(), 0, length);
>, <Line: -                    }
>, <Line: -                }
>, <Line: -            }
>, <Line: -            return (ByteBuffer) out.rewind();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public void close() throws IOException {
>, <Line: -        dataSource.close();
>, <Line: -    }
>, <Line: -}
>]