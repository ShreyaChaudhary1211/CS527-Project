[<Line: +package org.mp4parser.streaming.extensions;
>, <Line: +import org.mp4parser.streaming.TrackExtension;
>, <Line: +import java.util.Collections;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.Map;
>, <Line: +/**
>, <Line: + * Created by sannies on 22.05.2015.
>, <Line: + */
>, <Line: +public class DefaultSampleFlagsTrackExtension implements TrackExtension {
>, <Line: +    public static Map<Long, SampleFlagsSampleExtension> pool =
>, <Line: +            Collections.synchronizedMap(new HashMap<Long, SampleFlagsSampleExtension>());
>, <Line: +    private byte isLeading, sampleDependsOn, sampleIsDependedOn, sampleHasRedundancy, samplePaddingValue;
>, <Line: +    private boolean sampleIsNonSyncSample;
>, <Line: +    private int sampleDegradationPriority;
>, <Line: +    public static DefaultSampleFlagsTrackExtension create(
>, <Line: +            byte isLeading, byte sampleDependsOn, byte sampleIsDependedOn,
>, <Line: +            byte sampleHasRedundancy, byte samplePaddingValue, boolean sampleIsNonSyncSample, int sampleDegradationPriority) {
>, <Line: +        DefaultSampleFlagsTrackExtension c = new DefaultSampleFlagsTrackExtension();
>, <Line: +        c.isLeading = isLeading;
>, <Line: +        c.sampleDependsOn = sampleDependsOn;
>, <Line: +        c.sampleIsDependedOn = sampleIsDependedOn;
>, <Line: +        c.sampleHasRedundancy = sampleHasRedundancy;
>, <Line: +        c.samplePaddingValue = samplePaddingValue;
>, <Line: +        c.sampleIsNonSyncSample = sampleIsNonSyncSample;
>, <Line: +        c.sampleDegradationPriority = sampleDegradationPriority;
>, <Line: +        return c;
>, <Line: +    }
>, <Line: +    public byte getIsLeading() {
>, <Line: +        return isLeading;
>, <Line: +    }
>, <Line: +    public void setIsLeading(int isLeading) {
>, <Line: +        this.isLeading = (byte) isLeading;
>, <Line: +    }
>, <Line: +    public byte getSampleDependsOn() {
>, <Line: +        return sampleDependsOn;
>, <Line: +    }
>, <Line: +    public void setSampleDependsOn(int sampleDependsOn) {
>, <Line: +        this.sampleDependsOn = (byte) sampleDependsOn;
>, <Line: +    }
>, <Line: +    public byte getSampleIsDependedOn() {
>, <Line: +        return sampleIsDependedOn;
>, <Line: +    }
>, <Line: +    public void setSampleIsDependedOn(int sampleIsDependedOn) {
>, <Line: +        this.sampleIsDependedOn = (byte) sampleIsDependedOn;
>, <Line: +    }
>, <Line: +    public byte getSampleHasRedundancy() {
>, <Line: +        return sampleHasRedundancy;
>, <Line: +    }
>, <Line: +    public void setSampleHasRedundancy(int sampleHasRedundancy) {
>, <Line: +        this.sampleHasRedundancy = (byte) sampleHasRedundancy;
>, <Line: +    }
>, <Line: +    public byte getSamplePaddingValue() {
>, <Line: +        return samplePaddingValue;
>, <Line: +    }
>, <Line: +    public void setSamplePaddingValue(byte samplePaddingValue) {
>, <Line: +        this.samplePaddingValue = samplePaddingValue;
>, <Line: +    }
>, <Line: +    public boolean isSampleIsNonSyncSample() {
>, <Line: +        return sampleIsNonSyncSample;
>, <Line: +    }
>, <Line: +    public void setSampleIsNonSyncSample(boolean sampleIsNonSyncSample) {
>, <Line: +        this.sampleIsNonSyncSample = sampleIsNonSyncSample;
>, <Line: +    }
>, <Line: +    public boolean isSyncSample() {
>, <Line: +        return !sampleIsNonSyncSample;
>, <Line: +    }
>, <Line: +    public int getSampleDegradationPriority() {
>, <Line: +        return sampleDegradationPriority;
>, <Line: +    }
>, <Line: +    public void setSampleDegradationPriority(int sampleDegradationPriority) {
>, <Line: +        this.sampleDegradationPriority = sampleDegradationPriority;
>, <Line: +    }
>, <Line: +}
>]
[]