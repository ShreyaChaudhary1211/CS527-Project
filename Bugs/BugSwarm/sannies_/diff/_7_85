[]
[<Line: -/*
>, <Line: - * Copyright 2011 Sebastian Annies, Hamburg
>, <Line: - *
>, <Line: - * Licensed under the Apache License, Version 2.0 (the License);
>, <Line: - * you may not use this file except in compliance with the License.
>, <Line: - * You may obtain a copy of the License at
>, <Line: - *
>, <Line: - *     http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - *
>, <Line: - * Unless required by applicable law or agreed to in writing, software
>, <Line: - * distributed under the License is distributed on an AS IS BASIS,
>, <Line: - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - * See the License for the specific language governing permissions and
>, <Line: - * limitations under the License.
>, <Line: - */
>, <Line: -package com.googlecode.mp4parser.srt;
>, <Line: -import com.googlecode.mp4parser.authoring.tracks.TextTrackImpl;
>, <Line: -import java.io.IOException;
>, <Line: -import java.io.InputStream;
>, <Line: -import java.io.InputStreamReader;
>, <Line: -import java.io.LineNumberReader;
>, <Line: -/**
>, <Line: - * Parses a .srt file and creates a Track for it.
>, <Line: - */
>, <Line: -public class SrtParser {
>, <Line: -    public static TextTrackImpl parse(InputStream is) throws IOException {
>, <Line: -        LineNumberReader r = new LineNumberReader(new InputStreamReader(is, "UTF-8"));
>, <Line: -        TextTrackImpl track = new TextTrackImpl();
>, <Line: -        String numberString;
>, <Line: -        while ((numberString = r.readLine()) != null) {
>, <Line: -            String timeString = r.readLine();
>, <Line: -            String lineString = "";
>, <Line: -            String s;
>, <Line: -            while (!((s = r.readLine()) == null || s.trim().equals(""))) {
>, <Line: -                lineString += s + "\n";
>, <Line: -            }
>, <Line: -            long startTime = parse(timeString.split("-->")[0]);
>, <Line: -            long endTime = parse(timeString.split("-->")[1]);
>, <Line: -            track.getSubs().add(new TextTrackImpl.Line(startTime, endTime, lineString));
>, <Line: -        }
>, <Line: -        return track;
>, <Line: -    }
>, <Line: -    private static long parse(String in) {
>, <Line: -        long hours = Long.parseLong(in.split(":")[0].trim());
>, <Line: -        long minutes = Long.parseLong(in.split(":")[1].trim());
>, <Line: -        long seconds = Long.parseLong(in.split(":")[2].split(",")[0].trim());
>, <Line: -        long millies = Long.parseLong(in.split(":")[2].split(",")[1].trim());
>, <Line: -        return hours * 60 * 60 * 1000 + minutes * 60 * 1000 + seconds * 1000 + millies;
>, <Line: -    }
>, <Line: -}
>]