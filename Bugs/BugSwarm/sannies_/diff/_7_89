[]
[<Line: -package com.mp4parser.streaming;
>, <Line: -import com.coremedia.iso.IsoFile;
>, <Line: -import com.coremedia.iso.IsoTypeWriter;
>, <Line: -import com.coremedia.iso.boxes.Box;
>, <Line: -import com.coremedia.iso.boxes.DataEntryUrlBox;
>, <Line: -import com.coremedia.iso.boxes.DataInformationBox;
>, <Line: -import com.coremedia.iso.boxes.DataReferenceBox;
>, <Line: -import com.coremedia.iso.boxes.FileTypeBox;
>, <Line: -import com.coremedia.iso.boxes.HandlerBox;
>, <Line: -import com.coremedia.iso.boxes.HintMediaHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.MediaBox;
>, <Line: -import com.coremedia.iso.boxes.MediaHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.MediaInformationBox;
>, <Line: -import com.coremedia.iso.boxes.MovieBox;
>, <Line: -import com.coremedia.iso.boxes.MovieHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.NullMediaHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.SampleSizeBox;
>, <Line: -import com.coremedia.iso.boxes.SampleTableBox;
>, <Line: -import com.coremedia.iso.boxes.SampleToChunkBox;
>, <Line: -import com.coremedia.iso.boxes.SoundMediaHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.StaticChunkOffsetBox;
>, <Line: -import com.coremedia.iso.boxes.SubtitleMediaHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.TimeToSampleBox;
>, <Line: -import com.coremedia.iso.boxes.TrackBox;
>, <Line: -import com.coremedia.iso.boxes.VideoMediaHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.MovieExtendsBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.MovieExtendsHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.MovieFragmentBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.MovieFragmentHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.SampleFlags;
>, <Line: -import com.coremedia.iso.boxes.fragment.TrackExtendsBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.TrackFragmentBaseMediaDecodeTimeBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.TrackFragmentBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.TrackFragmentHeaderBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.TrackRunBox;
>, <Line: -import com.googlecode.mp4parser.util.Mp4Arrays;
>, <Line: -import com.mp4parser.streaming.extensions.CencEncryptTrackExtension;
>, <Line: -import com.mp4parser.streaming.extensions.CompositionTimeSampleExtension;
>, <Line: -import com.mp4parser.streaming.extensions.CompositionTimeTrackExtension;
>, <Line: -import com.mp4parser.streaming.extensions.SampleFlagsSampleExtension;
>, <Line: -import com.mp4parser.streaming.extensions.SampleFlagsTrackExtension;
>, <Line: -import com.mp4parser.streaming.extensions.TrackIdTrackExtension;
>, <Line: -import java.io.IOException;
>, <Line: -import java.io.OutputStream;
>, <Line: -import java.nio.ByteBuffer;
>, <Line: -import java.nio.channels.Channels;
>, <Line: -import java.nio.channels.WritableByteChannel;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.Collections;
>, <Line: -import java.util.Date;
>, <Line: -import java.util.HashMap;
>, <Line: -import java.util.HashSet;
>, <Line: -import java.util.LinkedList;
>, <Line: -import java.util.List;
>, <Line: -import java.util.Map;
>, <Line: -import java.util.concurrent.Callable;
>, <Line: -import java.util.concurrent.ExecutorService;
>, <Line: -import java.util.concurrent.Executors;
>, <Line: -import java.util.concurrent.TimeUnit;
>, <Line: -import static com.googlecode.mp4parser.util.Math.lcm;
>, <Line: -import static com.mp4parser.streaming.StreamingSampleHelper.getSampleExtension;
>, <Line: -/**
>, <Line: - *
>, <Line: - */
>, <Line: -public class MultiTrackFragmentedMp4Writer implements StreamingMp4Writer {
>, <Line: -    private final OutputStream outputStream;
>, <Line: -    StreamingTrack source[];
>, <Line: -    CompositionTimeTrackExtension compositionTimeTrackExtension;
>, <Line: -    SampleFlagsTrackExtension sampleDependencyTrackExtension;
>, <Line: -    Date creationTime;
>, <Line: -    Map<StreamingTrack, List<StreamingSample>> fragmentBuffers = new HashMap<StreamingTrack, List<StreamingSample>>();
>, <Line: -    private long sequenceNumber = 1;
>, <Line: -    private long currentFragmentStartTime = 0;
>, <Line: -    private long currentTime = 0;
>, <Line: -    public MultiTrackFragmentedMp4Writer(StreamingTrack[] source, OutputStream outputStream) {
>, <Line: -        this.source = source;
>, <Line: -        this.outputStream = outputStream;
>, <Line: -        this.creationTime = new Date();
>, <Line: -        HashSet<Long> trackIds = new HashSet<Long>();
>, <Line: -        for (StreamingTrack streamingTrack : source) {
>, <Line: -            if (streamingTrack.getTrackExtension(TrackIdTrackExtension.class) != null) {
>, <Line: -                TrackIdTrackExtension trackIdTrackExtension = streamingTrack.getTrackExtension(TrackIdTrackExtension.class);
>, <Line: -                assert trackIdTrackExtension != null;
>, <Line: -                if (trackIds.contains(trackIdTrackExtension.getTrackId())) {
>, <Line: -                    throw new RuntimeException("There may not be two tracks with the same trackID within one file");
>, <Line: -                }
>, <Line: -            }
>, <Line: -        }
>, <Line: -        for (StreamingTrack streamingTrack : source) {
>, <Line: -            if (streamingTrack.getTrackExtension(TrackIdTrackExtension.class) != null) {
>, <Line: -                ArrayList<Long> ts = new ArrayList<Long>(trackIds);
>, <Line: -                Collections.sort(ts);
>, <Line: -                streamingTrack.addTrackExtension(new TrackIdTrackExtension(ts.size() > 0 ? (ts.get(ts.size() - 1) + 1) : 1));
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public void close() {
>, <Line: -    }
>, <Line: -    protected Box createMvhd() {
>, <Line: -        MovieHeaderBox mvhd = new MovieHeaderBox();
>, <Line: -        mvhd.setVersion(1);
>, <Line: -        mvhd.setCreationTime(creationTime);
>, <Line: -        mvhd.setModificationTime(creationTime);
>, <Line: -        mvhd.setDuration(0);//no duration in moov for fragmented movies
>, <Line: -        long[] timescales = new long[0];
>, <Line: -        for (StreamingTrack streamingTrack : source) {
>, <Line: -            Mp4Arrays.copyOfAndAppend(timescales, streamingTrack.getTimescale());
>, <Line: -        }
>, <Line: -        mvhd.setTimescale(lcm(timescales));
>, <Line: -        // find the next available trackId
>, <Line: -        mvhd.setNextTrackId(2);
>, <Line: -        return mvhd;
>, <Line: -    }
>, <Line: -    protected Box createMdiaHdlr(StreamingTrack streamingTrack) {
>, <Line: -        HandlerBox hdlr = new HandlerBox();
>, <Line: -        hdlr.setHandlerType(streamingTrack.getHandler());
>, <Line: -        return hdlr;
>, <Line: -    }
>, <Line: -    protected Box createMdhd(StreamingTrack streamingTrack) {
>, <Line: -        MediaHeaderBox mdhd = new MediaHeaderBox();
>, <Line: -        mdhd.setCreationTime(creationTime);
>, <Line: -        mdhd.setModificationTime(creationTime);
>, <Line: -        mdhd.setDuration(0);//no duration in moov for fragmented movies
>, <Line: -        mdhd.setTimescale(streamingTrack.getTimescale());
>, <Line: -        mdhd.setLanguage(streamingTrack.getLanguage());
>, <Line: -        return mdhd;
>, <Line: -    }
>, <Line: -    protected Box createMdia(StreamingTrack streamingTrack) {
>, <Line: -        MediaBox mdia = new MediaBox();
>, <Line: -        mdia.addBox(createMdhd(streamingTrack));
>, <Line: -        mdia.addBox(createMdiaHdlr(streamingTrack));
>, <Line: -        mdia.addBox(createMinf(streamingTrack));
>, <Line: -        return mdia;
>, <Line: -    }
>, <Line: -    protected Box createMinf(StreamingTrack streamingTrack) {
>, <Line: -        MediaInformationBox minf = new MediaInformationBox();
>, <Line: -        if (streamingTrack.getHandler().equals("vide")) {
>, <Line: -            minf.addBox(new VideoMediaHeaderBox());
>, <Line: -        } else if (streamingTrack.getHandler().equals("soun")) {
>, <Line: -            minf.addBox(new SoundMediaHeaderBox());
>, <Line: -        } else if (streamingTrack.getHandler().equals("text")) {
>, <Line: -            minf.addBox(new NullMediaHeaderBox());
>, <Line: -        } else if (streamingTrack.getHandler().equals("subt")) {
>, <Line: -            minf.addBox(new SubtitleMediaHeaderBox());
>, <Line: -        } else if (streamingTrack.getHandler().equals("hint")) {
>, <Line: -            minf.addBox(new HintMediaHeaderBox());
>, <Line: -        } else if (streamingTrack.getHandler().equals("sbtl")) {
>, <Line: -            minf.addBox(new NullMediaHeaderBox());
>, <Line: -        }
>, <Line: -        minf.addBox(createDinf());
>, <Line: -        minf.addBox(createStbl(streamingTrack));
>, <Line: -        return minf;
>, <Line: -    }
>, <Line: -    protected Box createStbl(StreamingTrack streamingTrack) {
>, <Line: -        SampleTableBox stbl = new SampleTableBox();
>, <Line: -        stbl.addBox(streamingTrack.getSampleDescriptionBox());
>, <Line: -        stbl.addBox(new TimeToSampleBox());
>, <Line: -        stbl.addBox(new SampleToChunkBox());
>, <Line: -        stbl.addBox(new SampleSizeBox());
>, <Line: -        stbl.addBox(new StaticChunkOffsetBox());
>, <Line: -        return stbl;
>, <Line: -    }
>, <Line: -    protected DataInformationBox createDinf() {
>, <Line: -        DataInformationBox dinf = new DataInformationBox();
>, <Line: -        DataReferenceBox dref = new DataReferenceBox();
>, <Line: -        dinf.addBox(dref);
>, <Line: -        DataEntryUrlBox url = new DataEntryUrlBox();
>, <Line: -        url.setFlags(1);
>, <Line: -        dref.addBox(url);
>, <Line: -        return dinf;
>, <Line: -    }
>, <Line: -    protected Box createTrak(StreamingTrack streamingTrack) {
>, <Line: -        TrackBox trackBox = new TrackBox();
>, <Line: -        trackBox.addBox(streamingTrack.getTrackHeaderBox());
>, <Line: -        trackBox.addBox(streamingTrack.getTrackHeaderBox());
>, <Line: -        trackBox.addBox(createMdia(streamingTrack));
>, <Line: -        return trackBox;
>, <Line: -    }
>, <Line: -    public Box createFtyp() {
>, <Line: -        List<String> minorBrands = new LinkedList<String>();
>, <Line: -        minorBrands.add("isom");
>, <Line: -        minorBrands.add("iso6");
>, <Line: -        minorBrands.add("avc1");
>, <Line: -        return new FileTypeBox("isom", 0, minorBrands);
>, <Line: -    }
>, <Line: -    protected Box createMvex() {
>, <Line: -        MovieExtendsBox mvex = new MovieExtendsBox();
>, <Line: -        final MovieExtendsHeaderBox mved = new MovieExtendsHeaderBox();
>, <Line: -        mved.setVersion(1);
>, <Line: -        mved.setFragmentDuration(0);
>, <Line: -        mvex.addBox(mved);
>, <Line: -        for (StreamingTrack streamingTrack : source) {
>, <Line: -            mvex.addBox(createTrex(streamingTrack));
>, <Line: -        }
>, <Line: -        return mvex;
>, <Line: -    }
>, <Line: -    protected Box createTrex(StreamingTrack streamingTrack) {
>, <Line: -        TrackExtendsBox trex = new TrackExtendsBox();
>, <Line: -        trex.setTrackId(streamingTrack.getTrackHeaderBox().getTrackId());
>, <Line: -        trex.setDefaultSampleDescriptionIndex(1);
>, <Line: -        trex.setDefaultSampleDuration(0);
>, <Line: -        trex.setDefaultSampleSize(0);
>, <Line: -        SampleFlags sf = new SampleFlags();
>, <Line: -        if ("soun".equals(streamingTrack.getHandler()) || "subt".equals(streamingTrack.getHandler())) {
>, <Line: -            // as far as I know there is no audio encoding
>, <Line: -            // where the sample are not self contained.
>, <Line: -            // same seems to be true for subtitle tracks
>, <Line: -            sf.setSampleDependsOn(2);
>, <Line: -            sf.setSampleIsDependedOn(2);
>, <Line: -        }
>, <Line: -        trex.setDefaultSampleFlags(sf);
>, <Line: -        return trex;
>, <Line: -    }
>, <Line: -    protected Box createMoov() {
>, <Line: -        MovieBox movieBox = new MovieBox();
>, <Line: -        movieBox.addBox(createMvhd());
>, <Line: -        for (StreamingTrack streamingTrack : source) {
>, <Line: -            movieBox.addBox(createTrak(streamingTrack));
>, <Line: -            ;
>, <Line: -        }
>, <Line: -        movieBox.addBox(createMvex());
>, <Line: -        // metadata here
>, <Line: -        return movieBox;
>, <Line: -    }
>, <Line: -    class ConsumeSamplesCallable implements Callable {
>, <Line: -        private StreamingTrack streamingTrack;
>, <Line: -        public ConsumeSamplesCallable(StreamingTrack streamingTrack) {
>, <Line: -            this.streamingTrack = streamingTrack;
>, <Line: -        }
>, <Line: -        public Object call() throws Exception {
>, <Line: -            do {
>, <Line: -                try {
>, <Line: -                    StreamingSample ss;
>, <Line: -                    while ((ss = streamingTrack.getSamples().poll(100, TimeUnit.MILLISECONDS)) != null) {
>, <Line: -                        consumeSample(streamingTrack, ss);
>, <Line: -                    }
>, <Line: -                } catch (InterruptedException e) {
>, <Line: -                    e.printStackTrace();
>, <Line: -                }
>, <Line: -            } while (streamingTrack.hasMoreSamples());
>, <Line: -            return null;
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public void write() throws IOException {
>, <Line: -        final WritableByteChannel out = Channels.newChannel(outputStream);
>, <Line: -        createFtyp().getBox(out);
>, <Line: -        createMoov().getBox(out);
>, <Line: -        ExecutorService es = Executors.newFixedThreadPool(source.length);
>, <Line: -        for (StreamingTrack streamingTrack : source) {
>, <Line: -            es.submit(new ConsumeSamplesCallable(streamingTrack));
>, <Line: -        }
>, <Line: -    }
>, <Line: -    private synchronized void consumeSample(StreamingTrack streamingTrack, StreamingSample ss) throws IOException {
>, <Line: -        SampleFlagsSampleExtension sampleDependencySampleExtension = null;
>, <Line: -        CompositionTimeSampleExtension compositionTimeSampleExtension = null;
>, <Line: -        for (SampleExtension sampleExtension : ss.getExtensions()) {
>, <Line: -            if (sampleExtension instanceof SampleFlagsSampleExtension) {
>, <Line: -                sampleDependencySampleExtension = (SampleFlagsSampleExtension) sampleExtension;
>, <Line: -            } else if (sampleExtension instanceof CompositionTimeSampleExtension) {
>, <Line: -                compositionTimeSampleExtension = (CompositionTimeSampleExtension) sampleExtension;
>, <Line: -            }
>, <Line: -        }
>, <Line: -        currentTime += ss.getDuration();
>, <Line: -        // 3 seconds = 3 * source.getTimescale()
>, <Line: -        fragmentBuffers.get(streamingTrack).add(ss);
>, <Line: -        if (currentTime > currentFragmentStartTime + 3 * streamingTrack.getTimescale() &&
>, <Line: -                fragmentBuffers.size() > 0 &&
>, <Line: -                (sampleDependencyTrackExtension == null ||
>, <Line: -                        sampleDependencySampleExtension == null ||
>, <Line: -                        sampleDependencySampleExtension.isSyncSample())) {
>, <Line: -            WritableByteChannel out = Channels.newChannel(outputStream);
>, <Line: -            createMoof(streamingTrack).getBox(out);
>, <Line: -            createMdat(streamingTrack).getBox(out);
>, <Line: -            currentFragmentStartTime = currentTime;
>, <Line: -            fragmentBuffers.clear();
>, <Line: -        }
>, <Line: -    }
>, <Line: -    private Box createMoof(StreamingTrack streamingTrack) {
>, <Line: -        MovieFragmentBox moof = new MovieFragmentBox();
>, <Line: -        createMfhd(sequenceNumber, moof);
>, <Line: -        createTraf(streamingTrack, moof);
>, <Line: -        TrackRunBox firstTrun = moof.getTrackRunBoxes().get(0);
>, <Line: -        firstTrun.setDataOffset(1); // dummy to make size correct
>, <Line: -        firstTrun.setDataOffset((int) (8 + moof.getSize())); // mdat header + moof size
>, <Line: -        sequenceNumber++;
>, <Line: -        return moof;
>, <Line: -    }
>, <Line: -    protected void createTfhd(StreamingTrack streamingTrack, TrackFragmentBox parent) {
>, <Line: -        TrackFragmentHeaderBox tfhd = new TrackFragmentHeaderBox();
>, <Line: -        SampleFlags sf = new SampleFlags();
>, <Line: -        tfhd.setDefaultSampleFlags(sf);
>, <Line: -        tfhd.setBaseDataOffset(-1);
>, <Line: -        tfhd.setTrackId(streamingTrack.getTrackExtension(TrackIdTrackExtension.class).getTrackId());
>, <Line: -        tfhd.setDefaultBaseIsMoof(true);
>, <Line: -        parent.addBox(tfhd);
>, <Line: -    }
>, <Line: -    protected void createTfdt(TrackFragmentBox parent) {
>, <Line: -        TrackFragmentBaseMediaDecodeTimeBox tfdt = new TrackFragmentBaseMediaDecodeTimeBox();
>, <Line: -        tfdt.setVersion(1);
>, <Line: -        tfdt.setBaseMediaDecodeTime(currentFragmentStartTime);
>, <Line: -        parent.addBox(tfdt);
>, <Line: -    }
>, <Line: -    protected void createTrun(StreamingTrack streamingTrack, TrackFragmentBox parent) {
>, <Line: -        TrackRunBox trun = new TrackRunBox();
>, <Line: -        trun.setVersion(1);
>, <Line: -        trun.setSampleDurationPresent(true);
>, <Line: -        trun.setSampleSizePresent(true);
>, <Line: -        List<TrackRunBox.Entry> entries = new ArrayList<TrackRunBox.Entry>(fragmentBuffers.size());
>, <Line: -        trun.setSampleCompositionTimeOffsetPresent(streamingTrack.getTrackExtension(CompositionTimeTrackExtension.class) != null);
>, <Line: -        boolean sampleFlagsRequired = streamingTrack.getTrackExtension(SampleFlagsTrackExtension.class) != null;
>, <Line: -        trun.setSampleFlagsPresent(sampleFlagsRequired);
>, <Line: -        for (StreamingSample streamingSample : fragmentBuffers.get(streamingTrack)) {
>, <Line: -            TrackRunBox.Entry entry = new TrackRunBox.Entry();
>, <Line: -            entry.setSampleSize(streamingSample.getContent().remaining());
>, <Line: -            if (sampleFlagsRequired) {
>, <Line: -                SampleFlagsSampleExtension sampleFlagsSampleExtension =
>, <Line: -                        getSampleExtension(streamingSample, SampleFlagsSampleExtension.class);
>, <Line: -                assert sampleFlagsSampleExtension != null : "SampleDependencySampleExtension missing even though SampleDependencyTrackExtension was present";
>, <Line: -                SampleFlags sflags = new SampleFlags();
>, <Line: -                sflags.setIsLeading(sampleFlagsSampleExtension.getIsLeading());
>, <Line: -                sflags.setSampleIsDependedOn(sampleFlagsSampleExtension.getSampleIsDependedOn());
>, <Line: -                sflags.setSampleDependsOn(sampleFlagsSampleExtension.getSampleDependsOn());
>, <Line: -                sflags.setSampleHasRedundancy(sampleFlagsSampleExtension.getSampleHasRedundancy());
>, <Line: -                sflags.setSampleIsDifferenceSample(sampleFlagsSampleExtension.isSampleIsNonSyncSample());
>, <Line: -                sflags.setSamplePaddingValue(sampleFlagsSampleExtension.getSamplePaddingValue());
>, <Line: -                sflags.setSampleDegradationPriority(sampleFlagsSampleExtension.getSampleDegradationPriority());
>, <Line: -                entry.setSampleFlags(sflags);
>, <Line: -            }
>, <Line: -            entry.setSampleDuration(streamingSample.getDuration());
>, <Line: -            if (trun.isSampleCompositionTimeOffsetPresent()) {
>, <Line: -                CompositionTimeSampleExtension compositionTimeSampleExtension =
>, <Line: -                        getSampleExtension(streamingSample, CompositionTimeSampleExtension.class);
>, <Line: -                assert compositionTimeSampleExtension != null : "CompositionTimeSampleExtension missing even though CompositionTimeTrackExtension was present";
>, <Line: -                entry.setSampleCompositionTimeOffset(compositionTimeSampleExtension.getCompositionTimeOffset());
>, <Line: -            }
>, <Line: -            entries.add(entry);
>, <Line: -        }
>, <Line: -        trun.setEntries(entries);
>, <Line: -        parent.addBox(trun);
>, <Line: -    }
>, <Line: -    private void createTraf(StreamingTrack streamingTrack, MovieFragmentBox moof) {
>, <Line: -        TrackFragmentBox traf = new TrackFragmentBox();
>, <Line: -        moof.addBox(traf);
>, <Line: -        createTfhd(streamingTrack, traf);
>, <Line: -        createTfdt(traf);
>, <Line: -        createTrun(streamingTrack, traf);
>, <Line: -        if (streamingTrack.getTrackExtension(CencEncryptTrackExtension.class) != null) {
>, <Line: -            //     createSaiz(getTrackExtension(source, CencEncryptTrackExtension.class), sequenceNumber, traf);
>, <Line: -            //     createSenc(getTrackExtension(source, CencEncryptTrackExtension.class), sequenceNumber, traf);
>, <Line: -            //     createSaio(getTrackExtension(source, CencEncryptTrackExtension.class), sequenceNumber, traf);
>, <Line: -        }
>, <Line: -  /*      Map<String, List<GroupEntry>> groupEntryFamilies = new HashMap<String, List<GroupEntry>>();
>, <Line: -        for (Map.Entry<GroupEntry, long[]> sg : track.getSampleGroups().entrySet()) {
>, <Line: -            String type = sg.getKey().getType();
>, <Line: -            List<GroupEntry> groupEntries = groupEntryFamilies.get(type);
>, <Line: -            if (groupEntries == null) {
>, <Line: -                groupEntries = new ArrayList<GroupEntry>();
>, <Line: -                groupEntryFamilies.put(type, groupEntries);
>, <Line: -            }
>, <Line: -            groupEntries.add(sg.getKey());
>, <Line: -        }
>, <Line: -        for (Map.Entry<String, List<GroupEntry>> sg : groupEntryFamilies.entrySet()) {
>, <Line: -            SampleGroupDescriptionBox sgpd = new SampleGroupDescriptionBox();
>, <Line: -            String type = sg.getKey();
>, <Line: -            sgpd.setGroupEntries(sg.getValue());
>, <Line: -            SampleToGroupBox sbgp = new SampleToGroupBox();
>, <Line: -            sbgp.setGroupingType(type);
>, <Line: -            SampleToGroupBox.Entry last = null;
>, <Line: -            for (int i = l2i(startSample - 1); i < l2i(endSample - 1); i++) {
>, <Line: -                int index = 0;
>, <Line: -                for (int j = 0; j < sg.getValue().size(); j++) {
>, <Line: -                    GroupEntry groupEntry = sg.getValue().get(j);
>, <Line: -                    long[] sampleNums = track.getSampleGroups().get(groupEntry);
>, <Line: -                    if (Arrays.binarySearch(sampleNums, i) >= 0) {
>, <Line: -                        index = j + 1;
>, <Line: -                    }
>, <Line: -                }
>, <Line: -                if (last == null || last.getGroupDescriptionIndex() != index) {
>, <Line: -                    last = new SampleToGroupBox.Entry(1, index);
>, <Line: -                    sbgp.getEntries().add(last);
>, <Line: -                } else {
>, <Line: -                    last.setSampleCount(last.getSampleCount() + 1);
>, <Line: -                }
>, <Line: -            }
>, <Line: -            traf.addBox(sgpd);
>, <Line: -            traf.addBox(sbgp);
>, <Line: -        }*/
>, <Line: -    }
>, <Line: -    private void createMfhd(long sequenceNumber, MovieFragmentBox moof) {
>, <Line: -        MovieFragmentHeaderBox mfhd = new MovieFragmentHeaderBox();
>, <Line: -        mfhd.setSequenceNumber(sequenceNumber);
>, <Line: -        moof.addBox(mfhd);
>, <Line: -    }
>, <Line: -    private Box createMdat(final StreamingTrack streamingTrack) {
>, <Line: -        return new WriteOnlyBox("mdat") {
>, <Line: -            public long getSize() {
>, <Line: -                long l = 8;
>, <Line: -                for (StreamingSample streamingSample : fragmentBuffers.get(streamingTrack)) {
>, <Line: -                    l += streamingSample.getContent().remaining();
>, <Line: -                }
>, <Line: -                return l;
>, <Line: -            }
>, <Line: -            public void getBox(WritableByteChannel writableByteChannel) throws IOException {
>, <Line: -                ArrayList<ByteBuffer> sampleContents = new ArrayList<ByteBuffer>();
>, <Line: -                long l = 8;
>, <Line: -                for (StreamingSample streamingSample : fragmentBuffers.get(streamingTrack)) {
>, <Line: -                    ByteBuffer sampleContent = streamingSample.getContent();
>, <Line: -                    sampleContents.add(sampleContent);
>, <Line: -                    l += sampleContent.remaining();
>, <Line: -                }
>, <Line: -                ByteBuffer bb = ByteBuffer.allocate(8);
>, <Line: -                IsoTypeWriter.writeUInt32(bb, l);
>, <Line: -                bb.put(IsoFile.fourCCtoBytes(getType()));
>, <Line: -                writableByteChannel.write((ByteBuffer) bb.rewind());
>, <Line: -                for (ByteBuffer sampleContent : sampleContents) {
>, <Line: -                    writableByteChannel.write(sampleContent);
>, <Line: -                }
>, <Line: -            }
>, <Line: -        };
>, <Line: -    }
>, <Line: -}
>]