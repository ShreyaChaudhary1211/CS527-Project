[<Line: +package org.mp4parser.muxer;
>, <Line: +import org.mp4parser.Box;
>, <Line: +import org.mp4parser.Container;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.*;
>, <Line: +import org.mp4parser.boxes.iso23001.part7.CencSampleAuxiliaryDataFormat;
>, <Line: +import org.mp4parser.boxes.iso23001.part7.TrackEncryptionBox;
>, <Line: +import org.mp4parser.muxer.tracks.CencEncryptedTrack;
>, <Line: +import org.mp4parser.tools.IsoTypeReader;
>, <Line: +import org.mp4parser.tools.Path;
>, <Line: +import java.util.Iterator;
>, <Line: +     * @param trackId      ID of the track to extract
>, <Line: +     * @param isofile      the parsed MP4 file
>, <Line: +     * @param randomAccess the RandomAccessSource to read the samples from
>, <Line: +     * @param name         an arbitrary naem to identify track later - e.g. filename
>, <Line: +    public CencMp4TrackImplImpl(final long trackId, Container isofile, RandomAccessSource randomAccess, String name) throws IOException {
>, <Line: +        super(trackId, isofile, randomAccess, name);
>, <Line: +        TrackBox trackBox = null;
>, <Line: +        for (TrackBox box : Path.<TrackBox>getPaths(isofile, "moov/trak")) {
>, <Line: +            if (box.getTrackHeaderBox().getTrackId() == trackId) {
>, <Line: +                trackBox = box;
>, <Line: +                break;
>, <Line: +            }
>, <Line: +        }
>, <Line: +        final List<MovieExtendsBox> movieExtendsBoxes = Path.getPaths(isofile, "moov/mvex");
>, <Line: +        if (!movieExtendsBoxes.isEmpty()) {
>, <Line: +            for (MovieFragmentBox movieFragmentBox : isofile.getBoxes(MovieFragmentBox.class)) {
>, <Line: +                        assert tenc != null;
>, <Line: +                            Iterator<Box> it = isofile.getBoxes().iterator();
>, <Line: +                            for (Box b = it.next(); b != movieFragmentBox; b = it.next()) {
>, <Line: +                                baseOffset += b.getSize();
>, <Line: +                            }
>, <Line: +                            ByteBuffer trunsCencSampleAuxData = randomAccess.get(baseOffset + offset, length);
>, <Line: +            assert tenc != null;
>, <Line: +            assert trackBox != null;
>, <Line: +            assert chunkOffsetBox != null;
>, <Line: +                ByteBuffer chunksCencSampleAuxData = randomAccess.get(offset, sizeInTotal);
>, <Line: +                    ByteBuffer chunksCencSampleAuxData = randomAccess.get(offset, size);
>]
[<Line: -package com.googlecode.mp4parser.authoring;
>, <Line: -import com.coremedia.iso.IsoFile;
>, <Line: -import com.coremedia.iso.IsoTypeReader;
>, <Line: -import com.coremedia.iso.boxes.*;
>, <Line: -import com.coremedia.iso.boxes.fragment.MovieExtendsBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.MovieFragmentBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.TrackFragmentBox;
>, <Line: -import com.coremedia.iso.boxes.fragment.TrackRunBox;
>, <Line: -import com.googlecode.mp4parser.authoring.tracks.CencEncryptedTrack;
>, <Line: -import com.googlecode.mp4parser.util.Path;
>, <Line: -import com.mp4parser.iso14496.part12.SampleAuxiliaryInformationOffsetsBox;
>, <Line: -import com.mp4parser.iso14496.part12.SampleAuxiliaryInformationSizesBox;
>, <Line: -import com.mp4parser.iso23001.part7.CencSampleAuxiliaryDataFormat;
>, <Line: -import com.mp4parser.iso23001.part7.TrackEncryptionBox;
>, <Line: -     * @param name      a name for the track for better identification
>, <Line: -     * @param trackBox  the <code>TrackBox</code> describing the track.
>, <Line: -     * @param fragments additional fragments if located in more than a single file
>, <Line: -    public CencMp4TrackImplImpl(String name, TrackBox trackBox, IsoFile... fragments) throws IOException {
>, <Line: -        super(name, trackBox, fragments);
>, <Line: -        long trackId = trackBox.getTrackHeaderBox().getTrackId();
>, <Line: -        if (trackBox.getParent().getBoxes(MovieExtendsBox.class).size() > 0) {
>, <Line: -            for (MovieFragmentBox movieFragmentBox : ((Box) trackBox.getParent()).getParent().getBoxes(MovieFragmentBox.class)) {
>, <Line: -                        Container base;
>, <Line: -                            base = ((Box) trackBox.getParent()).getParent();
>, <Line: -                            base = movieFragmentBox;
>, <Line: -                            ByteBuffer trunsCencSampleAuxData = base.getByteBuffer(baseOffset + offset, length);
>, <Line: -            Container topLevel = ((MovieBox) trackBox.getParent()).getParent();
>, <Line: -                ByteBuffer chunksCencSampleAuxData = topLevel.getByteBuffer(offset, sizeInTotal);
>, <Line: -                    ByteBuffer chunksCencSampleAuxData = topLevel.getByteBuffer(offset, size);
>]