[<Line: +package org.mp4parser.examples.mux.streaming;
>, <Line: +import org.mp4parser.streaming.StreamingTrack;
>, <Line: +import org.mp4parser.streaming.input.aac.AdtsAacStreamingTrack;
>, <Line: +import org.mp4parser.streaming.input.h264.H264AnnexBTrack;
>, <Line: +import org.mp4parser.streaming.output.mp4.FragmentedMp4Writer;
>, <Line: +import java.io.FileOutputStream;
>, <Line: +import java.net.URI;
>, <Line: +import java.nio.channels.WritableByteChannel;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.List;
>, <Line: +import java.util.concurrent.*;
>, <Line: +import java.util.logging.LogManager;
>, <Line: +public class H264AACExample {
>, <Line: +    public static void main(String[] args) throws Exception {
>, <Line: +        LogManager.getLogManager().readConfiguration(H264AACExample.class.getResourceAsStream("/log.properties"));
>, <Line: +        AdtsAacStreamingTrack aac = new AdtsAacStreamingTrack(
>, <Line: +                new URI("http://org.mp4parser.s3.amazonaws.com/examples/Cosmos%20Laundromat%20small.aac").
>, <Line: +                        toURL().openStream(), 48000, 64000); // How should I know avg bitrate in advance?
>, <Line: +        H264AnnexBTrack h264 = new H264AnnexBTrack(
>, <Line: +                new URI("http://org.mp4parser.s3.amazonaws.com/examples/Cosmos%20Laundromat%20small.264").
>, <Line: +                        toURL().openStream());
>, <Line: +        /*InputStream aacInputStream = new FileInputStream("c:\\dev\\mp4parser\\843D111F-E839-4597-B60C-3B8114E0AA72_AU01.aac");
>, <Line: +        AdtsAacStreamingTrack aac = new AdtsAacStreamingTrack(
>, <Line: +                aacInputStream, 48000, 64000); // How should I know avg bitrate in advance?
>, <Line: +        InputStream h264InputStream = new FileInputStream("c:\\dev\\mp4parser\\843D111F-E839-4597-B60C-3B8114E0AA72_ABR05.h264");
>, <Line: +        H264AnnexBTrack h264 = new H264AnnexBTrack(h264InputStream);
>, <Line: +*/
>, <Line: +        ExecutorService es = Executors.newCachedThreadPool();
>, <Line: +        CompletionService<Void> ecs
>, <Line: +                = new ExecutorCompletionService<>(es);
>, <Line: +        FileOutputStream fos = new FileOutputStream("c:\\dev\\mp4parser\\output.mp4");
>, <Line: +        WritableByteChannel wbc = fos.getChannel();
>, <Line: +        //AsyncWritableByteChannel asyncWritableByteChannel = new AsyncWritableByteChannel(wbc);
>, <Line: +        FragmentedMp4Writer multiTrackFragmentedMp4Writer =
>, <Line: +                new FragmentedMp4Writer(Arrays.<StreamingTrack>asList(aac, h264), wbc);
>, <Line: +        final List<Future<Void>> allFutures = new ArrayList<>();
>, <Line: +        List<Callable<Void>> allCallables = new ArrayList<>();
>, <Line: +        allCallables.add(aac);
>, <Line: +        allCallables.add(h264);
>, <Line: +        for (Callable<Void> callable : allCallables) {
>, <Line: +            allFutures.add(ecs.submit(callable));
>, <Line: +        }
>, <Line: +        System.out.println("Reading and writing started.");
>, <Line: +        while (true) {
>, <Line: +            List<Future<Void>> toBeRemoved = new ArrayList<>();
>, <Line: +            for (Future<Void> future : allFutures) {
>, <Line: +                if (future.isDone()) {
>, <Line: +                    toBeRemoved.add(future);
>, <Line: +                }
>, <Line: +            }
>, <Line: +            allFutures.removeAll(toBeRemoved);
>, <Line: +            if (!allFutures.isEmpty()) {
>, <Line: +                try {
>, <Line: +                    ecs.take().get();
>, <Line: +                } catch (InterruptedException e) {
>, <Line: +                    Thread.currentThread().interrupt();
>, <Line: +                    throw new RuntimeException(e);
>, <Line: +                } catch (ExecutionException e) {
>, <Line: +                    System.out.println("Execution exception " + e.getMessage());
>, <Line: +                    e.printStackTrace();
>, <Line: +                    for (Future<Void> future : allFutures) {
>, <Line: +                        if (!future.isDone()) {
>, <Line: +                            System.out.println("Cancelling " + future);
>, <Line: +                            future.cancel(true);
>, <Line: +                        }
>, <Line: +                    }
>, <Line: +                    break;
>, <Line: +                }
>, <Line: +            } else {
>, <Line: +                break;
>, <Line: +            }
>, <Line: +        }
>, <Line: +        //asyncWritableByteChannel.close();
>, <Line: +        multiTrackFragmentedMp4Writer.close(); // writes the remaining samples
>, <Line: +        fos.close();
>, <Line: +        es.shutdown();
>, <Line: +    }
>, <Line: +}
>]
[]