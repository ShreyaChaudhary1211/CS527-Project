[<Line: +package org.mp4parser.streaming;
>, <Line: +import org.mp4parser.boxes.iso14496.part12.SampleDescriptionBox;
>, <Line: +import org.mp4parser.streaming.output.SampleSink;
>, <Line: +import java.io.Closeable;
>, <Line: +public interface StreamingTrack extends Closeable {
>, <Line: +    /**
>, <Line: +     * Gets the time scale of the track. Typically called by the SampleSink.
>, <Line: +     * Might throw IllegalStateException if called before the first sample has been pushed into the SampleSink.
>, <Line: +     *
>, <Line: +     * @return the track's time scale
>, <Line: +     */
>, <Line: +    long getTimescale();
>, <Line: +    String getHandler();
>, <Line: +    String getLanguage();
>, <Line: +    /**
>, <Line: +     * All implementing classes must make sure the all generated samples are pushed to the sampleSink.
>, <Line: +     * When a sample is pushed all methods must yield valid results.
>, <Line: +     *
>, <Line: +     * @param sampleSink the sink for all generated samples.
>, <Line: +     */
>, <Line: +    void setSampleSink(SampleSink sampleSink);
>, <Line: +    SampleDescriptionBox getSampleDescriptionBox();
>, <Line: +    <T extends TrackExtension> T getTrackExtension(Class<T> clazz);
>, <Line: +    void addTrackExtension(TrackExtension trackExtension);
>, <Line: +    void removeTrackExtension(Class<? extends TrackExtension> clazz);
>, <Line: +}
>]
[]