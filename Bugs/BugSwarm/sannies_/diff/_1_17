[<Line: +    List<Sample> samples;
>, <Line: +        super("subtitles");
>, <Line: +    public synchronized List<Sample> getSamples() {
>, <Line: +        if (samples == null) {
>, <Line: +            samples = new ArrayList<Sample>();
>, <Line: +            long lastEnd = 0;
>, <Line: +            for (Line sub : subs) {
>, <Line: +                long silentTime = sub.from - lastEnd;
>, <Line: +                if (silentTime > 0) {
>, <Line: +                    samples.add(new SampleImpl(ByteBuffer.wrap(new byte[]{0, 0})));
>, <Line: +                } else if (silentTime < 0) {
>, <Line: +                    throw new Error("Subtitle display times may not intersect");
>, <Line: +                }
>, <Line: +                ByteArrayOutputStream baos = new ByteArrayOutputStream();
>, <Line: +                DataOutputStream dos = new DataOutputStream(baos);
>, <Line: +                try {
>, <Line: +                    dos.writeShort(sub.text.getBytes("UTF-8").length);
>, <Line: +                    dos.write(sub.text.getBytes("UTF-8"));
>, <Line: +                    dos.close();
>, <Line: +                } catch (IOException e) {
>, <Line: +                    throw new Error("VM is broken. Does not support UTF-8");
>, <Line: +                }
>, <Line: +                samples.add(new SampleImpl(ByteBuffer.wrap(baos.toByteArray())));
>, <Line: +                lastEnd = sub.to;
>]
[<Line: -        super("subtiles");
>, <Line: -    public List<Sample> getSamples() {
>, <Line: -        List<Sample> samples = new LinkedList<Sample>();
>, <Line: -        long lastEnd = 0;
>, <Line: -        for (Line sub : subs) {
>, <Line: -            long silentTime = sub.from - lastEnd;
>, <Line: -            if (silentTime > 0) {
>, <Line: -                samples.add(new SampleImpl(ByteBuffer.wrap(new byte[]{0, 0})));
>, <Line: -            } else if (silentTime < 0) {
>, <Line: -                throw new Error("Subtitle display times may not intersect");
>, <Line: -            ByteArrayOutputStream baos = new ByteArrayOutputStream();
>, <Line: -            DataOutputStream dos = new DataOutputStream(baos);
>, <Line: -            try {
>, <Line: -                dos.writeShort(sub.text.getBytes("UTF-8").length);
>, <Line: -                dos.write(sub.text.getBytes("UTF-8"));
>, <Line: -                dos.close();
>, <Line: -            } catch (IOException e) {
>, <Line: -                throw new Error("VM is broken. Does not support UTF-8");
>, <Line: -            }
>, <Line: -            samples.add(new SampleImpl(ByteBuffer.wrap(baos.toByteArray())));
>, <Line: -            lastEnd = sub.to;
>]