[<Line: +import org.agileclick.genorm.runtime.GenOrmConnection;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmConstraint;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmException;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmFieldMeta;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmRecord;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmRecordFactory;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmRecordKey;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmResultSet;
>, <Line: +import org.agileclick.genorm.runtime.GenOrmString;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +/**
>, <Line: + * This class has been automatically generated by GenORMous.  This file
>, <Line: + * should not be modified.
>, <Line: + */
>, <Line: +{
>, <Line: +    protected static final Logger s_logger = LoggerFactory.getLogger(ServiceIndex.class.getName());
>, <Line: +    public static final String COL_SERVICE = "service";
>, <Line: +    public static final String COL_SERVICE_KEY = "service_key";
>, <Line: +    public static final String COL_KEY = "key";
>, <Line: +    public static final String COL_VALUE = "value";
>, <Line: +    //Change this value to true to turn on warning messages
>, <Line: +    private static final boolean WARNINGS = false;
>, <Line: +    private static final String SELECT = "SELECT this.\"service\", this.\"service_key\", this.\"key\", this.\"value\" ";
>, <Line: +    private static final String FROM = "FROM service_index this ";
>, <Line: +    private static final String WHERE = "WHERE ";
>, <Line: +    private static final String KEY_WHERE = "WHERE \"service\" = ? AND \"service_key\" = ? AND \"key\" = ?";
>, <Line: +    public static final String TABLE_NAME = "service_index";
>, <Line: +    public static final int NUMBER_OF_COLUMNS = 4;
>, <Line: +    private static final String s_fieldEscapeString = "\"";
>, <Line: +    public static final GenOrmFieldMeta SERVICE_FIELD_META = new GenOrmFieldMeta("service", "string", 0, true, false);
>, <Line: +    public static final GenOrmFieldMeta SERVICE_KEY_FIELD_META = new GenOrmFieldMeta("service_key", "string", 1, true, false);
>, <Line: +    public static final GenOrmFieldMeta KEY_FIELD_META = new GenOrmFieldMeta("key", "string", 2, true, false);
>, <Line: +    public static final GenOrmFieldMeta VALUE_FIELD_META = new GenOrmFieldMeta("value", "string", 3, false, false);
>, <Line: +    //===========================================================================
>, <Line: +    public static ServiceIndexFactoryImpl factory = new ServiceIndexFactoryImpl();
>, <Line: +    public static interface ServiceIndexFactory extends GenOrmRecordFactory
>, <Line: +    {
>, <Line: +        public boolean delete(String service, String serviceKey, String key);
>, <Line: +        public ServiceIndex find(String service, String serviceKey, String key);
>, <Line: +        public ServiceIndex findOrCreate(String service, String serviceKey, String key);
>, <Line: +        /**
>, <Line: +         */
>, <Line: +        public ResultSet getKeys(String service, String serviceKey);
>, <Line: +        /**
>, <Line: +         */
>, <Line: +        public ResultSet getKeysLike(String service, String serviceKey, String keyPrefix);
>, <Line: +    }
>, <Line: +    public static class ServiceIndexFactoryImpl //Inherit interfaces
>, <Line: +            implements ServiceIndexFactory
>, <Line: +    {
>, <Line: +        public static final String CREATE_SQL = "CREATE CACHED TABLE service_index (\n	\"service\" VARCHAR  NOT NULL,\n	\"service_key\" VARCHAR  NOT NULL,\n	\"key\" VARCHAR  NOT NULL,\n	\"value\" VARCHAR  NULL,\n	PRIMARY KEY (\"service\", \"service_key\", \"key\")\n	)";
>, <Line: +        private ArrayList<GenOrmFieldMeta> m_fieldMeta;
>, <Line: +        private ArrayList<GenOrmConstraint> m_foreignKeyConstraints;
>, <Line: +        protected ServiceIndexFactoryImpl()
>, <Line: +        {
>, <Line: +            m_fieldMeta = new ArrayList<GenOrmFieldMeta>();
>, <Line: +            m_fieldMeta.add(SERVICE_FIELD_META);
>, <Line: +            m_fieldMeta.add(SERVICE_KEY_FIELD_META);
>, <Line: +            m_fieldMeta.add(KEY_FIELD_META);
>, <Line: +            m_fieldMeta.add(VALUE_FIELD_META);
>, <Line: +            m_foreignKeyConstraints = new ArrayList<GenOrmConstraint>();
>, <Line: +        }
>, <Line: +        protected ServiceIndex newServiceIndex(java.sql.ResultSet rs)
>, <Line: +        {
>, <Line: +            ServiceIndex rec = new ServiceIndex();
>, <Line: +            ((ServiceIndex_base) rec).initialize(rs);
>, <Line: +            return ((ServiceIndex) GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns a list of the feild meta for the class that this is a factory of
>, <Line: +         */
>, <Line: +        public List<GenOrmFieldMeta> getFields()
>, <Line: +        {
>, <Line: +            return (m_fieldMeta);
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns a list of foreign key constraints
>, <Line: +         */
>, <Line: +        public List<GenOrmConstraint> getForeignKeyConstraints()
>, <Line: +        {
>, <Line: +            return (m_foreignKeyConstraints);
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns the SQL create statement for this table
>, <Line: +         */
>, <Line: +        public String getCreateStatement()
>, <Line: +        {
>, <Line: +            return (CREATE_SQL);
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Creates a new entry with the specified primary keys.
>, <Line: +         */
>, <Line: +        public ServiceIndex create(String service, String serviceKey, String key)
>, <Line: +        {
>, <Line: +            ServiceIndex rec = new ServiceIndex();
>, <Line: +            rec.m_isNewRecord = true;
>, <Line: +            ((ServiceIndex_base) rec).setService(service);
>, <Line: +            ((ServiceIndex_base) rec).setServiceKey(serviceKey);
>, <Line: +            ((ServiceIndex_base) rec).setKey(key);
>, <Line: +            return ((ServiceIndex) GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Creates a new entry that is empty
>, <Line: +         */
>, <Line: +        public ServiceIndex createRecord()
>, <Line: +        {
>, <Line: +            ServiceIndex rec = new ServiceIndex();
>, <Line: +            rec.m_isNewRecord = true;
>, <Line: +            return ((ServiceIndex) GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * If the table has a primary key that has a key generator this method will
>, <Line: +         * return a new table entry with a generated primary key.
>, <Line: +         *
>, <Line: +         * @return ServiceIndex with generated primary key
>, <Line: +         */
>, <Line: +        public ServiceIndex createWithGeneratedKey()
>, <Line: +        {
>, <Line: +            throw new UnsupportedOperationException("ServiceIndex does not support a generated primary key");
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * A generic api for finding a record.
>, <Line: +         *
>, <Line: +         * @param keys This must match the primary key for this record.  If the
>, <Line: +         * record has multiple primary keys this parameter must be of type Object[]
>, <Line: +         * where each element is the corresponding key.
>, <Line: +         * @return ServiceIndex or null if no record is found
>, <Line: +         */
>, <Line: +        public ServiceIndex findRecord(Object keys)
>, <Line: +        {
>, <Line: +            Object[] kArr = (Object[]) keys;
>, <Line: +            return (find((String) kArr[0], (String) kArr[1], (String) kArr[2]));
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Deletes the record with the specified primary keys.
>, <Line: +         * The point of this api is to prevent a hit on the db to see if the record
>, <Line: +         * is there.  This call will add a record to the next transaction that is
>, <Line: +         * marked for delete.
>, <Line: +         *
>, <Line: +         * @return Returns true if the record was previous created and existed
>, <Line: +         * either in the transaction cache or the db.
>, <Line: +         */
>, <Line: +        public boolean delete(String service, String serviceKey, String key)
>, <Line: +        {
>, <Line: +            boolean ret = false;
>, <Line: +            ServiceIndex rec = new ServiceIndex();
>, <Line: +            ((ServiceIndex_base) rec).initialize(service, serviceKey, key);
>, <Line: +            GenOrmConnection con = GenOrmDataSource.getGenOrmConnection();
>, <Line: +            ServiceIndex cachedRec = (ServiceIndex) con.getCachedRecord(rec.getRecordKey());
>, <Line: +            if (cachedRec != null) {
>, <Line: +                ret = true;
>, <Line: +                cachedRec.delete();
>, <Line: +            }
>, <Line: +            else {
>, <Line: +                rec = (ServiceIndex) con.getUniqueRecord(rec);  //This adds the record to the cache
>, <Line: +                rec.delete();
>, <Line: +                ret = rec.flush();
>, <Line: +                rec.setIgnored(true); //So the system does not try to delete it again at commmit
>, <Line: +            }
>, <Line: +            return (ret);
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Find the record with the specified primary keys
>, <Line: +         *
>, <Line: +         * @return ServiceIndex or null if no record is found
>, <Line: +         */
>, <Line: +        public ServiceIndex find(String service, String serviceKey, String key)
>, <Line: +        {
>, <Line: +            ServiceIndex rec = new ServiceIndex();
>, <Line: +            //Create temp object and look in cache for it
>, <Line: +            ((ServiceIndex_base) rec).initialize(service, serviceKey, key);
>, <Line: +            rec = (ServiceIndex) GenOrmDataSource.getGenOrmConnection().getCachedRecord(rec.getRecordKey());
>, <Line: +            java.sql.PreparedStatement genorm_statement = null;
>, <Line: +            java.sql.ResultSet genorm_rs = null;
>, <Line: +            if (rec == null) {
>, <Line: +                try {
>, <Line: +                    //No cached object so look in db
>, <Line: +                    genorm_statement = GenOrmDataSource.prepareStatement(SELECT + FROM + KEY_WHERE);
>, <Line: +                    genorm_statement.setString(1, service);
>, <Line: +                    genorm_statement.setString(2, serviceKey);
>, <Line: +                    genorm_statement.setString(3, key);
>, <Line: +                    s_logger.debug(genorm_statement.toString());
>, <Line: +                    genorm_rs = genorm_statement.executeQuery();
>, <Line: +                    if (genorm_rs.next()) {
>, <Line: +                        rec = newServiceIndex(genorm_rs);
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                catch (java.sql.SQLException sqle) {
>, <Line: +                    throw new GenOrmException(sqle);
>, <Line: +                }
>, <Line: +                finally {
>, <Line: +                    try {
>, <Line: +                        if (genorm_rs != null) {
>, <Line: +                            genorm_rs.close();
>, <Line: +                        }
>, <Line: +                        if (genorm_statement != null) {
>, <Line: +                            genorm_statement.close();
>, <Line: +                        }
>, <Line: +                    }
>, <Line: +                    catch (java.sql.SQLException sqle2) {
>, <Line: +                        throw new GenOrmException(sqle2);
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            return (rec);
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * This is the same as find except if the record returned is null a new one
>, <Line: +         * is created with the specified primary keys
>, <Line: +         *
>, <Line: +         * @return A new or existing record.
>, <Line: +         */
>, <Line: +        public ServiceIndex findOrCreate(String service, String serviceKey, String key)
>, <Line: +        {
>, <Line: +            ServiceIndex rec = find(service, serviceKey, key);
>, <Line: +            if (rec == null) {
>, <Line: +                rec = create(service, serviceKey, key);
>, <Line: +            }
>, <Line: +            return (rec);
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Convenience method for selecting records.  Ideally this should not be use,
>, <Line: +         * instead a custom query for this table should be used.
>, <Line: +         *
>, <Line: +         * @param where sql where statement.
>, <Line: +         */
>, <Line: +        public ResultSet select(String where)
>, <Line: +        {
>, <Line: +            return (select(where, null));
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Convenience method for selecting records.  Ideally this should not be use,
>, <Line: +         * instead a custom query for this table should be used.
>, <Line: +         *
>, <Line: +         * @param where sql where statement.
>, <Line: +         * @param orderBy sql order by statement
>, <Line: +         */
>, <Line: +        public ResultSet select(String where, String orderBy)
>, <Line: +        {
>, <Line: +            ResultSet rs = null;
>, <Line: +            java.sql.Statement stmnt = null;
>, <Line: +            try {
>, <Line: +                stmnt = GenOrmDataSource.createStatement();
>, <Line: +                StringBuilder sb = new StringBuilder();
>, <Line: +                sb.append(SELECT);
>, <Line: +                sb.append(FROM);
>, <Line: +                if (where != null) {
>, <Line: +                    sb.append(WHERE);
>, <Line: +                    sb.append(where);
>, <Line: +                }
>, <Line: +                if (orderBy != null) {
>, <Line: +                    sb.append(" ");
>, <Line: +                    sb.append(orderBy);
>, <Line: +                }
>, <Line: +                String query = sb.toString();
>, <Line: +                rs = new SQLResultSet(stmnt.executeQuery(query), query, stmnt);
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                try {
>, <Line: +                    if (stmnt != null) {
>, <Line: +                        stmnt.close();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                catch (java.sql.SQLException sqle2) {
>, <Line: +                }
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +            return (rs);
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         */
>, <Line: +        public ResultSet getKeys(String service, String serviceKey)
>, <Line: +        {
>, <Line: +            String query = SELECT + "from service_index this\n				where\n				this.\"service\" = ?\n				and this.\"service_key\" = ?\n				order by this.\"key\" asc";
>, <Line: +            java.sql.PreparedStatement genorm_statement = null;
>, <Line: +            try {
>, <Line: +                genorm_statement = GenOrmDataSource.prepareStatement(query);
>, <Line: +                genorm_statement.setString(1, service);
>, <Line: +                genorm_statement.setString(2, serviceKey);
>, <Line: +                s_logger.debug(genorm_statement.toString());
>, <Line: +                ResultSet rs = new SQLResultSet(genorm_statement.executeQuery(), query, genorm_statement);
>, <Line: +                return (rs);
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                try {
>, <Line: +                    if (genorm_statement != null) {
>, <Line: +                        genorm_statement.close();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                catch (java.sql.SQLException sqle2) {
>, <Line: +                }
>, <Line: +                if (s_logger.isDebugEnabled()) {
>, <Line: +                    sqle.printStackTrace();
>, <Line: +                }
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         */
>, <Line: +        public ResultSet getKeysLike(String service, String serviceKey, String keyPrefix)
>, <Line: +        {
>, <Line: +            String query = SELECT + "from service_index this\n				where\n				this.\"service\" = ?\n				AND this.\"service_key\" = ?\n				AND this.\"key\" LIKE ?\n				ORDER BY this.\"key\" asc";
>, <Line: +            java.sql.PreparedStatement genorm_statement = null;
>, <Line: +            try {
>, <Line: +                genorm_statement = GenOrmDataSource.prepareStatement(query);
>, <Line: +                genorm_statement.setString(1, service);
>, <Line: +                genorm_statement.setString(2, serviceKey);
>, <Line: +                genorm_statement.setString(3, keyPrefix);
>, <Line: +                s_logger.debug(genorm_statement.toString());
>, <Line: +                ResultSet rs = new SQLResultSet(genorm_statement.executeQuery(), query, genorm_statement);
>, <Line: +                return (rs);
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                try {
>, <Line: +                    if (genorm_statement != null) {
>, <Line: +                        genorm_statement.close();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                catch (java.sql.SQLException sqle2) {
>, <Line: +                }
>, <Line: +                if (s_logger.isDebugEnabled()) {
>, <Line: +                    sqle.printStackTrace();
>, <Line: +                }
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        public ResultSet getServiceKeys(String service)
>, <Line: +        {
>, <Line: +            String query = "SELECT DISTINCT this.\"service\", this.\"service_key\" from service_index this where this.\"service\" = ?	order by this.\"service_key\" asc";
>, <Line: +            java.sql.PreparedStatement genorm_statement = null;
>, <Line: +            try {
>, <Line: +                genorm_statement = GenOrmDataSource.prepareStatement(query);
>, <Line: +                genorm_statement.setString(1, service);
>, <Line: +                s_logger.debug(genorm_statement.toString());
>, <Line: +                return new SQLResultSet(genorm_statement.executeQuery(), query, genorm_statement);
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                try {
>, <Line: +                    if (genorm_statement != null) {
>, <Line: +                        genorm_statement.close();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                catch (java.sql.SQLException sqle2) {
>, <Line: +                }
>, <Line: +                if (s_logger.isDebugEnabled()) {
>, <Line: +                    sqle.printStackTrace();
>, <Line: +                }
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        //---------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Calls all query methods with test parameters.
>, <Line: +         */
>, <Line: +        public void testQueryMethods()
>, <Line: +        {
>, <Line: +            ResultSet rs;
>, <Line: +            System.out.println("ServiceIndex.getKeys");
>, <Line: +            rs = getKeys("foo", "foo");
>, <Line: +            rs.close();
>, <Line: +            System.out.println("ServiceIndex.getKeysLike");
>, <Line: +            rs = getKeysLike("foo", "foo", "key%");
>, <Line: +            rs.close();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    //===========================================================================
>, <Line: +    public static interface ResultSet extends GenOrmResultSet
>, <Line: +    {
>, <Line: +        public ArrayList<ServiceIndex> getArrayList(int maxRows);
>, <Line: +        public ArrayList<ServiceIndex> getArrayList();
>, <Line: +        public ServiceIndex getRecord();
>, <Line: +        public ServiceIndex getOnlyRecord();
>, <Line: +    }
>, <Line: +    //===========================================================================
>, <Line: +    private static class SQLResultSet
>, <Line: +            implements ResultSet
>, <Line: +    {
>, <Line: +        private java.sql.ResultSet m_resultSet;
>, <Line: +        private java.sql.Statement m_statement;
>, <Line: +        private String m_query;
>, <Line: +        private boolean m_onFirstResult;
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        protected SQLResultSet(java.sql.ResultSet resultSet, String query, java.sql.Statement statement)
>, <Line: +        {
>, <Line: +            m_resultSet = resultSet;
>, <Line: +            m_statement = statement;
>, <Line: +            m_query = query;
>, <Line: +            m_onFirstResult = false;
>, <Line: +        }
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Closes any underlying java.sql.Result set and java.sql.Statement
>, <Line: +         * that was used to create this results set.
>, <Line: +         */
>, <Line: +        public void close()
>, <Line: +        {
>, <Line: +            try {
>, <Line: +                m_resultSet.close();
>, <Line: +                m_statement.close();
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns the reults as an ArrayList of Record objects.
>, <Line: +         * The Result set is closed within this call
>, <Line: +         *
>, <Line: +         * @param maxRows if the result set contains more than this param
>, <Line: +         * then an exception is thrown
>, <Line: +         */
>, <Line: +        public ArrayList<ServiceIndex> getArrayList(int maxRows)
>, <Line: +        {
>, <Line: +            ArrayList<ServiceIndex> results = new ArrayList<ServiceIndex>();
>, <Line: +            int count = 0;
>, <Line: +            try {
>, <Line: +                if (m_onFirstResult) {
>, <Line: +                    count++;
>, <Line: +                    results.add(factory.newServiceIndex(m_resultSet));
>, <Line: +                }
>, <Line: +                while (m_resultSet.next() && (count < maxRows)) {
>, <Line: +                    count++;
>, <Line: +                    results.add(factory.newServiceIndex(m_resultSet));
>, <Line: +                }
>, <Line: +                if (m_resultSet.next()) {
>, <Line: +                    throw new GenOrmException("Bound of " + maxRows + " is too small for query [" + m_query + "]");
>, <Line: +                }
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                sqle.printStackTrace();
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +            close();
>, <Line: +            return (results);
>, <Line: +        }
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns the reults as an ArrayList of Record objects.
>, <Line: +         * The Result set is closed within this call
>, <Line: +         */
>, <Line: +        public ArrayList<ServiceIndex> getArrayList()
>, <Line: +        {
>, <Line: +            ArrayList<ServiceIndex> results = new ArrayList<ServiceIndex>();
>, <Line: +            try {
>, <Line: +                if (m_onFirstResult) {
>, <Line: +                    results.add(factory.newServiceIndex(m_resultSet));
>, <Line: +                }
>, <Line: +                while (m_resultSet.next()) {
>, <Line: +                    results.add(factory.newServiceIndex(m_resultSet));
>, <Line: +                }
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                sqle.printStackTrace();
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +            close();
>, <Line: +            return (results);
>, <Line: +        }
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns the underlying java.sql.ResultSet object
>, <Line: +         */
>, <Line: +        public java.sql.ResultSet getResultSet()
>, <Line: +        {
>, <Line: +            return (m_resultSet);
>, <Line: +        }
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns the current record in the result set
>, <Line: +         */
>, <Line: +        public ServiceIndex getRecord()
>, <Line: +        {
>, <Line: +            return (factory.newServiceIndex(m_resultSet));
>, <Line: +        }
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * This call expects only one record in the result set.  If multiple records
>, <Line: +         * are found an excpetion is thrown.
>, <Line: +         * The ResultSet object is automatically closed by this call.
>, <Line: +         */
>, <Line: +        public ServiceIndex getOnlyRecord()
>, <Line: +        {
>, <Line: +            ServiceIndex ret = null;
>, <Line: +            try {
>, <Line: +                if (m_resultSet.next()) {
>, <Line: +                    ret = factory.newServiceIndex(m_resultSet);
>, <Line: +                }
>, <Line: +                if (m_resultSet.next()) {
>, <Line: +                    throw new GenOrmException("Multiple rows returned in call from ServiceIndex.getOnlyRecord");
>, <Line: +                }
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +            close();
>, <Line: +            return (ret);
>, <Line: +        }
>, <Line: +        //------------------------------------------------------------------------
>, <Line: +        /**
>, <Line: +         * Returns true if there is another record in the result set.
>, <Line: +         */
>, <Line: +        public boolean next()
>, <Line: +        {
>, <Line: +            boolean ret = false;
>, <Line: +            m_onFirstResult = true;
>, <Line: +            try {
>, <Line: +                ret = m_resultSet.next();
>, <Line: +            }
>, <Line: +            catch (java.sql.SQLException sqle) {
>, <Line: +                throw new GenOrmException(sqle);
>, <Line: +            }
>, <Line: +            return (ret);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    //===========================================================================
>, <Line: +    private GenOrmString m_service;
>, <Line: +    private GenOrmString m_serviceKey;
>, <Line: +    private GenOrmString m_key;
>, <Line: +    private GenOrmString m_value;
>, <Line: +    private List<GenOrmRecordKey> m_foreignKeys;
>, <Line: +    public List<GenOrmRecordKey> getForeignKeys()
>, <Line: +    {
>, <Line: +        return (m_foreignKeys);
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    /**
>, <Line: +     */
>, <Line: +    public String getService()
>, <Line: +    {
>, <Line: +        return (m_service.getValue());
>, <Line: +    }
>, <Line: +    public ServiceIndex setService(String data)
>, <Line: +    {
>, <Line: +        boolean changed = m_service.setValue(data);
>, <Line: +        //Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: +        if (changed) {
>, <Line: +            if (m_dirtyFlags.isEmpty()) {
>, <Line: +                GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: +            }
>, <Line: +            m_dirtyFlags.set(SERVICE_FIELD_META.getDirtyFlag());
>, <Line: +            if (m_isNewRecord) //Force set the prev value
>, <Line: +            {
>, <Line: +                m_service.setPrevValue(data);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return ((ServiceIndex) this);
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    /**
>, <Line: +     */
>, <Line: +    public String getServiceKey()
>, <Line: +    {
>, <Line: +        return (m_serviceKey.getValue());
>, <Line: +    }
>, <Line: +    public ServiceIndex setServiceKey(String data)
>, <Line: +    {
>, <Line: +        boolean changed = m_serviceKey.setValue(data);
>, <Line: +        //Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: +        if (changed) {
>, <Line: +            if (m_dirtyFlags.isEmpty()) {
>, <Line: +                GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: +            }
>, <Line: +            m_dirtyFlags.set(SERVICE_KEY_FIELD_META.getDirtyFlag());
>, <Line: +            if (m_isNewRecord) //Force set the prev value
>, <Line: +            {
>, <Line: +                m_serviceKey.setPrevValue(data);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return ((ServiceIndex) this);
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    /**
>, <Line: +     */
>, <Line: +    public String getKey()
>, <Line: +    {
>, <Line: +        return (m_key.getValue());
>, <Line: +    }
>, <Line: +    public ServiceIndex setKey(String data)
>, <Line: +    {
>, <Line: +        boolean changed = m_key.setValue(data);
>, <Line: +        //Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: +        if (changed) {
>, <Line: +            if (m_dirtyFlags.isEmpty()) {
>, <Line: +                GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: +            }
>, <Line: +            m_dirtyFlags.set(KEY_FIELD_META.getDirtyFlag());
>, <Line: +            if (m_isNewRecord) //Force set the prev value
>, <Line: +            {
>, <Line: +                m_key.setPrevValue(data);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return ((ServiceIndex) this);
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    /**
>, <Line: +     */
>, <Line: +    public String getValue()
>, <Line: +    {
>, <Line: +        return (m_value.getValue());
>, <Line: +    }
>, <Line: +    public ServiceIndex setValue(String data)
>, <Line: +    {
>, <Line: +        boolean changed = m_value.setValue(data);
>, <Line: +        //Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: +        if (changed) {
>, <Line: +            if (m_dirtyFlags.isEmpty()) {
>, <Line: +                GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: +            }
>, <Line: +            m_dirtyFlags.set(VALUE_FIELD_META.getDirtyFlag());
>, <Line: +            if (m_isNewRecord) //Force set the prev value
>, <Line: +            {
>, <Line: +                m_value.setPrevValue(data);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return ((ServiceIndex) this);
>, <Line: +    }
>, <Line: +    public boolean isValueNull()
>, <Line: +    {
>, <Line: +        return (m_value.isNull());
>, <Line: +    }
>, <Line: +    public ServiceIndex setValueNull()
>, <Line: +    {
>, <Line: +        boolean changed = m_value.setNull();
>, <Line: +        if (changed) {
>, <Line: +            if (m_dirtyFlags.isEmpty()) {
>, <Line: +                GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: +            }
>, <Line: +            m_dirtyFlags.set(VALUE_FIELD_META.getDirtyFlag());
>, <Line: +        }
>, <Line: +        return ((ServiceIndex) this);
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    protected void initialize(String service, String serviceKey, String key)
>, <Line: +    {
>, <Line: +        m_service.setValue(service);
>, <Line: +        m_service.setPrevValue(service);
>, <Line: +        m_serviceKey.setValue(serviceKey);
>, <Line: +        m_serviceKey.setPrevValue(serviceKey);
>, <Line: +        m_key.setValue(key);
>, <Line: +        m_key.setPrevValue(key);
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    protected void initialize(java.sql.ResultSet rs)
>, <Line: +    {
>, <Line: +        try {
>, <Line: +            if (s_logger.isDebugEnabled()) {
>, <Line: +                java.sql.ResultSetMetaData meta = rs.getMetaData();
>, <Line: +                for (int I = 1; I <= meta.getColumnCount(); I++) {
>, <Line: +                    s_logger.debug("Reading - " + meta.getColumnName(I) + " : " + rs.getString(I));
>, <Line: +                }
>, <Line: +            }
>, <Line: +            m_service.setValue(rs, 1);
>, <Line: +            m_serviceKey.setValue(rs, 2);
>, <Line: +            if (rs.getFetchSize() > 2) {
>, <Line: +                m_key.setValue(rs, 3);
>, <Line: +                m_value.setValue(rs, 4);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        catch (java.sql.SQLException sqle) {
>, <Line: +            throw new GenOrmException(sqle);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    /*package*/ ServiceIndex_base()
>, <Line: +    {
>, <Line: +        super(TABLE_NAME);
>, <Line: +        m_logger = s_logger;
>, <Line: +        m_foreignKeys = new ArrayList<GenOrmRecordKey>();
>, <Line: +        m_dirtyFlags = new java.util.BitSet(NUMBER_OF_COLUMNS);
>, <Line: +        m_service = new GenOrmString(SERVICE_FIELD_META);
>, <Line: +        addField(COL_SERVICE, m_service);
>, <Line: +        m_serviceKey = new GenOrmString(SERVICE_KEY_FIELD_META);
>, <Line: +        addField(COL_SERVICE_KEY, m_serviceKey);
>, <Line: +        m_key = new GenOrmString(KEY_FIELD_META);
>, <Line: +        addField(COL_KEY, m_key);
>, <Line: +        m_value = new GenOrmString(VALUE_FIELD_META);
>, <Line: +        addField(COL_VALUE, m_value);
>, <Line: +        GenOrmRecordKey foreignKey;
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    @Override
>, <Line: +    public GenOrmConnection getGenOrmConnection()
>, <Line: +    {
>, <Line: +        return (GenOrmDataSource.getGenOrmConnection());
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    @Override
>, <Line: +    public String getFieldEscapeString()
>, <Line: +    {
>, <Line: +        return (s_fieldEscapeString);
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    @Override
>, <Line: +    public void setMTS()
>, <Line: +    {
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    @Override
>, <Line: +    public void setCTS()
>, <Line: +    {
>, <Line: +    }
>, <Line: +    //---------------------------------------------------------------------------
>, <Line: +    public String toString()
>, <Line: +    {
>, <Line: +        StringBuilder sb = new StringBuilder();
>, <Line: +        sb.append("service=\"");
>, <Line: +        sb.append(m_service.getValue());
>, <Line: +        sb.append("\" ");
>, <Line: +        sb.append("service_key=\"");
>, <Line: +        sb.append(m_serviceKey.getValue());
>, <Line: +        sb.append("\" ");
>, <Line: +        sb.append("key=\"");
>, <Line: +        sb.append(m_key.getValue());
>, <Line: +        sb.append("\" ");
>, <Line: +        sb.append("value=\"");
>, <Line: +        sb.append(m_value.getValue());
>, <Line: +        sb.append("\" ");
>, <Line: +        return (sb.toString().trim());
>, <Line: +    }
>, <Line: +    //===========================================================================
>, <Line: +}
>]
[<Line: -import java.util.*;
>, <Line: -import org.agileclick.genorm.runtime.*;
>, <Line: -/**
>, <Line: -	This class has been automatically generated by GenORMous.  This file
>, <Line: -	should not be modified.
>, <Line: -*/
>, <Line: -	{
>, <Line: -	protected static final Logger s_logger = LoggerFactory.getLogger(ServiceIndex.class.getName());
>, <Line: -	public static final String COL_SERVICE = "service";
>, <Line: -	public static final String COL_SERVICE_KEY = "service_key";
>, <Line: -	public static final String COL_KEY = "key";
>, <Line: -	public static final String COL_VALUE = "value";
>, <Line: -	//Change this value to true to turn on warning messages
>, <Line: -	private static final boolean WARNINGS = false;
>, <Line: -	private static final String SELECT = "SELECT this.\"service\", this.\"service_key\", this.\"key\", this.\"value\" ";
>, <Line: -	private static final String FROM = "FROM service_index this ";
>, <Line: -	private static final String WHERE = "WHERE ";
>, <Line: -	private static final String KEY_WHERE = "WHERE \"service\" = ? AND \"service_key\" = ? AND \"key\" = ?";
>, <Line: -	public static final String TABLE_NAME = "service_index";
>, <Line: -	public static final int NUMBER_OF_COLUMNS = 4;
>, <Line: -	private static final String s_fieldEscapeString = "\""; 
>, <Line: -	public static final GenOrmFieldMeta SERVICE_FIELD_META = new GenOrmFieldMeta("service", "string", 0, true, false);
>, <Line: -	public static final GenOrmFieldMeta SERVICE_KEY_FIELD_META = new GenOrmFieldMeta("service_key", "string", 1, true, false);
>, <Line: -	public static final GenOrmFieldMeta KEY_FIELD_META = new GenOrmFieldMeta("key", "string", 2, true, false);
>, <Line: -	public static final GenOrmFieldMeta VALUE_FIELD_META = new GenOrmFieldMeta("value", "string", 3, false, false);
>, <Line: -	//===========================================================================
>, <Line: -	public static ServiceIndexFactoryImpl factory = new ServiceIndexFactoryImpl();
>, <Line: -	public static interface ServiceIndexFactory extends GenOrmRecordFactory
>, <Line: -		{
>, <Line: -		public boolean delete(String service, String serviceKey, String key);
>, <Line: -		public ServiceIndex find(String service, String serviceKey, String key);
>, <Line: -		public ServiceIndex findOrCreate(String service, String serviceKey, String key);
>, <Line: -		/**
>, <Line: -		*/
>, <Line: -		public ResultSet getKeys(String service, String serviceKey);/**
>, <Line: -		*/
>, <Line: -		public ResultSet getKeysLike(String service, String serviceKey, String keyPrefix);
>, <Line: -		}
>, <Line: -	public static class ServiceIndexFactoryImpl //Inherit interfaces
>, <Line: -			implements ServiceIndexFactory 
>, <Line: -		{
>, <Line: -		public static final String CREATE_SQL = "CREATE CACHED TABLE service_index (\n	\"service\" VARCHAR  NOT NULL,\n	\"service_key\" VARCHAR  NOT NULL,\n	\"key\" VARCHAR  NOT NULL,\n	\"value\" VARCHAR  NULL,\n	PRIMARY KEY (\"service\", \"service_key\", \"key\")\n	)";
>, <Line: -		private ArrayList<GenOrmFieldMeta> m_fieldMeta;
>, <Line: -		private ArrayList<GenOrmConstraint> m_foreignKeyConstraints;
>, <Line: -		protected ServiceIndexFactoryImpl()
>, <Line: -			{
>, <Line: -			m_fieldMeta = new ArrayList<GenOrmFieldMeta>();
>, <Line: -			m_fieldMeta.add(SERVICE_FIELD_META);
>, <Line: -			m_fieldMeta.add(SERVICE_KEY_FIELD_META);
>, <Line: -			m_fieldMeta.add(KEY_FIELD_META);
>, <Line: -			m_fieldMeta.add(VALUE_FIELD_META);
>, <Line: -			m_foreignKeyConstraints = new ArrayList<GenOrmConstraint>();
>, <Line: -			}
>, <Line: -		protected ServiceIndex newServiceIndex(java.sql.ResultSet rs)
>, <Line: -			{
>, <Line: -			ServiceIndex rec = new ServiceIndex();
>, <Line: -			((ServiceIndex_base)rec).initialize(rs);
>, <Line: -			return ((ServiceIndex)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns a list of the feild meta for the class that this is a factory of
>, <Line: -		*/
>, <Line: -		public List<GenOrmFieldMeta> getFields()
>, <Line: -			{
>, <Line: -			return (m_fieldMeta);
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns a list of foreign key constraints
>, <Line: -		*/
>, <Line: -		public List<GenOrmConstraint> getForeignKeyConstraints()
>, <Line: -			{
>, <Line: -			return (m_foreignKeyConstraints);
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns the SQL create statement for this table
>, <Line: -		*/
>, <Line: -		public String getCreateStatement()
>, <Line: -			{
>, <Line: -			return (CREATE_SQL);
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Creates a new entry with the specified primary keys.
>, <Line: -		*/
>, <Line: -		public ServiceIndex create(String service, String serviceKey, String key)
>, <Line: -			{
>, <Line: -			ServiceIndex rec = new ServiceIndex();
>, <Line: -			rec.m_isNewRecord = true;
>, <Line: -			((ServiceIndex_base)rec).setService(service);
>, <Line: -			((ServiceIndex_base)rec).setServiceKey(serviceKey);
>, <Line: -			((ServiceIndex_base)rec).setKey(key);
>, <Line: -			return ((ServiceIndex)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Creates a new entry that is empty
>, <Line: -		*/
>, <Line: -		public ServiceIndex createRecord()
>, <Line: -			{
>, <Line: -			ServiceIndex rec = new ServiceIndex();
>, <Line: -			rec.m_isNewRecord = true;
>, <Line: -			return ((ServiceIndex)GenOrmDataSource.getGenOrmConnection().getUniqueRecord(rec));
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -		If the table has a primary key that has a key generator this method will 
>, <Line: -		return a new table entry with a generated primary key.
>, <Line: -		@return ServiceIndex with generated primary key
>, <Line: -		*/
>, <Line: -		public ServiceIndex createWithGeneratedKey()
>, <Line: -			{
>, <Line: -			throw new UnsupportedOperationException("ServiceIndex does not support a generated primary key");
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -		A generic api for finding a record.
>, <Line: -		@param keys This must match the primary key for this record.  If the 
>, <Line: -		record has multiple primary keys this parameter must be of type Object[] 
>, <Line: -		where each element is the corresponding key.
>, <Line: -		@return ServiceIndex or null if no record is found
>, <Line: -		*/
>, <Line: -		public ServiceIndex findRecord(Object keys)
>, <Line: -			{
>, <Line: -			Object[] kArr = (Object[])keys;
>, <Line: -			return (find((String)kArr[0], (String)kArr[1], (String)kArr[2]));
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Deletes the record with the specified primary keys.
>, <Line: -			The point of this api is to prevent a hit on the db to see if the record
>, <Line: -			is there.  This call will add a record to the next transaction that is 
>, <Line: -			marked for delete. 
>, <Line: -			@return Returns true if the record was previous created and existed
>, <Line: -			either in the transaction cache or the db.
>, <Line: -		*/
>, <Line: -		public boolean delete(String service, String serviceKey, String key)
>, <Line: -			{
>, <Line: -			boolean ret = false;
>, <Line: -			ServiceIndex rec = new ServiceIndex();
>, <Line: -			((ServiceIndex_base)rec).initialize(service, serviceKey, key);
>, <Line: -			GenOrmConnection con = GenOrmDataSource.getGenOrmConnection();
>, <Line: -			ServiceIndex cachedRec = (ServiceIndex)con.getCachedRecord(rec.getRecordKey());
>, <Line: -			if (cachedRec != null)
>, <Line: -				{
>, <Line: -				ret = true;
>, <Line: -				cachedRec.delete();
>, <Line: -				}
>, <Line: -			else
>, <Line: -				{
>, <Line: -				rec = (ServiceIndex)con.getUniqueRecord(rec);  //This adds the record to the cache
>, <Line: -				rec.delete();
>, <Line: -				ret = rec.flush();
>, <Line: -				rec.setIgnored(true); //So the system does not try to delete it again at commmit
>, <Line: -				}
>, <Line: -			return (ret);
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -		Find the record with the specified primary keys
>, <Line: -		@return ServiceIndex or null if no record is found
>, <Line: -		*/
>, <Line: -		public ServiceIndex find(String service, String serviceKey, String key)
>, <Line: -			{
>, <Line: -			ServiceIndex rec = new ServiceIndex();
>, <Line: -			//Create temp object and look in cache for it
>, <Line: -			((ServiceIndex_base)rec).initialize(service, serviceKey, key);
>, <Line: -			rec = (ServiceIndex)GenOrmDataSource.getGenOrmConnection().getCachedRecord(rec.getRecordKey());
>, <Line: -			java.sql.PreparedStatement genorm_statement = null;
>, <Line: -			java.sql.ResultSet genorm_rs = null;
>, <Line: -			if (rec == null)
>, <Line: -				{
>, <Line: -				try
>, <Line: -					{
>, <Line: -					//No cached object so look in db
>, <Line: -					genorm_statement = GenOrmDataSource.prepareStatement(SELECT+FROM+KEY_WHERE);
>, <Line: -					genorm_statement.setString(1, service);
>, <Line: -					genorm_statement.setString(2, serviceKey);
>, <Line: -					genorm_statement.setString(3, key);
>, <Line: -					s_logger.debug(genorm_statement.toString());
>, <Line: -					genorm_rs = genorm_statement.executeQuery();
>, <Line: -					if (genorm_rs.next())
>, <Line: -						rec = newServiceIndex(genorm_rs);
>, <Line: -					}
>, <Line: -				catch (java.sql.SQLException sqle)
>, <Line: -					{
>, <Line: -					throw new GenOrmException(sqle);
>, <Line: -					}
>, <Line: -				finally
>, <Line: -					{
>, <Line: -					try
>, <Line: -						{
>, <Line: -						if (genorm_rs != null)
>, <Line: -							genorm_rs.close();
>, <Line: -						if (genorm_statement != null)
>, <Line: -							genorm_statement.close();
>, <Line: -						}
>, <Line: -					catch (java.sql.SQLException sqle2)
>, <Line: -						{
>, <Line: -						throw new GenOrmException(sqle2);
>, <Line: -						}
>, <Line: -					}
>, <Line: -				}
>, <Line: -			return (rec);
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -		This is the same as find except if the record returned is null a new one 
>, <Line: -		is created with the specified primary keys
>, <Line: -		@return A new or existing record.  
>, <Line: -		*/
>, <Line: -		public ServiceIndex findOrCreate(String service, String serviceKey, String key)
>, <Line: -			{
>, <Line: -			ServiceIndex rec = find(service, serviceKey, key);
>, <Line: -			if (rec == null)
>, <Line: -				rec = create(service, serviceKey, key);
>, <Line: -			return (rec);
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Convenience method for selecting records.  Ideally this should not be use, 
>, <Line: -			instead a custom query for this table should be used.
>, <Line: -			@param where sql where statement.
>, <Line: -		*/
>, <Line: -		public ResultSet select(String where)
>, <Line: -			{
>, <Line: -			return (select(where, null));
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Convenience method for selecting records.  Ideally this should not be use, 
>, <Line: -			instead a custom query for this table should be used.
>, <Line: -			@param where sql where statement.
>, <Line: -			@param orderBy sql order by statement
>, <Line: -		*/
>, <Line: -		public ResultSet select(String where, String orderBy)
>, <Line: -			{
>, <Line: -			ResultSet rs = null;
>, <Line: -			java.sql.Statement stmnt = null;
>, <Line: -			try
>, <Line: -				{
>, <Line: -				stmnt = GenOrmDataSource.createStatement();
>, <Line: -				StringBuilder sb = new StringBuilder();
>, <Line: -				sb.append(SELECT);
>, <Line: -				sb.append(FROM);
>, <Line: -				if (where != null)
>, <Line: -					{
>, <Line: -					sb.append(WHERE);
>, <Line: -					sb.append(where);
>, <Line: -					}
>, <Line: -				if (orderBy != null)
>, <Line: -					{
>, <Line: -					sb.append(" ");
>, <Line: -					sb.append(orderBy);
>, <Line: -					}
>, <Line: -				String query = sb.toString();
>, <Line: -				rs = new SQLResultSet(stmnt.executeQuery(query), query, stmnt);
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				try
>, <Line: -					{
>, <Line: -					if (stmnt != null)
>, <Line: -						stmnt.close();
>, <Line: -					}
>, <Line: -				catch (java.sql.SQLException sqle2) { }
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			return (rs);
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -		*/
>, <Line: -		public ResultSet getKeys(String service, String serviceKey)
>, <Line: -			{
>, <Line: -			String query = SELECT+"from service_index this\n				where\n				this.\"service\" = ?\n				and this.\"service_key\" = ?\n				order by this.\"key\" asc";
>, <Line: -			java.sql.PreparedStatement genorm_statement = null;
>, <Line: -			try
>, <Line: -				{
>, <Line: -				genorm_statement = GenOrmDataSource.prepareStatement(query);
>, <Line: -				genorm_statement.setString(1, service);genorm_statement.setString(2, serviceKey);
>, <Line: -				s_logger.debug(genorm_statement.toString());
>, <Line: -				ResultSet rs = new SQLResultSet(genorm_statement.executeQuery(), query, genorm_statement);
>, <Line: -				return (rs);
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				try
>, <Line: -					{
>, <Line: -					if (genorm_statement != null)
>, <Line: -						genorm_statement.close();
>, <Line: -					}
>, <Line: -				catch (java.sql.SQLException sqle2) { }
>, <Line: -				if (s_logger.isDebugEnabled())
>, <Line: -					sqle.printStackTrace();
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -		*/
>, <Line: -		public ResultSet getKeysLike(String service, String serviceKey, String keyPrefix)
>, <Line: -			{
>, <Line: -			String query = SELECT+"from service_index this\n				where\n				this.\"service\" = ?\n				AND this.\"service_key\" = ?\n				AND this.\"key\" LIKE ?\n				ORDER BY this.\"key\" asc";
>, <Line: -			java.sql.PreparedStatement genorm_statement = null;
>, <Line: -			try
>, <Line: -				{
>, <Line: -				genorm_statement = GenOrmDataSource.prepareStatement(query);
>, <Line: -				genorm_statement.setString(1, service);genorm_statement.setString(2, serviceKey);genorm_statement.setString(3, keyPrefix);
>, <Line: -				s_logger.debug(genorm_statement.toString());
>, <Line: -				ResultSet rs = new SQLResultSet(genorm_statement.executeQuery(), query, genorm_statement);
>, <Line: -				return (rs);
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				try
>, <Line: -					{
>, <Line: -					if (genorm_statement != null)
>, <Line: -						genorm_statement.close();
>, <Line: -					}
>, <Line: -				catch (java.sql.SQLException sqle2) { }
>, <Line: -				if (s_logger.isDebugEnabled())
>, <Line: -					sqle.printStackTrace();
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		//---------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Calls all query methods with test parameters.
>, <Line: -		*/
>, <Line: -		public void testQueryMethods()
>, <Line: -			{
>, <Line: -			ResultSet rs;
>, <Line: -			System.out.println("ServiceIndex.getKeys");
>, <Line: -			rs = getKeys("foo", "foo");
>, <Line: -			rs.close();
>, <Line: -			System.out.println("ServiceIndex.getKeysLike");
>, <Line: -			rs = getKeysLike("foo", "foo", "key%");
>, <Line: -			rs.close();
>, <Line: -			}
>, <Line: -		}
>, <Line: -	//===========================================================================
>, <Line: -	public static interface ResultSet extends GenOrmResultSet
>, <Line: -		{
>, <Line: -		public ArrayList<ServiceIndex> getArrayList(int maxRows);
>, <Line: -		public ArrayList<ServiceIndex> getArrayList();
>, <Line: -		public ServiceIndex getRecord();
>, <Line: -		public ServiceIndex getOnlyRecord();
>, <Line: -		}
>, <Line: -	//===========================================================================
>, <Line: -	private static class SQLResultSet 
>, <Line: -			implements ResultSet
>, <Line: -		{
>, <Line: -		private java.sql.ResultSet m_resultSet;
>, <Line: -		private java.sql.Statement m_statement;
>, <Line: -		private String m_query;
>, <Line: -		private boolean m_onFirstResult;
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		protected SQLResultSet(java.sql.ResultSet resultSet, String query, java.sql.Statement statement)
>, <Line: -			{
>, <Line: -			m_resultSet = resultSet;
>, <Line: -			m_statement = statement;
>, <Line: -			m_query = query;
>, <Line: -			m_onFirstResult = false;
>, <Line: -			}
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Closes any underlying java.sql.Result set and java.sql.Statement 
>, <Line: -			that was used to create this results set.
>, <Line: -		*/
>, <Line: -		public void close()
>, <Line: -			{
>, <Line: -			try
>, <Line: -				{
>, <Line: -				m_resultSet.close();
>, <Line: -				m_statement.close();
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns the reults as an ArrayList of Record objects.
>, <Line: -			The Result set is closed within this call
>, <Line: -			@param maxRows if the result set contains more than this param
>, <Line: -				then an exception is thrown
>, <Line: -		*/
>, <Line: -		public ArrayList<ServiceIndex> getArrayList(int maxRows)
>, <Line: -			{
>, <Line: -			ArrayList<ServiceIndex> results = new ArrayList<ServiceIndex>();
>, <Line: -			int count = 0;
>, <Line: -			try
>, <Line: -				{
>, <Line: -				if (m_onFirstResult)
>, <Line: -					{
>, <Line: -					count ++;
>, <Line: -					results.add(factory.newServiceIndex(m_resultSet));
>, <Line: -					}
>, <Line: -				while (m_resultSet.next() && (count < maxRows))
>, <Line: -					{
>, <Line: -					count ++;
>, <Line: -					results.add(factory.newServiceIndex(m_resultSet));
>, <Line: -					}
>, <Line: -				if (m_resultSet.next())
>, <Line: -					throw new GenOrmException("Bound of "+maxRows+" is too small for query ["+m_query+"]");
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				sqle.printStackTrace();
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			close();
>, <Line: -			return (results);
>, <Line: -			}
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns the reults as an ArrayList of Record objects.
>, <Line: -			The Result set is closed within this call
>, <Line: -		*/
>, <Line: -		public ArrayList<ServiceIndex> getArrayList()
>, <Line: -			{
>, <Line: -			ArrayList<ServiceIndex> results = new ArrayList<ServiceIndex>();
>, <Line: -			try
>, <Line: -				{
>, <Line: -				if (m_onFirstResult)
>, <Line: -					results.add(factory.newServiceIndex(m_resultSet));
>, <Line: -				while (m_resultSet.next())
>, <Line: -					results.add(factory.newServiceIndex(m_resultSet));
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				sqle.printStackTrace();
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			close();
>, <Line: -			return (results);
>, <Line: -			}
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns the underlying java.sql.ResultSet object
>, <Line: -		*/
>, <Line: -		public java.sql.ResultSet getResultSet()
>, <Line: -			{
>, <Line: -			return (m_resultSet);
>, <Line: -			}
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns the current record in the result set
>, <Line: -		*/
>, <Line: -		public ServiceIndex getRecord()
>, <Line: -			{
>, <Line: -			return (factory.newServiceIndex(m_resultSet));
>, <Line: -			}
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			This call expects only one record in the result set.  If multiple records
>, <Line: -			are found an excpetion is thrown.
>, <Line: -			The ResultSet object is automatically closed by this call.
>, <Line: -		*/
>, <Line: -		public ServiceIndex getOnlyRecord()
>, <Line: -			{
>, <Line: -			ServiceIndex ret = null;
>, <Line: -			try
>, <Line: -				{
>, <Line: -				if (m_resultSet.next())
>, <Line: -					ret = factory.newServiceIndex(m_resultSet);
>, <Line: -				if (m_resultSet.next())
>, <Line: -					throw new GenOrmException("Multiple rows returned in call from ServiceIndex.getOnlyRecord");
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			close();
>, <Line: -			return (ret);
>, <Line: -			}
>, <Line: -		//------------------------------------------------------------------------
>, <Line: -		/**
>, <Line: -			Returns true if there is another record in the result set.
>, <Line: -		*/
>, <Line: -		public boolean next()
>, <Line: -			{
>, <Line: -			boolean ret = false;
>, <Line: -			m_onFirstResult = true;
>, <Line: -			try
>, <Line: -				{
>, <Line: -				ret = m_resultSet.next();
>, <Line: -				}
>, <Line: -			catch (java.sql.SQLException sqle)
>, <Line: -				{
>, <Line: -				throw new GenOrmException(sqle);
>, <Line: -				}
>, <Line: -			return (ret);
>, <Line: -			}
>, <Line: -		}
>, <Line: -	//===========================================================================
>, <Line: -	private GenOrmString m_service;
>, <Line: -	private GenOrmString m_serviceKey;
>, <Line: -	private GenOrmString m_key;
>, <Line: -	private GenOrmString m_value;
>, <Line: -	private List<GenOrmRecordKey> m_foreignKeys;
>, <Line: -	public List<GenOrmRecordKey> getForeignKeys() { return (m_foreignKeys); }
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	/**
>, <Line: -	*/
>, <Line: -	public String getService() { return (m_service.getValue()); }
>, <Line: -	public ServiceIndex setService(String data)
>, <Line: -		{
>, <Line: -		boolean changed = m_service.setValue(data);
>, <Line: -		//Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: -		if (changed)
>, <Line: -			{
>, <Line: -			if (m_dirtyFlags.isEmpty())
>, <Line: -				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: -			m_dirtyFlags.set(SERVICE_FIELD_META.getDirtyFlag());
>, <Line: -			if (m_isNewRecord) //Force set the prev value
>, <Line: -				m_service.setPrevValue(data);
>, <Line: -			}
>, <Line: -		return ((ServiceIndex)this);
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	/**
>, <Line: -	*/
>, <Line: -	public String getServiceKey() { return (m_serviceKey.getValue()); }
>, <Line: -	public ServiceIndex setServiceKey(String data)
>, <Line: -		{
>, <Line: -		boolean changed = m_serviceKey.setValue(data);
>, <Line: -		//Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: -		if (changed)
>, <Line: -			{
>, <Line: -			if (m_dirtyFlags.isEmpty())
>, <Line: -				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: -			m_dirtyFlags.set(SERVICE_KEY_FIELD_META.getDirtyFlag());
>, <Line: -			if (m_isNewRecord) //Force set the prev value
>, <Line: -				m_serviceKey.setPrevValue(data);
>, <Line: -			}
>, <Line: -		return ((ServiceIndex)this);
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	/**
>, <Line: -	*/
>, <Line: -	public String getKey() { return (m_key.getValue()); }
>, <Line: -	public ServiceIndex setKey(String data)
>, <Line: -		{
>, <Line: -		boolean changed = m_key.setValue(data);
>, <Line: -		//Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: -		if (changed)
>, <Line: -			{
>, <Line: -			if (m_dirtyFlags.isEmpty())
>, <Line: -				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: -			m_dirtyFlags.set(KEY_FIELD_META.getDirtyFlag());
>, <Line: -			if (m_isNewRecord) //Force set the prev value
>, <Line: -				m_key.setPrevValue(data);
>, <Line: -			}
>, <Line: -		return ((ServiceIndex)this);
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	/**
>, <Line: -	*/
>, <Line: -	public String getValue() { return (m_value.getValue()); }
>, <Line: -	public ServiceIndex setValue(String data)
>, <Line: -		{
>, <Line: -		boolean changed = m_value.setValue(data);
>, <Line: -		//Add the now dirty record to the transaction only if it is not previously dirty
>, <Line: -		if (changed)
>, <Line: -			{
>, <Line: -			if (m_dirtyFlags.isEmpty())
>, <Line: -				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: -			m_dirtyFlags.set(VALUE_FIELD_META.getDirtyFlag());
>, <Line: -			if (m_isNewRecord) //Force set the prev value
>, <Line: -				m_value.setPrevValue(data);
>, <Line: -			}
>, <Line: -		return ((ServiceIndex)this);
>, <Line: -		}
>, <Line: -	public boolean isValueNull()
>, <Line: -		{
>, <Line: -		return (m_value.isNull());
>, <Line: -		}
>, <Line: -	public ServiceIndex setValueNull()
>, <Line: -		{
>, <Line: -		boolean changed = m_value.setNull();
>, <Line: -		if (changed)
>, <Line: -			{
>, <Line: -			if (m_dirtyFlags.isEmpty())
>, <Line: -				GenOrmDataSource.getGenOrmConnection().addToTransaction(this);
>, <Line: -			m_dirtyFlags.set(VALUE_FIELD_META.getDirtyFlag());
>, <Line: -			}
>, <Line: -		return ((ServiceIndex)this);
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	protected void initialize(String service, String serviceKey, String key)
>, <Line: -		{
>, <Line: -		m_service.setValue(service);
>, <Line: -		m_service.setPrevValue(service);
>, <Line: -		m_serviceKey.setValue(serviceKey);
>, <Line: -		m_serviceKey.setPrevValue(serviceKey);
>, <Line: -		m_key.setValue(key);
>, <Line: -		m_key.setPrevValue(key);
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	protected void initialize(java.sql.ResultSet rs)
>, <Line: -		{
>, <Line: -		try
>, <Line: -			{
>, <Line: -			if (s_logger.isDebugEnabled())
>, <Line: -				{
>, <Line: -				java.sql.ResultSetMetaData meta = rs.getMetaData();
>, <Line: -				for (int I = 1; I <= meta.getColumnCount(); I++)
>, <Line: -					{
>, <Line: -					s_logger.debug("Reading - "+meta.getColumnName(I) +" : "+rs.getString(I));
>, <Line: -					}
>, <Line: -				}
>, <Line: -			m_service.setValue(rs, 1);
>, <Line: -			m_serviceKey.setValue(rs, 2);
>, <Line: -			m_key.setValue(rs, 3);
>, <Line: -			m_value.setValue(rs, 4);
>, <Line: -			}
>, <Line: -		catch (java.sql.SQLException sqle)
>, <Line: -			{
>, <Line: -			throw new GenOrmException(sqle);
>, <Line: -			}
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	/*package*/ ServiceIndex_base()
>, <Line: -		{
>, <Line: -		super(TABLE_NAME);
>, <Line: -		m_logger = s_logger;
>, <Line: -		m_foreignKeys = new ArrayList<GenOrmRecordKey>();
>, <Line: -		m_dirtyFlags = new java.util.BitSet(NUMBER_OF_COLUMNS);
>, <Line: -		m_service = new GenOrmString(SERVICE_FIELD_META);
>, <Line: -		addField(COL_SERVICE, m_service);
>, <Line: -		m_serviceKey = new GenOrmString(SERVICE_KEY_FIELD_META);
>, <Line: -		addField(COL_SERVICE_KEY, m_serviceKey);
>, <Line: -		m_key = new GenOrmString(KEY_FIELD_META);
>, <Line: -		addField(COL_KEY, m_key);
>, <Line: -		m_value = new GenOrmString(VALUE_FIELD_META);
>, <Line: -		addField(COL_VALUE, m_value);
>, <Line: -		GenOrmRecordKey foreignKey;
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	@Override
>, <Line: -	public GenOrmConnection getGenOrmConnection()
>, <Line: -		{
>, <Line: -		return (GenOrmDataSource.getGenOrmConnection());
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	@Override
>, <Line: -	public String getFieldEscapeString()
>, <Line: -		{
>, <Line: -		return (s_fieldEscapeString);
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	@Override
>, <Line: -	public void setMTS()
>, <Line: -		{
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	@Override
>, <Line: -	public void setCTS()
>, <Line: -		{
>, <Line: -		}
>, <Line: -	//---------------------------------------------------------------------------
>, <Line: -	public String toString()
>, <Line: -		{
>, <Line: -		StringBuilder sb = new StringBuilder();
>, <Line: -		sb.append("service=\"");
>, <Line: -		sb.append(m_service.getValue());
>, <Line: -		sb.append("\" ");
>, <Line: -		sb.append("service_key=\"");
>, <Line: -		sb.append(m_serviceKey.getValue());
>, <Line: -		sb.append("\" ");
>, <Line: -		sb.append("key=\"");
>, <Line: -		sb.append(m_key.getValue());
>, <Line: -		sb.append("\" ");
>, <Line: -		sb.append("value=\"");
>, <Line: -		sb.append(m_value.getValue());
>, <Line: -		sb.append("\" ");
>, <Line: -		return (sb.toString().trim());
>, <Line: -		}
>, <Line: -	//===========================================================================
>, <Line: -	}
>]