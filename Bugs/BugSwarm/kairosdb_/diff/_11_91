[<Line: +	@Test(expected = IllegalArgumentException.class)
>, <Line: +	public void test_groupSizeZero_invalid()
>, <Line: +	{
>, <Line: +		double[] binValues = new double[0];
>, <Line: +		new BinGroupBy(binValues);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_GroupByResultJson() throws FormatterException
>, <Line: +	{
>, <Line: +		double[] binValues = {2, 5, 7};
>, <Line: +		BinGroupBy groupBy = new BinGroupBy(binValues);
>, <Line: +		GroupByResult groupByResult = groupBy.getGroupByResult(3);
>, <Line: +		assertThat(groupByResult.toJson(), equalTo("{\"name\":\"bin\",\"bins\":[2,5,7],\"group\":{\"bin_number\":3}}"));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_getGroupId_longValue()
>, <Line: +	{
>, <Line: +		double[] binValues = {2, 5, 7};
>, <Line: +		Map<String, String> tags = new HashMap<String, String>();
>, <Line: +		BinGroupBy groupBy = new BinGroupBy(binValues);
>, <Line: +		assertThat(groupBy.getGroupId(new LongDataPoint(1, 1L), tags), equalTo(0));
>, <Line: +		assertThat(groupBy.getGroupId(new LongDataPoint(1, 2L), tags), equalTo(1));
>, <Line: +		assertThat(groupBy.getGroupId(new LongDataPoint(1, 4L), tags), equalTo(1));
>, <Line: +		assertThat(groupBy.getGroupId(new LongDataPoint(1, 5L), tags), equalTo(2));
>, <Line: +		assertThat(groupBy.getGroupId(new LongDataPoint(1, 6L), tags), equalTo(2));
>, <Line: +		assertThat(groupBy.getGroupId(new LongDataPoint(1, 7L), tags), equalTo(3));
>, <Line: +		assertThat(groupBy.getGroupId(new LongDataPoint(1, 8L), tags), equalTo(3));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_getGroupId_doubleValue()
>, <Line: +	{
>, <Line: +		double[] binValues = {2, 5, 7};
>, <Line: +		Map<String, String> tags = new HashMap<String, String>();
>, <Line: +		BinGroupBy groupBy = new BinGroupBy(binValues);
>, <Line: +		assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 1.9), tags), equalTo(0));
>, <Line: +		assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 2.0), tags), equalTo(1));
>, <Line: +		assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 4.9), tags), equalTo(1));
>, <Line: +		assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 5.0), tags), equalTo(2));
>, <Line: +		assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 6.9), tags), equalTo(2));
>, <Line: +		assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 7.0), tags), equalTo(3));
>, <Line: +		assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 7.1), tags), equalTo(3));
>, <Line: +	}
>]
[<Line: -import org.kairosdb.core.DataPoint;
>, <Line: -    @Test(expected = IllegalArgumentException.class)
>, <Line: -    public void test_groupSizeZero_invalid()
>, <Line: -    {
>, <Line: -        double[] binValues = new double[0];
>, <Line: -        new BinGroupBy(binValues);
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void test_GroupByResultJson() throws FormatterException
>, <Line: -    {
>, <Line: -        double[] binValues = {2,5,7};
>, <Line: -        BinGroupBy groupBy = new BinGroupBy(binValues);
>, <Line: -        GroupByResult groupByResult = groupBy.getGroupByResult(3);
>, <Line: -        assertThat(groupByResult.toJson(), equalTo("{\"name\":\"bin\",\"bins\":[2,5,7],\"group\":{\"bin_number\":3}}"));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void test_getGroupId_longValue()
>, <Line: -    {
>, <Line: -        double[] binValues = {2,5,7};
>, <Line: -        Map<String, String> tags = new HashMap<String, String>();
>, <Line: -        BinGroupBy groupBy = new BinGroupBy(binValues);
>, <Line: -        assertThat(groupBy.getGroupId(new LongDataPoint(1, 1L), tags), equalTo(0));
>, <Line: -        assertThat(groupBy.getGroupId(new LongDataPoint(1, 2L), tags), equalTo(1));
>, <Line: -        assertThat(groupBy.getGroupId(new LongDataPoint(1, 4L), tags), equalTo(1));
>, <Line: -        assertThat(groupBy.getGroupId(new LongDataPoint(1, 5L), tags), equalTo(2));
>, <Line: -        assertThat(groupBy.getGroupId(new LongDataPoint(1, 6L), tags), equalTo(2));
>, <Line: -        assertThat(groupBy.getGroupId(new LongDataPoint(1, 7L), tags), equalTo(3));
>, <Line: -        assertThat(groupBy.getGroupId(new LongDataPoint(1, 8L), tags), equalTo(3));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void test_getGroupId_doubleValue()
>, <Line: -    {
>, <Line: -        double[] binValues = {2,5,7};
>, <Line: -        Map<String, String> tags = new HashMap<String, String>();
>, <Line: -        BinGroupBy groupBy = new BinGroupBy(binValues);
>, <Line: -        assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 1.9), tags), equalTo(0));
>, <Line: -        assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 2.0), tags), equalTo(1));
>, <Line: -        assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 4.9), tags), equalTo(1));
>, <Line: -        assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 5.0), tags), equalTo(2));
>, <Line: -        assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 6.9), tags), equalTo(2));
>, <Line: -        assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 7.0), tags), equalTo(3));
>, <Line: -        assertThat(groupBy.getGroupId(new DoubleDataPoint(1, 7.1), tags), equalTo(3));
>, <Line: -    }
>]