[<Line: +/*
>, <Line: + * Copyright 2013 Proofpoint Inc.
>, <Line: + *
>, <Line: + *    Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + *    you may not use this file except in compliance with the License.
>, <Line: + *    You may obtain a copy of the License at
>, <Line: + *
>, <Line: + *        http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + *
>, <Line: + *    Unless required by applicable law or agreed to in writing, software
>, <Line: + *    distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + *    See the License for the specific language governing permissions and
>, <Line: + *    limitations under the License.
>, <Line: + */
>, <Line: +package org.kairosdb.core.scheduler;
>, <Line: +import com.google.inject.Inject;
>, <Line: +import com.google.inject.Injector;
>, <Line: +import com.google.inject.Key;
>, <Line: +import org.kairosdb.core.KairosDBService;
>, <Line: +import org.kairosdb.core.exception.KairosDBException;
>, <Line: +import org.quartz.*;
>, <Line: +import org.quartz.impl.StdSchedulerFactory;
>, <Line: +import org.quartz.impl.matchers.GroupMatcher;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +import java.util.*;
>, <Line: +import static com.google.common.base.Preconditions.checkNotNull;
>, <Line: +import static org.quartz.JobBuilder.newJob;
>, <Line: +public class KairosDBSchedulerImpl implements KairosDBService, KairosDBScheduler
>, <Line: +{
>, <Line: +	private static final Logger log = LoggerFactory.getLogger(KairosDBSchedulerImpl.class);
>, <Line: +	private final Scheduler scheduler;
>, <Line: +	private final Injector guice;
>, <Line: +	@Inject
>, <Line: +	public KairosDBSchedulerImpl(Injector guice) throws SchedulerException
>, <Line: +	{
>, <Line: +		this.guice = guice;
>, <Line: +		Properties props = new Properties();
>, <Line: +		props.setProperty("org.quartz.threadPool.threadCount", "4");
>, <Line: +		StdSchedulerFactory factory = new StdSchedulerFactory(props);
>, <Line: +		scheduler = factory.getScheduler();
>, <Line: +		scheduler.setJobFactory(new KairosDBJobFactory(guice));
>, <Line: +	}
>, <Line: +	@SuppressWarnings("unchecked")
>, <Line: +	@Override
>, <Line: +	public void start() throws KairosDBException
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			scheduler.start();
>, <Line: +			for (Key<?> key : guice.getAllBindings().keySet())
>, <Line: +			{
>, <Line: +				Class bindingClass = key.getTypeLiteral().getRawType();
>, <Line: +				if (KairosDBJob.class.isAssignableFrom(bindingClass))
>, <Line: +				{
>, <Line: +					KairosDBJob job = (KairosDBJob) guice.getInstance(bindingClass);
>, <Line: +					JobDetail jobDetail = newJob(job.getClass())
>, <Line: +							.withIdentity(job.getClass().getName()).build();
>, <Line: +					scheduler.scheduleJob(jobDetail, job.getTrigger());
>, <Line: +				}
>, <Line: +			}
>, <Line: +			for (String groupName : scheduler.getJobGroupNames())
>, <Line: +			{
>, <Line: +				for (JobKey jobKey : scheduler.getJobKeys(GroupMatcher.jobGroupEquals(groupName)))
>, <Line: +				{
>, <Line: +					String jobName = jobKey.getName();
>, <Line: +					List<Trigger> triggers = (List<Trigger>) scheduler.getTriggersOfJob(jobKey);
>, <Line: +					Date nextFireTime = triggers.get(0).getNextFireTime();
>, <Line: +					log.info("*** Scheduled job " + jobName + " to execute next on " + nextFireTime);
>, <Line: +				}
>, <Line: +			}
>, <Line: +		}
>, <Line: +		catch (SchedulerException e)
>, <Line: +		{
>, <Line: +			throw new KairosDBException("Failed to start " + getClass().getName(), e);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void stop()
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			scheduler.shutdown(true);
>, <Line: +		}
>, <Line: +		catch (SchedulerException e)
>, <Line: +		{
>, <Line: +			log.error("Failed to start " + getClass().getName(), e);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void schedule(JobDetail jobDetail, Trigger trigger) throws KairosDBException
>, <Line: +	{
>, <Line: +		checkNotNull(jobDetail);
>, <Line: +		checkNotNull(trigger);
>, <Line: +		try
>, <Line: +		{
>, <Line: +			scheduler.scheduleJob(jobDetail, trigger);
>, <Line: +		}
>, <Line: +		catch (SchedulerException e)
>, <Line: +		{
>, <Line: +			throw new KairosDBException("Failed to schedule trigger " + jobDetail, e);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void cancel(JobKey jobKey) throws KairosDBException
>, <Line: +	{
>, <Line: +		checkNotNull(jobKey);
>, <Line: +		try
>, <Line: +		{
>, <Line: +			scheduler.deleteJob(jobKey);
>, <Line: +		}
>, <Line: +		catch (SchedulerException e)
>, <Line: +		{
>, <Line: +			throw new KairosDBException("Failed to delete job " + jobKey, e);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	@SuppressWarnings("unchecked")
>, <Line: +	public Set<String> getScheduledJobIds() throws KairosDBException
>, <Line: +	{
>, <Line: +		Set<String> scheduledJobs = new HashSet<String>();
>, <Line: +		try
>, <Line: +		{
>, <Line: +			for (String groupName : scheduler.getJobGroupNames())
>, <Line: +			{
>, <Line: +				for (JobKey jobKey : scheduler.getJobKeys(GroupMatcher.jobGroupEquals(groupName)))
>, <Line: +				{
>, <Line: +					scheduledJobs.add(jobKey.getName());
>, <Line: +				}
>, <Line: +			}
>, <Line: +		}
>, <Line: +		catch (SchedulerException e)
>, <Line: +		{
>, <Line: +			throw new KairosDBException("Could not get scheduled jobs." + e);
>, <Line: +		}
>, <Line: +		return scheduledJobs;
>, <Line: +	}
>, <Line: +}
>]
[]