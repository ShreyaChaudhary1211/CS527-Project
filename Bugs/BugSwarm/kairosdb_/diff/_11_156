[<Line: +		'angular',
>, <Line: +		'app',
>, <Line: +		'lodash'
>, <Line: +	],
>, <Line: +	function (angular, app, _) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.controllers');
>, <Line: +		module.controller('RowCtrl', function ($scope, $rootScope, $timeout) {
>, <Line: +			var _d = {
>, <Line: +				title: "Row",
>, <Line: +				height: "150px",
>, <Line: +				collapse: false,
>, <Line: +				editable: true,
>, <Line: +				panels: [],
>, <Line: +			};
>, <Line: +			_.defaults($scope.row, _d);
>, <Line: +			$scope.init = function () {
>, <Line: +				$scope.reset_panel();
>, <Line: +			};
>, <Line: +			$scope.togglePanelMenu = function (posX) {
>, <Line: +				$scope.showPanelMenu = !$scope.showPanelMenu;
>, <Line: +				$scope.panelMenuPos = posX;
>, <Line: +			};
>, <Line: +			$scope.toggle_row = function (row) {
>, <Line: +				row.collapse = row.collapse ? false : true;
>, <Line: +				if (!row.collapse) {
>, <Line: +					$timeout(function () {
>, <Line: +						$scope.$broadcast('render');
>, <Line: +					});
>, <Line: +				}
>, <Line: +			};
>, <Line: +			// This can be overridden by individual panels
>, <Line: +			$scope.close_edit = function () {
>, <Line: +				$scope.$broadcast('render');
>, <Line: +			};
>, <Line: +			$scope.add_panel = function (panel) {
>, <Line: +				$scope.dashboard.add_panel(panel, $scope.row);
>, <Line: +			};
>, <Line: +			$scope.delete_row = function () {
>, <Line: +				$scope.appEvent('confirm-modal', {
>, <Line: +					title: 'Delete row',
>, <Line: +					text: 'Are you sure you want to delete this row?',
>, <Line: +					onConfirm: function () {
>, <Line: +						$scope.dashboard.rows = _.without($scope.dashboard.rows, $scope.row);
>, <Line: +					}
>, <Line: +				});
>, <Line: +			};
>, <Line: +			$scope.move_row = function (direction) {
>, <Line: +				var rowsList = $scope.dashboard.rows;
>, <Line: +				var rowIndex = _.indexOf(rowsList, $scope.row);
>, <Line: +				var newIndex = rowIndex + direction;
>, <Line: +				if (newIndex >= 0 && newIndex <= (rowsList.length - 1)) {
>, <Line: +					_.move(rowsList, rowIndex, rowIndex + direction);
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.add_panel_default = function (type) {
>, <Line: +				$scope.reset_panel(type);
>, <Line: +				$scope.add_panel($scope.panel);
>, <Line: +				$timeout(function () {
>, <Line: +					$scope.$broadcast('render');
>, <Line: +				});
>, <Line: +			};
>, <Line: +			$scope.set_height = function (height) {
>, <Line: +				$scope.row.height = height;
>, <Line: +				$scope.$broadcast('render');
>, <Line: +			};
>, <Line: +			$scope.remove_panel_from_row = function (row, panel) {
>, <Line: +				$scope.appEvent('confirm-modal', {
>, <Line: +					title: 'Remove panel',
>, <Line: +					text: 'Are you sure you want to remove this panel?',
>, <Line: +					onConfirm: function () {
>, <Line: +						row.panels = _.without(row.panels, panel);
>, <Line: +					}
>, <Line: +				});
>, <Line: +			};
>, <Line: +			$scope.replacePanel = function (newPanel, oldPanel) {
>, <Line: +				var row = $scope.row;
>, <Line: +				var index = _.indexOf(row.panels, oldPanel);
>, <Line: +				row.panels.splice(index, 1);
>, <Line: +				// adding it back needs to be done in next digest
>, <Line: +				$timeout(function () {
>, <Line: +					newPanel.id = oldPanel.id;
>, <Line: +					newPanel.span = oldPanel.span;
>, <Line: +					row.panels.splice(index, 0, newPanel);
>, <Line: +				});
>, <Line: +			};
>, <Line: +			$scope.reset_panel = function (type) {
>, <Line: +				var defaultSpan = 12;
>, <Line: +				var _as = 12 - $scope.dashboard.rowSpan($scope.row);
>, <Line: +				$scope.panel = {
>, <Line: +					title: 'no title (click here)',
>, <Line: +					error: false,
>, <Line: +					span: _as < defaultSpan && _as > 0 ? _as : defaultSpan,
>, <Line: +					editable: true,
>, <Line: +					type: type
>, <Line: +				};
>, <Line: +				function fixRowHeight(height) {
>, <Line: +					if (!height) {
>, <Line: +						return '200px';
>, <Line: +					}
>, <Line: +					if (!_.isString(height)) {
>, <Line: +						return height + 'px';
>, <Line: +					}
>, <Line: +					return height;
>, <Line: +				}
>, <Line: +				$scope.row.height = fixRowHeight($scope.row.height);
>, <Line: +			};
>, <Line: +			$scope.init();
>, <Line: +		});
>, <Line: +		module.directive('rowHeight', function () {
>, <Line: +			return function (scope, element) {
>, <Line: +				scope.$watchGroup(['row.collapse', 'row.height'], function () {
>, <Line: +					element[0].style.minHeight = scope.row.collapse ? '5px' : scope.row.height;
>, <Line: +				});
>, <Line: +			};
>, <Line: +		});
>, <Line: +		module.directive('panelWidth', function () {
>, <Line: +			return function (scope, element) {
>, <Line: +				scope.$watch('panel.span', function () {
>, <Line: +					element[0].style.width = ((scope.panel.span / 1.2) * 10) + '%';
>, <Line: +				});
>, <Line: +			};
>, <Line: +		});
>, <Line: +		module.directive('panelDropZone', function () {
>, <Line: +			return function (scope, element) {
>, <Line: +				scope.$on("ANGULAR_DRAG_START", function () {
>, <Line: +					var dropZoneSpan = 12 - scope.dashboard.rowSpan(scope.row);
>, <Line: +					if (dropZoneSpan > 0) {
>, <Line: +						element.find('.panel-container').css('height', scope.row.height);
>, <Line: +						element[0].style.width = ((dropZoneSpan / 1.2) * 10) + '%';
>, <Line: +						element.show();
>, <Line: +					}
>, <Line: +				});
>, <Line: +				scope.$on("ANGULAR_DRAG_END", function () {
>, <Line: +					element.hide();
>, <Line: +				});
>, <Line: +			};
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'app',
>, <Line: -  'lodash'
>, <Line: -],
>, <Line: -function (angular, app, _) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.controllers');
>, <Line: -  module.controller('RowCtrl', function($scope, $rootScope, $timeout) {
>, <Line: -    var _d = {
>, <Line: -      title: "Row",
>, <Line: -      height: "150px",
>, <Line: -      collapse: false,
>, <Line: -      editable: true,
>, <Line: -      panels: [],
>, <Line: -    };
>, <Line: -    _.defaults($scope.row,_d);
>, <Line: -    $scope.init = function() {
>, <Line: -      $scope.reset_panel();
>, <Line: -    };
>, <Line: -    $scope.togglePanelMenu = function(posX) {
>, <Line: -      $scope.showPanelMenu = !$scope.showPanelMenu;
>, <Line: -      $scope.panelMenuPos = posX;
>, <Line: -    };
>, <Line: -    $scope.toggle_row = function(row) {
>, <Line: -      row.collapse = row.collapse ? false : true;
>, <Line: -      if (!row.collapse) {
>, <Line: -        $timeout(function() {
>, <Line: -          $scope.$broadcast('render');
>, <Line: -        });
>, <Line: -      }
>, <Line: -    };
>, <Line: -    // This can be overridden by individual panels
>, <Line: -    $scope.close_edit = function() {
>, <Line: -      $scope.$broadcast('render');
>, <Line: -    };
>, <Line: -    $scope.add_panel = function(panel) {
>, <Line: -      $scope.dashboard.add_panel(panel, $scope.row);
>, <Line: -    };
>, <Line: -    $scope.delete_row = function() {
>, <Line: -      $scope.appEvent('confirm-modal', {
>, <Line: -        title: 'Delete row',
>, <Line: -        text: 'Are you sure you want to delete this row?',
>, <Line: -        onConfirm: function() {
>, <Line: -          $scope.dashboard.rows = _.without($scope.dashboard.rows, $scope.row);
>, <Line: -        }
>, <Line: -      });
>, <Line: -    };
>, <Line: -    $scope.move_row = function(direction) {
>, <Line: -      var rowsList = $scope.dashboard.rows;
>, <Line: -      var rowIndex = _.indexOf(rowsList, $scope.row);
>, <Line: -      var newIndex = rowIndex + direction;
>, <Line: -      if (newIndex >= 0 && newIndex <= (rowsList.length - 1)) {
>, <Line: -        _.move(rowsList, rowIndex, rowIndex + direction);
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.add_panel_default = function(type) {
>, <Line: -      $scope.reset_panel(type);
>, <Line: -      $scope.add_panel($scope.panel);
>, <Line: -      $timeout(function() {
>, <Line: -        $scope.$broadcast('render');
>, <Line: -      });
>, <Line: -    };
>, <Line: -    $scope.set_height = function(height) {
>, <Line: -      $scope.row.height = height;
>, <Line: -      $scope.$broadcast('render');
>, <Line: -    };
>, <Line: -    $scope.remove_panel_from_row = function(row, panel) {
>, <Line: -      $scope.appEvent('confirm-modal', {
>, <Line: -        title: 'Remove panel',
>, <Line: -        text: 'Are you sure you want to remove this panel?',
>, <Line: -        onConfirm: function() {
>, <Line: -          row.panels = _.without(row.panels, panel);
>, <Line: -        }
>, <Line: -      });
>, <Line: -    };
>, <Line: -    $scope.replacePanel = function(newPanel, oldPanel) {
>, <Line: -      var row = $scope.row;
>, <Line: -      var index = _.indexOf(row.panels, oldPanel);
>, <Line: -      row.panels.splice(index, 1);
>, <Line: -      // adding it back needs to be done in next digest
>, <Line: -      $timeout(function() {
>, <Line: -        newPanel.id = oldPanel.id;
>, <Line: -        newPanel.span = oldPanel.span;
>, <Line: -        row.panels.splice(index, 0, newPanel);
>, <Line: -      });
>, <Line: -    };
>, <Line: -    $scope.reset_panel = function(type) {
>, <Line: -      var defaultSpan = 12;
>, <Line: -      var _as = 12 - $scope.dashboard.rowSpan($scope.row);
>, <Line: -      $scope.panel = {
>, <Line: -        title: 'no title (click here)',
>, <Line: -        error   : false,
>, <Line: -        span    : _as < defaultSpan && _as > 0 ? _as : defaultSpan,
>, <Line: -        editable: true,
>, <Line: -        type    : type
>, <Line: -      };
>, <Line: -      function fixRowHeight(height) {
>, <Line: -        if (!height) {
>, <Line: -          return '200px';
>, <Line: -        }
>, <Line: -        if (!_.isString(height)) {
>, <Line: -          return height + 'px';
>, <Line: -        }
>, <Line: -        return height;
>, <Line: -      }
>, <Line: -      $scope.row.height = fixRowHeight($scope.row.height);
>, <Line: -    };
>, <Line: -    $scope.init();
>, <Line: -  });
>, <Line: -  module.directive('rowHeight', function() {
>, <Line: -    return function(scope, element) {
>, <Line: -      scope.$watchGroup(['row.collapse', 'row.height'], function() {
>, <Line: -        element[0].style.minHeight = scope.row.collapse ? '5px' : scope.row.height;
>, <Line: -      });
>, <Line: -    };
>, <Line: -  });
>, <Line: -  module.directive('panelWidth', function() {
>, <Line: -    return function(scope, element) {
>, <Line: -      scope.$watch('panel.span', function() {
>, <Line: -        element[0].style.width = ((scope.panel.span / 1.2) * 10) + '%';
>, <Line: -      });
>, <Line: -    };
>, <Line: -  });
>, <Line: -  module.directive('panelDropZone', function() {
>, <Line: -    return function(scope, element) {
>, <Line: -      scope.$on("ANGULAR_DRAG_START", function() {
>, <Line: -        var dropZoneSpan = 12 - scope.dashboard.rowSpan(scope.row);
>, <Line: -        if (dropZoneSpan > 0) {
>, <Line: -          element.find('.panel-container').css('height', scope.row.height);
>, <Line: -          element[0].style.width = ((dropZoneSpan / 1.2) * 10) + '%';
>, <Line: -          element.show();
>, <Line: -        }
>, <Line: -      });
>, <Line: -      scope.$on("ANGULAR_DRAG_END", function() {
>, <Line: -        element.hide();
>, <Line: -      });
>, <Line: -    };
>, <Line: -  });
>, <Line: -});
>]