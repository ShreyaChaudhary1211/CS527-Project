[<Line: +import org.kairosdb.datastore.cassandra.BatchHandler;
>, <Line: +public class AdaptiveExecutorService
>, <Line: +	private int m_permitCount = 5;
>, <Line: +	public AdaptiveExecutorService(EventBus eventBus)
>, <Line: +		m_permitCount ++;
>, <Line: +		m_semaphore.release();
>, <Line: +	public void submit(BatchHandler batchHandler)
>, <Line: +		if (m_timer.elapsed(TimeUnit.SECONDS) >= 5)
>, <Line: +			/*if ((m_semaphore.availablePermits() == 0) && (batchHandler.isFullBatch()))
>, <Line: +			{
>, <Line: +				increasePermitCount();
>, <Line: +			}*/
>, <Line: +			m_internalExecutor.submit(newTaskFor(batchHandler));
>, <Line: +			SimpleStats.Data timerStat = m_congestionTimer.reportTaskTime(m_stopwatch.elapsed(TimeUnit.MILLISECONDS));
>]
[<Line: -public class CongestionExecutorService extends AbstractExecutorService
>, <Line: -	private int m_permitCount = 10;
>, <Line: -	public CongestionExecutorService(EventBus eventBus)
>, <Line: -		/*m_permitCount ++;
>, <Line: -		m_semaphore.release();*/
>, <Line: -	@Override
>, <Line: -	@Override
>, <Line: -	public List<Runnable> shutdownNow()
>, <Line: -	{
>, <Line: -		return null;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public boolean isShutdown()
>, <Line: -	{
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public boolean isTerminated()
>, <Line: -	{
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
>, <Line: -	{
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public void execute(Runnable command)
>, <Line: -		if (m_timer.elapsed(TimeUnit.SECONDS) >= 15)
>, <Line: -			increasePermitCount();
>, <Line: -			m_internalExecutor.submit(command);
>, <Line: -	@Override
>, <Line: -			CongestionTimer.TimerStat timerStat = m_congestionTimer.reportTaskTime(m_stopwatch.elapsed(TimeUnit.MILLISECONDS));
>, <Line: -				dpe = new DataPointEvent("kairosdb.congestion.stats.median", tags,
>, <Line: -						m_dataPointFactory.createDataPoint(now, timerStat.median));
>, <Line: -				m_eventBus.post(dpe);
>]