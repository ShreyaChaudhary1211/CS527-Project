[<Line: +import com.google.common.eventbus.EventBus;
>, <Line: +import com.google.inject.matcher.Matchers;
>, <Line: +import com.google.inject.spi.InjectionListener;
>, <Line: +import com.google.inject.spi.TypeEncounter;
>, <Line: +import com.google.inject.spi.TypeListener;
>, <Line: +	private final EventBus m_eventBus = new EventBus();
>, <Line: +		/*
>, <Line: +		This bit of magic makes it so any object that is bound through guice just
>, <Line: +		needs to annotate a method with @Subscribe and they can get events.
>, <Line: +		 */
>, <Line: +		bind(EventBus.class).toInstance(m_eventBus);
>, <Line: +		//Need to register an exception handler
>, <Line: +		bindListener(Matchers.any(), new TypeListener()
>, <Line: +		{
>, <Line: +			public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
>, <Line: +			{
>, <Line: +				typeEncounter.register(new InjectionListener<I>()
>, <Line: +				{
>, <Line: +					public void afterInjection(I i)
>, <Line: +					{
>, <Line: +						m_eventBus.register(i);
>, <Line: +					}
>, <Line: +				});
>, <Line: +			}
>, <Line: +		});
>]
[<Line: -		bind(new TypeLiteral<List<DataPointListener>>()
>, <Line: -		{
>, <Line: -		}).toProvider(DataPointListenerProvider.class);
>]