[<Line: +import com.datastax.driver.core.ConsistencyLevel;
>, <Line: +	public static final String SIMULTANIOUS_QUERIES = "kairosdb.datastore.cassandra.simultaneous_cql_queries";
>, <Line: +	@Named(SIMULTANIOUS_QUERIES)
>, <Line: +	private int m_simultaneousQueries = 100;
>, <Line: +	public CassandraConfiguration(String keyspaceName)
>, <Line: +	public int getSimultaneousQueries()
>, <Line: +		return m_simultaneousQueries;
>]
[<Line: -	public static final String REPLICATION_FACTOR_PROPERTY = "kairosdb.datastore.cassandra.replication_factor";
>, <Line: -	public static final String WRITE_DELAY_PROPERTY = "kairosdb.datastore.cassandra.write_delay";
>, <Line: -	public static final String WRITE_BUFFER_SIZE = "kairosdb.datastore.cassandra.write_buffer_max_size";
>, <Line: -	public static final String SINGLE_ROW_READ_SIZE_PROPERTY = "kairosdb.datastore.cassandra.single_row_read_size";
>, <Line: -	public static final String MULTI_ROW_READ_SIZE_PROPERTY = "kairosdb.datastore.cassandra.multi_row_read_size";
>, <Line: -	public static final String MULTI_ROW_SIZE_PROPERTY = "kairosdb.datastore.cassandra.multi_row_size";
>, <Line: -	public static final String USE_THRIFT = "kairosdb.datastore.cassandra.use_thrift";
>, <Line: -	@Named(REPLICATION_FACTOR_PROPERTY)
>, <Line: -	private int m_replicationFactor;
>, <Line: -	@Inject
>, <Line: -	@Named(SINGLE_ROW_READ_SIZE_PROPERTY)
>, <Line: -	private int m_singleRowReadSize;
>, <Line: -	@Inject
>, <Line: -	@Named(MULTI_ROW_SIZE_PROPERTY)
>, <Line: -	private int m_multiRowSize;
>, <Line: -	@Inject
>, <Line: -	@Named(MULTI_ROW_READ_SIZE_PROPERTY)
>, <Line: -	private int m_multiRowReadSize;
>, <Line: -	@Inject
>, <Line: -	@Named(WRITE_DELAY_PROPERTY)
>, <Line: -	private int m_writeDelay;
>, <Line: -	@Inject
>, <Line: -	@Named(WRITE_BUFFER_SIZE)
>, <Line: -	private int m_maxWriteSize;
>, <Line: -	@Inject
>, <Line: -	@Named(USE_THRIFT)
>, <Line: -	private boolean m_useThrift = false;
>, <Line: -	public CassandraConfiguration(int replicationFactor,
>, <Line: -			int singleRowReadSize,
>, <Line: -			int multiRowSize,
>, <Line: -			int multiRowReadSize,
>, <Line: -			int writeDelay,
>, <Line: -			int maxWriteSize,
>, <Line: -			String keyspaceName)
>, <Line: -		m_replicationFactor = replicationFactor;
>, <Line: -		m_singleRowReadSize = singleRowReadSize;
>, <Line: -		m_multiRowSize = multiRowSize;
>, <Line: -		m_multiRowReadSize = multiRowReadSize;
>, <Line: -		m_writeDelay = writeDelay;
>, <Line: -		m_maxWriteSize = maxWriteSize;
>, <Line: -	public int getReplicationFactor()
>, <Line: -	{
>, <Line: -		return m_replicationFactor;
>, <Line: -	}
>, <Line: -	public int getSingleRowReadSize()
>, <Line: -	{
>, <Line: -		return m_singleRowReadSize;
>, <Line: -	}
>, <Line: -	public int getMultiRowSize()
>, <Line: -	{
>, <Line: -		return m_multiRowSize;
>, <Line: -	}
>, <Line: -	public int getMultiRowReadSize()
>, <Line: -	{
>, <Line: -		return m_multiRowReadSize;
>, <Line: -	}
>, <Line: -	public int getWriteDelay()
>, <Line: -	{
>, <Line: -		return m_writeDelay;
>, <Line: -	}
>, <Line: -	public int getMaxWriteSize()
>, <Line: -	{
>, <Line: -		return m_maxWriteSize;
>, <Line: -	}
>, <Line: -	public boolean isUseThrift()
>, <Line: -		return m_useThrift;
>]