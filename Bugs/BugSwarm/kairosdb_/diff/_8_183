[<Line: +		'angular',
>, <Line: +		'jquery',
>, <Line: +		'lodash',
>, <Line: +	],
>, <Line: +	function (angular, $, _) {
>, <Line: +		'use strict';
>, <Line: +		angular
>, <Line: +			.module('grafana.directives')
>, <Line: +			.directive('panelMenu', function ($compile, linkSrv) {
>, <Line: +				var linkTemplate =
>, <Line: +					'<span class="panel-title drag-handle pointer">' +
>, <Line: +					'<span class="panel-title-text drag-handle">{{panel.title | interpolateTemplateVars}}</span>' +
>, <Line: +					'<span class="panel-links-icon"></span>' +
>, <Line: +					'</span>';
>, <Line: +				function createMenuTemplate($scope) {
>, <Line: +					var template = '<div class="panel-menu small">';
>, <Line: +					template += '<div class="panel-menu-inner">';
>, <Line: +					template += '<div class="panel-menu-row">';
>, <Line: +					template += '<a class="panel-menu-icon pull-left" ng-click="updateColumnSpan(-1)"><i class="icon-minus"></i></a>';
>, <Line: +					template += '<a class="panel-menu-icon pull-left" ng-click="updateColumnSpan(1)"><i class="icon-plus"></i></a>';
>, <Line: +					template += '<a class="panel-menu-icon pull-right" ng-click="remove_panel_from_row(row, panel)"><i class="icon-remove"></i></a>';
>, <Line: +					template += '<div class="clearfix"></div>';
>, <Line: +					template += '</div>';
>, <Line: +					template += '<div class="panel-menu-row">';
>, <Line: +					template += '<a class="panel-menu-link" gf-dropdown="extendedMenu"><i class="icon-th-list"></i></a>';
>, <Line: +					_.each($scope.panelMeta.menu, function (item) {
>, <Line: +						template += '<a class="panel-menu-link" ';
>, <Line: +						if (item.click) {
>, <Line: +							template += ' ng-click="' + item.click + '"';
>, <Line: +						}
>, <Line: +						if (item.editorLink) {
>, <Line: +							template += ' dash-editor-link="' + item.editorLink + '"';
>, <Line: +						}
>, <Line: +						template += '>';
>, <Line: +						template += item.text + '</a>';
>, <Line: +					});
>, <Line: +					template += '</div>';
>, <Line: +					template += '</div>';
>, <Line: +					template += '</div>';
>, <Line: +					return template;
>, <Line: +				}
>, <Line: +				function getExtendedMenu($scope) {
>, <Line: +					var menu = angular.copy($scope.panelMeta.extendedMenu);
>, <Line: +					if ($scope.panel.links) {
>, <Line: +						_.each($scope.panel.links, function (link) {
>, <Line: +							var info = linkSrv.getPanelLinkAnchorInfo(link);
>, <Line: +							menu.push({
>, <Line: +								text: info.title,
>, <Line: +								href: info.href,
>, <Line: +								target: info.target
>, <Line: +							});
>, <Line: +						});
>, <Line: +					}
>, <Line: +					return menu;
>, <Line: +				}
>, <Line: +				return {
>, <Line: +					restrict: 'A',
>, <Line: +					link: function ($scope, elem) {
>, <Line: +						var $link = $(linkTemplate);
>, <Line: +						var $panelContainer = elem.parents(".panel-container");
>, <Line: +						var menuWidth = $scope.panelMeta.menu.length === 4 ? 236 : 191;
>, <Line: +						var menuScope = null;
>, <Line: +						var timeout = null;
>, <Line: +						var $menu = null;
>, <Line: +						elem.append($link);
>, <Line: +						$scope.$watchCollection('panel.links', function (newValue) {
>, <Line: +							var showIcon = (newValue ? newValue.length > 0 : false) && $scope.panel.title !== '';
>, <Line: +							$link.toggleClass('has-panel-links', showIcon);
>, <Line: +						});
>, <Line: +						function dismiss(time, force) {
>, <Line: +							clearTimeout(timeout);
>, <Line: +							timeout = null;
>, <Line: +							if (time) {
>, <Line: +								timeout = setTimeout(dismiss, time);
>, <Line: +								return;
>, <Line: +							}
>, <Line: +							// if hovering or draging pospone close
>, <Line: +							if (force !== true) {
>, <Line: +								if ($menu.is(':hover') || $scope.dashboard.$$panelDragging) {
>, <Line: +									dismiss(2200);
>, <Line: +									return;
>, <Line: +								}
>, <Line: +							}
>, <Line: +							if (menuScope) {
>, <Line: +								$menu.unbind();
>, <Line: +								$menu.remove();
>, <Line: +								menuScope.$destroy();
>, <Line: +								menuScope = null;
>, <Line: +								$menu = null;
>, <Line: +								$panelContainer.removeClass('panel-highlight');
>, <Line: +							}
>, <Line: +						}
>, <Line: +						var showMenu = function (e) {
>, <Line: +							// if menu item is clicked and menu was just removed from dom ignore this event
>, <Line: +							if (!$.contains(document, e.target)) {
>, <Line: +								return;
>, <Line: +							}
>, <Line: +							if ($menu) {
>, <Line: +								dismiss();
>, <Line: +								return;
>, <Line: +							}
>, <Line: +							var windowWidth = $(window).width();
>, <Line: +							var panelLeftPos = $(elem).offset().left;
>, <Line: +							var panelWidth = $(elem).width();
>, <Line: +							var menuLeftPos = (panelWidth / 2) - (menuWidth / 2);
>, <Line: +							var stickingOut = panelLeftPos + menuLeftPos + menuWidth - windowWidth;
>, <Line: +							if (stickingOut > 0) {
>, <Line: +								menuLeftPos -= stickingOut + 10;
>, <Line: +							}
>, <Line: +							if (panelLeftPos + menuLeftPos < 0) {
>, <Line: +								menuLeftPos = 0;
>, <Line: +							}
>, <Line: +							var menuTemplate = createMenuTemplate($scope);
>, <Line: +							$menu = $(menuTemplate);
>, <Line: +							$menu.css('left', menuLeftPos);
>, <Line: +							$menu.mouseleave(function () {
>, <Line: +								dismiss(1000);
>, <Line: +							});
>, <Line: +							menuScope = $scope.$new();
>, <Line: +							menuScope.extendedMenu = getExtendedMenu($scope);
>, <Line: +							menuScope.dismiss = function () {
>, <Line: +								dismiss(null, true);
>, <Line: +							};
>, <Line: +							$('.panel-menu').remove();
>, <Line: +							elem.append($menu);
>, <Line: +							$scope.$apply(function () {
>, <Line: +								$compile($menu.contents())(menuScope);
>, <Line: +							});
>, <Line: +							$(".panel-container").removeClass('panel-highlight');
>, <Line: +							$panelContainer.toggleClass('panel-highlight');
>, <Line: +							dismiss(2200);
>, <Line: +						};
>, <Line: +						elem.click(showMenu);
>, <Line: +						$compile(elem.contents())($scope);
>, <Line: +					}
>, <Line: +				};
>, <Line: +			});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'jquery',
>, <Line: -  'lodash',
>, <Line: -],
>, <Line: -function (angular, $, _) {
>, <Line: -  'use strict';
>, <Line: -  angular
>, <Line: -    .module('grafana.directives')
>, <Line: -    .directive('panelMenu', function($compile, linkSrv) {
>, <Line: -      var linkTemplate =
>, <Line: -          '<span class="panel-title drag-handle pointer">' +
>, <Line: -            '<span class="panel-title-text drag-handle">{{panel.title | interpolateTemplateVars}}</span>' +
>, <Line: -            '<span class="panel-links-icon"></span>' +
>, <Line: -          '</span>';
>, <Line: -      function createMenuTemplate($scope) {
>, <Line: -        var template = '<div class="panel-menu small">';
>, <Line: -        template += '<div class="panel-menu-inner">';
>, <Line: -        template += '<div class="panel-menu-row">';
>, <Line: -        template += '<a class="panel-menu-icon pull-left" ng-click="updateColumnSpan(-1)"><i class="icon-minus"></i></a>';
>, <Line: -        template += '<a class="panel-menu-icon pull-left" ng-click="updateColumnSpan(1)"><i class="icon-plus"></i></a>';
>, <Line: -        template += '<a class="panel-menu-icon pull-right" ng-click="remove_panel_from_row(row, panel)"><i class="icon-remove"></i></a>';
>, <Line: -        template += '<div class="clearfix"></div>';
>, <Line: -        template += '</div>';
>, <Line: -        template += '<div class="panel-menu-row">';
>, <Line: -        template += '<a class="panel-menu-link" gf-dropdown="extendedMenu"><i class="icon-th-list"></i></a>';
>, <Line: -        _.each($scope.panelMeta.menu, function(item) {
>, <Line: -          template += '<a class="panel-menu-link" ';
>, <Line: -          if (item.click) { template += ' ng-click="' + item.click + '"'; }
>, <Line: -          if (item.editorLink) { template += ' dash-editor-link="' + item.editorLink + '"'; }
>, <Line: -          template += '>';
>, <Line: -          template += item.text + '</a>';
>, <Line: -        });
>, <Line: -        template += '</div>';
>, <Line: -        template += '</div>';
>, <Line: -        template += '</div>';
>, <Line: -        return template;
>, <Line: -      }
>, <Line: -      function getExtendedMenu($scope) {
>, <Line: -        var menu = angular.copy($scope.panelMeta.extendedMenu);
>, <Line: -        if ($scope.panel.links) {
>, <Line: -          _.each($scope.panel.links, function(link) {
>, <Line: -            var info = linkSrv.getPanelLinkAnchorInfo(link);
>, <Line: -            menu.push({text: info.title, href: info.href, target: info.target });
>, <Line: -          });
>, <Line: -        }
>, <Line: -        return menu;
>, <Line: -      }
>, <Line: -      return {
>, <Line: -        restrict: 'A',
>, <Line: -        link: function($scope, elem) {
>, <Line: -          var $link = $(linkTemplate);
>, <Line: -          var $panelContainer = elem.parents(".panel-container");
>, <Line: -          var menuWidth = $scope.panelMeta.menu.length === 4 ? 236 : 191;
>, <Line: -          var menuScope = null;
>, <Line: -          var timeout = null;
>, <Line: -          var $menu = null;
>, <Line: -          elem.append($link);
>, <Line: -          $scope.$watchCollection('panel.links', function(newValue) {
>, <Line: -            var showIcon = (newValue ? newValue.length > 0 : false) && $scope.panel.title !== '';
>, <Line: -            $link.toggleClass('has-panel-links', showIcon);
>, <Line: -          });
>, <Line: -          function dismiss(time, force) {
>, <Line: -            clearTimeout(timeout);
>, <Line: -            timeout = null;
>, <Line: -            if (time) {
>, <Line: -              timeout = setTimeout(dismiss, time);
>, <Line: -              return;
>, <Line: -            }
>, <Line: -            // if hovering or draging pospone close
>, <Line: -            if (force !== true) {
>, <Line: -              if ($menu.is(':hover') || $scope.dashboard.$$panelDragging) {
>, <Line: -                dismiss(2200);
>, <Line: -                return;
>, <Line: -              }
>, <Line: -            }
>, <Line: -            if (menuScope) {
>, <Line: -              $menu.unbind();
>, <Line: -              $menu.remove();
>, <Line: -              menuScope.$destroy();
>, <Line: -              menuScope = null;
>, <Line: -              $menu = null;
>, <Line: -              $panelContainer.removeClass('panel-highlight');
>, <Line: -            }
>, <Line: -          }
>, <Line: -          var showMenu = function(e) {
>, <Line: -            // if menu item is clicked and menu was just removed from dom ignore this event
>, <Line: -            if (!$.contains(document, e.target)) {
>, <Line: -              return;
>, <Line: -            }
>, <Line: -            if ($menu) {
>, <Line: -              dismiss();
>, <Line: -              return;
>, <Line: -            }
>, <Line: -            var windowWidth = $(window).width();
>, <Line: -            var panelLeftPos = $(elem).offset().left;
>, <Line: -            var panelWidth = $(elem).width();
>, <Line: -            var menuLeftPos = (panelWidth / 2) - (menuWidth/2);
>, <Line: -            var stickingOut = panelLeftPos + menuLeftPos + menuWidth - windowWidth;
>, <Line: -            if (stickingOut > 0) {
>, <Line: -              menuLeftPos -= stickingOut + 10;
>, <Line: -            }
>, <Line: -            if (panelLeftPos + menuLeftPos < 0) {
>, <Line: -              menuLeftPos = 0;
>, <Line: -            }
>, <Line: -            var menuTemplate = createMenuTemplate($scope);
>, <Line: -            $menu = $(menuTemplate);
>, <Line: -            $menu.css('left', menuLeftPos);
>, <Line: -            $menu.mouseleave(function() {
>, <Line: -              dismiss(1000);
>, <Line: -            });
>, <Line: -            menuScope = $scope.$new();
>, <Line: -            menuScope.extendedMenu = getExtendedMenu($scope);
>, <Line: -            menuScope.dismiss = function() {
>, <Line: -              dismiss(null, true);
>, <Line: -            };
>, <Line: -            $('.panel-menu').remove();
>, <Line: -            elem.append($menu);
>, <Line: -            $scope.$apply(function() {
>, <Line: -              $compile($menu.contents())(menuScope);
>, <Line: -            });
>, <Line: -            $(".panel-container").removeClass('panel-highlight');
>, <Line: -            $panelContainer.toggleClass('panel-highlight');
>, <Line: -            dismiss(2200);
>, <Line: -          };
>, <Line: -          elem.click(showMenu);
>, <Line: -          $compile(elem.contents())($scope);
>, <Line: -        }
>, <Line: -      };
>, <Line: -    });
>, <Line: -});
>]