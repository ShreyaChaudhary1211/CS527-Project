[<Line: +	public enum Dev
>, <Line: +	{
>, <Line: +		POS_SD, NEG_SD, VALUE
>, <Line: +	};
>, <Line: +	private Dev m_dev;
>, <Line: +	private int m_devCount = 1;
>, <Line: +	/**
>, <Line: +	 Sets which type of value to return.
>, <Line: +	 @param dev
>, <Line: +	 */
>, <Line: +	public void setReturnType(Dev dev)
>, <Line: +	{
>, <Line: +		m_dev = dev;
>, <Line: +	}
>, <Line: +	public void setDevCount(int count)
>, <Line: +	{
>, <Line: +		m_devCount = count;
>, <Line: +	}
>, <Line: +			if (Double.isNaN(stdDev))
>, <Line: +				stdDev = 0;
>, <Line: +			double ret = 0;
>, <Line: +			if (m_dev == Dev.POS_SD)
>, <Line: +				ret = average + (stdDev * m_devCount);
>, <Line: +			else if (m_dev == Dev.NEG_SD)
>, <Line: +				ret = average - (stdDev * m_devCount);
>, <Line: +			else
>, <Line: +				ret = stdDev;
>, <Line: +			return Collections.singletonList(m_dataPointFactory.createDataPoint(returnTime, ret));
>]
[<Line: -			return Collections.singletonList(m_dataPointFactory.createDataPoint(returnTime, Double.isNaN(stdDev) ? 0 : stdDev));
>]