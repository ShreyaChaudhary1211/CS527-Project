[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +		'config',
>, <Line: +	],
>, <Line: +	function (angular, _, config) {
>, <Line: +		'use strict';
>, <Line: +		if (!config.unsaved_changes_warning) {
>, <Line: +			return;
>, <Line: +		}
>, <Line: +		var module = angular.module('grafana.services');
>, <Line: +		module.service('unsavedChangesSrv', function ($rootScope, $modal, $q, $location, $timeout) {
>, <Line: +			var self = this;
>, <Line: +			var modalScope = $rootScope.$new();
>, <Line: +			$rootScope.$on("dashboard-loaded", function (event, newDashboard) {
>, <Line: +				// wait for different services to patch the dashboard (missing properties)
>, <Line: +				$timeout(function () {
>, <Line: +					self.original = angular.copy(newDashboard);
>, <Line: +					self.current = newDashboard;
>, <Line: +				}, 1200);
>, <Line: +			});
>, <Line: +			$rootScope.$on("dashboard-saved", function (event, savedDashboard) {
>, <Line: +				self.original = angular.copy(savedDashboard);
>, <Line: +				self.current = savedDashboard;
>, <Line: +				self.orignalPath = $location.path();
>, <Line: +			});
>, <Line: +			$rootScope.$on("$routeChangeSuccess", function () {
>, <Line: +				self.original = null;
>, <Line: +				self.originalPath = $location.path();
>, <Line: +			});
>, <Line: +			window.onbeforeunload = function () {
>, <Line: +				if (self.has_unsaved_changes()) {
>, <Line: +					return "There are unsaved changes to this dashboard";
>, <Line: +				}
>, <Line: +			};
>, <Line: +			this.init = function () {
>, <Line: +				$rootScope.$on("$locationChangeStart", function (event, next) {
>, <Line: +					if (self.originalPath === $location.path()) {
>, <Line: +						return;
>, <Line: +					}
>, <Line: +					if (self.has_unsaved_changes()) {
>, <Line: +						event.preventDefault();
>, <Line: +						self.next = next;
>, <Line: +						$timeout(self.open_modal);
>, <Line: +					}
>, <Line: +				});
>, <Line: +			};
>, <Line: +			this.open_modal = function () {
>, <Line: +				var confirmModal = $modal({
>, <Line: +					template: './app/partials/unsaved-changes.html',
>, <Line: +					persist: true,
>, <Line: +					show: false,
>, <Line: +					scope: modalScope,
>, <Line: +					keyboard: false
>, <Line: +				});
>, <Line: +				$q.when(confirmModal).then(function (modalEl) {
>, <Line: +					modalEl.modal('show');
>, <Line: +				});
>, <Line: +			};
>, <Line: +			this.has_unsaved_changes = function () {
>, <Line: +				if (!self.original) {
>, <Line: +					return false;
>, <Line: +				}
>, <Line: +				var current = angular.copy(self.current);
>, <Line: +				var original = self.original;
>, <Line: +				// ignore timespan changes
>, <Line: +				current.time = original.time = {};
>, <Line: +				current.refresh = original.refresh;
>, <Line: +				// ignore template variable values
>, <Line: +				_.each(current.templating.list, function (value, index) {
>, <Line: +					value.current = null;
>, <Line: +					value.options = null;
>, <Line: +					original.templating.list[index].current = null;
>, <Line: +					original.templating.list[index].options = null;
>, <Line: +				});
>, <Line: +				var currentTimepicker = _.findWhere(current.nav, {type: 'timepicker'});
>, <Line: +				var originalTimepicker = _.findWhere(original.nav, {type: 'timepicker'});
>, <Line: +				if (currentTimepicker && originalTimepicker) {
>, <Line: +					currentTimepicker.now = originalTimepicker.now;
>, <Line: +				}
>, <Line: +				var currentJson = angular.toJson(current);
>, <Line: +				var originalJson = angular.toJson(original);
>, <Line: +				if (currentJson !== originalJson) {
>, <Line: +					return true;
>, <Line: +				}
>, <Line: +				return false;
>, <Line: +			};
>, <Line: +			this.goto_next = function () {
>, <Line: +				var baseLen = $location.absUrl().length - $location.url().length;
>, <Line: +				var nextUrl = self.next.substring(baseLen);
>, <Line: +				$location.url(nextUrl);
>, <Line: +			};
>, <Line: +			modalScope.ignore = function () {
>, <Line: +				self.original = null;
>, <Line: +				self.goto_next();
>, <Line: +			};
>, <Line: +			modalScope.save = function () {
>, <Line: +				var unregister = $rootScope.$on('dashboard-saved', function () {
>, <Line: +					self.goto_next();
>, <Line: +				});
>, <Line: +				$timeout(unregister, 2000);
>, <Line: +				$rootScope.$emit('save-dashboard');
>, <Line: +			};
>, <Line: +		}).run(function (unsavedChangesSrv) {
>, <Line: +			unsavedChangesSrv.init();
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -  'config',
>, <Line: -],
>, <Line: -function(angular, _, config) {
>, <Line: -  'use strict';
>, <Line: -  if (!config.unsaved_changes_warning) {
>, <Line: -    return;
>, <Line: -  }
>, <Line: -  var module = angular.module('grafana.services');
>, <Line: -  module.service('unsavedChangesSrv', function($rootScope, $modal, $q, $location, $timeout) {
>, <Line: -    var self = this;
>, <Line: -    var modalScope = $rootScope.$new();
>, <Line: -    $rootScope.$on("dashboard-loaded", function(event, newDashboard) {
>, <Line: -      // wait for different services to patch the dashboard (missing properties)
>, <Line: -      $timeout(function() {
>, <Line: -        self.original = angular.copy(newDashboard);
>, <Line: -        self.current = newDashboard;
>, <Line: -      }, 1200);
>, <Line: -    });
>, <Line: -    $rootScope.$on("dashboard-saved", function(event, savedDashboard) {
>, <Line: -      self.original = angular.copy(savedDashboard);
>, <Line: -      self.current = savedDashboard;
>, <Line: -      self.orignalPath = $location.path();
>, <Line: -    });
>, <Line: -    $rootScope.$on("$routeChangeSuccess", function() {
>, <Line: -      self.original = null;
>, <Line: -      self.originalPath = $location.path();
>, <Line: -    });
>, <Line: -    window.onbeforeunload = function() {
>, <Line: -      if (self.has_unsaved_changes()) {
>, <Line: -        return "There are unsaved changes to this dashboard";
>, <Line: -      }
>, <Line: -    };
>, <Line: -    this.init = function() {
>, <Line: -      $rootScope.$on("$locationChangeStart", function(event, next) {
>, <Line: -        if (self.originalPath === $location.path()) {
>, <Line: -          return;
>, <Line: -        }
>, <Line: -        if (self.has_unsaved_changes()) {
>, <Line: -          event.preventDefault();
>, <Line: -          self.next = next;
>, <Line: -          $timeout(self.open_modal);
>, <Line: -        }
>, <Line: -      });
>, <Line: -    };
>, <Line: -    this.open_modal = function() {
>, <Line: -      var confirmModal = $modal({
>, <Line: -        template: './app/partials/unsaved-changes.html',
>, <Line: -        persist: true,
>, <Line: -        show: false,
>, <Line: -        scope: modalScope,
>, <Line: -        keyboard: false
>, <Line: -      });
>, <Line: -      $q.when(confirmModal).then(function(modalEl) {
>, <Line: -        modalEl.modal('show');
>, <Line: -      });
>, <Line: -    };
>, <Line: -    this.has_unsaved_changes = function() {
>, <Line: -      if (!self.original) {
>, <Line: -        return false;
>, <Line: -      }
>, <Line: -      var current = angular.copy(self.current);
>, <Line: -      var original = self.original;
>, <Line: -      // ignore timespan changes
>, <Line: -      current.time = original.time = {};
>, <Line: -      current.refresh = original.refresh;
>, <Line: -      // ignore template variable values
>, <Line: -      _.each(current.templating.list, function(value, index) {
>, <Line: -        value.current = null;
>, <Line: -        value.options = null;
>, <Line: -        original.templating.list[index].current = null;
>, <Line: -        original.templating.list[index].options = null;
>, <Line: -      });
>, <Line: -      var currentTimepicker = _.findWhere(current.nav, { type: 'timepicker' });
>, <Line: -      var originalTimepicker = _.findWhere(original.nav, { type: 'timepicker' });
>, <Line: -      if (currentTimepicker && originalTimepicker) {
>, <Line: -        currentTimepicker.now = originalTimepicker.now;
>, <Line: -      }
>, <Line: -      var currentJson = angular.toJson(current);
>, <Line: -      var originalJson = angular.toJson(original);
>, <Line: -      if (currentJson !== originalJson) {
>, <Line: -        return true;
>, <Line: -      }
>, <Line: -      return false;
>, <Line: -    };
>, <Line: -    this.goto_next = function() {
>, <Line: -      var baseLen = $location.absUrl().length - $location.url().length;
>, <Line: -      var nextUrl = self.next.substring(baseLen);
>, <Line: -      $location.url(nextUrl);
>, <Line: -    };
>, <Line: -    modalScope.ignore = function() {
>, <Line: -      self.original = null;
>, <Line: -      self.goto_next();
>, <Line: -    };
>, <Line: -    modalScope.save = function() {
>, <Line: -      var unregister = $rootScope.$on('dashboard-saved', function() {
>, <Line: -        self.goto_next();
>, <Line: -      });
>, <Line: -      $timeout(unregister, 2000);
>, <Line: -      $rootScope.$emit('save-dashboard');
>, <Line: -    };
>, <Line: -  }).run(function(unsavedChangesSrv) {
>, <Line: -    unsavedChangesSrv.init();
>, <Line: -  });
>, <Line: -});
>]