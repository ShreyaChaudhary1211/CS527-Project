[<Line: +package org.kairosdb.core.datastore;
>, <Line: +import org.kairosdb.core.DataPoint;
>, <Line: +import org.kairosdb.util.SimpleStats;
>, <Line: +import java.io.IOException;
>, <Line: +import java.util.*;
>, <Line: +/**
>, <Line: + Created by bhawkins on 1/28/17.
>, <Line: + */
>, <Line: +public class MemorySearchResult implements SearchResult
>, <Line: +{
>, <Line: +	private final String m_metricName;
>, <Line: +	private final List<DataPointRow> m_dataPointRows;
>, <Line: +	private MemoryDataPointRow m_currentRow;
>, <Line: +	public MemorySearchResult(String metricName)
>, <Line: +	{
>, <Line: +		m_metricName = metricName;
>, <Line: +		m_dataPointRows = new ArrayList<>();
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public List<DataPointRow> getRows()
>, <Line: +	{
>, <Line: +		return m_dataPointRows;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void addDataPoint(DataPoint datapoint) throws IOException
>, <Line: +	{
>, <Line: +		m_currentRow.addDataPoint(datapoint);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void startDataPointSet(String dataType, Map<String, String> tags) throws IOException
>, <Line: +	{
>, <Line: +		m_currentRow = new MemoryDataPointRow(dataType, tags);
>, <Line: +		m_dataPointRows.add(m_currentRow);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void endDataPoints() throws IOException
>, <Line: +	{
>, <Line: +		if (m_currentRow != null)
>, <Line: +			m_currentRow.endRow();
>, <Line: +	}
>, <Line: +	private class MemoryDataPointRow implements DataPointRow
>, <Line: +	{
>, <Line: +		private final String m_dataType;
>, <Line: +		private final Map<String, String> m_tags;
>, <Line: +		private final List<DataPoint> m_dataPoints;
>, <Line: +		private Iterator<DataPoint> m_dataPointIterator;
>, <Line: +		private MemoryDataPointRow(String dataType, Map<String, String> tags)
>, <Line: +		{
>, <Line: +			m_dataType = dataType;
>, <Line: +			m_tags = tags;
>, <Line: +			m_dataPoints = new ArrayList<>();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public String getName()
>, <Line: +		{
>, <Line: +			return m_metricName;
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public String getDatastoreType()
>, <Line: +		{
>, <Line: +			return m_dataType;
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public Set<String> getTagNames()
>, <Line: +		{
>, <Line: +			return m_tags.keySet();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public String getTagValue(String tag)
>, <Line: +		{
>, <Line: +			return m_tags.get(tag);
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public void close()
>, <Line: +		{
>, <Line: +		}
>, <Line: +		public void endRow()
>, <Line: +		{
>, <Line: +			m_dataPointIterator = m_dataPoints.iterator();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public int getDataPointCount()
>, <Line: +		{
>, <Line: +			return m_dataPoints.size();
>, <Line: +		}
>, <Line: +		public void addDataPoint(DataPoint dp)
>, <Line: +		{
>, <Line: +			m_dataPoints.add(dp);
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public boolean hasNext()
>, <Line: +		{
>, <Line: +			return m_dataPointIterator.hasNext();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public DataPoint next()
>, <Line: +		{
>, <Line: +			return m_dataPointIterator.next();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public void remove()
>, <Line: +		{
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]