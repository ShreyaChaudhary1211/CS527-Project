[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +		'moment',
>, <Line: +		'store'
>, <Line: +	],
>, <Line: +	function (angular, _, moment, store) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.controllers');
>, <Line: +		var consoleEnabled = store.getBool('grafanaConsole');
>, <Line: +		if (!consoleEnabled) {
>, <Line: +			return;
>, <Line: +		}
>, <Line: +		var events = [];
>, <Line: +		function ConsoleEvent(type, title, data) {
>, <Line: +			this.type = type;
>, <Line: +			this.title = title;
>, <Line: +			this.data = data;
>, <Line: +			this.time = moment().format('hh:mm:ss');
>, <Line: +			if (data.config) {
>, <Line: +				this.method = data.config.method;
>, <Line: +				this.elapsed = (new Date().getTime() - data.config.$grafana_timestamp) + ' ms';
>, <Line: +				if (data.config.params && data.config.params.q) {
>, <Line: +					this.field2 = data.config.params.q;
>, <Line: +				}
>, <Line: +				if (_.isString(data.config.data)) {
>, <Line: +					this.field2 = data.config.data;
>, <Line: +				}
>, <Line: +				if (data.status !== 200) {
>, <Line: +					this.error = true;
>, <Line: +					this.field3 = data.data;
>, <Line: +				}
>, <Line: +				if (_.isArray(data.data)) {
>, <Line: +					this.extractTimeseriesInfo(data.data);
>, <Line: +				}
>, <Line: +			}
>, <Line: +		}
>, <Line: +		ConsoleEvent.prototype.extractTimeseriesInfo = function (series) {
>, <Line: +			if (series.length === 0) {
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			var points = 0;
>, <Line: +			var ok = false;
>, <Line: +			if (series[0].datapoints) {
>, <Line: +				points = _.reduce(series, function (memo, val) {
>, <Line: +					return memo + val.datapoints.length;
>, <Line: +				}, 0);
>, <Line: +				ok = true;
>, <Line: +			}
>, <Line: +			if (series[0].columns) {
>, <Line: +				points = _.reduce(series, function (memo, val) {
>, <Line: +					return memo + val.points.length;
>, <Line: +				}, 0);
>, <Line: +				ok = true;
>, <Line: +			}
>, <Line: +			if (ok) {
>, <Line: +				this.field1 = '(' + series.length + ' series';
>, <Line: +				this.field1 += ', ' + points + ' points)';
>, <Line: +			}
>, <Line: +		};
>, <Line: +		module.config(function ($provide, $httpProvider) {
>, <Line: +			$provide.factory('mupp', function ($q) {
>, <Line: +				return {
>, <Line: +					'request': function (config) {
>, <Line: +						if (config.inspect) {
>, <Line: +							config.$grafana_timestamp = new Date().getTime();
>, <Line: +						}
>, <Line: +						return config;
>, <Line: +					},
>, <Line: +					'response': function (response) {
>, <Line: +						if (response.config.inspect) {
>, <Line: +							events.push(new ConsoleEvent(response.config.inspect.type, response.config.url, response));
>, <Line: +						}
>, <Line: +						return response;
>, <Line: +					},
>, <Line: +					'requestError': function (rejection) {
>, <Line: +						console.log('requestError', rejection);
>, <Line: +						return $q.reject(rejection);
>, <Line: +					},
>, <Line: +					'responseError': function (rejection) {
>, <Line: +						var inspect = rejection.config.inspect || {type: 'error'};
>, <Line: +						events.push(new ConsoleEvent(inspect.type, rejection.config.url, rejection));
>, <Line: +						return $q.reject(rejection);
>, <Line: +					}
>, <Line: +				};
>, <Line: +			});
>, <Line: +			$httpProvider.interceptors.push('mupp');
>, <Line: +		});
>, <Line: +		module.controller('ConsoleCtrl', function ($scope) {
>, <Line: +			$scope.events = events;
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -  'moment',
>, <Line: -  'store'
>, <Line: -],
>, <Line: -function (angular, _, moment, store) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.controllers');
>, <Line: -  var consoleEnabled = store.getBool('grafanaConsole');
>, <Line: -  if (!consoleEnabled) {
>, <Line: -    return;
>, <Line: -  }
>, <Line: -  var events = [];
>, <Line: -  function ConsoleEvent(type, title, data) {
>, <Line: -    this.type = type;
>, <Line: -    this.title = title;
>, <Line: -    this.data = data;
>, <Line: -    this.time = moment().format('hh:mm:ss');
>, <Line: -    if (data.config) {
>, <Line: -      this.method = data.config.method;
>, <Line: -      this.elapsed = (new Date().getTime() - data.config.$grafana_timestamp) + ' ms';
>, <Line: -      if (data.config.params && data.config.params.q) {
>, <Line: -        this.field2 = data.config.params.q;
>, <Line: -      }
>, <Line: -      if (_.isString(data.config.data)) {
>, <Line: -        this.field2 = data.config.data;
>, <Line: -      }
>, <Line: -      if (data.status !== 200) {
>, <Line: -        this.error = true;
>, <Line: -        this.field3 = data.data;
>, <Line: -      }
>, <Line: -      if (_.isArray(data.data)) {
>, <Line: -        this.extractTimeseriesInfo(data.data);
>, <Line: -      }
>, <Line: -    }
>, <Line: -  }
>, <Line: -  ConsoleEvent.prototype.extractTimeseriesInfo = function(series) {
>, <Line: -    if (series.length === 0) {
>, <Line: -      return;
>, <Line: -    }
>, <Line: -    var points = 0;
>, <Line: -    var ok = false;
>, <Line: -    if (series[0].datapoints) {
>, <Line: -      points = _.reduce(series, function(memo, val) {
>, <Line: -        return memo + val.datapoints.length;
>, <Line: -      }, 0);
>, <Line: -      ok = true;
>, <Line: -    }
>, <Line: -    if (series[0].columns) {
>, <Line: -      points = _.reduce(series, function(memo, val) {
>, <Line: -        return memo + val.points.length;
>, <Line: -      }, 0);
>, <Line: -      ok = true;
>, <Line: -    }
>, <Line: -    if (ok) {
>, <Line: -      this.field1 = '(' + series.length + ' series';
>, <Line: -      this.field1 += ', ' + points + ' points)';
>, <Line: -    }
>, <Line: -  };
>, <Line: -  module.config(function($provide, $httpProvider) {
>, <Line: -    $provide.factory('mupp', function($q) {
>, <Line: -      return {
>, <Line: -        'request': function(config) {
>, <Line: -          if (config.inspect) {
>, <Line: -            config.$grafana_timestamp = new Date().getTime();
>, <Line: -          }
>, <Line: -          return config;
>, <Line: -        },
>, <Line: -        'response': function(response) {
>, <Line: -          if (response.config.inspect) {
>, <Line: -            events.push(new ConsoleEvent(response.config.inspect.type, response.config.url, response));
>, <Line: -          }
>, <Line: -          return response;
>, <Line: -        },
>, <Line: -        'requestError': function(rejection) {
>, <Line: -          console.log('requestError', rejection);
>, <Line: -          return $q.reject(rejection);
>, <Line: -        },
>, <Line: -        'responseError': function (rejection) {
>, <Line: -          var inspect = rejection.config.inspect || { type: 'error' };
>, <Line: -          events.push(new ConsoleEvent(inspect.type, rejection.config.url, rejection));
>, <Line: -          return $q.reject(rejection);
>, <Line: -        }
>, <Line: -      };
>, <Line: -    });
>, <Line: -    $httpProvider.interceptors.push('mupp');
>, <Line: -  });
>, <Line: -  module.controller('ConsoleCtrl', function($scope) {
>, <Line: -    $scope.events = events;
>, <Line: -  });
>, <Line: -});
>]