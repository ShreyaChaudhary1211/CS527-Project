[<Line: +import org.kairosdb.core.datapoints.*;
>, <Line: +import org.kairosdb.util.SimpleStats;
>, <Line: +import org.kairosdb.util.SimpleStatsReporter;
>, <Line: +import org.kairosdb.util.StatsMap;
>, <Line: +	private final StatsMap m_statsMap = new StatsMap();
>, <Line: +	@Inject
>, <Line: +	private DoubleDataPointFactory m_doubleDataPointFactory = new DoubleDataPointFactoryImpl();
>, <Line: +	@Inject(optional=true)
>, <Line: +	@Named("kairosdb.queries.aggregate_stats")
>, <Line: +	private boolean m_aggregatedQueryMetrics = false;
>, <Line: +	@Inject
>, <Line: +	private SimpleStatsReporter m_simpleStatsReporter = new SimpleStatsReporter();
>, <Line: +			if (m_aggregatedQueryMetrics)
>, <Line: +			{
>, <Line: +				ThreadReporter.gatherData(m_statsMap);
>, <Line: +			}
>, <Line: +			else
>, <Line: +			{
>, <Line: +				ThreadReporter.submitData(m_longDataPointFactory,
>, <Line: +						m_stringDataPointFactory, m_eventBus);
>, <Line: +			}
>, <Line: +		List<DataPointSet> ret = new ArrayList<>();
>, <Line: +		if (count != 0)
>, <Line: +		{
>, <Line: +			DataPointSet dpsCount = new DataPointSet(INGEST_COUNT);
>, <Line: +			DataPointSet dpsTime = new DataPointSet(INGEST_TIME);
>, <Line: +			dpsCount.addTag("host", hostName);
>, <Line: +			dpsTime.addTag("host", hostName);
>, <Line: +			dpsCount.addDataPoint(m_longDataPointFactory.createDataPoint(now, count));
>, <Line: +			dpsTime.addDataPoint(m_longDataPointFactory.createDataPoint(now, time));
>, <Line: +			ret.add(dpsCount);
>, <Line: +			ret.add(dpsTime);
>, <Line: +		}
>, <Line: +		Map<String, SimpleStats> statsMap = m_statsMap.getStatsMap();
>, <Line: +		for (Map.Entry<String, SimpleStats> entry : statsMap.entrySet())
>, <Line: +		{
>, <Line: +			String metric = entry.getKey();
>, <Line: +			SimpleStats.Data stats = entry.getValue().getAndClear();
>, <Line: +			m_simpleStatsReporter.reportStats(stats, now, metric, ret);
>, <Line: +		}
>]
[<Line: -import org.kairosdb.core.datapoints.LongDataPointFactory;
>, <Line: -import org.kairosdb.core.datapoints.LongDataPointFactoryImpl;
>, <Line: -import org.kairosdb.core.datapoints.StringDataPointFactory;
>, <Line: -			ThreadReporter.submitData(m_longDataPointFactory,
>, <Line: -					m_stringDataPointFactory, m_eventBus);
>, <Line: -		if (count == 0)
>, <Line: -			return Collections.emptyList();
>, <Line: -		DataPointSet dpsCount = new DataPointSet(INGEST_COUNT);
>, <Line: -		DataPointSet dpsTime = new DataPointSet(INGEST_TIME);
>, <Line: -		dpsCount.addTag("host", hostName);
>, <Line: -		dpsTime.addTag("host", hostName);
>, <Line: -		dpsCount.addDataPoint(m_longDataPointFactory.createDataPoint(now, count));
>, <Line: -		dpsTime.addDataPoint(m_longDataPointFactory.createDataPoint(now, time));
>, <Line: -		List<DataPointSet> ret = new ArrayList<>();
>, <Line: -		ret.add(dpsCount);
>, <Line: -		ret.add(dpsTime);
>]