[<Line: +		'angular',
>, <Line: +		'app',
>, <Line: +		'lodash',
>, <Line: +		'require',
>, <Line: +		'components/panelmeta',
>, <Line: +	],
>, <Line: +	function (angular, app, _, require, PanelMeta) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.panels.text', []);
>, <Line: +		app.useModule(module);
>, <Line: +		var converter;
>, <Line: +		module.controller('text', function ($scope, templateSrv, $sce, panelSrv) {
>, <Line: +			$scope.panelMeta = new PanelMeta({
>, <Line: +				description: "A static text panel that can use plain text, markdown, or (sanitized) HTML"
>, <Line: +			});
>, <Line: +			$scope.panelMeta.addEditorTab('Edit text', 'app/panels/text/editor.html');
>, <Line: +			// Set and populate defaults
>, <Line: +			var _d = {
>, <Line: +				title: 'default title',
>, <Line: +				mode: "markdown", // 'html', 'markdown', 'text'
>, <Line: +				content: "",
>, <Line: +				style: {},
>, <Line: +			};
>, <Line: +			_.defaults($scope.panel, _d);
>, <Line: +			$scope.init = function () {
>, <Line: +				panelSrv.init($scope);
>, <Line: +				$scope.ready = false;
>, <Line: +				$scope.$on('refresh', $scope.render);
>, <Line: +				$scope.render();
>, <Line: +			};
>, <Line: +			$scope.render = function () {
>, <Line: +				if ($scope.panel.mode === 'markdown') {
>, <Line: +					$scope.renderMarkdown($scope.panel.content);
>, <Line: +				}
>, <Line: +				else if ($scope.panel.mode === 'html') {
>, <Line: +					$scope.updateContent($scope.panel.content);
>, <Line: +				}
>, <Line: +				else if ($scope.panel.mode === 'text') {
>, <Line: +					$scope.renderText($scope.panel.content);
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.renderText = function (content) {
>, <Line: +				content = content
>, <Line: +					.replace(/&/g, '&amp;')
>, <Line: +					.replace(/>/g, '&gt;')
>, <Line: +					.replace(/</g, '&lt;')
>, <Line: +					.replace(/\n/g, '<br/>');
>, <Line: +				$scope.updateContent(content);
>, <Line: +			};
>, <Line: +			$scope.renderMarkdown = function (content) {
>, <Line: +				var text = content
>, <Line: +					.replace(/&/g, '&amp;')
>, <Line: +					.replace(/>/g, '&gt;')
>, <Line: +					.replace(/</g, '&lt;');
>, <Line: +				if (converter) {
>, <Line: +					$scope.updateContent(converter.makeHtml(text));
>, <Line: +				}
>, <Line: +				else {
>, <Line: +					require(['./lib/showdown'], function (Showdown) {
>, <Line: +						converter = new Showdown.converter();
>, <Line: +						$scope.updateContent(converter.makeHtml(text));
>, <Line: +					});
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.updateContent = function (html) {
>, <Line: +				try {
>, <Line: +					$scope.content = $sce.trustAsHtml(templateSrv.replace(html));
>, <Line: +				} catch (e) {
>, <Line: +					console.log('Text panel error: ', e);
>, <Line: +					$scope.content = $sce.trustAsHtml(html);
>, <Line: +				}
>, <Line: +				if (!$scope.$$phase) {
>, <Line: +					$scope.$digest();
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.openEditor = function () {
>, <Line: +			};
>, <Line: +			$scope.init();
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'app',
>, <Line: -  'lodash',
>, <Line: -  'require',
>, <Line: -  'components/panelmeta',
>, <Line: -],
>, <Line: -function (angular, app, _, require, PanelMeta) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.panels.text', []);
>, <Line: -  app.useModule(module);
>, <Line: -  var converter;
>, <Line: -  module.controller('text', function($scope, templateSrv, $sce, panelSrv) {
>, <Line: -    $scope.panelMeta = new PanelMeta({
>, <Line: -      description : "A static text panel that can use plain text, markdown, or (sanitized) HTML"
>, <Line: -    });
>, <Line: -    $scope.panelMeta.addEditorTab('Edit text', 'app/panels/text/editor.html');
>, <Line: -    // Set and populate defaults
>, <Line: -    var _d = {
>, <Line: -      title   : 'default title',
>, <Line: -      mode    : "markdown", // 'html', 'markdown', 'text'
>, <Line: -      content : "",
>, <Line: -      style: {},
>, <Line: -    };
>, <Line: -    _.defaults($scope.panel, _d);
>, <Line: -    $scope.init = function() {
>, <Line: -      panelSrv.init($scope);
>, <Line: -      $scope.ready = false;
>, <Line: -      $scope.$on('refresh', $scope.render);
>, <Line: -      $scope.render();
>, <Line: -    };
>, <Line: -    $scope.render = function() {
>, <Line: -      if ($scope.panel.mode === 'markdown') {
>, <Line: -        $scope.renderMarkdown($scope.panel.content);
>, <Line: -      }
>, <Line: -      else if ($scope.panel.mode === 'html') {
>, <Line: -        $scope.updateContent($scope.panel.content);
>, <Line: -      }
>, <Line: -      else if ($scope.panel.mode === 'text') {
>, <Line: -        $scope.renderText($scope.panel.content);
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.renderText = function(content) {
>, <Line: -      content = content
>, <Line: -        .replace(/&/g, '&amp;')
>, <Line: -        .replace(/>/g, '&gt;')
>, <Line: -        .replace(/</g, '&lt;')
>, <Line: -        .replace(/\n/g, '<br/>');
>, <Line: -      $scope.updateContent(content);
>, <Line: -    };
>, <Line: -    $scope.renderMarkdown = function(content) {
>, <Line: -      var text = content
>, <Line: -        .replace(/&/g, '&amp;')
>, <Line: -        .replace(/>/g, '&gt;')
>, <Line: -        .replace(/</g, '&lt;');
>, <Line: -      if (converter) {
>, <Line: -        $scope.updateContent(converter.makeHtml(text));
>, <Line: -      }
>, <Line: -      else {
>, <Line: -        require(['./lib/showdown'], function (Showdown) {
>, <Line: -          converter = new Showdown.converter();
>, <Line: -          $scope.updateContent(converter.makeHtml(text));
>, <Line: -        });
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.updateContent = function(html) {
>, <Line: -      try {
>, <Line: -        $scope.content = $sce.trustAsHtml(templateSrv.replace(html));
>, <Line: -      } catch(e) {
>, <Line: -        console.log('Text panel error: ', e);
>, <Line: -        $scope.content = $sce.trustAsHtml(html);
>, <Line: -      }
>, <Line: -      if(!$scope.$$phase) {
>, <Line: -        $scope.$digest();
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.openEditor = function() {
>, <Line: -    };
>, <Line: -    $scope.init();
>, <Line: -  });
>, <Line: -});
>]