[<Line: +package org.kairosdb.rollup;
>, <Line: +import com.google.common.base.Charsets;
>, <Line: +import com.google.common.io.Resources;
>, <Line: +import org.apache.commons.io.FileUtils;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Test;
>, <Line: +import org.kairosdb.core.aggregator.TestAggregatorFactory;
>, <Line: +import org.kairosdb.core.exception.KairosDBException;
>, <Line: +import org.kairosdb.core.groupby.TestGroupByFactory;
>, <Line: +import org.kairosdb.core.http.rest.QueryException;
>, <Line: +import org.kairosdb.core.http.rest.json.QueryParser;
>, <Line: +import org.kairosdb.core.http.rest.json.TestQueryPluginFactory;
>, <Line: +import java.io.File;
>, <Line: +import java.io.IOException;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.Collections;
>, <Line: +import java.util.List;
>, <Line: +import static junit.framework.TestCase.assertEquals;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +import static org.hamcrest.core.IsCollectionContaining.hasItem;
>, <Line: +import static org.hamcrest.core.IsEqual.equalTo;
>, <Line: +import static org.kairosdb.rollup.RollupTaskChangeListener.Action;
>, <Line: +import static org.mockito.Mockito.mock;
>, <Line: +import static org.mockito.Mockito.verify;
>, <Line: +public class RollUpTasksFileStoreTest
>, <Line: +{
>, <Line: +	private static final String DIRECTORY = "build/rolluptaskstore";
>, <Line: +	private QueryParser parser;
>, <Line: +	private RollupTaskChangeListener mockListener;
>, <Line: +	@Before
>, <Line: +	public void setup() throws IOException, KairosDBException
>, <Line: +	{
>, <Line: +		FileUtils.deleteDirectory(new File(DIRECTORY));
>, <Line: +		parser = new QueryParser(new TestAggregatorFactory(), new TestGroupByFactory(), new TestQueryPluginFactory());
>, <Line: +		mockListener = mock(RollupTaskChangeListener.class);
>, <Line: +	}
>, <Line: +	@Test(expected = NullPointerException.class)
>, <Line: +	public void test_constructor_nullStoreDirectory_invalid() throws IOException, RollUpException
>, <Line: +	{
>, <Line: +		new RollUpTasksFileStore(null, parser);
>, <Line: +	}
>, <Line: +	@Test(expected = NullPointerException.class)
>, <Line: +	public void test_constructor_nullStoreParser_invalid() throws IOException, RollUpException
>, <Line: +	{
>, <Line: +		new RollUpTasksFileStore(DIRECTORY, null);
>, <Line: +	}
>, <Line: +	@Test(expected = NullPointerException.class)
>, <Line: +	public void test_write_nullTaskList_invalid() throws IOException, RollUpException
>, <Line: +	{
>, <Line: +		new RollUpTasksFileStore(DIRECTORY, null).write(null);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_read_write() throws IOException, RollUpException, QueryException
>, <Line: +	{
>, <Line: +		List<RollupTask> tasks = createTasks();
>, <Line: +		Collections.sort(tasks, new TaskComparator());
>, <Line: +		RollUpTasksStore store = new RollUpTasksFileStore(DIRECTORY, parser);
>, <Line: +		store.addListener(mockListener);
>, <Line: +		store.write(tasks);
>, <Line: +		List<RollupTask> readTasks = store.read();
>, <Line: +		Collections.sort(readTasks, new TaskComparator());
>, <Line: +		assertThat(readTasks.size(), equalTo(tasks.size()));
>, <Line: +		assertEquals(readTasks, tasks);
>, <Line: +		for (RollupTask task : tasks)
>, <Line: +		{
>, <Line: +			verify(mockListener).change(task, Action.ADDED);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@Test(expected = IllegalArgumentException.class)
>, <Line: +	public void test_remove_emptyId_invalid() throws IOException, RollUpException
>, <Line: +	{
>, <Line: +		new RollUpTasksFileStore(DIRECTORY, parser).remove("");
>, <Line: +	}
>, <Line: +	@Test(expected = NullPointerException.class)
>, <Line: +	public void test_remove_nullId_invalid() throws IOException, RollUpException
>, <Line: +	{
>, <Line: +		new RollUpTasksFileStore(DIRECTORY, null).remove(null);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_remove() throws IOException, QueryException, RollUpException
>, <Line: +	{
>, <Line: +		List<RollupTask> tasks = createTasks();
>, <Line: +		RollUpTasksStore store = new RollUpTasksFileStore(DIRECTORY, parser);
>, <Line: +		store.addListener(mockListener);
>, <Line: +		store.write(tasks);
>, <Line: +		assertThat(store.read().size(), equalTo(2));
>, <Line: +		store.remove(tasks.get(1).getId());
>, <Line: +		assertThat(store.read().size(), equalTo(1));
>, <Line: +		assertThat(store.read(), hasItem(tasks.get(0)));
>, <Line: +		verify(mockListener).change(tasks.get(1), Action.REMOVED);
>, <Line: +		store.remove(tasks.get(0).getId());
>, <Line: +		assertThat(store.read().size(), equalTo(0));
>, <Line: +		verify(mockListener).change(tasks.get(0), Action.REMOVED);
>, <Line: +	}
>, <Line: +	private List<RollupTask> createTasks() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		List<RollupTask> tasks = new ArrayList<RollupTask>();
>, <Line: +		String json = Resources.toString(Resources.getResource("rolluptask1.json"), Charsets.UTF_8);
>, <Line: +		tasks.add(parser.parseRollupTask(json));
>, <Line: +		json = Resources.toString(Resources.getResource("rolluptask2.json"), Charsets.UTF_8);
>, <Line: +		tasks.add(parser.parseRollupTask(json));
>, <Line: +		return tasks;
>, <Line: +	}
>, <Line: +	private class TaskComparator implements java.util.Comparator<RollupTask>
>, <Line: +	{
>, <Line: +		@Override
>, <Line: +		public int compare(RollupTask task1, RollupTask task2)
>, <Line: +		{
>, <Line: +			return task1.getId().compareTo(task2.getId());
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]