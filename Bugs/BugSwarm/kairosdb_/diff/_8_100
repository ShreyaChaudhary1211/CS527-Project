[<Line: +package org.kairosdb.rollup;
>, <Line: +import com.google.common.collect.ImmutableSortedMap;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Rule;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.rules.ExpectedException;
>, <Line: +import org.kairosdb.core.DataPoint;
>, <Line: +import org.kairosdb.core.DataPointListener;
>, <Line: +import org.kairosdb.core.TestDataPointFactory;
>, <Line: +import org.kairosdb.core.aggregator.*;
>, <Line: +import org.kairosdb.core.datapoints.DoubleDataPoint;
>, <Line: +import org.kairosdb.core.datapoints.DoubleDataPointFactory;
>, <Line: +import org.kairosdb.core.datastore.*;
>, <Line: +import org.kairosdb.core.exception.DatastoreException;
>, <Line: +import org.kairosdb.testing.ListDataPointGroup;
>, <Line: +import java.io.IOException;
>, <Line: +import java.text.ParseException;
>, <Line: +import java.text.SimpleDateFormat;
>, <Line: +import java.util.*;
>, <Line: +import static org.hamcrest.CoreMatchers.equalTo;
>, <Line: +import static org.junit.Assert.assertThat;
>, <Line: +import static org.mockito.Mockito.mock;
>, <Line: +public class RollUpJobTest
>, <Line: +{
>, <Line: +	private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MMM-dd HH:mm:ss.SS");
>, <Line: +	@Rule
>, <Line: +	public ExpectedException expectedException = ExpectedException.none();
>, <Line: +	private long lastTimeStamp;
>, <Line: +	private KairosDatastore datastore;
>, <Line: +	private TestDatastore testDataStore;
>, <Line: +	@Before
>, <Line: +	public void setup() throws ParseException, DatastoreException
>, <Line: +	{
>, <Line: +		lastTimeStamp = dateFormat.parse("2013-JAN-18 4:55:12.22").getTime();
>, <Line: +		testDataStore = new TestDatastore();
>, <Line: +		datastore = new KairosDatastore(testDataStore, new QueryQueuingManager(1, "hostname"),
>, <Line: +				Collections.<DataPointListener>emptyList(), new TestDataPointFactory(), false);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_getLastSampling()
>, <Line: +	{
>, <Line: +		Sampling sampling1 = new Sampling(1, TimeUnit.DAYS);
>, <Line: +		Sampling sampling2 = new Sampling(2, TimeUnit.MINUTES);
>, <Line: +		DoubleDataPointFactory dataPointFactory = mock(DoubleDataPointFactory.class);
>, <Line: +		MinAggregator minAggregator = new MinAggregator(dataPointFactory);
>, <Line: +		minAggregator.setSampling(sampling1);
>, <Line: +		MaxAggregator maxAggregator = new MaxAggregator(dataPointFactory);
>, <Line: +		maxAggregator.setSampling(sampling2);
>, <Line: +		List<Aggregator> aggregators = new ArrayList<Aggregator>();
>, <Line: +		aggregators.add(minAggregator);
>, <Line: +		aggregators.add(maxAggregator);
>, <Line: +		aggregators.add(new DivideAggregator(dataPointFactory));
>, <Line: +		aggregators.add(new DiffAggregator(dataPointFactory));
>, <Line: +		Sampling lastSampling = RollUpJob.getLastSampling(aggregators);
>, <Line: +		assertThat(lastSampling, equalTo(sampling2));
>, <Line: +		aggregators = new ArrayList<Aggregator>();
>, <Line: +		aggregators.add(maxAggregator);
>, <Line: +		aggregators.add(new DivideAggregator(dataPointFactory));
>, <Line: +		aggregators.add(new DiffAggregator(dataPointFactory));
>, <Line: +		aggregators.add(minAggregator);
>, <Line: +		lastSampling = RollUpJob.getLastSampling(aggregators);
>, <Line: +		assertThat(lastSampling, equalTo(sampling1));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_getLastSampling_no_sampling()
>, <Line: +	{
>, <Line: +		DoubleDataPointFactory dataPointFactory = mock(DoubleDataPointFactory.class);
>, <Line: +		List<Aggregator> aggregators = new ArrayList<Aggregator>();
>, <Line: +		aggregators.add(new DivideAggregator(dataPointFactory));
>, <Line: +		aggregators.add(new DiffAggregator(dataPointFactory));
>, <Line: +		Sampling lastSampling = RollUpJob.getLastSampling(aggregators);
>, <Line: +		assertThat(lastSampling, equalTo(null));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_getLastRollupDataPoint() throws ParseException, DatastoreException
>, <Line: +	{
>, <Line: +		long now = dateFormat.parse("2013-Jan-18 4:59:12.22").getTime();
>, <Line: +		String metricName = "foo";
>, <Line: +		ImmutableSortedMap<String, String> localHostTags = ImmutableSortedMap.of("host", "localhost");
>, <Line: +		List<DataPoint> localhostDataPoints = new ArrayList<DataPoint>();
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 1, 10));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 2, 11));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 3, 12));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 4, 13));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 5, 14));
>, <Line: +		ImmutableSortedMap<String, String> remoteTags = ImmutableSortedMap.of("host", "remote");
>, <Line: +		List<DataPoint> remoteDataPoints = new ArrayList<DataPoint>();
>, <Line: +		remoteDataPoints.add(new DoubleDataPoint(lastTimeStamp + 1, 10));
>, <Line: +		remoteDataPoints.add(new DoubleDataPoint(lastTimeStamp + 2, 11));
>, <Line: +		testDataStore.clear();
>, <Line: +		testDataStore.putDataPoints(metricName, localHostTags, localhostDataPoints);
>, <Line: +		testDataStore.putDataPoints(metricName, remoteTags, remoteDataPoints);
>, <Line: +		DataPoint lastDataPoint = RollUpJob.getLastRollupDataPoint(datastore, metricName, now);
>, <Line: +		// Look back from now and find last data point [4]
>, <Line: +		assertThat(lastDataPoint, equalTo(localhostDataPoints.get(4)));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_getLastRollupDataPoint_noDataPoints() throws ParseException, DatastoreException
>, <Line: +	{
>, <Line: +		long now = dateFormat.parse("2013-Jan-18 4:59:12.22").getTime();
>, <Line: +		String metricName = "foo";
>, <Line: +		testDataStore.clear();
>, <Line: +		DataPoint lastDataPoint = RollUpJob.getLastRollupDataPoint(datastore, metricName, now);
>, <Line: +		assertThat(lastDataPoint, equalTo(null));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_getgetFutureDataPoint() throws ParseException, DatastoreException
>, <Line: +	{
>, <Line: +		long now = dateFormat.parse("2013-Jan-18 4:59:12.22").getTime();
>, <Line: +		String metricName = "foo";
>, <Line: +		ImmutableSortedMap<String, String> localHostTags = ImmutableSortedMap.of("host", "localhost");
>, <Line: +		List<DataPoint> localhostDataPoints = new ArrayList<DataPoint>();
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 1, 10));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 2, 11));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 3, 12));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 4, 13));
>, <Line: +		localhostDataPoints.add(new DoubleDataPoint(lastTimeStamp + 5, 14));
>, <Line: +		ImmutableSortedMap<String, String> remoteTags = ImmutableSortedMap.of("host", "remote");
>, <Line: +		List<DataPoint> remoteDataPoints = new ArrayList<DataPoint>();
>, <Line: +		remoteDataPoints.add(new DoubleDataPoint(lastTimeStamp + 1, 10));
>, <Line: +		remoteDataPoints.add(new DoubleDataPoint(lastTimeStamp + 2, 11));
>, <Line: +		testDataStore.clear();
>, <Line: +		testDataStore.putDataPoints(metricName, localHostTags, localhostDataPoints);
>, <Line: +		testDataStore.putDataPoints(metricName, remoteTags, remoteDataPoints);
>, <Line: +		// Look from data point [1] forward and return [2]
>, <Line: +		DataPoint futureDataPoint = RollUpJob.getFutureDataPoint(datastore, metricName, now, localhostDataPoints.get(1));
>, <Line: +		assertThat(futureDataPoint, equalTo(localhostDataPoints.get(2)));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_calculatStartTime_datapointTime()
>, <Line: +	{
>, <Line: +		Sampling sampling = new Sampling();
>, <Line: +		DoubleDataPoint dataPoint = new DoubleDataPoint(123456L, 10);
>, <Line: +		long time = RollUpJob.calculateStartTime(dataPoint, sampling, System.currentTimeMillis());
>, <Line: +		assertThat(time, equalTo(123456L));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_calculatStartTime_samplingTime() throws ParseException
>, <Line: +	{
>, <Line: +		long now = dateFormat.parse("2013-Jan-18 4:59:12.22").getTime();
>, <Line: +		Sampling sampling = new Sampling(1, TimeUnit.HOURS);
>, <Line: +		long time = RollUpJob.calculateStartTime(null, sampling, now);
>, <Line: +		assertThat(time, equalTo(dateFormat.parse("2013-Jan-18 3:59:12.22").getTime()));
>, <Line: +	}
>, <Line: +	@Test(expected = NullPointerException.class)
>, <Line: +	public void test_calculatStartTime_samplingNull_invalid()
>, <Line: +	{
>, <Line: +		DoubleDataPoint dataPoint = new DoubleDataPoint(123456L, 10);
>, <Line: +		RollUpJob.calculateStartTime(dataPoint, null, System.currentTimeMillis());
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_calculatEndTime_datapoint_null()
>, <Line: +	{
>, <Line: +		long now = System.currentTimeMillis();
>, <Line: +		Duration executionInterval = new Duration();
>, <Line: +		long time = RollUpJob.calculateEndTime(null, executionInterval, now);
>, <Line: +		assertThat(time, equalTo(now));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_calculatEndTime_datapointNotNull_recentTime() throws ParseException
>, <Line: +	{
>, <Line: +		long now = System.currentTimeMillis();
>, <Line: +		Duration executionInterval = new Duration();
>, <Line: +		DoubleDataPoint dataPoint = new DoubleDataPoint(now - 2000, 10);
>, <Line: +		long time = RollUpJob.calculateEndTime(dataPoint, executionInterval, now);
>, <Line: +		assertThat(time, equalTo(dataPoint.getTimestamp()));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_calculatEndTime_datapointNotNull_tooOld() throws ParseException
>, <Line: +	{
>, <Line: +		long datapointTime = dateFormat.parse("2013-Jan-18 4:59:12.22").getTime();
>, <Line: +		long now = System.currentTimeMillis();
>, <Line: +		Duration executionInterval = new Duration(1, TimeUnit.DAYS);
>, <Line: +		DoubleDataPoint dataPoint = new DoubleDataPoint(datapointTime, 10);
>, <Line: +		long time = RollUpJob.calculateEndTime(dataPoint, executionInterval, now);
>, <Line: +		assertThat(time, equalTo(dateFormat.parse("2013-Jan-22 4:59:12.22").getTime()));
>, <Line: +	}
>, <Line: +	public static class TestDatastore implements Datastore
>, <Line: +	{
>, <Line: +		List<ListDataPointGroup> dataPointGroups = new ArrayList<ListDataPointGroup>();
>, <Line: +		public void clear()
>, <Line: +		{
>, <Line: +			dataPointGroups = new ArrayList<ListDataPointGroup>();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public void close() throws InterruptedException, DatastoreException
>, <Line: +		{
>, <Line: +		}
>, <Line: +		public void putDataPoints(String metricName, ImmutableSortedMap<String, String> tags, List<DataPoint> dataPoints) throws DatastoreException
>, <Line: +		{
>, <Line: +			ListDataPointGroup dataPointGroup = new ListDataPointGroup(metricName);
>, <Line: +			for (Map.Entry<String, String> tag : tags.entrySet())
>, <Line: +			{
>, <Line: +				dataPointGroup.addTag(tag.getKey(), tag.getValue());
>, <Line: +			}
>, <Line: +			for (DataPoint dataPoint : dataPoints)
>, <Line: +			{
>, <Line: +				dataPointGroup.addDataPoint(dataPoint);
>, <Line: +			}
>, <Line: +			dataPointGroups.add(dataPointGroup);
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public void putDataPoint(String metricName, ImmutableSortedMap<String, String> tags, DataPoint dataPoint, int ttl) throws DatastoreException
>, <Line: +		{
>, <Line: +			ListDataPointGroup dataPointGroup = new ListDataPointGroup(metricName);
>, <Line: +			dataPointGroup.addDataPoint(dataPoint);
>, <Line: +			for (Map.Entry<String, String> tag : tags.entrySet())
>, <Line: +			{
>, <Line: +				dataPointGroup.addTag(tag.getKey(), tag.getValue());
>, <Line: +			}
>, <Line: +			dataPointGroups.add(dataPointGroup);
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public Iterable<String> getMetricNames() throws DatastoreException
>, <Line: +		{
>, <Line: +			throw new UnsupportedOperationException();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public Iterable<String> getTagNames() throws DatastoreException
>, <Line: +		{
>, <Line: +			throw new UnsupportedOperationException();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public Iterable<String> getTagValues() throws DatastoreException
>, <Line: +		{
>, <Line: +			throw new UnsupportedOperationException();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public void queryDatabase(DatastoreMetricQuery query, QueryCallback queryCallback) throws DatastoreException
>, <Line: +		{
>, <Line: +			for (ListDataPointGroup dataPointGroup : dataPointGroups)
>, <Line: +			{
>, <Line: +				try
>, <Line: +				{
>, <Line: +					dataPointGroup.sort(query.getOrder());
>, <Line: +					Map<String, String> tags = new HashMap<String, String>();
>, <Line: +					for (String tagName : dataPointGroup.getTagNames())
>, <Line: +					{
>, <Line: +						tags.put(tagName, dataPointGroup.getTagValues(tagName).iterator().next());
>, <Line: +					}
>, <Line: +					DataPoint dataPoint = getNext(dataPointGroup, query);
>, <Line: +					if (dataPoint != null)
>, <Line: +					{
>, <Line: +						queryCallback.startDataPointSet(dataPoint.getDataStoreDataType(), tags);
>, <Line: +						queryCallback.addDataPoint(dataPoint);
>, <Line: +						while (dataPointGroup.hasNext())
>, <Line: +						{
>, <Line: +							DataPoint next = getNext(dataPointGroup, query);
>, <Line: +							if (next != null)
>, <Line: +							{
>, <Line: +								queryCallback.addDataPoint(next);
>, <Line: +							}
>, <Line: +						}
>, <Line: +						queryCallback.endDataPoints();
>, <Line: +					}
>, <Line: +				}
>, <Line: +				catch (IOException e)
>, <Line: +				{
>, <Line: +					throw new DatastoreException(e);
>, <Line: +				}
>, <Line: +			}
>, <Line: +		}
>, <Line: +		private DataPoint getNext(DataPointGroup group, DatastoreMetricQuery query)
>, <Line: +		{
>, <Line: +			DataPoint dataPoint = null;
>, <Line: +			while (group.hasNext())
>, <Line: +			{
>, <Line: +				DataPoint dp = group.next();
>, <Line: +				if (dp.getTimestamp() >= query.getStartTime())
>, <Line: +				{
>, <Line: +					dataPoint = dp;
>, <Line: +					break;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			return dataPoint;
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public void deleteDataPoints(DatastoreMetricQuery deleteQuery) throws
>, <Line: +				DatastoreException
>, <Line: +		{
>, <Line: +			throw new UnsupportedOperationException();
>, <Line: +		}
>, <Line: +		@Override
>, <Line: +		public TagSet queryMetricTags(DatastoreMetricQuery query) throws
>, <Line: +				DatastoreException
>, <Line: +		{
>, <Line: +			throw new UnsupportedOperationException();
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]