[]
[<Line: -package org.kairosdb.core.processingstage;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import org.kairosdb.core.annotation.QueryProcessingStage;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryProcessingStageMetadata;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
>, <Line: -import javax.validation.constraints.NotNull;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.List;
>, <Line: -public abstract class GenericQueryProcessingChain implements QueryProcessingChain
>, <Line: -{
>, <Line: -    private List<QueryProcessingStageFactory<?>> processingChain = new ArrayList<>();
>, <Line: -    private List<QueryProcessingStageMetadata> queryProcessingStageMetadata = new ArrayList<>();
>, <Line: -    /**
>, <Line: -     * Constructor of a generic class to easily generate a processing chain.
>, <Line: -     *
>, <Line: -     * @param processingChain   list of {@link QueryProcessingStageFactory}
>, <Line: -     *                          instances composing the processing chain
>, <Line: -     */
>, <Line: -    protected GenericQueryProcessingChain(@NotNull List<QueryProcessingStageFactory<?>> processingChain)
>, <Line: -    {
>, <Line: -        if (processingChain.size() == 0)
>, <Line: -            throw new IllegalArgumentException("ProcessingChain parameter can't be empty");
>, <Line: -        for (int i = 0; i < processingChain.size(); i++)
>, <Line: -        {
>, <Line: -            QueryProcessingStageFactory<?> factory = processingChain.get(i);
>, <Line: -            ArrayList<QueryProcessorMetadata> queryProcessorMetadata = new ArrayList<>();
>, <Line: -            QueryProcessingStage annotation = factory.getClass().getAnnotation(QueryProcessingStage.class);
>, <Line: -            if (annotation == null)
>, <Line: -                throw new IllegalStateException("Processing Stage class " + factory.getClass().getName() +
>, <Line: -                        " does not have required annotation " + QueryProcessingStage.class.getName());
>, <Line: -            if (factory.getQueryProcessorMetadata() == null)
>, <Line: -                throw new IllegalStateException("Processing Stage class " + factory.getClass().getName() +
>, <Line: -                        " does not have query processor metadata");
>, <Line: -            this.processingChain.add(i, factory);
>, <Line: -            queryProcessorMetadata.addAll(factory.getQueryProcessorMetadata());
>, <Line: -            this.queryProcessingStageMetadata.add(new QueryProcessingStageMetadata(annotation.name(), annotation.label(), queryProcessorMetadata));
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public ImmutableList<QueryProcessingStageFactory<?>> getQueryProcessingStageFactories()
>, <Line: -    {
>, <Line: -        return new ImmutableList.Builder<QueryProcessingStageFactory<?>>().addAll(processingChain).build();
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public QueryProcessingStageFactory<?> getQueryProcessingStageFactory(Class<?> queryProcessorFamily)
>, <Line: -    {
>, <Line: -        for (QueryProcessingStageFactory<?> factory : processingChain)
>, <Line: -            if (factory.getQueryProcessorFamily() == queryProcessorFamily)
>, <Line: -                return factory;
>, <Line: -        return null;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public QueryProcessingStageFactory<?> getQueryProcessingStageFactory(String queryProcessorFamilyName)
>, <Line: -    {
>, <Line: -        for (QueryProcessingStageFactory<?> factory : processingChain)
>, <Line: -        {
>, <Line: -            String factoryName = factory.getClass().getAnnotation(QueryProcessingStage.class).name();
>, <Line: -            if (factoryName.equalsIgnoreCase(queryProcessorFamilyName))
>, <Line: -                return factory;
>, <Line: -        }
>, <Line: -        return null;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public ImmutableList<QueryProcessingStageMetadata> getQueryProcessingChainMetadata()
>, <Line: -    {
>, <Line: -        return new ImmutableList.Builder<QueryProcessingStageMetadata>().addAll(queryProcessingStageMetadata).build();
>, <Line: -    }
>, <Line: -}
>]