[<Line: +		'angular',
>, <Line: +		'app',
>, <Line: +		'lodash',
>, <Line: +		'jquery',
>, <Line: +		'../services/graphite/gfunc',
>, <Line: +	],
>, <Line: +	function (angular, app, _, $, gfunc) {
>, <Line: +		'use strict';
>, <Line: +		angular
>, <Line: +			.module('grafana.directives')
>, <Line: +			.directive('graphiteAddFunc', function ($compile) {
>, <Line: +				var inputTemplate = '<input type="text"' +
>, <Line: +					' class="grafana-target-segment-input input-medium grafana-target-segment-input"' +
>, <Line: +					' spellcheck="false" style="display:none"></input>';
>, <Line: +				var buttonTemplate = '<a  class="grafana-target-segment grafana-target-function dropdown-toggle"' +
>, <Line: +					' tabindex="1" gf-dropdown="functionMenu" data-toggle="dropdown"' +
>, <Line: +					' data-placement="top"><i class="icon-plus"></i></a>';
>, <Line: +				return {
>, <Line: +					link: function ($scope, elem) {
>, <Line: +						var categories = gfunc.getCategories();
>, <Line: +						var allFunctions = getAllFunctionNames(categories);
>, <Line: +						$scope.functionMenu = createFunctionDropDownMenu(categories);
>, <Line: +						var $input = $(inputTemplate);
>, <Line: +						var $button = $(buttonTemplate);
>, <Line: +						$input.appendTo(elem);
>, <Line: +						$button.appendTo(elem);
>, <Line: +						$input.attr('data-provide', 'typeahead');
>, <Line: +						$input.typeahead({
>, <Line: +							source: allFunctions,
>, <Line: +							minLength: 1,
>, <Line: +							items: 10,
>, <Line: +							updater: function (value) {
>, <Line: +								var funcDef = gfunc.getFuncDef(value);
>, <Line: +								if (!funcDef) {
>, <Line: +									// try find close match
>, <Line: +									value = value.toLowerCase();
>, <Line: +									funcDef = _.find(allFunctions, function (funcName) {
>, <Line: +										return funcName.toLowerCase().indexOf(value) === 0;
>, <Line: +									});
>, <Line: +									if (!funcDef) {
>, <Line: +										return;
>, <Line: +									}
>, <Line: +								}
>, <Line: +								$scope.$apply(function () {
>, <Line: +									$scope.addFunction(funcDef);
>, <Line: +								});
>, <Line: +								$input.trigger('blur');
>, <Line: +								return '';
>, <Line: +							}
>, <Line: +						});
>, <Line: +						$button.click(function () {
>, <Line: +							$button.hide();
>, <Line: +							$input.show();
>, <Line: +							$input.focus();
>, <Line: +						});
>, <Line: +						$input.keyup(function () {
>, <Line: +							elem.toggleClass('open', $input.val() === '');
>, <Line: +						});
>, <Line: +						$input.blur(function () {
>, <Line: +							// clicking the function dropdown menu wont
>, <Line: +							// work if you remove class at once
>, <Line: +							setTimeout(function () {
>, <Line: +								$input.val('');
>, <Line: +								$input.hide();
>, <Line: +								$button.show();
>, <Line: +								elem.removeClass('open');
>, <Line: +							}, 200);
>, <Line: +						});
>, <Line: +						$compile(elem.contents())($scope);
>, <Line: +					}
>, <Line: +				};
>, <Line: +			});
>, <Line: +		function getAllFunctionNames(categories) {
>, <Line: +			return _.reduce(categories, function (list, category) {
>, <Line: +				_.each(category, function (func) {
>, <Line: +					list.push(func.name);
>, <Line: +				});
>, <Line: +				return list;
>, <Line: +			}, []);
>, <Line: +		}
>, <Line: +		function createFunctionDropDownMenu(categories) {
>, <Line: +			return _.map(categories, function (list, category) {
>, <Line: +				return {
>, <Line: +					text: category,
>, <Line: +					submenu: _.map(list, function (value) {
>, <Line: +						return {
>, <Line: +							text: value.name,
>, <Line: +							click: "addFunction('" + value.name + "')",
>, <Line: +						};
>, <Line: +					})
>, <Line: +				};
>, <Line: +			});
>, <Line: +		}
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'app',
>, <Line: -  'lodash',
>, <Line: -  'jquery',
>, <Line: -  '../services/graphite/gfunc',
>, <Line: -],
>, <Line: -function (angular, app, _, $, gfunc) {
>, <Line: -  'use strict';
>, <Line: -  angular
>, <Line: -    .module('grafana.directives')
>, <Line: -    .directive('graphiteAddFunc', function($compile) {
>, <Line: -      var inputTemplate = '<input type="text"'+
>, <Line: -                            ' class="grafana-target-segment-input input-medium grafana-target-segment-input"' +
>, <Line: -                            ' spellcheck="false" style="display:none"></input>';
>, <Line: -      var buttonTemplate = '<a  class="grafana-target-segment grafana-target-function dropdown-toggle"' +
>, <Line: -                              ' tabindex="1" gf-dropdown="functionMenu" data-toggle="dropdown"' +
>, <Line: -                              ' data-placement="top"><i class="icon-plus"></i></a>';
>, <Line: -      return {
>, <Line: -        link: function($scope, elem) {
>, <Line: -          var categories = gfunc.getCategories();
>, <Line: -          var allFunctions = getAllFunctionNames(categories);
>, <Line: -          $scope.functionMenu = createFunctionDropDownMenu(categories);
>, <Line: -          var $input = $(inputTemplate);
>, <Line: -          var $button = $(buttonTemplate);
>, <Line: -          $input.appendTo(elem);
>, <Line: -          $button.appendTo(elem);
>, <Line: -          $input.attr('data-provide', 'typeahead');
>, <Line: -          $input.typeahead({
>, <Line: -            source: allFunctions,
>, <Line: -            minLength: 1,
>, <Line: -            items: 10,
>, <Line: -            updater: function (value) {
>, <Line: -              var funcDef = gfunc.getFuncDef(value);
>, <Line: -              if (!funcDef) {
>, <Line: -                // try find close match
>, <Line: -                value = value.toLowerCase();
>, <Line: -                funcDef = _.find(allFunctions, function(funcName) {
>, <Line: -                  return funcName.toLowerCase().indexOf(value) === 0;
>, <Line: -                });
>, <Line: -                if (!funcDef) { return; }
>, <Line: -              }
>, <Line: -              $scope.$apply(function() {
>, <Line: -                $scope.addFunction(funcDef);
>, <Line: -              });
>, <Line: -              $input.trigger('blur');
>, <Line: -              return '';
>, <Line: -            }
>, <Line: -          });
>, <Line: -          $button.click(function() {
>, <Line: -            $button.hide();
>, <Line: -            $input.show();
>, <Line: -            $input.focus();
>, <Line: -          });
>, <Line: -          $input.keyup(function() {
>, <Line: -            elem.toggleClass('open', $input.val() === '');
>, <Line: -          });
>, <Line: -          $input.blur(function() {
>, <Line: -            // clicking the function dropdown menu wont
>, <Line: -            // work if you remove class at once
>, <Line: -            setTimeout(function() {
>, <Line: -              $input.val('');
>, <Line: -              $input.hide();
>, <Line: -              $button.show();
>, <Line: -              elem.removeClass('open');
>, <Line: -            }, 200);
>, <Line: -          });
>, <Line: -          $compile(elem.contents())($scope);
>, <Line: -        }
>, <Line: -      };
>, <Line: -    });
>, <Line: -  function getAllFunctionNames(categories) {
>, <Line: -    return _.reduce(categories, function(list, category) {
>, <Line: -      _.each(category, function(func) {
>, <Line: -        list.push(func.name);
>, <Line: -      });
>, <Line: -      return list;
>, <Line: -    }, []);
>, <Line: -  }
>, <Line: -  function createFunctionDropDownMenu(categories) {
>, <Line: -    return _.map(categories, function(list, category) {
>, <Line: -      return {
>, <Line: -        text: category,
>, <Line: -        submenu: _.map(list, function(value) {
>, <Line: -          return {
>, <Line: -            text: value.name,
>, <Line: -            click: "addFunction('" + value.name + "')",
>, <Line: -          };
>, <Line: -        })
>, <Line: -      };
>, <Line: -    });
>, <Line: -  }
>, <Line: -});
>]