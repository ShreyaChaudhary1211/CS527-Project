[<Line: +<div ng-controller="TemplateEditorCtrl" ng-init="init()">
>, <Line: +	<div class="dashboard-editor-header">
>, <Line: +			<div ng-repeat="tab in ['Variables', 'Add', 'Edit']"
>, <Line: +				 data-title="{{tab}}">
>, <Line: +								<a ng-click="edit(variable)"
>, <Line: +								   class="btn btn-success btn-mini">
>, <Line: +							<td style="width: 1%"><i
>, <Line: +									ng-click="_.move(variables,$index,$index-1)"
>, <Line: +									ng-hide="$first"
>, <Line: +									class="pointer icon-arrow-up"></i></td>
>, <Line: +							<td style="width: 1%"><i
>, <Line: +									ng-click="_.move(variables,$index,$index+1)"
>, <Line: +									ng-hide="$last"
>, <Line: +									class="pointer icon-arrow-down"></i></td>
>, <Line: +								<a ng-click="removeVariable(variable)"
>, <Line: +								   class="btn btn-danger btn-mini">
>, <Line: +							<input type="text" class="input-medium"
>, <Line: +								   ng-model='current.name' placeholder="name"
>, <Line: +								   required></input>
>, <Line: +							<select class="input-medium" ng-model="current.type"
>, <Line: +									ng-options="f for f in ['query', 'interval', 'custom']"
>, <Line: +									ng-change="typeChanged()"></select>
>, <Line: +						<div class="editor-option"
>, <Line: +							 ng-show="current.type === 'query'">
>, <Line: +							<select class="input input-medium"
>, <Line: +									ng-model="current.datasource"
>, <Line: +									ng-options="f.value as f.name for f in datasources"></select>
>, <Line: +						<editor-opt-bool text="Refresh on load"
>, <Line: +										 show-if="current.type === 'query'"
>, <Line: +										 tip="Check if you want values to be updated on dashboard load, will slow down dashboard load time"
>, <Line: +										 model="current.refresh"></editor-opt-bool>
>, <Line: +								<input type="text" class="input-xxlarge"
>, <Line: +									   ng-model='current.query'
>, <Line: +									   ng-blur="runQuery()"
>, <Line: +									   placeholder="name"></input>
>, <Line: +							<editor-opt-bool text="Include auto interval"
>, <Line: +											 model="current.auto"
>, <Line: +											 change="runQuery()"></editor-opt-bool>
>, <Line: +								<label class="small">Auto interval steps
>, <Line: +									<tip>How many steps, roughly, the interval
>, <Line: +										is rounded and will not always match
>, <Line: +										this count
>, <Line: +										<tip>
>, <Line: +								</label>
>, <Line: +								<select class="input-mini"
>, <Line: +										ng-model="current.auto_count"
>, <Line: +										ng-options="f for f in [3,5,10,30,50,100,200]"
>, <Line: +										ng-change="runQuery()"></select>
>, <Line: +								<label class="small">Values seperated by
>, <Line: +									comma</label>
>, <Line: +								<input type="text" class="input-xxlarge"
>, <Line: +									   ng-model='current.query'
>, <Line: +									   ng-blur="runQuery()"
>, <Line: +									   placeholder="1, 10, 20, myvalue"></input>
>, <Line: +								<label class="small">Variable values
>, <Line: +									query</label>
>, <Line: +								<input type="text" class="input-xxlarge"
>, <Line: +									   ng-model='current.query'
>, <Line: +									   placeholder="apps.servers.*"></input>
>, <Line: +								<button class="btn btn-small btn-success"
>, <Line: +										ng-click="runQuery()"
>, <Line: +										bs-tooltip="'Execute query'"
>, <Line: +										data-placement="right"><i
>, <Line: +										class="icon-play"></i></button>
>, <Line: +								<label class="small">regex (optional, if you
>, <Line: +									want to extract part of a series name or
>, <Line: +									metric node segment)</label>
>, <Line: +								<input type="text" class="input-xxlarge"
>, <Line: +									   ng-model='current.regex'
>, <Line: +									   placeholder="/.*-(.*)-.*/"></input>
>, <Line: +								<button class="btn btn-small btn-success"
>, <Line: +										ng-click="runQuery()"
>, <Line: +										bs-tooltip="'execute query'"
>, <Line: +										data-placement="right"><i
>, <Line: +										class="icon-play"></i></button>
>, <Line: +							<editor-opt-bool text="All option"
>, <Line: +											 model="current.includeAll"
>, <Line: +											 change="runQuery()"></editor-opt-bool>
>, <Line: +							<div class="editor-option"
>, <Line: +								 ng-show="current.includeAll">
>, <Line: +								<select class="input-medium"
>, <Line: +										ng-model="current.allFormat"
>, <Line: +										ng-change="runQuery()"
>, <Line: +										ng-options="f for f in ['glob', 'wildcard', 'regex wildcard', 'regex values']"></select>
>, <Line: +							<div class="editor-option"
>, <Line: +								 ng-show="current.includeAll">
>, <Line: +								<input type="text" class="input-xlarge"
>, <Line: +									   ng-model='current.options[0].value'></input>
>, <Line: +						<div class="editor-option">
>, <Line: +							<label class="small">Variable values (showing
>, <Line: +								20/{{current.options.length}})</label>
>, <Line: +		<button type="button" class="btn btn-success pull-left"
>, <Line: +				ng-show="editor.index === 2" ng-click="update();">Update
>, <Line: +		</button>
>, <Line: +		<button type="button" class="btn btn-success pull-left"
>, <Line: +				ng-show="editor.index === 1" ng-click="add();">Add
>, <Line: +		</button>
>, <Line: +		<button type="button" class="btn btn-success pull-right"
>, <Line: +				ng-click="dismiss();">Close
>, <Line: +		</button>
>, <Line: +<!-- 	<tip class="info&#45;box"> -->
>, <Line: +<!-- 	<i class="icon&#45;question&#45;sign"></i> -->
>, <Line: +<!-- 	The templating feature in Grafana lets easily create and manage templated queries. Templated queries use [[replacement]] syntax -->
>, <Line: +<!-- 	to replace a part of your metric key or query. By using this feature you can make your dashboards more generic. You can for example create -->
>, <Line: +<!-- 	a query replacement for your cluster name or server name. Then use that replacement in your metric queries and change -->
>, <Line: +<!-- 	it globably for all graphs on the dashboard. -->
>, <Line: +<!-- 	<br/><br/> -->
>, <Line: +<!-- 	</tip> -->
>, <Line: +<!-- </div> -->
>]
[<Line: -<div ng-controller="TemplateEditorCtrl" ng-init="init()"> <div class="dashboard-editor-header">
>, <Line: -			<div ng-repeat="tab in ['Variables', 'Add', 'Edit']" data-title="{{tab}}">
>, <Line: -								<a ng-click="edit(variable)" class="btn btn-success btn-mini">
>, <Line: -							<td style="width: 1%"><i ng-click="_.move(variables,$index,$index-1)" ng-hide="$first" class="pointer icon-arrow-up"></i></td>
>, <Line: -							<td style="width: 1%"><i ng-click="_.move(variables,$index,$index+1)" ng-hide="$last" class="pointer icon-arrow-down"></i></td>
>, <Line: -								<a ng-click="removeVariable(variable)" class="btn btn-danger btn-mini">
>, <Line: -							<input type="text" class="input-medium" ng-model='current.name' placeholder="name" required></input>
>, <Line: -							<select class="input-medium" ng-model="current.type" ng-options="f for f in ['query', 'interval', 'custom']" ng-change="typeChanged()"></select>
>, <Line: -						<div class="editor-option" ng-show="current.type === 'query'">
>, <Line: -							<select class="input input-medium" ng-model="current.datasource" ng-options="f.value as f.name for f in datasources"></select>
>, <Line: -						<editor-opt-bool text="Refresh on load" show-if="current.type === 'query'"
>, <Line: -						                 tip="Check if you want values to be updated on dashboard load, will slow down dashboard load time"
>, <Line: -						                 model="current.refresh"></editor-opt-bool>
>, <Line: -								<input type="text" class="input-xxlarge" ng-model='current.query' ng-blur="runQuery()" placeholder="name"></input>
>, <Line: -							<editor-opt-bool text="Include auto interval" model="current.auto" change="runQuery()"></editor-opt-bool>
>, <Line: -								<label class="small">Auto interval steps <tip>How many steps, roughly, the interval is rounded and will not always match this count<tip></label>
>, <Line: -								<select class="input-mini" ng-model="current.auto_count" ng-options="f for f in [3,5,10,30,50,100,200]" ng-change="runQuery()"></select>
>, <Line: -								<label class="small">Values seperated by comma</label>
>, <Line: -								<input type="text" class="input-xxlarge" ng-model='current.query' ng-blur="runQuery()" placeholder="1, 10, 20, myvalue"></input>
>, <Line: -								<label class="small">Variable values query</label>
>, <Line: -								<input type="text" class="input-xxlarge" ng-model='current.query' placeholder="apps.servers.*"></input>
>, <Line: -								<button class="btn btn-small btn-success" ng-click="runQuery()" bs-tooltip="'Execute query'" data-placement="right"><i class="icon-play"></i></button>
>, <Line: -								<label class="small">regex (optional, if you want to extract part of a series name or metric node segment)</label>
>, <Line: -								<input type="text" class="input-xxlarge" ng-model='current.regex' placeholder="/.*-(.*)-.*/"></input>
>, <Line: -								<button class="btn btn-small btn-success" ng-click="runQuery()" bs-tooltip="'execute query'" data-placement="right"><i class="icon-play"></i></button>
>, <Line: -							<editor-opt-bool text="All option" model="current.includeAll" change="runQuery()"></editor-opt-bool>
>, <Line: -							<div class="editor-option" ng-show="current.includeAll">
>, <Line: -								<select class="input-medium" ng-model="current.allFormat" ng-change="runQuery()" ng-options="f for f in ['glob', 'wildcard', 'regex wildcard', 'regex values']"></select>
>, <Line: -							<div class="editor-option" ng-show="current.includeAll">
>, <Line: -								<input type="text" class="input-xlarge" ng-model='current.options[0].value'></input>
>, <Line: -						<div class="editor-option" >
>, <Line: -							<label class="small">Variable values (showing 20/{{current.options.length}})</label>
>, <Line: -		<button type="button" class="btn btn-success pull-left" ng-show="editor.index === 2" ng-click="update();">Update</button>
>, <Line: -		<button type="button" class="btn btn-success pull-left" ng-show="editor.index === 1" ng-click="add();">Add</button>
>, <Line: -		<button type="button" class="btn btn-success pull-right" ng-click="dismiss();">Close</button>
>, <Line: -	<!-- 	<tip class="info&#45;box"> -->
>, <Line: -	<!-- 	<i class="icon&#45;question&#45;sign"></i> -->
>, <Line: -	<!-- 	The templating feature in Grafana lets easily create and manage templated queries. Templated queries use [[replacement]] syntax -->
>, <Line: -	<!-- 	to replace a part of your metric key or query. By using this feature you can make your dashboards more generic. You can for example create -->
>, <Line: -	<!-- 	a query replacement for your cluster name or server name. Then use that replacement in your metric queries and change -->
>, <Line: -	<!-- 	it globably for all graphs on the dashboard. -->
>, <Line: -	<!-- 	<br/><br/> -->
>, <Line: -	<!-- 	</tip> -->
>, <Line: -	<!-- </div> -->
>]