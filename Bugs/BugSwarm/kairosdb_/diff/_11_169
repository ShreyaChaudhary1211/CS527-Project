[<Line: +		'angular',
>, <Line: +		'jquery',
>, <Line: +		'bootstrap-tagsinput'
>, <Line: +	],
>, <Line: +	function (angular, $) {
>, <Line: +		'use strict';
>, <Line: +		angular
>, <Line: +			.module('grafana.directives')
>, <Line: +			.directive('bootstrapTagsinput', function () {
>, <Line: +				function getItemProperty(scope, property) {
>, <Line: +					if (!property) {
>, <Line: +						return undefined;
>, <Line: +					}
>, <Line: +					if (angular.isFunction(scope.$parent[property])) {
>, <Line: +						return scope.$parent[property];
>, <Line: +					}
>, <Line: +					return function (item) {
>, <Line: +						return item[property];
>, <Line: +					};
>, <Line: +				}
>, <Line: +				return {
>, <Line: +					restrict: 'EA',
>, <Line: +					scope: {
>, <Line: +						model: '=ngModel'
>, <Line: +					},
>, <Line: +					template: '<select multiple></select>',
>, <Line: +					replace: false,
>, <Line: +					link: function (scope, element, attrs) {
>, <Line: +						if (!angular.isArray(scope.model)) {
>, <Line: +							scope.model = [];
>, <Line: +						}
>, <Line: +						var select = $('select', element);
>, <Line: +						if (attrs.placeholder) {
>, <Line: +							select.attr('placeholder', attrs.placeholder);
>, <Line: +						}
>, <Line: +						select.tagsinput({
>, <Line: +							typeahead: {
>, <Line: +								source: angular.isFunction(scope.$parent[attrs.typeaheadSource]) ? scope.$parent[attrs.typeaheadSource] : null
>, <Line: +							},
>, <Line: +							itemValue: getItemProperty(scope, attrs.itemvalue),
>, <Line: +							itemText: getItemProperty(scope, attrs.itemtext),
>, <Line: +							tagClass: angular.isFunction(scope.$parent[attrs.tagclass]) ?
>, <Line: +								scope.$parent[attrs.tagclass] : function () {
>, <Line: +								return attrs.tagclass;
>, <Line: +							}
>, <Line: +						});
>, <Line: +						select.on('itemAdded', function (event) {
>, <Line: +							if (scope.model.indexOf(event.item) === -1) {
>, <Line: +								scope.model.push(event.item);
>, <Line: +							}
>, <Line: +						});
>, <Line: +						select.on('itemRemoved', function (event) {
>, <Line: +							var idx = scope.model.indexOf(event.item);
>, <Line: +							if (idx !== -1) {
>, <Line: +								scope.model.splice(idx, 1);
>, <Line: +							}
>, <Line: +						});
>, <Line: +						scope.$watch("model", function () {
>, <Line: +							if (!angular.isArray(scope.model)) {
>, <Line: +								scope.model = [];
>, <Line: +							}
>, <Line: +							select.tagsinput('removeAll');
>, <Line: +							for (var i = 0; i < scope.model.length; i++) {
>, <Line: +								select.tagsinput('add', scope.model[i]);
>, <Line: +							}
>, <Line: +						}, true);
>, <Line: +					}
>, <Line: +				};
>, <Line: +			});
>, <Line: +		angular
>, <Line: +			.module('grafana.directives')
>, <Line: +			.directive('gfDropdown', function ($parse, $compile, $timeout) {
>, <Line: +				function buildTemplate(items, placement) {
>, <Line: +					var upclass = placement === 'top' ? 'dropup' : '';
>, <Line: +					var ul = [
>, <Line: +						'<ul class="dropdown-menu ' + upclass + '" role="menu" aria-labelledby="drop1">',
>, <Line: +						'</ul>'
>, <Line: +					];
>, <Line: +					angular.forEach(items, function (item, index) {
>, <Line: +						if (item.divider) {
>, <Line: +							return ul.splice(index + 1, 0, '<li class="divider"></li>');
>, <Line: +						}
>, <Line: +						var li = '<li' + (item.submenu && item.submenu.length ? ' class="dropdown-submenu"' : '') + '>' +
>, <Line: +							'<a tabindex="-1" ng-href="' + (item.href || '') + '"' + (item.click ? ' ng-click="' + item.click + '"' : '') +
>, <Line: +							(item.target ? ' target="' + item.target + '"' : '') + (item.method ? ' data-method="' + item.method + '"' : '') +
>, <Line: +							(item.configModal ? ' dash-editor-link="' + item.configModal + '"' : "") +
>, <Line: +							'>' + (item.text || '') + '</a>';
>, <Line: +						if (item.submenu && item.submenu.length) {
>, <Line: +							li += buildTemplate(item.submenu).join('\n');
>, <Line: +						}
>, <Line: +						li += '</li>';
>, <Line: +						ul.splice(index + 1, 0, li);
>, <Line: +					});
>, <Line: +					return ul;
>, <Line: +				}
>, <Line: +				return {
>, <Line: +					restrict: 'EA',
>, <Line: +					scope: true,
>, <Line: +					link: function postLink(scope, iElement, iAttrs) {
>, <Line: +						var getter = $parse(iAttrs.gfDropdown), items = getter(scope);
>, <Line: +						$timeout(function () {
>, <Line: +							var placement = iElement.data('placement');
>, <Line: +							var dropdown = angular.element(buildTemplate(items, placement).join(''));
>, <Line: +							dropdown.insertAfter(iElement);
>, <Line: +							$compile(iElement.next('ul.dropdown-menu'))(scope);
>, <Line: +						});
>, <Line: +						iElement.addClass('dropdown-toggle').attr('data-toggle', 'dropdown');
>, <Line: +					}
>, <Line: +				};
>, <Line: +			});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'jquery',
>, <Line: -  'bootstrap-tagsinput'
>, <Line: -],
>, <Line: -function (angular, $) {
>, <Line: -  'use strict';
>, <Line: -  angular
>, <Line: -    .module('grafana.directives')
>, <Line: -    .directive('bootstrapTagsinput', function() {
>, <Line: -      function getItemProperty(scope, property) {
>, <Line: -        if (!property) {
>, <Line: -          return undefined;
>, <Line: -        }
>, <Line: -        if (angular.isFunction(scope.$parent[property])) {
>, <Line: -          return scope.$parent[property];
>, <Line: -        }
>, <Line: -        return function(item) {
>, <Line: -          return item[property];
>, <Line: -        };
>, <Line: -      }
>, <Line: -      return {
>, <Line: -        restrict: 'EA',
>, <Line: -        scope: {
>, <Line: -          model: '=ngModel'
>, <Line: -        },
>, <Line: -        template: '<select multiple></select>',
>, <Line: -        replace: false,
>, <Line: -        link: function(scope, element, attrs) {
>, <Line: -          if (!angular.isArray(scope.model)) {
>, <Line: -            scope.model = [];
>, <Line: -          }
>, <Line: -          var select = $('select', element);
>, <Line: -          if (attrs.placeholder) {
>, <Line: -            select.attr('placeholder', attrs.placeholder);
>, <Line: -          }
>, <Line: -          select.tagsinput({
>, <Line: -            typeahead : {
>, <Line: -              source   : angular.isFunction(scope.$parent[attrs.typeaheadSource]) ? scope.$parent[attrs.typeaheadSource] : null
>, <Line: -            },
>, <Line: -            itemValue: getItemProperty(scope, attrs.itemvalue),
>, <Line: -            itemText : getItemProperty(scope, attrs.itemtext),
>, <Line: -            tagClass : angular.isFunction(scope.$parent[attrs.tagclass]) ?
>, <Line: -              scope.$parent[attrs.tagclass] : function() { return attrs.tagclass; }
>, <Line: -          });
>, <Line: -          select.on('itemAdded', function(event) {
>, <Line: -            if (scope.model.indexOf(event.item) === -1) {
>, <Line: -              scope.model.push(event.item);
>, <Line: -            }
>, <Line: -          });
>, <Line: -          select.on('itemRemoved', function(event) {
>, <Line: -            var idx = scope.model.indexOf(event.item);
>, <Line: -            if (idx !== -1) {
>, <Line: -              scope.model.splice(idx, 1);
>, <Line: -            }
>, <Line: -          });
>, <Line: -          scope.$watch("model", function() {
>, <Line: -            if (!angular.isArray(scope.model)) {
>, <Line: -              scope.model = [];
>, <Line: -            }
>, <Line: -            select.tagsinput('removeAll');
>, <Line: -            for (var i = 0; i < scope.model.length; i++) {
>, <Line: -              select.tagsinput('add', scope.model[i]);
>, <Line: -            }
>, <Line: -          }, true);
>, <Line: -        }
>, <Line: -      };
>, <Line: -    });
>, <Line: -  angular
>, <Line: -    .module('grafana.directives')
>, <Line: -    .directive('gfDropdown', function ($parse, $compile, $timeout) {
>, <Line: -      function buildTemplate(items, placement) {
>, <Line: -        var upclass = placement === 'top' ? 'dropup' : '';
>, <Line: -        var ul = [
>, <Line: -          '<ul class="dropdown-menu ' + upclass + '" role="menu" aria-labelledby="drop1">',
>, <Line: -          '</ul>'
>, <Line: -        ];
>, <Line: -        angular.forEach(items, function (item, index) {
>, <Line: -          if (item.divider) {
>, <Line: -            return ul.splice(index + 1, 0, '<li class="divider"></li>');
>, <Line: -          }
>, <Line: -          var li = '<li' + (item.submenu && item.submenu.length ? ' class="dropdown-submenu"' : '') + '>' +
>, <Line: -            '<a tabindex="-1" ng-href="' + (item.href || '') + '"' + (item.click ? ' ng-click="' + item.click + '"' : '') +
>, <Line: -              (item.target ? ' target="' + item.target + '"' : '') + (item.method ? ' data-method="' + item.method + '"' : '') +
>, <Line: -              (item.configModal ? ' dash-editor-link="' + item.configModal + '"' : "") +
>, <Line: -              '>' + (item.text || '') + '</a>';
>, <Line: -          if (item.submenu && item.submenu.length) {
>, <Line: -            li += buildTemplate(item.submenu).join('\n');
>, <Line: -          }
>, <Line: -          li += '</li>';
>, <Line: -          ul.splice(index + 1, 0, li);
>, <Line: -        });
>, <Line: -        return ul;
>, <Line: -      }
>, <Line: -      return {
>, <Line: -        restrict: 'EA',
>, <Line: -        scope: true,
>, <Line: -        link: function postLink(scope, iElement, iAttrs) {
>, <Line: -          var getter = $parse(iAttrs.gfDropdown), items = getter(scope);
>, <Line: -          $timeout(function () {
>, <Line: -            var placement = iElement.data('placement');
>, <Line: -            var dropdown = angular.element(buildTemplate(items, placement).join(''));
>, <Line: -            dropdown.insertAfter(iElement);
>, <Line: -            $compile(iElement.next('ul.dropdown-menu'))(scope);
>, <Line: -          });
>, <Line: -          iElement.addClass('dropdown-toggle').attr('data-toggle', 'dropdown');
>, <Line: -        }
>, <Line: -      };
>, <Line: -    });
>, <Line: -});
>]