[]
[<Line: -package org.kairosdb.core.processingstage;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import com.google.inject.Binding;
>, <Line: -import com.google.inject.Injector;
>, <Line: -import com.google.inject.Key;
>, <Line: -import org.kairosdb.core.annotation.QueryProcessor;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryPropertyMetadata;
>, <Line: -import javax.validation.constraints.NotNull;
>, <Line: -import java.lang.reflect.InvocationTargetException;
>, <Line: -import java.util.*;
>, <Line: -import static org.kairosdb.core.annotation.AnnotationUtils.getPropertyMetadata;
>, <Line: -public abstract class GenericQueryProcessingStageFactory<QueryProcessorFamily> implements QueryProcessingStageFactory<QueryProcessorFamily>
>, <Line: -{
>, <Line: -    private Class<QueryProcessorFamily> queryProcessorFamily;
>, <Line: -    protected Map<String, Class<QueryProcessorFamily>> queryProcessors = new HashMap<>();
>, <Line: -    protected List<QueryProcessorMetadata> queryProcessorMetadata = new ArrayList<>();
>, <Line: -    protected Injector injector;
>, <Line: -    /**
>, <Line: -     * Constructor of a generic class to easily generate a processing stage factory.
>, <Line: -     *
>, <Line: -     * @param injector                      Guice {@link Injector} instance needed for binding
>, <Line: -     * @param queryProcessorFamily          query processor family class
>, <Line: -     */
>, <Line: -    @SuppressWarnings("unchecked")
>, <Line: -    protected GenericQueryProcessingStageFactory(@NotNull Injector injector, @NotNull Class<QueryProcessorFamily> queryProcessorFamily)
>, <Line: -            throws InvocationTargetException, NoSuchMethodException, ClassNotFoundException, IllegalAccessException
>, <Line: -    {
>, <Line: -        this.injector = injector;
>, <Line: -        this.queryProcessorFamily = queryProcessorFamily;
>, <Line: -        Map<Key<?>, Binding<?>> bindings = injector.getAllBindings();
>, <Line: -        for (Key<?> key : bindings.keySet())
>, <Line: -        {
>, <Line: -            Class<?> bindingClass = key.getTypeLiteral().getRawType();
>, <Line: -            if (queryProcessorFamily.isAssignableFrom(bindingClass))
>, <Line: -            {
>, <Line: -                QueryProcessor annotation = bindingClass.getAnnotation(QueryProcessor.class);
>, <Line: -                if (annotation == null)
>, <Line: -                    throw new IllegalStateException("Processor class " + bindingClass.getName() +
>, <Line: -                            " does not have required annotation " + QueryProcessor.class.getName());
>, <Line: -                queryProcessors.put(annotation.name(), (Class<QueryProcessorFamily>) bindingClass);
>, <Line: -                List<QueryPropertyMetadata> properties = getPropertyMetadata(bindingClass);
>, <Line: -                queryProcessorMetadata.add(new QueryProcessorMetadata(annotation.name(), labelizeQueryProcessor(annotation), annotation.description(), properties));
>, <Line: -            }
>, <Line: -        }
>, <Line: -        queryProcessorMetadata.sort(Comparator.comparing(QueryProcessorMetadata::getName));
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public Class<QueryProcessorFamily> getQueryProcessorFamily() { return queryProcessorFamily; }
>, <Line: -    @Override
>, <Line: -    public ImmutableList<QueryProcessorMetadata> getQueryProcessorMetadata()
>, <Line: -    {
>, <Line: -        return new ImmutableList.Builder<QueryProcessorMetadata>().addAll(queryProcessorMetadata).build();
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public QueryProcessorFamily createQueryProcessor(String name)
>, <Line: -    {
>, <Line: -        Class<QueryProcessorFamily> processClass = queryProcessors.get(name);
>, <Line: -        if (processClass == null)
>, <Line: -            return (null);
>, <Line: -        return (injector.getInstance(processClass));
>, <Line: -    }
>, <Line: -    private String labelizeQueryProcessor(QueryProcessor annotation)
>, <Line: -    {
>, <Line: -        if (!annotation.label().isEmpty())
>, <Line: -            return annotation.label();
>, <Line: -        StringBuilder label = new StringBuilder();
>, <Line: -        for (String word : annotation.name().toLowerCase().split("_"))
>, <Line: -        {
>, <Line: -            label.append(word.substring(0, 1).toUpperCase());
>, <Line: -            label.append(word.substring(1));
>, <Line: -            label.append(" ");
>, <Line: -        }
>, <Line: -        return label.toString().trim();
>, <Line: -    }
>, <Line: -}
>]