[<Line: +		'angular',
>, <Line: +		'jquery',
>, <Line: +		'kbn',
>, <Line: +		'lodash',
>, <Line: +		'moment',
>, <Line: +		'../timer',
>, <Line: +	],
>, <Line: +	function (angular, $, kbn, _, moment) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.services');
>, <Line: +		module.factory('dashboardSrv', function ($rootScope) {
>, <Line: +			function DashboardModel(data) {
>, <Line: +				if (!data) {
>, <Line: +					data = {};
>, <Line: +				}
>, <Line: +				this.id = data.id || null;
>, <Line: +				this.title = data.title || 'No Title';
>, <Line: +				this.originalTitle = this.title;
>, <Line: +				this.tags = data.tags || [];
>, <Line: +				this.style = data.style || "dark";
>, <Line: +				this.timezone = data.timezone || 'browser';
>, <Line: +				this.editable = data.editable === false ? false : true;
>, <Line: +				this.hideControls = data.hideControls || false;
>, <Line: +				this.sharedCrosshair = data.sharedCrosshair || false;
>, <Line: +				this.rows = data.rows || [];
>, <Line: +				this.nav = data.nav || [];
>, <Line: +				this.time = data.time || {from: 'now-6h', to: 'now'};
>, <Line: +				this.templating = this._ensureListExist(data.templating);
>, <Line: +				this.annotations = this._ensureListExist(data.annotations);
>, <Line: +				this.refresh = data.refresh;
>, <Line: +				this.version = data.version || 0;
>, <Line: +				this.hideAllLegends = data.hideAllLegends || false;
>, <Line: +				if (this.nav.length === 0) {
>, <Line: +					this.nav.push({type: 'timepicker'});
>, <Line: +				}
>, <Line: +				this._updateSchema(data);
>, <Line: +			}
>, <Line: +			var p = DashboardModel.prototype;
>, <Line: +			p._ensureListExist = function (data) {
>, <Line: +				if (!data) {
>, <Line: +					data = {};
>, <Line: +				}
>, <Line: +				if (!data.list) {
>, <Line: +					data.list = [];
>, <Line: +				}
>, <Line: +				return data;
>, <Line: +			};
>, <Line: +			p.getNextPanelId = function () {
>, <Line: +				var i, j, row, panel, max = 0;
>, <Line: +				for (i = 0; i < this.rows.length; i++) {
>, <Line: +					row = this.rows[i];
>, <Line: +					for (j = 0; j < row.panels.length; j++) {
>, <Line: +						panel = row.panels[j];
>, <Line: +						if (panel.id > max) {
>, <Line: +							max = panel.id;
>, <Line: +						}
>, <Line: +					}
>, <Line: +				}
>, <Line: +				return max + 1;
>, <Line: +			};
>, <Line: +			p.rowSpan = function (row) {
>, <Line: +				return _.reduce(row.panels, function (p, v) {
>, <Line: +					return p + v.span;
>, <Line: +				}, 0);
>, <Line: +			};
>, <Line: +			p.add_panel = function (panel, row) {
>, <Line: +				var rowSpan = this.rowSpan(row);
>, <Line: +				var panelCount = row.panels.length;
>, <Line: +				var space = (12 - rowSpan) - panel.span;
>, <Line: +				panel.id = this.getNextPanelId();
>, <Line: +				// try to make room of there is no space left
>, <Line: +				if (space <= 0) {
>, <Line: +					if (panelCount === 1) {
>, <Line: +						row.panels[0].span = 6;
>, <Line: +						panel.span = 6;
>, <Line: +					}
>, <Line: +					else if (panelCount === 2) {
>, <Line: +						row.panels[0].span = 4;
>, <Line: +						row.panels[1].span = 4;
>, <Line: +						panel.span = 4;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				row.panels.push(panel);
>, <Line: +			};
>, <Line: +			p.getPanelInfoById = function (panelId) {
>, <Line: +				var result = {};
>, <Line: +				_.each(this.rows, function (row) {
>, <Line: +					_.each(row.panels, function (panel, index) {
>, <Line: +						if (panel.id === panelId) {
>, <Line: +							result.panel = panel;
>, <Line: +							result.row = row;
>, <Line: +							result.index = index;
>, <Line: +							return;
>, <Line: +						}
>, <Line: +					});
>, <Line: +				});
>, <Line: +				if (!result.panel) {
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +				return result;
>, <Line: +			};
>, <Line: +			p.duplicatePanel = function (panel, row) {
>, <Line: +				var rowIndex = _.indexOf(this.rows, row);
>, <Line: +				var newPanel = angular.copy(panel);
>, <Line: +				newPanel.id = this.getNextPanelId();
>, <Line: +				var currentRow = this.rows[rowIndex];
>, <Line: +				currentRow.panels.push(newPanel);
>, <Line: +			};
>, <Line: +			p.formatDate = function (date, format) {
>, <Line: +				format = format || 'YYYY-MM-DD HH:mm:ss';
>, <Line: +				return this.timezone === 'browser' ?
>, <Line: +					moment(date).format(format) :
>, <Line: +					moment.utc(date).format(format);
>, <Line: +			};
>, <Line: +			p.emit_refresh = function () {
>, <Line: +				$rootScope.$broadcast('refresh');
>, <Line: +			};
>, <Line: +			p._updateSchema = function (old) {
>, <Line: +				var i, j, k;
>, <Line: +				var oldVersion = this.version;
>, <Line: +				var panelUpgrades = [];
>, <Line: +				this.version = 6;
>, <Line: +				if (oldVersion === 6) {
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				// version 2 schema changes
>, <Line: +				if (oldVersion < 2) {
>, <Line: +					if (old.services) {
>, <Line: +						if (old.services.filter) {
>, <Line: +							this.time = old.services.filter.time;
>, <Line: +							this.templating.list = old.services.filter.list || [];
>, <Line: +						}
>, <Line: +						delete this.services;
>, <Line: +					}
>, <Line: +					panelUpgrades.push(function (panel) {
>, <Line: +						// rename panel type
>, <Line: +						if (panel.type === 'graphite') {
>, <Line: +							panel.type = 'graph';
>, <Line: +						}
>, <Line: +						if (panel.type !== 'graph') {
>, <Line: +							return;
>, <Line: +						}
>, <Line: +						if (_.isBoolean(panel.legend)) {
>, <Line: +							panel.legend = {show: panel.legend};
>, <Line: +						}
>, <Line: +						if (panel.grid) {
>, <Line: +							if (panel.grid.min) {
>, <Line: +								panel.grid.leftMin = panel.grid.min;
>, <Line: +								delete panel.grid.min;
>, <Line: +							}
>, <Line: +							if (panel.grid.max) {
>, <Line: +								panel.grid.leftMax = panel.grid.max;
>, <Line: +								delete panel.grid.max;
>, <Line: +							}
>, <Line: +						}
>, <Line: +						if (panel.y_format) {
>, <Line: +							panel.y_formats[0] = panel.y_format;
>, <Line: +							delete panel.y_format;
>, <Line: +						}
>, <Line: +						if (panel.y2_format) {
>, <Line: +							panel.y_formats[1] = panel.y2_format;
>, <Line: +							delete panel.y2_format;
>, <Line: +						}
>, <Line: +					});
>, <Line: +				}
>, <Line: +				// schema version 3 changes
>, <Line: +				if (oldVersion < 3) {
>, <Line: +					// ensure panel ids
>, <Line: +					var maxId = this.getNextPanelId();
>, <Line: +					panelUpgrades.push(function (panel) {
>, <Line: +						if (!panel.id) {
>, <Line: +							panel.id = maxId;
>, <Line: +							maxId += 1;
>, <Line: +						}
>, <Line: +					});
>, <Line: +				}
>, <Line: +				// schema version 4 changes
>, <Line: +				if (oldVersion < 4) {
>, <Line: +					// move aliasYAxis changes
>, <Line: +					panelUpgrades.push(function (panel) {
>, <Line: +						if (panel.type !== 'graph') {
>, <Line: +							return;
>, <Line: +						}
>, <Line: +						_.each(panel.aliasYAxis, function (value, key) {
>, <Line: +							panel.seriesOverrides = [{
>, <Line: +								alias: key,
>, <Line: +								yaxis: value
>, <Line: +							}];
>, <Line: +						});
>, <Line: +						delete panel.aliasYAxis;
>, <Line: +					});
>, <Line: +				}
>, <Line: +				if (oldVersion < 6) {
>, <Line: +					// move pulldowns to new schema
>, <Line: +					var filtering = _.findWhere(old.pulldowns, {type: 'filtering'});
>, <Line: +					var annotations = _.findWhere(old.pulldowns, {type: 'annotations'});
>, <Line: +					if (filtering) {
>, <Line: +						this.templating.enable = filtering.enable;
>, <Line: +					}
>, <Line: +					if (annotations) {
>, <Line: +						this.annotations = {
>, <Line: +							list: annotations.annotations,
>, <Line: +							enable: annotations.enable
>, <Line: +						};
>, <Line: +					}
>, <Line: +					// update template variables
>, <Line: +					for (i = 0; i < this.templating.list.length; i++) {
>, <Line: +						var variable = this.templating.list[i];
>, <Line: +						if (variable.datasource === void 0) {
>, <Line: +							variable.datasource = null;
>, <Line: +						}
>, <Line: +						if (variable.type === 'filter') {
>, <Line: +							variable.type = 'query';
>, <Line: +						}
>, <Line: +						if (variable.type === void 0) {
>, <Line: +							variable.type = 'query';
>, <Line: +						}
>, <Line: +						if (variable.allFormat === void 0) {
>, <Line: +							variable.allFormat = 'glob';
>, <Line: +						}
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if (panelUpgrades.length === 0) {
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				for (i = 0; i < this.rows.length; i++) {
>, <Line: +					var row = this.rows[i];
>, <Line: +					for (j = 0; j < row.panels.length; j++) {
>, <Line: +						for (k = 0; k < panelUpgrades.length; k++) {
>, <Line: +							panelUpgrades[k](row.panels[j]);
>, <Line: +						}
>, <Line: +					}
>, <Line: +				}
>, <Line: +			};
>, <Line: +			return {
>, <Line: +				create: function (dashboard) {
>, <Line: +					return new DashboardModel(dashboard);
>, <Line: +				}
>, <Line: +			};
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'jquery',
>, <Line: -  'kbn',
>, <Line: -  'lodash',
>, <Line: -  'moment',
>, <Line: -  '../timer',
>, <Line: -],
>, <Line: -function (angular, $, kbn, _, moment) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.services');
>, <Line: -  module.factory('dashboardSrv', function($rootScope)  {
>, <Line: -    function DashboardModel (data) {
>, <Line: -      if (!data) {
>, <Line: -        data = {};
>, <Line: -      }
>, <Line: -      this.id = data.id || null;
>, <Line: -      this.title = data.title || 'No Title';
>, <Line: -      this.originalTitle = this.title;
>, <Line: -      this.tags = data.tags || [];
>, <Line: -      this.style = data.style || "dark";
>, <Line: -      this.timezone = data.timezone || 'browser';
>, <Line: -      this.editable = data.editable === false ? false : true;
>, <Line: -      this.hideControls = data.hideControls || false;
>, <Line: -      this.sharedCrosshair = data.sharedCrosshair || false;
>, <Line: -      this.rows = data.rows || [];
>, <Line: -      this.nav = data.nav || [];
>, <Line: -      this.time = data.time || { from: 'now-6h', to: 'now' };
>, <Line: -      this.templating = this._ensureListExist(data.templating);
>, <Line: -      this.annotations = this._ensureListExist(data.annotations);
>, <Line: -      this.refresh = data.refresh;
>, <Line: -      this.version = data.version || 0;
>, <Line: -      this.hideAllLegends = data.hideAllLegends || false;
>, <Line: -      if (this.nav.length === 0) {
>, <Line: -        this.nav.push({ type: 'timepicker' });
>, <Line: -      }
>, <Line: -      this._updateSchema(data);
>, <Line: -    }
>, <Line: -    var p = DashboardModel.prototype;
>, <Line: -    p._ensureListExist = function (data) {
>, <Line: -      if (!data) { data = {}; }
>, <Line: -      if (!data.list) { data.list = []; }
>, <Line: -      return data;
>, <Line: -    };
>, <Line: -    p.getNextPanelId = function() {
>, <Line: -      var i, j, row, panel, max = 0;
>, <Line: -      for (i = 0; i < this.rows.length; i++) {
>, <Line: -        row = this.rows[i];
>, <Line: -        for (j = 0; j < row.panels.length; j++) {
>, <Line: -          panel = row.panels[j];
>, <Line: -          if (panel.id > max) { max = panel.id; }
>, <Line: -        }
>, <Line: -      }
>, <Line: -      return max + 1;
>, <Line: -    };
>, <Line: -    p.rowSpan = function(row) {
>, <Line: -      return _.reduce(row.panels, function(p,v) {
>, <Line: -        return p + v.span;
>, <Line: -      },0);
>, <Line: -    };
>, <Line: -    p.add_panel = function(panel, row) {
>, <Line: -      var rowSpan = this.rowSpan(row);
>, <Line: -      var panelCount = row.panels.length;
>, <Line: -      var space = (12 - rowSpan) - panel.span;
>, <Line: -      panel.id = this.getNextPanelId();
>, <Line: -      // try to make room of there is no space left
>, <Line: -      if (space <= 0) {
>, <Line: -        if (panelCount === 1) {
>, <Line: -          row.panels[0].span = 6;
>, <Line: -          panel.span = 6;
>, <Line: -        }
>, <Line: -        else if (panelCount === 2) {
>, <Line: -          row.panels[0].span = 4;
>, <Line: -          row.panels[1].span = 4;
>, <Line: -          panel.span = 4;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      row.panels.push(panel);
>, <Line: -    };
>, <Line: -    p.getPanelInfoById = function(panelId) {
>, <Line: -      var result = {};
>, <Line: -      _.each(this.rows, function(row) {
>, <Line: -        _.each(row.panels, function(panel, index) {
>, <Line: -          if (panel.id === panelId) {
>, <Line: -            result.panel = panel;
>, <Line: -            result.row = row;
>, <Line: -            result.index = index;
>, <Line: -            return;
>, <Line: -          }
>, <Line: -        });
>, <Line: -      });
>, <Line: -      if (!result.panel) {
>, <Line: -        return null;
>, <Line: -      }
>, <Line: -      return result;
>, <Line: -    };
>, <Line: -    p.duplicatePanel = function(panel, row) {
>, <Line: -      var rowIndex = _.indexOf(this.rows, row);
>, <Line: -      var newPanel = angular.copy(panel);
>, <Line: -      newPanel.id = this.getNextPanelId();
>, <Line: -      var currentRow = this.rows[rowIndex];
>, <Line: -      currentRow.panels.push(newPanel);
>, <Line: -    };
>, <Line: -    p.formatDate = function(date, format) {
>, <Line: -      format = format || 'YYYY-MM-DD HH:mm:ss';
>, <Line: -      return this.timezone === 'browser' ?
>, <Line: -              moment(date).format(format) :
>, <Line: -              moment.utc(date).format(format);
>, <Line: -    };
>, <Line: -    p.emit_refresh = function() {
>, <Line: -      $rootScope.$broadcast('refresh');
>, <Line: -    };
>, <Line: -    p._updateSchema = function(old) {
>, <Line: -      var i, j, k;
>, <Line: -      var oldVersion = this.version;
>, <Line: -      var panelUpgrades = [];
>, <Line: -      this.version = 6;
>, <Line: -      if (oldVersion === 6) {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      // version 2 schema changes
>, <Line: -      if (oldVersion < 2) {
>, <Line: -        if (old.services) {
>, <Line: -          if (old.services.filter) {
>, <Line: -            this.time = old.services.filter.time;
>, <Line: -            this.templating.list = old.services.filter.list || [];
>, <Line: -          }
>, <Line: -          delete this.services;
>, <Line: -        }
>, <Line: -        panelUpgrades.push(function(panel) {
>, <Line: -          // rename panel type
>, <Line: -          if (panel.type === 'graphite') {
>, <Line: -            panel.type = 'graph';
>, <Line: -          }
>, <Line: -          if (panel.type !== 'graph') {
>, <Line: -            return;
>, <Line: -          }
>, <Line: -          if (_.isBoolean(panel.legend)) { panel.legend = { show: panel.legend }; }
>, <Line: -          if (panel.grid) {
>, <Line: -            if (panel.grid.min) {
>, <Line: -              panel.grid.leftMin = panel.grid.min;
>, <Line: -              delete panel.grid.min;
>, <Line: -            }
>, <Line: -            if (panel.grid.max) {
>, <Line: -              panel.grid.leftMax = panel.grid.max;
>, <Line: -              delete panel.grid.max;
>, <Line: -            }
>, <Line: -          }
>, <Line: -          if (panel.y_format) {
>, <Line: -            panel.y_formats[0] = panel.y_format;
>, <Line: -            delete panel.y_format;
>, <Line: -          }
>, <Line: -          if (panel.y2_format) {
>, <Line: -            panel.y_formats[1] = panel.y2_format;
>, <Line: -            delete panel.y2_format;
>, <Line: -          }
>, <Line: -        });
>, <Line: -      }
>, <Line: -      // schema version 3 changes
>, <Line: -      if (oldVersion < 3) {
>, <Line: -        // ensure panel ids
>, <Line: -        var maxId = this.getNextPanelId();
>, <Line: -        panelUpgrades.push(function(panel) {
>, <Line: -          if (!panel.id) {
>, <Line: -            panel.id = maxId;
>, <Line: -            maxId += 1;
>, <Line: -          }
>, <Line: -        });
>, <Line: -      }
>, <Line: -      // schema version 4 changes
>, <Line: -      if (oldVersion < 4) {
>, <Line: -        // move aliasYAxis changes
>, <Line: -        panelUpgrades.push(function(panel) {
>, <Line: -          if (panel.type !== 'graph') { return; }
>, <Line: -          _.each(panel.aliasYAxis, function(value, key) {
>, <Line: -            panel.seriesOverrides = [{ alias: key, yaxis: value }];
>, <Line: -          });
>, <Line: -          delete panel.aliasYAxis;
>, <Line: -        });
>, <Line: -      }
>, <Line: -      if (oldVersion < 6) {
>, <Line: -        // move pulldowns to new schema
>, <Line: -        var filtering = _.findWhere(old.pulldowns, { type: 'filtering' });
>, <Line: -        var annotations = _.findWhere(old.pulldowns, { type: 'annotations' });
>, <Line: -        if (filtering) {
>, <Line: -          this.templating.enable = filtering.enable;
>, <Line: -        }
>, <Line: -        if (annotations) {
>, <Line: -          this.annotations = {
>, <Line: -            list: annotations.annotations,
>, <Line: -            enable: annotations.enable
>, <Line: -          };
>, <Line: -        }
>, <Line: -        // update template variables
>, <Line: -        for (i = 0 ; i < this.templating.list.length; i++) {
>, <Line: -          var variable = this.templating.list[i];
>, <Line: -          if (variable.datasource === void 0) { variable.datasource = null; }
>, <Line: -          if (variable.type === 'filter') { variable.type = 'query'; }
>, <Line: -          if (variable.type === void 0) { variable.type = 'query'; }
>, <Line: -          if (variable.allFormat === void 0) { variable.allFormat = 'glob'; }
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if (panelUpgrades.length === 0) {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      for (i = 0; i < this.rows.length; i++) {
>, <Line: -        var row = this.rows[i];
>, <Line: -        for (j = 0; j < row.panels.length; j++) {
>, <Line: -          for (k = 0; k < panelUpgrades.length; k++) {
>, <Line: -            panelUpgrades[k](row.panels[j]);
>, <Line: -          }
>, <Line: -        }
>, <Line: -      }
>, <Line: -    };
>, <Line: -    return {
>, <Line: -      create: function(dashboard) {
>, <Line: -        return new DashboardModel(dashboard);
>, <Line: -      }
>, <Line: -    };
>, <Line: -  });
>, <Line: -});
>]