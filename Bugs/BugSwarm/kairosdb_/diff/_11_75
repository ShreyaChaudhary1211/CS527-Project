[<Line: +package org.kairosdb.rollup;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import com.google.inject.Inject;
>, <Line: +import com.google.inject.name.Named;
>, <Line: +import org.apache.commons.io.FileUtils;
>, <Line: +import org.kairosdb.core.http.rest.QueryException;
>, <Line: +import org.kairosdb.core.http.rest.json.QueryParser;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +import java.io.File;
>, <Line: +import java.io.IOException;
>, <Line: +import java.nio.charset.Charset;
>, <Line: +import java.nio.file.FileAlreadyExistsException;
>, <Line: +import java.nio.file.Files;
>, <Line: +import java.nio.file.Paths;
>, <Line: +import java.util.*;
>, <Line: +import java.util.concurrent.CopyOnWriteArrayList;
>, <Line: +import java.util.concurrent.locks.ReentrantLock;
>, <Line: +import static com.google.common.base.Preconditions.checkNotNull;
>, <Line: +import static org.kairosdb.rollup.RollupTaskChangeListener.Action;
>, <Line: +import static org.kairosdb.util.Preconditions.checkNotNullOrEmpty;
>, <Line: +/**
>, <Line: + Manages access to the roll up task store
>, <Line: + */
>, <Line: +public class RollUpTasksFileStore implements RollUpTasksStore
>, <Line: +{
>, <Line: +	private static final Logger logger = LoggerFactory.getLogger(RollUpTasksFileStore.class);
>, <Line: +	private static final String FILE_NAME = "rollup.config";
>, <Line: +	private final ReentrantLock lock = new ReentrantLock();
>, <Line: +	private final QueryParser parser;
>, <Line: +	private final File configFile;
>, <Line: +	private final Map<String, RollupTask> rollups = new HashMap<String, RollupTask>();
>, <Line: +	private final CopyOnWriteArrayList<RollupTaskChangeListener> listenerList = new CopyOnWriteArrayList<RollupTaskChangeListener>();
>, <Line: +	@SuppressWarnings("ResultOfMethodCallIgnored")
>, <Line: +	@Inject
>, <Line: +	public RollUpTasksFileStore(@Named("STORE_DIRECTORY") String storeDirectory,
>, <Line: +			QueryParser parser) throws IOException, RollUpException
>, <Line: +	{
>, <Line: +		checkNotNullOrEmpty(storeDirectory);
>, <Line: +		checkNotNull(parser);
>, <Line: +		createStoreDirectory(storeDirectory);
>, <Line: +		configFile = new File(storeDirectory, FILE_NAME);
>, <Line: +		configFile.createNewFile();
>, <Line: +		this.parser = parser;
>, <Line: +		readFromFile();
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void write(List<RollupTask> tasks) throws RollUpException
>, <Line: +	{
>, <Line: +		checkNotNull(tasks);
>, <Line: +		List<RollupTask> added = new ArrayList<RollupTask>();
>, <Line: +		List<RollupTask> changed = new ArrayList<RollupTask>();
>, <Line: +		lock.lock();
>, <Line: +		try
>, <Line: +		{
>, <Line: +			for (RollupTask task : tasks)
>, <Line: +			{
>, <Line: +				if (rollups.containsKey(task.getId()))
>, <Line: +				{
>, <Line: +					changed.add(task);
>, <Line: +				}
>, <Line: +				else
>, <Line: +				{
>, <Line: +					added.add(task);
>, <Line: +				}
>, <Line: +				rollups.put(task.getId(), task);
>, <Line: +			}
>, <Line: +			writeTasks();
>, <Line: +		}
>, <Line: +		catch (IOException e)
>, <Line: +		{
>, <Line: +			throw new RollUpException("Failed to write roll-up tasks to " + configFile.getAbsolutePath(), e);
>, <Line: +		}
>, <Line: +		finally
>, <Line: +		{
>, <Line: +			lock.unlock();
>, <Line: +		}
>, <Line: +		notifyListeners(added, Action.ADDED);
>, <Line: +		notifyListeners(changed, Action.CHANGED);
>, <Line: +	}
>, <Line: +	private void writeTasks() throws IOException
>, <Line: +	{
>, <Line: +		FileUtils.deleteQuietly(configFile);
>, <Line: +		for (RollupTask task : rollups.values())
>, <Line: +		{
>, <Line: +			FileUtils.writeLines(configFile, ImmutableList.of(task.getJson()), true);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public List<RollupTask> read() throws RollUpException
>, <Line: +	{
>, <Line: +		lock.lock();
>, <Line: +		try
>, <Line: +		{
>, <Line: +			return new ArrayList<RollupTask>(rollups.values());
>, <Line: +		}
>, <Line: +		finally
>, <Line: +		{
>, <Line: +			lock.unlock();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	private void readFromFile() throws RollUpException
>, <Line: +	{
>, <Line: +		lock.lock();
>, <Line: +		try
>, <Line: +		{
>, <Line: +			List<String> taskJson = FileUtils.readLines(configFile, Charset.forName("UTF-8"));
>, <Line: +			for (String json : taskJson)
>, <Line: +			{
>, <Line: +				try
>, <Line: +				{
>, <Line: +					RollupTask task = parser.parseRollupTask(json);
>, <Line: +					if (task != null)
>, <Line: +						rollups.put(task.getId(), task);
>, <Line: +				}
>, <Line: +				catch (QueryException e)
>, <Line: +				{
>, <Line: +					logger.error("Could no parse rollup task from json: " + json);
>, <Line: +				}
>, <Line: +			}
>, <Line: +		}
>, <Line: +		catch (IOException e)
>, <Line: +		{
>, <Line: +			throw new RollUpException("Failed to read roll-up tasks from " + configFile.getAbsolutePath(), e);
>, <Line: +		}
>, <Line: +		finally
>, <Line: +		{
>, <Line: +			lock.unlock();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void remove(String id) throws RollUpException
>, <Line: +	{
>, <Line: +		checkNotNullOrEmpty(id);
>, <Line: +		RollupTask removed = null;
>, <Line: +		lock.lock();
>, <Line: +		try
>, <Line: +		{
>, <Line: +			removed = rollups.get(id);
>, <Line: +			if (removed != null)
>, <Line: +			{
>, <Line: +				rollups.remove(id);
>, <Line: +				writeTasks();
>, <Line: +			}
>, <Line: +		}
>, <Line: +		catch (IOException e)
>, <Line: +		{
>, <Line: +			throw new RollUpException("Failed to remove roll-up task", e);
>, <Line: +		}
>, <Line: +		finally
>, <Line: +		{
>, <Line: +			lock.unlock();
>, <Line: +		}
>, <Line: +		if (removed != null)
>, <Line: +		{
>, <Line: +			notifyListeners(Collections.singletonList(removed), Action.REMOVED);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	public void addListener(RollupTaskChangeListener listener)
>, <Line: +	{
>, <Line: +		listenerList.add(listener);
>, <Line: +	}
>, <Line: +	public void notifyListeners(List<RollupTask> tasks, Action action)
>, <Line: +	{
>, <Line: +		for (RollupTask task : tasks)
>, <Line: +		{
>, <Line: +			for (RollupTaskChangeListener listener : listenerList)
>, <Line: +			{
>, <Line: +				listener.change(task, action);
>, <Line: +			}
>, <Line: +		}
>, <Line: +	}
>, <Line: +	private void createStoreDirectory(String storeDirectory) throws IOException
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			Files.createDirectory(Paths.get(storeDirectory));
>, <Line: +		}
>, <Line: +		catch (FileAlreadyExistsException ignore)
>, <Line: +		{
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]