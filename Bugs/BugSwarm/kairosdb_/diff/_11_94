[<Line: +import org.kairosdb.core.datastore.Duration;
>, <Line: +import org.kairosdb.core.datastore.TimeUnit;
>, <Line: +import org.kairosdb.rollup.RollupTask;
>, <Line: +		assertBeanValidation(json, "query.metric[0].start_time relative or absolute time must be set");
>, <Line: +	@Test
>, <Line: +	@Test
>, <Line: +	public void test_parseRollUpTask_empty_name_invalid() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		String json = Resources.toString(Resources.getResource("invalid-rollup-no-name-empty.json"), Charsets.UTF_8);
>, <Line: +		assertRollupBeanValidation(json, "name may not be empty");
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_parseRollUpTask_no_execution_interval_invalid() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		String json = Resources.toString(Resources.getResource("invalid-rollup-no-execution_interval.json"), Charsets.UTF_8);
>, <Line: +		assertRollupBeanValidation(json, "executionInterval may not be null");
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_parseRollUpTask_empty_saveAs_invalid() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		String json = Resources.toString(Resources.getResource("invalid-rollup-no-saveAs.json"), Charsets.UTF_8);
>, <Line: +		assertRollupBeanValidation(json, "rollup[0].saveAs may not be empty");
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 Test the parsing of the query. Only a sanity check since it parseRollupTask
>, <Line: +	 reuses parseQuery.
>, <Line: +	 */
>, <Line: +	@Test
>, <Line: +	public void test_parseRollUpTask_empty_query_time_invalid() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		String json = Resources.toString(Resources.getResource("invalid-rollup-no-query_time.json"), Charsets.UTF_8);
>, <Line: +		assertRollupBeanValidation(json, "rollup[0].query.metric[0].start_time relative or absolute time must be set");
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_parseRollUpTask_noRangeAggregator_invalid() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		String json = Resources.toString(Resources.getResource("invalid-rollup-no-range-aggregator.json"), Charsets.UTF_8);
>, <Line: +		assertRollupBeanValidation(json, "rollup[0].query[0].aggregator At least one aggregator must be a range aggregator");
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_parseRollupTask() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		String json = Resources.toString(Resources.getResource("rolluptask1.json"), Charsets.UTF_8);
>, <Line: +		RollupTask task = parser.parseRollupTask(json);
>, <Line: +		assertThat(task.getName(), equalTo("Rollup1"));
>, <Line: +		assertThat(task.getExecutionInterval(), equalTo(new Duration(1, TimeUnit.HOURS)));
>, <Line: +		assertThat(task.getRollups().size(), equalTo(1));
>, <Line: +		assertThat(task.getRollups().get(0).getSaveAs(), equalTo("kairosdb.http.query_time_rollup"));
>, <Line: +		assertThat(task.getRollups().get(0).getQueryMetrics().size(), equalTo(1));
>, <Line: +		assertThat(task.getRollups().get(0).getQueryMetrics().get(0).getName(), equalTo("kairosdb.http.query_time"));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_parseRollupTasks() throws IOException, QueryException
>, <Line: +	{
>, <Line: +		String json = Resources.toString(Resources.getResource("rolluptasks.json"), Charsets.UTF_8);
>, <Line: +		List<RollupTask> tasks = parser.parseRollupTasks(json);
>, <Line: +		assertThat(tasks.size(), equalTo(2));
>, <Line: +		assertThat(tasks.get(0).getName(), equalTo("Rollup1"));
>, <Line: +		assertThat(tasks.get(0).getExecutionInterval(), equalTo(new Duration(1, TimeUnit.HOURS)));
>, <Line: +		assertThat(tasks.get(0).getRollups().size(), equalTo(1));
>, <Line: +		assertThat(tasks.get(0).getRollups().get(0).getSaveAs(), equalTo("kairosdb.http.query_time_rollup"));
>, <Line: +		assertThat(tasks.get(0).getRollups().get(0).getQueryMetrics().size(), equalTo(1));
>, <Line: +		assertThat(tasks.get(0).getRollups().get(0).getQueryMetrics().get(0).getName(), equalTo("kairosdb.http.query_time"));
>, <Line: +		assertThat(tasks.get(1).getName(), equalTo("Rollup2"));
>, <Line: +		assertThat(tasks.get(1).getExecutionInterval(), equalTo(new Duration(1, TimeUnit.MINUTES)));
>, <Line: +		assertThat(tasks.get(1).getRollups().size(), equalTo(1));
>, <Line: +		assertThat(tasks.get(1).getRollups().get(0).getSaveAs(), equalTo("kairosdb.http.foo_rollup"));
>, <Line: +		assertThat(tasks.get(1).getRollups().get(0).getQueryMetrics().size(), equalTo(1));
>, <Line: +		assertThat(tasks.get(1).getRollups().get(0).getQueryMetrics().get(0).getName(), equalTo("kairosdb.http.foo"));
>, <Line: +	}
>, <Line: +	private void assertRollupBeanValidation(String json, String expectedMessage)
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			parser.parseRollupTask(json);
>, <Line: +			fail("Expected BeanValidationException");
>, <Line: +		}
>, <Line: +		catch (QueryException e)
>, <Line: +		{
>, <Line: +			fail("Expected BeanValidationException");
>, <Line: +		}
>, <Line: +		catch (BeanValidationException e)
>, <Line: +		{
>, <Line: +			assertThat(e.getErrorMessages().size(), equalTo(1));
>, <Line: +			assertThat(e.getErrorMessages().get(0), equalTo(expectedMessage));
>, <Line: +		}
>, <Line: +	}
>]
[<Line: -		assertBeanValidation(json, "query.start_time relative or absolute time must be set");
>, <Line: -        @Test
>]