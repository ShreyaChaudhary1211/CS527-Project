[<Line: +		'angular',
>, <Line: +		'lodash'
>, <Line: +	],
>, <Line: +	function (angular, _) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.controllers');
>, <Line: +		module.controller('InspectCtrl', function ($scope) {
>, <Line: +			var model = $scope.inspector;
>, <Line: +			function getParametersFromQueryString(queryString) {
>, <Line: +				var result = [];
>, <Line: +				var parameters = queryString.split("&");
>, <Line: +				for (var i = 0; i < parameters.length; i++) {
>, <Line: +					var keyValue = parameters[i].split("=");
>, <Line: +					if (keyValue[1].length > 0) {
>, <Line: +						result.push({
>, <Line: +							key: keyValue[0],
>, <Line: +							value: window.unescape(keyValue[1])
>, <Line: +						});
>, <Line: +					}
>, <Line: +				}
>, <Line: +				return result;
>, <Line: +			}
>, <Line: +			$scope.init = function () {
>, <Line: +				$scope.editor = {index: 0};
>, <Line: +				if (!model.error) {
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				if (_.isString(model.error.data)) {
>, <Line: +					$scope.response = model.error.data;
>, <Line: +				}
>, <Line: +				if (model.error.config && model.error.config.params) {
>, <Line: +					$scope.request_parameters = _.map(model.error.config.params, function (value, key) {
>, <Line: +						return {key: key, value: value};
>, <Line: +					});
>, <Line: +				}
>, <Line: +				if (model.error.stack) {
>, <Line: +					$scope.editor.index = 2;
>, <Line: +					$scope.stack_trace = model.error.stack;
>, <Line: +					$scope.message = model.error.message;
>, <Line: +				}
>, <Line: +				else if (model.error.config && model.error.config.data) {
>, <Line: +					$scope.editor.index = 1;
>, <Line: +					$scope.request_parameters = getParametersFromQueryString(model.error.config.data);
>, <Line: +					if (model.error.data.indexOf('DOCTYPE') !== -1) {
>, <Line: +						$scope.response_html = model.error.data;
>, <Line: +					}
>, <Line: +				}
>, <Line: +			};
>, <Line: +		});
>, <Line: +		angular
>, <Line: +			.module('grafana.directives')
>, <Line: +			.directive('iframeContent', function ($parse) {
>, <Line: +				return {
>, <Line: +					restrict: 'A',
>, <Line: +					link: function ($scope, elem, attrs) {
>, <Line: +						var getter = $parse(attrs.iframeContent), value = getter($scope);
>, <Line: +						$scope.$on("$destroy", function () {
>, <Line: +							elem.remove();
>, <Line: +						});
>, <Line: +						var iframe = document.createElement('iframe');
>, <Line: +						iframe.width = '100%';
>, <Line: +						iframe.height = '400px';
>, <Line: +						iframe.style.border = 'none';
>, <Line: +						iframe.src = 'about:blank';
>, <Line: +						elem.append(iframe);
>, <Line: +						iframe.contentWindow.document.open('text/html', 'replace');
>, <Line: +						iframe.contentWindow.document.write(value);
>, <Line: +						iframe.contentWindow.document.close();
>, <Line: +					}
>, <Line: +				};
>, <Line: +			});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash'
>, <Line: -],
>, <Line: -function (angular, _) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.controllers');
>, <Line: -  module.controller('InspectCtrl', function($scope) {
>, <Line: -    var model = $scope.inspector;
>, <Line: -    function getParametersFromQueryString(queryString) {
>, <Line: -      var result = [];
>, <Line: -      var parameters = queryString.split("&");
>, <Line: -      for (var i = 0; i < parameters.length; i++) {
>, <Line: -        var keyValue = parameters[i].split("=");
>, <Line: -        if (keyValue[1].length > 0) {
>, <Line: -          result.push({ key: keyValue[0], value: window.unescape(keyValue[1]) });
>, <Line: -        }
>, <Line: -      }
>, <Line: -      return result;
>, <Line: -    }
>, <Line: -    $scope.init = function () {
>, <Line: -      $scope.editor = { index: 0 };
>, <Line: -      if (!model.error)  {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      if (_.isString(model.error.data)) {
>, <Line: -        $scope.response = model.error.data;
>, <Line: -      }
>, <Line: -      if (model.error.config && model.error.config.params) {
>, <Line: -        $scope.request_parameters = _.map(model.error.config.params, function(value, key) {
>, <Line: -          return { key: key, value: value};
>, <Line: -        });
>, <Line: -      }
>, <Line: -      if (model.error.stack) {
>, <Line: -        $scope.editor.index = 2;
>, <Line: -        $scope.stack_trace = model.error.stack;
>, <Line: -        $scope.message = model.error.message;
>, <Line: -      }
>, <Line: -      else if (model.error.config && model.error.config.data) {
>, <Line: -        $scope.editor.index = 1;
>, <Line: -        $scope.request_parameters = getParametersFromQueryString(model.error.config.data);
>, <Line: -        if (model.error.data.indexOf('DOCTYPE') !== -1) {
>, <Line: -          $scope.response_html = model.error.data;
>, <Line: -        }
>, <Line: -      }
>, <Line: -    };
>, <Line: -  });
>, <Line: -  angular
>, <Line: -    .module('grafana.directives')
>, <Line: -    .directive('iframeContent', function($parse) {
>, <Line: -      return {
>, <Line: -        restrict: 'A',
>, <Line: -        link: function($scope, elem, attrs) {
>, <Line: -          var getter = $parse(attrs.iframeContent), value = getter($scope);
>, <Line: -          $scope.$on("$destroy",function() {
>, <Line: -            elem.remove();
>, <Line: -          });
>, <Line: -          var iframe = document.createElement('iframe');
>, <Line: -          iframe.width = '100%';
>, <Line: -          iframe.height = '400px';
>, <Line: -          iframe.style.border = 'none';
>, <Line: -          iframe.src = 'about:blank';
>, <Line: -          elem.append(iframe);
>, <Line: -          iframe.contentWindow.document.open('text/html', 'replace');
>, <Line: -          iframe.contentWindow.document.write(value);
>, <Line: -          iframe.contentWindow.document.close();
>, <Line: -        }
>, <Line: -      };
>, <Line: -    });
>, <Line: -});
>]