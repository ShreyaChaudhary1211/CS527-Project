[<Line: + Groups data points by bin values. Data points are a range of values specified by bins.
>, <Line: + Bins array needs to be in ascending order.
>, <Line: +	private double[] bins;
>, <Line: +	public BinGroupBy()
>, <Line: +	{
>, <Line: +	}
>, <Line: +	public BinGroupBy(double[] bins)
>, <Line: +	{
>, <Line: +		checkArgument(bins.length > 0);
>, <Line: +		this.bins = bins;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public int getGroupId(DataPoint dataPoint, Map<String, String> tags)
>, <Line: +	{
>, <Line: +		double dataValue = 0;
>, <Line: +		if (dataPoint.isLong())
>, <Line: +			dataValue = dataPoint.getLongValue();
>, <Line: +		else if (dataPoint.isDouble())
>, <Line: +			dataValue = dataPoint.getDoubleValue();
>, <Line: +		else
>, <Line: +			return -1;
>, <Line: +		if (dataValue < bins[0])
>, <Line: +			return 0;
>, <Line: +		for (int i = 0; i < bins.length - 1; i++)
>, <Line: +		{
>, <Line: +			if (dataValue >= bins[i] && dataValue < bins[i + 1])
>, <Line: +				return i + 1;
>, <Line: +		}
>, <Line: +		return bins.length;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public GroupByResult getGroupByResult(final int id)
>, <Line: +	{
>, <Line: +		return new GroupByResult()
>, <Line: +		{
>, <Line: +			@Override
>, <Line: +			public String toJson() throws FormatterException
>, <Line: +			{
>, <Line: +				StringWriter stringWriter = new StringWriter();
>, <Line: +				try
>, <Line: +				{
>, <Line: +					JSONWriter writer = new JSONWriter(stringWriter);
>, <Line: +					writer.object();
>, <Line: +					writer.key("name").value("bin");
>, <Line: +					writer.key("bins").value(bins);
>, <Line: +					writer.key("group").object();
>, <Line: +					writer.key("bin_number").value(id);
>, <Line: +					writer.endObject();
>, <Line: +					writer.endObject();
>, <Line: +				}
>, <Line: +				catch (JSONException e)
>, <Line: +				{
>, <Line: +					throw new FormatterException(e);
>, <Line: +				}
>, <Line: +				return stringWriter.toString();
>, <Line: +			}
>, <Line: +		};
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void setStartDate(long startDate)
>, <Line: +	{
>, <Line: +	}
>, <Line: +	public void setBins(double[] bins)
>, <Line: +	{
>, <Line: +		this.bins = bins;
>, <Line: +	}
>]
[<Line: -import javax.validation.constraints.Min;
>, <Line: - * Groups data points by bin values. Data points are a range of values specified by bins.
>, <Line: - * Bins array needs to be in ascending order.
>, <Line: -    private double[] bins;
>, <Line: -    public BinGroupBy()
>, <Line: -    {
>, <Line: -    }
>, <Line: -    public BinGroupBy(double[] bins)
>, <Line: -    {
>, <Line: -        checkArgument(bins.length > 0);
>, <Line: -        this.bins = bins;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public int getGroupId(DataPoint dataPoint, Map<String, String> tags)
>, <Line: -    {
>, <Line: -        double dataValue = 0;
>, <Line: -        if (dataPoint.isLong())
>, <Line: -            dataValue = dataPoint.getLongValue();
>, <Line: -        else if (dataPoint.isDouble())
>, <Line: -            dataValue = dataPoint.getDoubleValue();
>, <Line: -        else
>, <Line: -            return -1;
>, <Line: -        if (dataValue < bins[0])
>, <Line: -            return 0;
>, <Line: -        for (int i = 0; i < bins.length - 1; i++) {
>, <Line: -            if (dataValue >= bins[i] && dataValue < bins[i + 1])
>, <Line: -                return i+1;
>, <Line: -        }
>, <Line: -        return bins.length;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public GroupByResult getGroupByResult(final int id)
>, <Line: -    {
>, <Line: -        return new GroupByResult()
>, <Line: -        {
>, <Line: -            @Override
>, <Line: -            public String toJson() throws FormatterException
>, <Line: -            {
>, <Line: -                StringWriter stringWriter = new StringWriter();
>, <Line: -                try
>, <Line: -                {
>, <Line: -                    JSONWriter writer = new JSONWriter(stringWriter);
>, <Line: -                    writer.object();
>, <Line: -                    writer.key("name").value("bin");
>, <Line: -                    writer.key("bins").value(bins);
>, <Line: -                    writer.key("group").object();
>, <Line: -                    writer.key("bin_number").value(id);
>, <Line: -                    writer.endObject();
>, <Line: -                    writer.endObject();
>, <Line: -                }
>, <Line: -                catch (JSONException e)
>, <Line: -                {
>, <Line: -                    throw new FormatterException(e);
>, <Line: -                }
>, <Line: -                return stringWriter.toString();
>, <Line: -            }
>, <Line: -        };
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public void setStartDate(long startDate)
>, <Line: -    {
>, <Line: -    }
>, <Line: -    public void setBins(double[] bins)
>, <Line: -    {
>, <Line: -        this.bins = bins;
>, <Line: -    }
>]