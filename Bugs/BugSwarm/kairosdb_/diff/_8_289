[<Line: +(function (angular) {
>, <Line: +	function isDnDsSupported() {
>, <Line: +		return 'ondrag' in document.createElement("a");
>, <Line: +	}
>, <Line: +	if (!isDnDsSupported()) {
>, <Line: +		angular.module("ang-drag-drop", []);
>, <Line: +		return;
>, <Line: +	}
>, <Line: +	if (window.jQuery && (-1 == window.jQuery.event.props.indexOf("dataTransfer"))) {
>, <Line: +		window.jQuery.event.props.push("dataTransfer");
>, <Line: +	}
>, <Line: +	var currentData;
>, <Line: +	angular.module("ang-drag-drop", [])
>, <Line: +		.directive("uiDraggable", [
>, <Line: +			'$parse',
>, <Line: +			'$rootScope',
>, <Line: +			'$dragImage',
>, <Line: +			function ($parse, $rootScope, $dragImage) {
>, <Line: +				return function (scope, element, attrs) {
>, <Line: +					var dragData = "",
>, <Line: +						isDragHandleUsed = false,
>, <Line: +						dragHandleClass,
>, <Line: +						draggingClass = attrs.draggingClass || "on-dragging",
>, <Line: +						dragTarget;
>, <Line: +					element.attr("draggable", false);
>, <Line: +					attrs.$observe("uiDraggable", function (newValue) {
>, <Line: +						if (newValue) {
>, <Line: +							element.attr("draggable", newValue);
>, <Line: +						}
>, <Line: +						else {
>, <Line: +							element.removeAttr("draggable");
>, <Line: +						}
>, <Line: +					});
>, <Line: +					if (attrs.drag) {
>, <Line: +						scope.$watch(attrs.drag, function (newValue) {
>, <Line: +							dragData = newValue || "";
>, <Line: +						});
>, <Line: +					if (angular.isString(attrs.dragHandleClass)) {
>, <Line: +						isDragHandleUsed = true;
>, <Line: +						dragHandleClass = attrs.dragHandleClass.trim() || "drag-handle";
>, <Line: +						element.bind("mousedown", function (e) {
>, <Line: +							dragTarget = e.target;
>, <Line: +						});
>, <Line: +					}
>, <Line: +					function dragendHandler(e) {
>, <Line: +						setTimeout(function () {
>, <Line: +							element.unbind('$destroy', dragendHandler);
>, <Line: +						}, 0);
>, <Line: +						var sendChannel = attrs.dragChannel || "defaultchannel";
>, <Line: +						$rootScope.$broadcast("ANGULAR_DRAG_END", sendChannel);
>, <Line: +						if (e.dataTransfer && e.dataTransfer.dropEffect !== "none") {
>, <Line: +							if (attrs.onDropSuccess) {
>, <Line: +								var fn = $parse(attrs.onDropSuccess);
>, <Line: +								scope.$evalAsync(function () {
>, <Line: +									fn(scope, {$event: e});
>, <Line: +								});
>, <Line: +							} else {
>, <Line: +								if (attrs.onDropFailure) {
>, <Line: +									var fn = $parse(attrs.onDropFailure);
>, <Line: +									scope.$evalAsync(function () {
>, <Line: +										fn(scope, {$event: e});
>, <Line: +									});
>, <Line: +								}
>, <Line: +							}
>, <Line: +						}
>, <Line: +						element.removeClass(draggingClass);
>, <Line: +					}
>, <Line: +					element.bind("dragend", dragendHandler);
>, <Line: +					element.bind("dragstart", function (e) {
>, <Line: +						var isDragAllowed = !isDragHandleUsed || dragTarget.classList.contains(dragHandleClass);
>, <Line: +						if (isDragAllowed) {
>, <Line: +							var sendChannel = attrs.dragChannel || "defaultchannel";
>, <Line: +							var sendData = angular.toJson({
>, <Line: +								data: dragData,
>, <Line: +								channel: sendChannel
>, <Line: +							});
>, <Line: +							var dragImage = attrs.dragImage || null;
>, <Line: +							element.addClass(draggingClass);
>, <Line: +							element.bind('$destroy', dragendHandler);
>, <Line: +							if (dragImage) {
>, <Line: +								var dragImageFn = $parse(attrs.dragImage);
>, <Line: +								scope.$evalAsync(function () {
>, <Line: +									var dragImageParameters = dragImageFn(scope, {$event: e});
>, <Line: +									if (dragImageParameters) {
>, <Line: +										if (angular.isString(dragImageParameters)) {
>, <Line: +											dragImageParameters = $dragImage.generate(dragImageParameters);
>, <Line: +										}
>, <Line: +										if (dragImageParameters.image) {
>, <Line: +											var xOffset = dragImageParameters.xOffset || 0,
>, <Line: +												yOffset = dragImageParameters.yOffset || 0;
>, <Line: +											e.dataTransfer.setDragImage(dragImageParameters.image, xOffset, yOffset);
>, <Line: +										}
>, <Line: +									}
>, <Line: +								});
>, <Line: +							}
>, <Line: +							e.dataTransfer.setData("dataToSend", sendData);
>, <Line: +							currentData = angular.fromJson(sendData);
>, <Line: +							e.dataTransfer.effectAllowed = "copyMove";
>, <Line: +							$rootScope.$broadcast("ANGULAR_DRAG_START", sendChannel, currentData.data);
>, <Line: +						}
>, <Line: +						else {
>, <Line: +							e.preventDefault();
>, <Line: +						}
>, <Line: +					});
>, <Line: +				};
>, <Line: +			}
>, <Line: +		])
>, <Line: +		.directive("uiOnDrop", [
>, <Line: +			'$parse',
>, <Line: +			'$rootScope',
>, <Line: +			function ($parse, $rootScope) {
>, <Line: +				return function (scope, element, attr) {
>, <Line: +					var dragging = 0; //Ref. http://stackoverflow.com/a/10906204
>, <Line: +					var dropChannel = attr.dropChannel || "defaultchannel";
>, <Line: +					var dragChannel = "";
>, <Line: +					var dragEnterClass = attr.dragEnterClass || "on-drag-enter";
>, <Line: +					var dragHoverClass = attr.dragHoverClass || "on-drag-hover";
>, <Line: +					var customDragEnterEvent = $parse(attr.onDragEnter);
>, <Line: +					var customDragLeaveEvent = $parse(attr.onDragLeave);
>, <Line: +					function onDragOver(e) {
>, <Line: +						if (e.preventDefault) {
>, <Line: +							e.preventDefault(); // Necessary. Allows us to drop.
>, <Line: +						}
>, <Line: +						if (e.stopPropagation) {
>, <Line: +							e.stopPropagation();
>, <Line: +						}
>, <Line: +						var fn = $parse(attr.uiOnDragOver);
>, <Line: +						scope.$evalAsync(function () {
>, <Line: +							fn(scope, {$event: e, $channel: dropChannel});
>, <Line: +						});
>, <Line: +						e.dataTransfer.dropEffect = e.shiftKey ? 'copy' : 'move';
>, <Line: +						return false;
>, <Line: +					}
>, <Line: +					function onDragLeave(e) {
>, <Line: +						if (e.preventDefault) {
>, <Line: +							e.preventDefault();
>, <Line: +						}
>, <Line: +						if (e.stopPropagation) {
>, <Line: +							e.stopPropagation();
>, <Line: +						}
>, <Line: +						dragging--;
>, <Line: +						if (dragging == 0) {
>, <Line: +							scope.$evalAsync(function () {
>, <Line: +								customDragEnterEvent(scope, {$event: e});
>, <Line: +							});
>, <Line: +							element.removeClass(dragHoverClass);
>, <Line: +						}
>, <Line: +						var fn = $parse(attr.uiOnDragLeave);
>, <Line: +						scope.$evalAsync(function () {
>, <Line: +							fn(scope, {$event: e, $channel: dropChannel});
>, <Line: +						});
>, <Line: +					}
>, <Line: +					function onDragEnter(e) {
>, <Line: +						if (e.preventDefault) {
>, <Line: +							e.preventDefault();
>, <Line: +						}
>, <Line: +						if (e.stopPropagation) {
>, <Line: +							e.stopPropagation();
>, <Line: +						}
>, <Line: +						dragging++;
>, <Line: +						var fn = $parse(attr.uiOnDragEnter);
>, <Line: +						scope.$evalAsync(function () {
>, <Line: +							fn(scope, {$event: e, $channel: dropChannel});
>, <Line: +						});
>, <Line: +						$rootScope.$broadcast("ANGULAR_HOVER", dragChannel);
>, <Line: +						scope.$evalAsync(function () {
>, <Line: +							customDragLeaveEvent(scope, {$event: e});
>, <Line: +						});
>, <Line: +						element.addClass(dragHoverClass);
>, <Line: +					}
>, <Line: +					function onDrop(e) {
>, <Line: +						if (e.preventDefault) {
>, <Line: +							e.preventDefault(); // Necessary. Allows us to drop.
>, <Line: +						}
>, <Line: +						if (e.stopPropagation) {
>, <Line: +							e.stopPropagation(); // Necessary. Allows us to drop.
>, <Line: +						}
>, <Line: +						var sendData = e.dataTransfer.getData("dataToSend");
>, <Line: +						sendData = angular.fromJson(sendData);
>, <Line: +						var fn = $parse(attr.uiOnDrop);
>, <Line: +						scope.$evalAsync(function () {
>, <Line: +							fn(scope, {
>, <Line: +								$data: sendData.data,
>, <Line: +								$event: e,
>, <Line: +								$channel: sendData.channel
>, <Line: +							});
>, <Line: +						});
>, <Line: +						element.removeClass(dragEnterClass);
>, <Line: +						dragging = 0;
>, <Line: +					}
>, <Line: +					function isDragChannelAccepted(dragChannel, dropChannel) {
>, <Line: +						if (dropChannel === "*") {
>, <Line: +							return true;
>, <Line: +						}
>, <Line: +						var channelMatchPattern = new RegExp("(\\s|[,])+(" + dragChannel + ")(\\s|[,])+", "i");
>, <Line: +						return channelMatchPattern.test("," + dropChannel + ",");
>, <Line: +					}
>, <Line: +					function preventNativeDnD(e) {
>, <Line: +						if (e.preventDefault) {
>, <Line: +							e.preventDefault();
>, <Line: +						}
>, <Line: +						if (e.stopPropagation) {
>, <Line: +							e.stopPropagation();
>, <Line: +						}
>, <Line: +						e.dataTransfer.dropEffect = "none";
>, <Line: +						return false;
>, <Line: +					}
>, <Line: +					var deregisterDragStart = $rootScope.$on("ANGULAR_DRAG_START", function (event, channel) {
>, <Line: +						dragChannel = channel;
>, <Line: +						if (isDragChannelAccepted(channel, dropChannel)) {
>, <Line: +							if (attr.dropValidate) {
>, <Line: +								var validateFn = $parse(attr.dropValidate);
>, <Line: +								var valid = validateFn(scope, {
>, <Line: +									$data: currentData.data,
>, <Line: +									$channel: currentData.channel
>, <Line: +								});
>, <Line: +								if (!valid) {
>, <Line: +									element.bind("dragover", preventNativeDnD);
>, <Line: +									element.bind("dragenter", preventNativeDnD);
>, <Line: +									element.bind("dragleave", preventNativeDnD);
>, <Line: +									element.bind("drop", preventNativeDnD);
>, <Line: +									return;
>, <Line: +								}
>, <Line: +							}
>, <Line: +							element.bind("dragover", onDragOver);
>, <Line: +							element.bind("dragenter", onDragEnter);
>, <Line: +							element.bind("dragleave", onDragLeave);
>, <Line: +							element.bind("drop", onDrop);
>, <Line: +							element.addClass(dragEnterClass);
>, <Line: +						}
>, <Line: +						else {
>, <Line: +							element.bind("dragover", preventNativeDnD);
>, <Line: +							element.bind("dragenter", preventNativeDnD);
>, <Line: +							element.bind("dragleave", preventNativeDnD);
>, <Line: +							element.bind("drop", preventNativeDnD);
>, <Line: +						}
>, <Line: +					});
>, <Line: +					var deregisterDragEnd = $rootScope.$on("ANGULAR_DRAG_END", function (e, channel) {
>, <Line: +						dragChannel = "";
>, <Line: +						if (isDragChannelAccepted(channel, dropChannel)) {
>, <Line: +							element.unbind("dragover", onDragOver);
>, <Line: +							element.unbind("dragenter", onDragEnter);
>, <Line: +							element.unbind("dragleave", onDragLeave);
>, <Line: +							element.unbind("drop", onDrop);
>, <Line: +							element.removeClass(dragHoverClass);
>, <Line: +							element.removeClass(dragEnterClass);
>, <Line: +						}
>, <Line: +						element.unbind("dragover", preventNativeDnD);
>, <Line: +						element.unbind("dragenter", preventNativeDnD);
>, <Line: +						element.unbind("dragleave", preventNativeDnD);
>, <Line: +						element.unbind("drop", preventNativeDnD);
>, <Line: +					});
>, <Line: +					var deregisterDragHover = $rootScope.$on("ANGULAR_HOVER", function (e, channel) {
>, <Line: +						if (isDragChannelAccepted(channel, dropChannel)) {
>, <Line: +							element.removeClass(dragHoverClass);
>, <Line: +						}
>, <Line: +					});
>, <Line: +					scope.$on('$destroy', function () {
>, <Line: +						deregisterDragStart();
>, <Line: +						deregisterDragEnd();
>, <Line: +						deregisterDragHover();
>, <Line: +					});
>, <Line: +					attr.$observe('dropChannel', function (value) {
>, <Line: +						if (value) {
>, <Line: +							dropChannel = value;
>, <Line: +						}
>, <Line: +					});
>, <Line: +				};
>, <Line: +			}
>, <Line: +		])
>, <Line: +		.constant("$dragImageConfig", {
>, <Line: +			height: 20,
>, <Line: +			width: 200,
>, <Line: +			padding: 10,
>, <Line: +			font: 'bold 11px Arial',
>, <Line: +			fontColor: '#eee8d5',
>, <Line: +			backgroundColor: '#93a1a1',
>, <Line: +			xOffset: 0,
>, <Line: +			yOffset: 0
>, <Line: +		})
>, <Line: +		.service("$dragImage", [
>, <Line: +			'$dragImageConfig',
>, <Line: +			function (defaultConfig) {
>, <Line: +				var ELLIPSIS = '…';
>, <Line: +				function fitString(canvas, text, config) {
>, <Line: +					var width = canvas.measureText(text).width;
>, <Line: +					if (width < config.width) {
>, <Line: +						return text;
>, <Line: +					}
>, <Line: +					while (width + config.padding > config.width) {
>, <Line: +						text = text.substring(0, text.length - 1);
>, <Line: +						width = canvas.measureText(text + ELLIPSIS).width;
>, <Line: +					}
>, <Line: +					return text + ELLIPSIS;
>, <Line: +				};
>, <Line: +				this.generate = function (text, options) {
>, <Line: +					var config = angular.extend({}, defaultConfig, options || {});
>, <Line: +					var el = document.createElement('canvas');
>, <Line: +					el.height = config.height;
>, <Line: +					el.width = config.width;
>, <Line: +					var canvas = el.getContext('2d');
>, <Line: +					canvas.fillStyle = config.backgroundColor;
>, <Line: +					canvas.fillRect(0, 0, config.width, config.height);
>, <Line: +					canvas.font = config.font;
>, <Line: +					canvas.fillStyle = config.fontColor;
>, <Line: +					var title = fitString(canvas, text, config);
>, <Line: +					canvas.fillText(title, 4, config.padding + 4);
>, <Line: +					var image = new Image();
>, <Line: +					image.src = el.toDataURL();
>, <Line: +					return {
>, <Line: +						image: image,
>, <Line: +						xOffset: config.xOffset,
>, <Line: +						yOffset: config.yOffset
>, <Line: +					};
>, <Line: +				}
>, <Line: +			}
>, <Line: +		]);
>]
[<Line: -(function(angular){
>, <Line: -function isDnDsSupported(){
>, <Line: -    return 'ondrag' in document.createElement("a");
>, <Line: -}
>, <Line: -if(!isDnDsSupported()){
>, <Line: -    angular.module("ang-drag-drop", []);
>, <Line: -    return;
>, <Line: -}
>, <Line: -if (window.jQuery && (-1 == window.jQuery.event.props.indexOf("dataTransfer"))) {
>, <Line: -    window.jQuery.event.props.push("dataTransfer");
>, <Line: -}
>, <Line: -var currentData;
>, <Line: -angular.module("ang-drag-drop",[])
>, <Line: -    .directive("uiDraggable", [
>, <Line: -        '$parse',
>, <Line: -        '$rootScope',
>, <Line: -        '$dragImage',
>, <Line: -        function ($parse, $rootScope, $dragImage) {
>, <Line: -            return function (scope, element, attrs) {
>, <Line: -                var dragData = "",
>, <Line: -                    isDragHandleUsed = false,
>, <Line: -                    dragHandleClass,
>, <Line: -                    draggingClass = attrs.draggingClass || "on-dragging",
>, <Line: -                    dragTarget;
>, <Line: -                element.attr("draggable", false);
>, <Line: -                attrs.$observe("uiDraggable", function (newValue) {
>, <Line: -                    if(newValue){
>, <Line: -                        element.attr("draggable", newValue);
>, <Line: -                    }
>, <Line: -                    else{
>, <Line: -                        element.removeAttr("draggable");
>, <Line: -                    }
>, <Line: -                });
>, <Line: -                if (attrs.drag) {
>, <Line: -                    scope.$watch(attrs.drag, function (newValue) {
>, <Line: -                        dragData = newValue || "";
>, <Line: -                    });
>, <Line: -                }
>, <Line: -                if (angular.isString(attrs.dragHandleClass)) {
>, <Line: -                    isDragHandleUsed = true;
>, <Line: -                    dragHandleClass = attrs.dragHandleClass.trim() || "drag-handle";
>, <Line: -                    element.bind("mousedown", function (e) {
>, <Line: -                        dragTarget = e.target;
>, <Line: -                    });
>, <Line: -                }
>, <Line: -                function dragendHandler(e) {
>, <Line: -                    setTimeout(function() {
>, <Line: -                      element.unbind('$destroy', dragendHandler);
>, <Line: -                    }, 0);
>, <Line: -                    var sendChannel = attrs.dragChannel || "defaultchannel";
>, <Line: -                    $rootScope.$broadcast("ANGULAR_DRAG_END", sendChannel);
>, <Line: -                    if (e.dataTransfer && e.dataTransfer.dropEffect !== "none") {
>, <Line: -                        if (attrs.onDropSuccess) {
>, <Line: -                            var fn = $parse(attrs.onDropSuccess);
>, <Line: -                            scope.$evalAsync(function () {
>, <Line: -                                fn(scope, {$event: e});
>, <Line: -                            });
>, <Line: -                        } else {
>, <Line: -                            if (attrs.onDropFailure) {
>, <Line: -                                var fn = $parse(attrs.onDropFailure);
>, <Line: -                                scope.$evalAsync(function () {
>, <Line: -                                    fn(scope, {$event: e});
>, <Line: -                                });
>, <Line: -                            }
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                    element.removeClass(draggingClass);
>, <Line: -                }
>, <Line: -                element.bind("dragend", dragendHandler);
>, <Line: -                element.bind("dragstart", function (e) {
>, <Line: -                    var isDragAllowed = !isDragHandleUsed || dragTarget.classList.contains(dragHandleClass);
>, <Line: -                    if (isDragAllowed) {
>, <Line: -                        var sendChannel = attrs.dragChannel || "defaultchannel";
>, <Line: -                        var sendData = angular.toJson({ data: dragData, channel: sendChannel });
>, <Line: -                        var dragImage = attrs.dragImage || null;
>, <Line: -                        element.addClass(draggingClass);
>, <Line: -                        element.bind('$destroy', dragendHandler);
>, <Line: -                        if (dragImage) {
>, <Line: -                            var dragImageFn = $parse(attrs.dragImage);
>, <Line: -                            scope.$evalAsync(function() {
>, <Line: -                                var dragImageParameters = dragImageFn(scope, {$event: e});
>, <Line: -                                if (dragImageParameters) {
>, <Line: -                                    if (angular.isString(dragImageParameters)) {
>, <Line: -                                        dragImageParameters = $dragImage.generate(dragImageParameters);
>, <Line: -                                    }
>, <Line: -                                    if (dragImageParameters.image) {
>, <Line: -                                        var xOffset = dragImageParameters.xOffset || 0,
>, <Line: -                                            yOffset = dragImageParameters.yOffset || 0;
>, <Line: -                                        e.dataTransfer.setDragImage(dragImageParameters.image, xOffset, yOffset);
>, <Line: -                                    }
>, <Line: -                                }
>, <Line: -                            });
>, <Line: -                        }
>, <Line: -                        e.dataTransfer.setData("dataToSend", sendData);
>, <Line: -                        currentData = angular.fromJson(sendData);
>, <Line: -                        e.dataTransfer.effectAllowed = "copyMove";
>, <Line: -                        $rootScope.$broadcast("ANGULAR_DRAG_START", sendChannel, currentData.data);
>, <Line: -                    }
>, <Line: -                    else {
>, <Line: -                        e.preventDefault();
>, <Line: -                    }
>, <Line: -                });
>, <Line: -            };
>, <Line: -        }
>, <Line: -    ])
>, <Line: -    .directive("uiOnDrop", [
>, <Line: -        '$parse',
>, <Line: -        '$rootScope',
>, <Line: -        function ($parse, $rootScope) {
>, <Line: -            return function (scope, element, attr) {
>, <Line: -                var dragging = 0; //Ref. http://stackoverflow.com/a/10906204
>, <Line: -                var dropChannel = attr.dropChannel || "defaultchannel" ;
>, <Line: -                var dragChannel = "";
>, <Line: -                var dragEnterClass = attr.dragEnterClass || "on-drag-enter";
>, <Line: -                var dragHoverClass = attr.dragHoverClass || "on-drag-hover";
>, <Line: -                var customDragEnterEvent = $parse(attr.onDragEnter);
>, <Line: -                var customDragLeaveEvent = $parse(attr.onDragLeave);
>, <Line: -                function onDragOver(e) {
>, <Line: -                    if (e.preventDefault) {
>, <Line: -                        e.preventDefault(); // Necessary. Allows us to drop.
>, <Line: -                    }
>, <Line: -                    if (e.stopPropagation) {
>, <Line: -                        e.stopPropagation();
>, <Line: -                    }
>, <Line: -                    var fn = $parse(attr.uiOnDragOver);
>, <Line: -                    scope.$evalAsync(function () {
>, <Line: -                        fn(scope, {$event: e, $channel: dropChannel});
>, <Line: -                    });
>, <Line: -                    e.dataTransfer.dropEffect = e.shiftKey ? 'copy' : 'move';
>, <Line: -                    return false;
>, <Line: -                }
>, <Line: -                function onDragLeave(e) {
>, <Line: -                    if (e.preventDefault) {
>, <Line: -                        e.preventDefault();
>, <Line: -                    }
>, <Line: -                    if (e.stopPropagation) {
>, <Line: -                        e.stopPropagation();
>, <Line: -                    }
>, <Line: -                    dragging--;
>, <Line: -                    if (dragging == 0) {
>, <Line: -                        scope.$evalAsync(function () {
>, <Line: -                            customDragEnterEvent(scope, {$event: e});
>, <Line: -                        });
>, <Line: -                        element.removeClass(dragHoverClass);
>, <Line: -                    }
>, <Line: -                    var fn = $parse(attr.uiOnDragLeave);
>, <Line: -                    scope.$evalAsync(function () {
>, <Line: -                        fn(scope, {$event: e, $channel: dropChannel});
>, <Line: -                    });
>, <Line: -                }
>, <Line: -                function onDragEnter(e) {
>, <Line: -                    if (e.preventDefault) {
>, <Line: -                        e.preventDefault();
>, <Line: -                    }
>, <Line: -                    if (e.stopPropagation) {
>, <Line: -                        e.stopPropagation();
>, <Line: -                    }
>, <Line: -                    dragging++;
>, <Line: -                    var fn = $parse(attr.uiOnDragEnter);
>, <Line: -                    scope.$evalAsync(function () {
>, <Line: -                        fn(scope, {$event: e, $channel: dropChannel});
>, <Line: -                    });
>, <Line: -                    $rootScope.$broadcast("ANGULAR_HOVER", dragChannel);
>, <Line: -                    scope.$evalAsync(function () {
>, <Line: -                        customDragLeaveEvent(scope, {$event: e});
>, <Line: -                    });
>, <Line: -                    element.addClass(dragHoverClass);
>, <Line: -                }
>, <Line: -                function onDrop(e) {
>, <Line: -                    if (e.preventDefault) {
>, <Line: -                        e.preventDefault(); // Necessary. Allows us to drop.
>, <Line: -                    }
>, <Line: -                    if (e.stopPropagation) {
>, <Line: -                        e.stopPropagation(); // Necessary. Allows us to drop.
>, <Line: -                    }
>, <Line: -                    var sendData = e.dataTransfer.getData("dataToSend");
>, <Line: -                    sendData = angular.fromJson(sendData);
>, <Line: -                    var fn = $parse(attr.uiOnDrop);
>, <Line: -                    scope.$evalAsync(function () {
>, <Line: -                        fn(scope, {$data: sendData.data, $event: e, $channel: sendData.channel});
>, <Line: -                    });
>, <Line: -                    element.removeClass(dragEnterClass);
>, <Line: -                    dragging = 0;
>, <Line: -                }
>, <Line: -                function isDragChannelAccepted(dragChannel, dropChannel) {
>, <Line: -                    if (dropChannel === "*") {
>, <Line: -                        return true;
>, <Line: -                    }
>, <Line: -                    var channelMatchPattern = new RegExp("(\\s|[,])+(" + dragChannel + ")(\\s|[,])+", "i");
>, <Line: -                    return channelMatchPattern.test("," + dropChannel + ",");
>, <Line: -                }
>, <Line: -                function preventNativeDnD(e) {
>, <Line: -                    if (e.preventDefault) {
>, <Line: -                        e.preventDefault();
>, <Line: -                    }
>, <Line: -                    if (e.stopPropagation) {
>, <Line: -                        e.stopPropagation();
>, <Line: -                    }
>, <Line: -                    e.dataTransfer.dropEffect = "none";
>, <Line: -                    return false;
>, <Line: -                }
>, <Line: -			var deregisterDragStart = $rootScope.$on("ANGULAR_DRAG_START", function (event, channel) {
>, <Line: -                    dragChannel = channel;
>, <Line: -                    if (isDragChannelAccepted(channel, dropChannel)) {
>, <Line: -                        if (attr.dropValidate) {
>, <Line: -                            var validateFn = $parse(attr.dropValidate);
>, <Line: -                            var valid = validateFn(scope, {$data: currentData.data, $channel: currentData.channel});
>, <Line: -                            if (!valid) {
>, <Line: -                                element.bind("dragover", preventNativeDnD);
>, <Line: -                                element.bind("dragenter", preventNativeDnD);
>, <Line: -                                element.bind("dragleave", preventNativeDnD);
>, <Line: -                                element.bind("drop", preventNativeDnD);
>, <Line: -								return;
>, <Line: -                            }
>, <Line: -                        }
>, <Line: -                        element.bind("dragover", onDragOver);
>, <Line: -                        element.bind("dragenter", onDragEnter);
>, <Line: -                        element.bind("dragleave", onDragLeave);
>, <Line: -                        element.bind("drop", onDrop);
>, <Line: -                        element.addClass(dragEnterClass);
>, <Line: -                    }
>, <Line: -					else {
>, <Line: -					    element.bind("dragover", preventNativeDnD);
>, <Line: -					    element.bind("dragenter", preventNativeDnD);
>, <Line: -					    element.bind("dragleave", preventNativeDnD);
>, <Line: -					    element.bind("drop", preventNativeDnD);
>, <Line: -                });
>, <Line: -                var deregisterDragEnd = $rootScope.$on("ANGULAR_DRAG_END", function (e, channel) {
>, <Line: -                    dragChannel = "";
>, <Line: -                    if (isDragChannelAccepted(channel, dropChannel)) {
>, <Line: -                        element.unbind("dragover", onDragOver);
>, <Line: -                        element.unbind("dragenter", onDragEnter);
>, <Line: -                        element.unbind("dragleave", onDragLeave);
>, <Line: -                        element.unbind("drop", onDrop);
>, <Line: -                        element.removeClass(dragHoverClass);
>, <Line: -                        element.removeClass(dragEnterClass);
>, <Line: -                    }
>, <Line: -					element.unbind("dragover", preventNativeDnD);
>, <Line: -					element.unbind("dragenter", preventNativeDnD);
>, <Line: -					element.unbind("dragleave", preventNativeDnD);
>, <Line: -					element.unbind("drop", preventNativeDnD);
>, <Line: -                });
>, <Line: -                var deregisterDragHover = $rootScope.$on("ANGULAR_HOVER", function (e, channel) {
>, <Line: -                    if (isDragChannelAccepted(channel, dropChannel)) {
>, <Line: -                      element.removeClass(dragHoverClass);
>, <Line: -                    }
>, <Line: -                });
>, <Line: -                scope.$on('$destroy', function () {
>, <Line: -                    deregisterDragStart();
>, <Line: -                    deregisterDragEnd();
>, <Line: -                    deregisterDragHover();
>, <Line: -                });
>, <Line: -                attr.$observe('dropChannel', function (value) {
>, <Line: -                    if (value) {
>, <Line: -                        dropChannel = value;
>, <Line: -                    }
>, <Line: -                });
>, <Line: -            };
>, <Line: -        }
>, <Line: -    ])
>, <Line: -    .constant("$dragImageConfig", {
>, <Line: -        height: 20,
>, <Line: -        width: 200,
>, <Line: -        padding: 10,
>, <Line: -        font: 'bold 11px Arial',
>, <Line: -        fontColor: '#eee8d5',
>, <Line: -        backgroundColor: '#93a1a1',
>, <Line: -        xOffset: 0,
>, <Line: -        yOffset: 0
>, <Line: -    })
>, <Line: -    .service("$dragImage", [
>, <Line: -        '$dragImageConfig',
>, <Line: -        function (defaultConfig) {
>, <Line: -            var ELLIPSIS = '…';
>, <Line: -            function fitString(canvas, text, config) {
>, <Line: -                var width = canvas.measureText(text).width;
>, <Line: -                if (width < config.width) {
>, <Line: -                    return text;
>, <Line: -                }
>, <Line: -                while (width + config.padding > config.width) {
>, <Line: -                    text = text.substring(0, text.length - 1);
>, <Line: -                    width = canvas.measureText(text + ELLIPSIS).width;
>, <Line: -                }
>, <Line: -                return text + ELLIPSIS;
>, <Line: -            };
>, <Line: -            this.generate = function (text, options) {
>, <Line: -                var config = angular.extend({}, defaultConfig, options || {});
>, <Line: -                var el = document.createElement('canvas');
>, <Line: -                el.height = config.height;
>, <Line: -                el.width = config.width;
>, <Line: -                var canvas = el.getContext('2d');
>, <Line: -                canvas.fillStyle = config.backgroundColor;
>, <Line: -                canvas.fillRect(0, 0, config.width, config.height);
>, <Line: -                canvas.font = config.font;
>, <Line: -                canvas.fillStyle = config.fontColor;
>, <Line: -                var title = fitString(canvas, text, config);
>, <Line: -                canvas.fillText(title, 4, config.padding + 4);
>, <Line: -                var image = new Image();
>, <Line: -                image.src = el.toDataURL();
>, <Line: -                return {
>, <Line: -                    image: image,
>, <Line: -                    xOffset: config.xOffset,
>, <Line: -                    yOffset: config.yOffset
>, <Line: -                };
>, <Line: -            }
>, <Line: -        }
>, <Line: -    ]);
>]