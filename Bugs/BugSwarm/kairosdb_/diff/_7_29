[]
[<Line: -package org.kairosdb.util;
>, <Line: -import com.datastax.driver.core.exceptions.NoHostAvailableException;
>, <Line: -import com.github.rholder.retry.Retryer;
>, <Line: -import com.github.rholder.retry.RetryerBuilder;
>, <Line: -import com.github.rholder.retry.WaitStrategies;
>, <Line: -import com.google.common.base.Predicates;
>, <Line: -import com.google.common.base.Stopwatch;
>, <Line: -import com.google.common.collect.ImmutableSortedMap;
>, <Line: -import com.google.common.eventbus.EventBus;
>, <Line: -import org.kairosdb.core.datapoints.DoubleDataPointFactory;
>, <Line: -import org.kairosdb.core.datapoints.DoubleDataPointFactoryImpl;
>, <Line: -import org.kairosdb.datastore.cassandra.BatchHandler;
>, <Line: -import org.kairosdb.events.DataPointEvent;
>, <Line: -import javax.inject.Inject;
>, <Line: -import java.util.List;
>, <Line: -import java.util.concurrent.*;
>, <Line: -/**
>, <Line: - Created by bhawkins on 10/27/16.
>, <Line: - */
>, <Line: -public class AdaptiveExecutorService
>, <Line: -{
>, <Line: -	private final EventBus m_eventBus;
>, <Line: -	private final ExecutorService m_internalExecutor;
>, <Line: -	private final ThreadGroup m_threadGroup;
>, <Line: -	private final CongestionSemaphore m_semaphore;
>, <Line: -	private final CongestionTimer m_congestionTimer;
>, <Line: -	private int m_permitCount = 5;
>, <Line: -	private final Retryer<Long> m_retryer;
>, <Line: -	@Inject
>, <Line: -	private DoubleDataPointFactory m_dataPointFactory = new DoubleDataPointFactoryImpl();
>, <Line: -	@Inject
>, <Line: -	public AdaptiveExecutorService(EventBus eventBus)
>, <Line: -	{
>, <Line: -		m_eventBus = eventBus;
>, <Line: -		m_congestionTimer = new CongestionTimer(m_permitCount);
>, <Line: -		m_semaphore = new CongestionSemaphore(m_permitCount);
>, <Line: -		m_threadGroup = new ThreadGroup("KairosDynamic");
>, <Line: -		/*m_internalExecutor = Executors.newCachedThreadPool(new ThreadFactory()
>, <Line: -		{
>, <Line: -			@Override
>, <Line: -			public Thread newThread(Runnable r)
>, <Line: -			{
>, <Line: -				Thread t = new Thread(m_threadGroup, "worker");
>, <Line: -				return t;
>, <Line: -			}
>, <Line: -		});*/
>, <Line: -		m_retryer = RetryerBuilder.<Long>newBuilder()
>, <Line: -				.retryIfExceptionOfType(NoHostAvailableException.class)
>, <Line: -				.withWaitStrategy(WaitStrategies.fibonacciWait(10, TimeUnit.SECONDS))
>, <Line: -				.build();
>, <Line: -		m_internalExecutor = Executors.newCachedThreadPool();
>, <Line: -	}
>, <Line: -	private void increasePermitCount()
>, <Line: -	{
>, <Line: -		m_permitCount ++;
>, <Line: -		m_congestionTimer.setTaskPerBatch(m_permitCount);
>, <Line: -		m_semaphore.release();
>, <Line: -	}
>, <Line: -	public void shutdown()
>, <Line: -	{
>, <Line: -	}
>, <Line: -	private Stopwatch m_timer = Stopwatch.createStarted();
>, <Line: -	public void submit(BatchHandler batchHandler)
>, <Line: -	{
>, <Line: -		if (m_timer.elapsed(TimeUnit.SECONDS) >= 5)
>, <Line: -		{
>, <Line: -			/*if ((m_semaphore.availablePermits() == 0) && (batchHandler.isFullBatch()))
>, <Line: -			{
>, <Line: -				increasePermitCount();
>, <Line: -			}*/
>, <Line: -			m_timer.reset();
>, <Line: -			m_timer.start();
>, <Line: -		}
>, <Line: -		try
>, <Line: -		{
>, <Line: -			//System.out.println("Execute called");
>, <Line: -			m_semaphore.acquire();
>, <Line: -			//System.out.println("Submitting");
>, <Line: -			m_internalExecutor.submit(newTaskFor(m_retryer.wrap(batchHandler)));
>, <Line: -			//System.out.println("Done submitting");
>, <Line: -		}
>, <Line: -		catch (InterruptedException e)
>, <Line: -		{
>, <Line: -			e.printStackTrace();
>, <Line: -		}
>, <Line: -	}
>, <Line: -	protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable)
>, <Line: -	{
>, <Line: -		//System.out.println("Returning new future");
>, <Line: -		return new DynamicFutureTask<T>(callable);
>, <Line: -	}
>, <Line: -	private class DynamicFutureTask<T> extends FutureTask<T>
>, <Line: -	{
>, <Line: -		private final Stopwatch m_stopwatch;
>, <Line: -		public DynamicFutureTask(Callable<T> callable)
>, <Line: -		{
>, <Line: -			super(callable);
>, <Line: -			m_stopwatch = Stopwatch.createUnstarted();
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void run()
>, <Line: -		{
>, <Line: -			//System.out.println("DynamicFutureTask.run");
>, <Line: -			m_stopwatch.start();
>, <Line: -			super.run();
>, <Line: -			m_stopwatch.stop();
>, <Line: -			//Todo do something with elapsed time
>, <Line: -			SimpleStats.Data timerStat = m_congestionTimer.reportTaskTime(m_stopwatch.elapsed(TimeUnit.MILLISECONDS));
>, <Line: -			m_semaphore.release();
>, <Line: -			if (timerStat != null)
>, <Line: -			{
>, <Line: -				//System.out.println("Sending stats");
>, <Line: -				long now = System.currentTimeMillis();
>, <Line: -				ImmutableSortedMap<String, String> tags = ImmutableSortedMap.of("host", "test");
>, <Line: -				DataPointEvent dpe = new DataPointEvent("kairosdb.congestion.stats.min", tags,
>, <Line: -						m_dataPointFactory.createDataPoint(now, timerStat.min));
>, <Line: -				m_eventBus.post(dpe);
>, <Line: -				dpe = new DataPointEvent("kairosdb.congestion.stats.max", tags,
>, <Line: -						m_dataPointFactory.createDataPoint(now, timerStat.max));
>, <Line: -				m_eventBus.post(dpe);
>, <Line: -				dpe = new DataPointEvent("kairosdb.congestion.stats.avg", tags,
>, <Line: -						m_dataPointFactory.createDataPoint(now, timerStat.avg));
>, <Line: -				m_eventBus.post(dpe);
>, <Line: -				dpe = new DataPointEvent("kairosdb.congestion.stats.permit_count", tags,
>, <Line: -						m_dataPointFactory.createDataPoint(now, m_permitCount));
>, <Line: -				m_eventBus.post(dpe);
>, <Line: -			}
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void set(T result)
>, <Line: -		{
>, <Line: -			//Todo Calculate time to run and adjust number of threads
>, <Line: -			super.set(result);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private static class CongestionSemaphore extends Semaphore
>, <Line: -	{
>, <Line: -		public CongestionSemaphore(int permits)
>, <Line: -		{
>, <Line: -			super(permits);
>, <Line: -		}
>, <Line: -		public void reducePermits(int reduction)
>, <Line: -		{
>, <Line: -			super.reducePermits(reduction);
>, <Line: -		}
>, <Line: -	}
>, <Line: -}
>]