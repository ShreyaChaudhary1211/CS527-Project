[<Line: +import org.kairosdb.rollup.Rollup;
>, <Line: +import org.kairosdb.rollup.RollupTask;
>, <Line: +			QueryPluginFactory pluginFactory)
>, <Line: +		builder.registerTypeAdapter(SetMultimap.class, new SetMultimapDeserializer());
>, <Line: +		builder.registerTypeAdapter(RelativeTime.class, new RelativeTimeSerializer());
>, <Line: +		builder.registerTypeAdapter(SetMultimap.class, new SetMultimapSerializer());
>, <Line: +	public Gson getGson()
>, <Line: +	{
>, <Line: +		return m_gson;
>, <Line: +	}
>, <Line: +		return parseQueryMetric(obj);
>, <Line: +	}
>, <Line: +	private List<QueryMetric> parseQueryMetric(JsonObject obj) throws QueryException, BeanValidationException
>, <Line: +	{
>, <Line: +		return parseQueryMetric(obj, "");
>, <Line: +	}
>, <Line: +	private List<QueryMetric> parseQueryMetric(JsonObject obj, String contextPrefix) throws QueryException, BeanValidationException
>, <Line: +	{
>, <Line: +		List<QueryMetric> ret = new ArrayList<QueryMetric>();
>, <Line: +			throw new BeanValidationException(new SimpleConstraintViolation("metric[]", "must have a size of at least 1"), contextPrefix + "query");
>, <Line: +			String context = (!contextPrefix.isEmpty() ? contextPrefix + "." : contextPrefix) + "query.metric[" + I + "]";
>, <Line: +				long startTime = getStartTime(query, context);
>, <Line: +	public List<RollupTask> parseRollupTasks(String json) throws BeanValidationException, QueryException
>, <Line: +	{
>, <Line: +		List<RollupTask> tasks = new ArrayList<RollupTask>();
>, <Line: +		JsonParser parser = new JsonParser();
>, <Line: +		JsonArray rollupTasks = parser.parse(json).getAsJsonArray();
>, <Line: +		for (int i = 0; i < rollupTasks.size(); i++)
>, <Line: +		{
>, <Line: +			JsonObject taskObject = rollupTasks.get(i).getAsJsonObject();
>, <Line: +			RollupTask task = parseRollupTask(taskObject, "tasks[" + i + "]");
>, <Line: +			task.addJson(taskObject.toString().replaceAll("\\n", ""));
>, <Line: +			tasks.add(task);
>, <Line: +		}
>, <Line: +		return tasks;
>, <Line: +	}
>, <Line: +	public RollupTask parseRollupTask(String json) throws BeanValidationException, QueryException
>, <Line: +	{
>, <Line: +		JsonParser parser = new JsonParser();
>, <Line: +		JsonObject taskObject = parser.parse(json).getAsJsonObject();
>, <Line: +		RollupTask task = parseRollupTask(taskObject, "");
>, <Line: +		task.addJson(taskObject.toString().replaceAll("\\n", ""));
>, <Line: +		return task;
>, <Line: +	}
>, <Line: +	public RollupTask parseRollupTask(JsonObject rollupTask, String context) throws BeanValidationException, QueryException
>, <Line: +	{
>, <Line: +		RollupTask task = m_gson.fromJson(rollupTask.getAsJsonObject(), RollupTask.class);
>, <Line: +		validateObject(task);
>, <Line: +		JsonArray rollups = rollupTask.getAsJsonObject().getAsJsonArray("rollups");
>, <Line: +		if (rollups != null)
>, <Line: +		{
>, <Line: +			for (int j = 0; j < rollups.size(); j++)
>, <Line: +			{
>, <Line: +				JsonObject rollupObject = rollups.get(j).getAsJsonObject();
>, <Line: +				Rollup rollup = m_gson.fromJson(rollupObject, Rollup.class);
>, <Line: +				context = context + "rollup[" + j + "]";
>, <Line: +				validateObject(rollup, context);
>, <Line: +				JsonObject queryObject = rollupObject.getAsJsonObject("query");
>, <Line: +				List<QueryMetric> queries = parseQueryMetric(queryObject, context);
>, <Line: +				for (int k = 0; k < queries.size(); k++)
>, <Line: +				{
>, <Line: +					QueryMetric query = queries.get(k);
>, <Line: +					context += ".query[" + k + "]";
>, <Line: +					validateHasRangeAggregator(query, context);
>, <Line: +					// Add aggregators needed for rollups
>, <Line: +					SaveAsAggregator saveAsAggregator = (SaveAsAggregator) m_aggregatorFactory.createAggregator("save_as");
>, <Line: +					saveAsAggregator.setMetricName(rollup.getSaveAs());
>, <Line: +					TrimAggregator trimAggregator = (TrimAggregator) m_aggregatorFactory.createAggregator("trim");
>, <Line: +					trimAggregator.setTrim(TrimAggregator.Trim.LAST);
>, <Line: +					query.addAggregator(saveAsAggregator);
>, <Line: +					query.addAggregator(trimAggregator);
>, <Line: +				}
>, <Line: +				rollup.addQueries(queries);
>, <Line: +				task.addRollup(rollup);
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return task;
>, <Line: +	}
>, <Line: +	private void validateHasRangeAggregator(QueryMetric query, String context) throws BeanValidationException
>, <Line: +	{
>, <Line: +		boolean hasRangeAggregator = false;
>, <Line: +		for (Aggregator aggregator : query.getAggregators())
>, <Line: +		{
>, <Line: +			if (aggregator instanceof RangeAggregator)
>, <Line: +			{
>, <Line: +				hasRangeAggregator = true;
>, <Line: +				break;
>, <Line: +			}
>, <Line: +		}
>, <Line: +		if (!hasRangeAggregator)
>, <Line: +		{
>, <Line: +			throw new BeanValidationException(new SimpleConstraintViolation("aggregator", "At least one aggregator must be a range aggregator"), context);
>, <Line: +		}
>, <Line: +	}
>, <Line: +			catch (NumberFormatException e)
>, <Line: +	private long getStartTime(Query request, String context) throws BeanValidationException
>, <Line: +			throw new BeanValidationException(new SimpleConstraintViolation("start_time", "relative or absolute time must be set"), context);
>]
[<Line: -	                   QueryPluginFactory pluginFactory)
>, <Line: -		List<QueryMetric> ret = new ArrayList<QueryMetric>();
>, <Line: -			throw new BeanValidationException(new SimpleConstraintViolation("metric[]", "must have a size of at least 1"), "query");
>, <Line: -			String context = "query.metric[" + I + "]";
>, <Line: -				long startTime = getStartTime(query);
>, <Line: -			catch(NumberFormatException e)
>, <Line: -	private long getStartTime(Query request) throws BeanValidationException
>, <Line: -			throw new BeanValidationException(new SimpleConstraintViolation("start_time", "relative or absolute time must be set"), "query");
>]