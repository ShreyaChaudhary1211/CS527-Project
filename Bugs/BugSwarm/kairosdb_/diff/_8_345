[<Line: +	var options = {
>, <Line: +		series: {
>, <Line: +			stackpercent: null
>, <Line: +		} // or number/string
>, <Line: +	};
>, <Line: +	function init(plot) {
>, <Line: +		// will be built up dynamically as a hash from x-value, or y-value if horizontal
>, <Line: +		var stackBases = {};
>, <Line: +		var processed = false;
>, <Line: +		var stackSums = {};
>, <Line: +		//set percentage for stacked chart
>, <Line: +		function processRawData(plot, series, data, datapoints) {
>, <Line: +			if (!processed) {
>, <Line: +				processed = true;
>, <Line: +				stackSums = getStackSums(plot.getData());
>, <Line: +			}
>, <Line: +		}
>, <Line: +		//calculate summary
>, <Line: +		function getStackSums(_data) {
>, <Line: +			var data_len = _data.length;
>, <Line: +			var sums = {};
>, <Line: +			if (data_len > 0) {
>, <Line: +				//caculate summary
>, <Line: +				for (var i = 0; i < data_len; i++) {
>, <Line: +					if (_data[i].stackpercent) {
>, <Line: +						var num = _data[i].data.length;
>, <Line: +						for (var j = 0; j < num; j++) {
>, <Line: +							var value = 0;
>, <Line: +							if (_data[i].data[j][1] != null) {
>, <Line: +								value = _data[i].data[j][value_idx];
>, <Line: +							}
>, <Line: +							if (sums[_data[i].data[j][key_idx] + ""]) {
>, <Line: +								sums[_data[i].data[j][key_idx] + ""] += value;
>, <Line: +							} else {
>, <Line: +								sums[_data[i].data[j][key_idx] + ""] = value;
>, <Line: +							}
>, <Line: +						}
>, <Line: +					}
>, <Line: +				}
>, <Line: +			}
>, <Line: +			return sums;
>, <Line: +		}
>, <Line: +		function stackData(plot, s, datapoints) {
>, <Line: +			if (!s.stackpercent) return;
>, <Line: +			if (!processed) {
>, <Line: +				stackSums = getStackSums(plot.getData());
>, <Line: +			}
>, <Line: +			var newPoints = [];
>, <Line: +				if (stackSums[newPoints[i + key_idx] + ""] > 0) {
>, <Line: +			datapoints.points = newPoints;
>, <Line: +		}
>, <Line: +		plot.hooks.processDatapoints.push(stackData);
>, <Line: +	}
>, <Line: +	$.plot.plugins.push({
>, <Line: +		init: init,
>, <Line: +		options: options,
>, <Line: +		name: 'stackpercent',
>, <Line: +		version: '0.1'
>, <Line: +	});
>]
[<Line: -    var options = {
>, <Line: -        series: {
>, <Line: -            stackpercent: null
>, <Line: -        } // or number/string
>, <Line: -    };
>, <Line: -    function init(plot) {
>, <Line: -        // will be built up dynamically as a hash from x-value, or y-value if horizontal
>, <Line: -        var stackBases = {};
>, <Line: -        var processed = false;
>, <Line: -        var stackSums = {};
>, <Line: -        //set percentage for stacked chart
>, <Line: -        function processRawData(plot, series, data, datapoints) {
>, <Line: -            if (!processed) {
>, <Line: -                processed = true;
>, <Line: -                stackSums = getStackSums(plot.getData());
>, <Line: -            }
>, <Line: -        }
>, <Line: -        //calculate summary
>, <Line: -        function getStackSums(_data) {
>, <Line: -            var data_len = _data.length;
>, <Line: -            var sums = {};
>, <Line: -            if (data_len > 0) {
>, <Line: -                //caculate summary
>, <Line: -                for (var i = 0; i < data_len; i++) {
>, <Line: -                    if (_data[i].stackpercent) {
>, <Line: -                        var num = _data[i].data.length;
>, <Line: -                        for (var j = 0; j < num; j++) {
>, <Line: -                            var value = 0;
>, <Line: -                            if (_data[i].data[j][1] != null) {
>, <Line: -                                value = _data[i].data[j][value_idx];
>, <Line: -                            }
>, <Line: -                            if (sums[_data[i].data[j][key_idx] + ""]) {
>, <Line: -                                sums[_data[i].data[j][key_idx] + ""] += value;
>, <Line: -                            } else {
>, <Line: -                                sums[_data[i].data[j][key_idx] + ""] = value;
>, <Line: -                            }
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                }
>, <Line: -            }
>, <Line: -            return sums;
>, <Line: -        }
>, <Line: -        function stackData(plot, s, datapoints) {
>, <Line: -            if (!s.stackpercent) return;
>, <Line: -            if (!processed) {
>, <Line: -                stackSums = getStackSums(plot.getData());
>, <Line: -            }
>, <Line: -            var newPoints = [];
>, <Line: -				if ( stackSums[newPoints[i+key_idx]+""] > 0 ){
>, <Line: -            datapoints.points = newPoints;
>, <Line: -        }
>, <Line: -        plot.hooks.processDatapoints.push(stackData);
>, <Line: -    }
>, <Line: -    $.plot.plugins.push({
>, <Line: -        init: init,
>, <Line: -        options: options,
>, <Line: -        name: 'stackpercent',
>, <Line: -        version: '0.1'
>, <Line: -    });
>]