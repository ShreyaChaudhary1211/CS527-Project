[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +		'kbn',
>, <Line: +		'moment'
>, <Line: +	],
>, <Line: +	function (angular, _, kbn) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.services');
>, <Line: +		module.factory('CustomDatasource', function ($q) {
>, <Line: +			// the datasource object passed to constructor
>, <Line: +			// is the same defined in config.js
>, <Line: +			function CustomDatasource(datasource) {
>, <Line: +				this.name = datasource.name;
>, <Line: +				this.supportMetrics = true;
>, <Line: +				this.url = datasource.url;
>, <Line: +			}
>, <Line: +			CustomDatasource.prototype.query = function (options) {
>, <Line: +				// get from & to in seconds
>, <Line: +				var from = kbn.parseDate(options.range.from).getTime();
>, <Line: +				var to = kbn.parseDate(options.range.to).getTime();
>, <Line: +				var series = [];
>, <Line: +				var stepInSeconds = (to - from) / options.maxDataPoints;
>, <Line: +				for (var i = 0; i < 3; i++) {
>, <Line: +					var walker = Math.random() * 100;
>, <Line: +					var time = from;
>, <Line: +					var timeSeries = {
>, <Line: +						target: "Series " + i,
>, <Line: +						datapoints: []
>, <Line: +					};
>, <Line: +					for (var j = 0; j < options.maxDataPoints; j++) {
>, <Line: +						timeSeries.datapoints[j] = [walker, time];
>, <Line: +						walker += Math.random() - 0.5;
>, <Line: +						time += stepInSeconds;
>, <Line: +					}
>, <Line: +					series.push(timeSeries);
>, <Line: +				}
>, <Line: +				return $q.when({data: series});
>, <Line: +			};
>, <Line: +			return CustomDatasource;
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -  'kbn',
>, <Line: -  'moment'
>, <Line: -],
>, <Line: -function (angular, _, kbn) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.services');
>, <Line: -  module.factory('CustomDatasource', function($q) {
>, <Line: -    // the datasource object passed to constructor
>, <Line: -    // is the same defined in config.js
>, <Line: -    function CustomDatasource(datasource) {
>, <Line: -      this.name = datasource.name;
>, <Line: -      this.supportMetrics = true;
>, <Line: -      this.url = datasource.url;
>, <Line: -    }
>, <Line: -    CustomDatasource.prototype.query = function(options) {
>, <Line: -      // get from & to in seconds
>, <Line: -      var from = kbn.parseDate(options.range.from).getTime();
>, <Line: -      var to = kbn.parseDate(options.range.to).getTime();
>, <Line: -      var series = [];
>, <Line: -      var stepInSeconds = (to - from) / options.maxDataPoints;
>, <Line: -      for (var i = 0; i < 3; i++) {
>, <Line: -        var walker = Math.random() * 100;
>, <Line: -        var time = from;
>, <Line: -        var timeSeries = {
>, <Line: -          target: "Series " + i,
>, <Line: -          datapoints: []
>, <Line: -        };
>, <Line: -        for (var j = 0; j < options.maxDataPoints; j++) {
>, <Line: -          timeSeries.datapoints[j] = [walker, time];
>, <Line: -          walker += Math.random() - 0.5;
>, <Line: -          time += stepInSeconds;
>, <Line: -        }
>, <Line: -        series.push(timeSeries);
>, <Line: -      }
>, <Line: -      return $q.when({data: series });
>, <Line: -    };
>, <Line: -    return CustomDatasource;
>, <Line: -  });
>, <Line: -});
>]