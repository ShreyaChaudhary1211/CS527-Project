[<Line: +		'angular',
>, <Line: +		'lodash'
>, <Line: +	],
>, <Line: +	function (angular, _) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.services');
>, <Line: +		module.service('timer', function ($timeout) {
>, <Line: +			// This service really just tracks a list of $timeout promises to give us a
>, <Line: +			// method for cancelling them all when we need to
>, <Line: +			var timers = [];
>, <Line: +			this.register = function (promise) {
>, <Line: +				timers.push(promise);
>, <Line: +				return promise;
>, <Line: +			};
>, <Line: +			this.cancel = function (promise) {
>, <Line: +				timers = _.without(timers, promise);
>, <Line: +				$timeout.cancel(promise);
>, <Line: +			};
>, <Line: +			this.cancel_all = function () {
>, <Line: +				_.each(timers, function (t) {
>, <Line: +					$timeout.cancel(t);
>, <Line: +				});
>, <Line: +				timers = [];
>, <Line: +			};
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash'
>, <Line: -],
>, <Line: -function (angular, _) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.services');
>, <Line: -  module.service('timer', function($timeout) {
>, <Line: -    // This service really just tracks a list of $timeout promises to give us a
>, <Line: -    // method for cancelling them all when we need to
>, <Line: -    var timers = [];
>, <Line: -    this.register = function(promise) {
>, <Line: -      timers.push(promise);
>, <Line: -      return promise;
>, <Line: -    };
>, <Line: -    this.cancel = function(promise) {
>, <Line: -      timers = _.without(timers,promise);
>, <Line: -      $timeout.cancel(promise);
>, <Line: -    };
>, <Line: -    this.cancel_all = function() {
>, <Line: -      _.each(timers, function(t) {
>, <Line: -        $timeout.cancel(t);
>, <Line: -      });
>, <Line: -      timers = [];
>, <Line: -    };
>, <Line: -  });
>, <Line: -});
>]