[<Line: + Copyright (c) 2007-2014 IOLA and Ole Laursen.
>, <Line: + Licensed under the MIT license.
>, <Line: + The plugin supports these options:
>, <Line: + crosshair: {
>, <Line: + mode: null or "x" or "y" or "xy"
>, <Line: + color: color
>, <Line: + lineWidth: number
>, <Line: + }
>, <Line: + Set the mode to one of "x", "y" or "xy". The "x" mode enables a vertical
>, <Line: + crosshair that lets you trace the values on the x axis, "y" enables a
>, <Line: + horizontal crosshair and "xy" enables them both. "color" is the color of the
>, <Line: + crosshair (default is "rgba(170, 0, 0, 0.80)"), "lineWidth" is the width of
>, <Line: + the drawn lines (default is 1).
>, <Line: + The plugin also adds four public methods:
>, <Line: + - setCrosshair( pos )
>, <Line: + Set the position of the crosshair. Note that this is cleared if the user
>, <Line: + moves the mouse. "pos" is in coordinates of the plot and should be on the
>, <Line: + form { x: xpos, y: ypos } (you can use x2/x3/... if you're using multiple
>, <Line: + axes), which is coincidentally the same format as what you get from a
>, <Line: + "plothover" event. If "pos" is null, the crosshair is cleared.
>, <Line: + - clearCrosshair()
>, <Line: + Clear the crosshair.
>, <Line: + - lockCrosshair(pos)
>, <Line: + Cause the crosshair to lock to the current location, no longer updating if
>, <Line: + the user moves the mouse. Optionally supply a position (passed on to
>, <Line: + setCrosshair()) to move it to.
>, <Line: + Example usage:
>, <Line: + var myFlot = $.plot( $("#graph"), ..., { crosshair: { mode: "x" } } };
>, <Line: + $("#graph").bind( "plothover", function ( evt, position, item ) {
>, <Line: + if ( item ) {
>, <Line: + // Lock the crosshair to the data point being hovered
>, <Line: + myFlot.lockCrosshair({
>, <Line: + x: item.datapoint[ 0 ],
>, <Line: + y: item.datapoint[ 1 ]
>, <Line: + });
>, <Line: + } else {
>, <Line: + // Return normal crosshair operation
>, <Line: + myFlot.unlockCrosshair();
>, <Line: + }
>, <Line: + });
>, <Line: + - unlockCrosshair()
>, <Line: + Free the crosshair to move again after locking it.
>, <Line: + */
>, <Line: +	var options = {
>, <Line: +		crosshair: {
>, <Line: +			mode: null, // one of null, "x", "y" or "xy",
>, <Line: +			color: "rgba(170, 0, 0, 0.80)",
>, <Line: +			lineWidth: 1
>, <Line: +		}
>, <Line: +	};
>, <Line: +	function init(plot) {
>, <Line: +		// position of crosshair in pixels
>, <Line: +		var crosshair = {x: -1, y: -1, locked: false};
>, <Line: +		plot.setCrosshair = function setCrosshair(pos) {
>, <Line: +			if (!pos)
>, <Line: +				crosshair.x = -1;
>, <Line: +			else {
>, <Line: +				var o = plot.p2c(pos);
>, <Line: +				crosshair.x = Math.max(0, Math.min(o.left, plot.width()));
>, <Line: +				crosshair.y = Math.max(0, Math.min(o.top, plot.height()));
>, <Line: +			}
>, <Line: +			plot.triggerRedrawOverlay();
>, <Line: +		};
>, <Line: +		plot.clearCrosshair = plot.setCrosshair; // passes null for pos
>, <Line: +		plot.lockCrosshair = function lockCrosshair(pos) {
>, <Line: +			if (pos)
>, <Line: +				plot.setCrosshair(pos);
>, <Line: +			crosshair.locked = true;
>, <Line: +		};
>, <Line: +		plot.unlockCrosshair = function unlockCrosshair() {
>, <Line: +			crosshair.locked = false;
>, <Line: +		};
>, <Line: +		function onMouseOut(e) {
>, <Line: +			if (crosshair.locked)
>, <Line: +				return;
>, <Line: +			if (crosshair.x != -1) {
>, <Line: +				crosshair.x = -1;
>, <Line: +				plot.triggerRedrawOverlay();
>, <Line: +			}
>, <Line: +		}
>, <Line: +		function onMouseMove(e) {
>, <Line: +			if (crosshair.locked)
>, <Line: +				return;
>, <Line: +			if (plot.getSelection && plot.getSelection()) {
>, <Line: +				crosshair.x = -1; // hide the crosshair while selecting
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			var offset = plot.offset();
>, <Line: +			crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));
>, <Line: +			crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));
>, <Line: +			plot.triggerRedrawOverlay();
>, <Line: +		}
>, <Line: +		plot.hooks.bindEvents.push(function (plot, eventHolder) {
>, <Line: +			if (!plot.getOptions().crosshair.mode)
>, <Line: +				return;
>, <Line: +			eventHolder.mouseout(onMouseOut);
>, <Line: +			eventHolder.mousemove(onMouseMove);
>, <Line: +		});
>, <Line: +		plot.hooks.drawOverlay.push(function (plot, ctx) {
>, <Line: +			var c = plot.getOptions().crosshair;
>, <Line: +			if (!c.mode)
>, <Line: +				return;
>, <Line: +			var plotOffset = plot.getPlotOffset();
>, <Line: +			ctx.save();
>, <Line: +			ctx.translate(plotOffset.left, plotOffset.top);
>, <Line: +			if (crosshair.x != -1) {
>, <Line: +				var adj = plot.getOptions().crosshair.lineWidth % 2 ? 0.5 : 0;
>, <Line: +				ctx.strokeStyle = c.color;
>, <Line: +				ctx.lineWidth = c.lineWidth;
>, <Line: +				ctx.lineJoin = "round";
>, <Line: +				ctx.beginPath();
>, <Line: +				if (c.mode.indexOf("x") != -1) {
>, <Line: +					var drawX = Math.floor(crosshair.x) + adj;
>, <Line: +					ctx.moveTo(drawX, 0);
>, <Line: +					ctx.lineTo(drawX, plot.height());
>, <Line: +				}
>, <Line: +				if (c.mode.indexOf("y") != -1) {
>, <Line: +					var drawY = Math.floor(crosshair.y) + adj;
>, <Line: +					ctx.moveTo(0, drawY);
>, <Line: +					ctx.lineTo(plot.width(), drawY);
>, <Line: +				}
>, <Line: +				ctx.stroke();
>, <Line: +			}
>, <Line: +			ctx.restore();
>, <Line: +		});
>, <Line: +		plot.hooks.shutdown.push(function (plot, eventHolder) {
>, <Line: +			eventHolder.unbind("mouseout", onMouseOut);
>, <Line: +			eventHolder.unbind("mousemove", onMouseMove);
>, <Line: +		});
>, <Line: +	}
>, <Line: +	$.plot.plugins.push({
>, <Line: +		init: init,
>, <Line: +		options: options,
>, <Line: +		name: 'crosshair',
>, <Line: +		version: '1.0'
>, <Line: +	});
>]
[<Line: -Copyright (c) 2007-2014 IOLA and Ole Laursen.
>, <Line: -Licensed under the MIT license.
>, <Line: -The plugin supports these options:
>, <Line: -	crosshair: {
>, <Line: -		mode: null or "x" or "y" or "xy"
>, <Line: -		color: color
>, <Line: -		lineWidth: number
>, <Line: -	}
>, <Line: -Set the mode to one of "x", "y" or "xy". The "x" mode enables a vertical
>, <Line: -crosshair that lets you trace the values on the x axis, "y" enables a
>, <Line: -horizontal crosshair and "xy" enables them both. "color" is the color of the
>, <Line: -crosshair (default is "rgba(170, 0, 0, 0.80)"), "lineWidth" is the width of
>, <Line: -the drawn lines (default is 1).
>, <Line: -The plugin also adds four public methods:
>, <Line: -  - setCrosshair( pos )
>, <Line: -    Set the position of the crosshair. Note that this is cleared if the user
>, <Line: -    moves the mouse. "pos" is in coordinates of the plot and should be on the
>, <Line: -    form { x: xpos, y: ypos } (you can use x2/x3/... if you're using multiple
>, <Line: -    axes), which is coincidentally the same format as what you get from a
>, <Line: -    "plothover" event. If "pos" is null, the crosshair is cleared.
>, <Line: -  - clearCrosshair()
>, <Line: -    Clear the crosshair.
>, <Line: -  - lockCrosshair(pos)
>, <Line: -    Cause the crosshair to lock to the current location, no longer updating if
>, <Line: -    the user moves the mouse. Optionally supply a position (passed on to
>, <Line: -    setCrosshair()) to move it to.
>, <Line: -    Example usage:
>, <Line: -	var myFlot = $.plot( $("#graph"), ..., { crosshair: { mode: "x" } } };
>, <Line: -	$("#graph").bind( "plothover", function ( evt, position, item ) {
>, <Line: -		if ( item ) {
>, <Line: -			// Lock the crosshair to the data point being hovered
>, <Line: -			myFlot.lockCrosshair({
>, <Line: -				x: item.datapoint[ 0 ],
>, <Line: -				y: item.datapoint[ 1 ]
>, <Line: -			});
>, <Line: -		} else {
>, <Line: -			// Return normal crosshair operation
>, <Line: -			myFlot.unlockCrosshair();
>, <Line: -		}
>, <Line: -	});
>, <Line: -  - unlockCrosshair()
>, <Line: -    Free the crosshair to move again after locking it.
>, <Line: -*/
>, <Line: -    var options = {
>, <Line: -        crosshair: {
>, <Line: -            mode: null, // one of null, "x", "y" or "xy",
>, <Line: -            color: "rgba(170, 0, 0, 0.80)",
>, <Line: -            lineWidth: 1
>, <Line: -        }
>, <Line: -    };
>, <Line: -    function init(plot) {
>, <Line: -        // position of crosshair in pixels
>, <Line: -        var crosshair = { x: -1, y: -1, locked: false };
>, <Line: -        plot.setCrosshair = function setCrosshair(pos) {
>, <Line: -            if (!pos)
>, <Line: -                crosshair.x = -1;
>, <Line: -            else {
>, <Line: -                var o = plot.p2c(pos);
>, <Line: -                crosshair.x = Math.max(0, Math.min(o.left, plot.width()));
>, <Line: -                crosshair.y = Math.max(0, Math.min(o.top, plot.height()));
>, <Line: -            }
>, <Line: -            plot.triggerRedrawOverlay();
>, <Line: -        };
>, <Line: -        plot.clearCrosshair = plot.setCrosshair; // passes null for pos
>, <Line: -        plot.lockCrosshair = function lockCrosshair(pos) {
>, <Line: -            if (pos)
>, <Line: -                plot.setCrosshair(pos);
>, <Line: -            crosshair.locked = true;
>, <Line: -        };
>, <Line: -        plot.unlockCrosshair = function unlockCrosshair() {
>, <Line: -            crosshair.locked = false;
>, <Line: -        };
>, <Line: -        function onMouseOut(e) {
>, <Line: -            if (crosshair.locked)
>, <Line: -                return;
>, <Line: -            if (crosshair.x != -1) {
>, <Line: -                crosshair.x = -1;
>, <Line: -                plot.triggerRedrawOverlay();
>, <Line: -            }
>, <Line: -        }
>, <Line: -        function onMouseMove(e) {
>, <Line: -            if (crosshair.locked)
>, <Line: -                return;
>, <Line: -            if (plot.getSelection && plot.getSelection()) {
>, <Line: -                crosshair.x = -1; // hide the crosshair while selecting
>, <Line: -                return;
>, <Line: -            }
>, <Line: -            var offset = plot.offset();
>, <Line: -            crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));
>, <Line: -            crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));
>, <Line: -            plot.triggerRedrawOverlay();
>, <Line: -        }
>, <Line: -        plot.hooks.bindEvents.push(function (plot, eventHolder) {
>, <Line: -            if (!plot.getOptions().crosshair.mode)
>, <Line: -                return;
>, <Line: -            eventHolder.mouseout(onMouseOut);
>, <Line: -            eventHolder.mousemove(onMouseMove);
>, <Line: -        });
>, <Line: -        plot.hooks.drawOverlay.push(function (plot, ctx) {
>, <Line: -            var c = plot.getOptions().crosshair;
>, <Line: -            if (!c.mode)
>, <Line: -                return;
>, <Line: -            var plotOffset = plot.getPlotOffset();
>, <Line: -            ctx.save();
>, <Line: -            ctx.translate(plotOffset.left, plotOffset.top);
>, <Line: -            if (crosshair.x != -1) {
>, <Line: -                var adj = plot.getOptions().crosshair.lineWidth % 2 ? 0.5 : 0;
>, <Line: -                ctx.strokeStyle = c.color;
>, <Line: -                ctx.lineWidth = c.lineWidth;
>, <Line: -                ctx.lineJoin = "round";
>, <Line: -                ctx.beginPath();
>, <Line: -                if (c.mode.indexOf("x") != -1) {
>, <Line: -                    var drawX = Math.floor(crosshair.x) + adj;
>, <Line: -                    ctx.moveTo(drawX, 0);
>, <Line: -                    ctx.lineTo(drawX, plot.height());
>, <Line: -                }
>, <Line: -                if (c.mode.indexOf("y") != -1) {
>, <Line: -                    var drawY = Math.floor(crosshair.y) + adj;
>, <Line: -                    ctx.moveTo(0, drawY);
>, <Line: -                    ctx.lineTo(plot.width(), drawY);
>, <Line: -                }
>, <Line: -                ctx.stroke();
>, <Line: -            }
>, <Line: -            ctx.restore();
>, <Line: -        });
>, <Line: -        plot.hooks.shutdown.push(function (plot, eventHolder) {
>, <Line: -            eventHolder.unbind("mouseout", onMouseOut);
>, <Line: -            eventHolder.unbind("mousemove", onMouseMove);
>, <Line: -        });
>, <Line: -    }
>, <Line: -    $.plot.plugins.push({
>, <Line: -        init: init,
>, <Line: -        options: options,
>, <Line: -        name: 'crosshair',
>, <Line: -        version: '1.0'
>, <Line: -    });
>]