[<Line: + ## Timepicker2
>, <Line: + ### Parameters
>, <Line: + * mode :: The default mode of the panel. Options: 'relative', 'absolute' 'since' Default: 'relative'
>, <Line: + * time_options :: An array of possible time options. Default: ['5m','15m','1h','6h','12h','24h','2d','7d','30d']
>, <Line: + * timespan :: The default options selected for the relative view. Default: '15m'
>, <Line: + * timefield :: The field in which time is stored in the document.
>, <Line: + * refresh: Object containing refresh parameters
>, <Line: + * enable :: true/false, enable auto refresh by default. Default: false
>, <Line: + * interval :: Seconds between auto refresh. Default: 30
>, <Line: + * min :: The lowest interval a user may set
>, <Line: + */
>, <Line: +		'angular',
>, <Line: +		'app',
>, <Line: +		'lodash',
>, <Line: +		'moment',
>, <Line: +		'kbn'
>, <Line: +	],
>, <Line: +	function (angular, app, _, moment, kbn) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.panels.timepicker', []);
>, <Line: +		app.useModule(module);
>, <Line: +		module.controller('timepicker', function ($scope, $rootScope, timeSrv) {
>, <Line: +			$scope.panelMeta = {
>, <Line: +				status: "Stable",
>, <Line: +				description: ""
>, <Line: +			};
>, <Line: +			// Set and populate defaults
>, <Line: +			var _d = {
>, <Line: +				status: "Stable",
>, <Line: +				time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],
>, <Line: +				refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],
>, <Line: +			};
>, <Line: +			_.defaults($scope.panel, _d);
>, <Line: +			// ng-pattern regexs
>, <Line: +			$scope.patterns = {
>, <Line: +				date: /^[0-9]{2}\/[0-9]{2}\/[0-9]{4}$/,
>, <Line: +				hour: /^([01]?[0-9]|2[0-3])$/,
>, <Line: +				minute: /^[0-5][0-9]$/,
>, <Line: +				second: /^[0-5][0-9]$/,
>, <Line: +				millisecond: /^[0-9]*$/
>, <Line: +			};
>, <Line: +			$scope.timeSrv = timeSrv;
>, <Line: +			$scope.$on('refresh', function () {
>, <Line: +				$scope.init();
>, <Line: +			});
>, <Line: +			$scope.init = function () {
>, <Line: +				var time = timeSrv.timeRange(true);
>, <Line: +				if (time) {
>, <Line: +					$scope.panel.now = timeSrv.timeRange(false).to === "now" ? true : false;
>, <Line: +					$scope.time = getScopeTimeObj(time.from, time.to);
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.customTime = function () {
>, <Line: +				// Assume the form is valid since we're setting it to something valid
>, <Line: +				$scope.input.$setValidity("dummy", true);
>, <Line: +				$scope.temptime = cloneTime($scope.time);
>, <Line: +				$scope.temptime.now = $scope.panel.now;
>, <Line: +				$scope.temptime.from.date.setHours(0, 0, 0, 0);
>, <Line: +				$scope.temptime.to.date.setHours(0, 0, 0, 0);
>, <Line: +				// Date picker needs the date to be at the start of the day
>, <Line: +				if (new Date().getTimezoneOffset() < 0) {
>, <Line: +					$scope.temptime.from.date = moment($scope.temptime.from.date).add(1, 'days').toDate();
>, <Line: +					$scope.temptime.to.date = moment($scope.temptime.to.date).add(1, 'days').toDate();
>, <Line: +				}
>, <Line: +				$scope.appEvent('show-dash-editor', {
>, <Line: +					src: 'app/panels/timepicker/custom.html',
>, <Line: +					scope: $scope
>, <Line: +				});
>, <Line: +			};
>, <Line: +			// Constantly validate the input of the fields. This function does not change any date variables
>, <Line: +			// outside of its own scope
>, <Line: +			$scope.validate = function (time) {
>, <Line: +				// Assume the form is valid. There is a hidden dummy input for invalidating it programatically.
>, <Line: +				$scope.input.$setValidity("dummy", true);
>, <Line: +				var _from = datepickerToLocal(time.from.date),
>, <Line: +					_to = datepickerToLocal(time.to.date),
>, <Line: +					_t = time;
>, <Line: +				if ($scope.input.$valid) {
>, <Line: +					_from.setHours(_t.from.hour, _t.from.minute, _t.from.second, _t.from.millisecond);
>, <Line: +					_to.setHours(_t.to.hour, _t.to.minute, _t.to.second, _t.to.millisecond);
>, <Line: +					// Check that the objects are valid and to is after from
>, <Line: +					if (isNaN(_from.getTime()) || isNaN(_to.getTime()) || _from.getTime() >= _to.getTime()) {
>, <Line: +						$scope.input.$setValidity("dummy", false);
>, <Line: +						return false;
>, <Line: +					}
>, <Line: +				} else {
>, <Line: +					return false;
>, <Line: +				}
>, <Line: +				return {from: _from, to: _to, now: time.now};
>, <Line: +			};
>, <Line: +			$scope.setNow = function () {
>, <Line: +				$scope.time.to = getTimeObj(new Date());
>, <Line: +			};
>, <Line: +			/*
>, <Line: +			 time : {
>, <Line: +			 from: Date
>, <Line: +			 to: Date
>, <Line: +			 }
>, <Line: +			 */
>, <Line: +			$scope.setAbsoluteTimeFilter = function (time) {
>, <Line: +				// Create filter object
>, <Line: +				var _filter = _.clone(time);
>, <Line: +				if (time.now) {
>, <Line: +					_filter.to = "now";
>, <Line: +				}
>, <Line: +				// Set the filter
>, <Line: +				$scope.panel.filter_id = timeSrv.setTime(_filter);
>, <Line: +				// Update our representation
>, <Line: +				$scope.time = getScopeTimeObj(time.from, time.to);
>, <Line: +			};
>, <Line: +			$scope.setRelativeFilter = function (timespan) {
>, <Line: +				$scope.panel.now = true;
>, <Line: +				var _filter = {
>, <Line: +					from: "now-" + timespan,
>, <Line: +					to: "now"
>, <Line: +				};
>, <Line: +				timeSrv.setTime(_filter);
>, <Line: +				$scope.time = getScopeTimeObj(kbn.parseDate(_filter.from), new Date());
>, <Line: +			};
>, <Line: +			var pad = function (n, width, z) {
>, <Line: +				z = z || '0';
>, <Line: +				n = n.toString();
>, <Line: +				return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
>, <Line: +			};
>, <Line: +			var cloneTime = function (time) {
>, <Line: +				var _n = {
>, <Line: +					from: _.clone(time.from),
>, <Line: +					to: _.clone(time.to)
>, <Line: +				};
>, <Line: +				// Create new dates as _.clone is shallow.
>, <Line: +				_n.from.date = new Date(_n.from.date);
>, <Line: +				_n.to.date = new Date(_n.to.date);
>, <Line: +				return _n;
>, <Line: +			};
>, <Line: +			var getScopeTimeObj = function (from, to) {
>, <Line: +				var model = {from: getTimeObj(from), to: getTimeObj(to),};
>, <Line: +				if (model.from.date) {
>, <Line: +					model.tooltip = $scope.dashboard.formatDate(model.from.date) + ' <br>to<br>';
>, <Line: +					model.tooltip += $scope.dashboard.formatDate(model.to.date);
>, <Line: +				}
>, <Line: +				else {
>, <Line: +					model.tooltip = 'Click to set time filter';
>, <Line: +				}
>, <Line: +				if (timeSrv.time) {
>, <Line: +					if ($scope.panel.now) {
>, <Line: +						model.rangeString = moment(model.from.date).fromNow() + ' to ' +
>, <Line: +							moment(model.to.date).fromNow();
>, <Line: +					}
>, <Line: +					else {
>, <Line: +						model.rangeString = $scope.dashboard.formatDate(model.from.date, 'MMM D, YYYY HH:mm:ss') + ' to ' +
>, <Line: +							$scope.dashboard.formatDate(model.to.date, 'MMM D, YYYY HH:mm:ss');
>, <Line: +					}
>, <Line: +				}
>, <Line: +				return model;
>, <Line: +			};
>, <Line: +			var getTimeObj = function (date) {
>, <Line: +				return {
>, <Line: +					date: new Date(date),
>, <Line: +					hour: pad(date.getHours(), 2),
>, <Line: +					minute: pad(date.getMinutes(), 2),
>, <Line: +					second: pad(date.getSeconds(), 2),
>, <Line: +					millisecond: pad(date.getMilliseconds(), 3)
>, <Line: +				};
>, <Line: +			};
>, <Line: +			// Do not use the results of this function unless you plan to use setHour/Minutes/etc on the result
>, <Line: +			var datepickerToLocal = function (date) {
>, <Line: +				date = moment(date).clone().toDate();
>, <Line: +				return moment(new Date(date.getTime() + date.getTimezoneOffset() * 60000)).toDate();
>, <Line: +			};
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  ## Timepicker2
>, <Line: -  ### Parameters
>, <Line: -  * mode :: The default mode of the panel. Options: 'relative', 'absolute' 'since' Default: 'relative'
>, <Line: -  * time_options :: An array of possible time options. Default: ['5m','15m','1h','6h','12h','24h','2d','7d','30d']
>, <Line: -  * timespan :: The default options selected for the relative view. Default: '15m'
>, <Line: -  * timefield :: The field in which time is stored in the document.
>, <Line: -  * refresh: Object containing refresh parameters
>, <Line: -    * enable :: true/false, enable auto refresh by default. Default: false
>, <Line: -    * interval :: Seconds between auto refresh. Default: 30
>, <Line: -    * min :: The lowest interval a user may set
>, <Line: -*/
>, <Line: -  'angular',
>, <Line: -  'app',
>, <Line: -  'lodash',
>, <Line: -  'moment',
>, <Line: -  'kbn'
>, <Line: -],
>, <Line: -function (angular, app, _, moment, kbn) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.panels.timepicker', []);
>, <Line: -  app.useModule(module);
>, <Line: -  module.controller('timepicker', function($scope, $rootScope, timeSrv) {
>, <Line: -    $scope.panelMeta = {
>, <Line: -      status  : "Stable",
>, <Line: -      description : ""
>, <Line: -    };
>, <Line: -    // Set and populate defaults
>, <Line: -    var _d = {
>, <Line: -      status        : "Stable",
>, <Line: -      time_options  : ['5m','15m','1h','6h','12h','24h','2d','7d','30d'],
>, <Line: -      refresh_intervals : ['5s','10s','30s','1m','5m','15m','30m','1h','2h','1d'],
>, <Line: -    };
>, <Line: -    _.defaults($scope.panel,_d);
>, <Line: -    // ng-pattern regexs
>, <Line: -    $scope.patterns = {
>, <Line: -      date: /^[0-9]{2}\/[0-9]{2}\/[0-9]{4}$/,
>, <Line: -      hour: /^([01]?[0-9]|2[0-3])$/,
>, <Line: -      minute: /^[0-5][0-9]$/,
>, <Line: -      second: /^[0-5][0-9]$/,
>, <Line: -      millisecond: /^[0-9]*$/
>, <Line: -    };
>, <Line: -    $scope.timeSrv = timeSrv;
>, <Line: -    $scope.$on('refresh', function() {
>, <Line: -      $scope.init();
>, <Line: -    });
>, <Line: -    $scope.init = function() {
>, <Line: -      var time = timeSrv.timeRange(true);
>, <Line: -      if(time) {
>, <Line: -        $scope.panel.now = timeSrv.timeRange(false).to === "now" ? true : false;
>, <Line: -        $scope.time = getScopeTimeObj(time.from,time.to);
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.customTime = function() {
>, <Line: -      // Assume the form is valid since we're setting it to something valid
>, <Line: -      $scope.input.$setValidity("dummy", true);
>, <Line: -      $scope.temptime = cloneTime($scope.time);
>, <Line: -      $scope.temptime.now = $scope.panel.now;
>, <Line: -      $scope.temptime.from.date.setHours(0,0,0,0);
>, <Line: -      $scope.temptime.to.date.setHours(0,0,0,0);
>, <Line: -      // Date picker needs the date to be at the start of the day
>, <Line: -      if(new Date().getTimezoneOffset() < 0) {
>, <Line: -        $scope.temptime.from.date = moment($scope.temptime.from.date).add(1, 'days').toDate();
>, <Line: -        $scope.temptime.to.date = moment($scope.temptime.to.date).add(1, 'days').toDate();
>, <Line: -      }
>, <Line: -      $scope.appEvent('show-dash-editor', {src: 'app/panels/timepicker/custom.html', scope: $scope });
>, <Line: -    };
>, <Line: -    // Constantly validate the input of the fields. This function does not change any date variables
>, <Line: -    // outside of its own scope
>, <Line: -    $scope.validate = function(time) {
>, <Line: -      // Assume the form is valid. There is a hidden dummy input for invalidating it programatically.
>, <Line: -      $scope.input.$setValidity("dummy", true);
>, <Line: -      var _from = datepickerToLocal(time.from.date),
>, <Line: -        _to = datepickerToLocal(time.to.date),
>, <Line: -        _t = time;
>, <Line: -      if($scope.input.$valid) {
>, <Line: -        _from.setHours(_t.from.hour,_t.from.minute,_t.from.second,_t.from.millisecond);
>, <Line: -        _to.setHours(_t.to.hour,_t.to.minute,_t.to.second,_t.to.millisecond);
>, <Line: -        // Check that the objects are valid and to is after from
>, <Line: -        if(isNaN(_from.getTime()) || isNaN(_to.getTime()) || _from.getTime() >= _to.getTime()) {
>, <Line: -          $scope.input.$setValidity("dummy", false);
>, <Line: -          return false;
>, <Line: -        }
>, <Line: -      } else {
>, <Line: -        return false;
>, <Line: -      }
>, <Line: -      return { from: _from, to:_to, now: time.now};
>, <Line: -    };
>, <Line: -    $scope.setNow = function() {
>, <Line: -      $scope.time.to = getTimeObj(new Date());
>, <Line: -    };
>, <Line: -    /*
>, <Line: -      time : {
>, <Line: -        from: Date
>, <Line: -        to: Date
>, <Line: -      }
>, <Line: -    */
>, <Line: -    $scope.setAbsoluteTimeFilter = function (time) {
>, <Line: -      // Create filter object
>, <Line: -      var _filter = _.clone(time);
>, <Line: -      if(time.now) {
>, <Line: -        _filter.to = "now";
>, <Line: -      }
>, <Line: -      // Set the filter
>, <Line: -      $scope.panel.filter_id = timeSrv.setTime(_filter);
>, <Line: -      // Update our representation
>, <Line: -      $scope.time = getScopeTimeObj(time.from,time.to);
>, <Line: -    };
>, <Line: -    $scope.setRelativeFilter = function(timespan) {
>, <Line: -      $scope.panel.now = true;
>, <Line: -      var _filter = {
>, <Line: -        from : "now-"+timespan,
>, <Line: -        to: "now"
>, <Line: -      };
>, <Line: -      timeSrv.setTime(_filter);
>, <Line: -      $scope.time = getScopeTimeObj(kbn.parseDate(_filter.from),new Date());
>, <Line: -    };
>, <Line: -    var pad = function(n, width, z) {
>, <Line: -      z = z || '0';
>, <Line: -      n = n.toString();
>, <Line: -      return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
>, <Line: -    };
>, <Line: -    var cloneTime = function(time) {
>, <Line: -      var _n = {
>, <Line: -        from: _.clone(time.from),
>, <Line: -        to: _.clone(time.to)
>, <Line: -      };
>, <Line: -      // Create new dates as _.clone is shallow.
>, <Line: -      _n.from.date = new Date(_n.from.date);
>, <Line: -      _n.to.date = new Date(_n.to.date);
>, <Line: -      return _n;
>, <Line: -    };
>, <Line: -    var getScopeTimeObj = function(from,to) {
>, <Line: -      var model = { from: getTimeObj(from), to: getTimeObj(to), };
>, <Line: -      if (model.from.date) {
>, <Line: -        model.tooltip = $scope.dashboard.formatDate(model.from.date) + ' <br>to<br>';
>, <Line: -        model.tooltip += $scope.dashboard.formatDate(model.to.date);
>, <Line: -      }
>, <Line: -      else {
>, <Line: -        model.tooltip = 'Click to set time filter';
>, <Line: -      }
>, <Line: -      if (timeSrv.time) {
>, <Line: -        if ($scope.panel.now) {
>, <Line: -          model.rangeString = moment(model.from.date).fromNow() + ' to ' +
>, <Line: -            moment(model.to.date).fromNow();
>, <Line: -        }
>, <Line: -        else {
>, <Line: -          model.rangeString = $scope.dashboard.formatDate(model.from.date, 'MMM D, YYYY HH:mm:ss') + ' to ' +
>, <Line: -            $scope.dashboard.formatDate(model.to.date, 'MMM D, YYYY HH:mm:ss');
>, <Line: -        }
>, <Line: -      }
>, <Line: -      return model;
>, <Line: -    };
>, <Line: -    var getTimeObj = function(date) {
>, <Line: -      return {
>, <Line: -        date: new Date(date),
>, <Line: -        hour: pad(date.getHours(),2),
>, <Line: -        minute: pad(date.getMinutes(),2),
>, <Line: -        second: pad(date.getSeconds(),2),
>, <Line: -        millisecond: pad(date.getMilliseconds(),3)
>, <Line: -      };
>, <Line: -    };
>, <Line: -    // Do not use the results of this function unless you plan to use setHour/Minutes/etc on the result
>, <Line: -    var datepickerToLocal = function(date) {
>, <Line: -      date = moment(date).clone().toDate();
>, <Line: -      return moment(new Date(date.getTime() + date.getTimezoneOffset() * 60000)).toDate();
>, <Line: -    };
>, <Line: -  });
>, <Line: -});
>]