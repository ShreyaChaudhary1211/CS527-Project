[<Line: +package org.kairosdb.core.processingstage;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import org.kairosdb.core.annotation.Feature;
>, <Line: +import org.kairosdb.core.processingstage.metadata.FeatureProcessingMetadata;
>, <Line: +import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
>, <Line: +import javax.validation.constraints.NotNull;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +public abstract class GenericFeatureProcessor implements FeatureProcessor
>, <Line: +{
>, <Line: +    private List<FeatureProcessingFactory<?>> featureProcessingFactories = new ArrayList<>();
>, <Line: +    private List<FeatureProcessingMetadata> featureProcessingMetadata = new ArrayList<>();
>, <Line: +    /**
>, <Line: +     * Constructor of a generic class to easily generate a feature processor.
>, <Line: +     *
>, <Line: +     * @param featureProcessingFactories   list of {@link FeatureProcessingFactory}
>, <Line: +     * @return instances composing the feature processor
>, <Line: +     */
>, <Line: +    protected GenericFeatureProcessor(@NotNull List<FeatureProcessingFactory<?>> featureProcessingFactories)
>, <Line: +    {
>, <Line: +        if (featureProcessingFactories.size() == 0)
>, <Line: +            throw new IllegalArgumentException("featureProcessingFactories parameter can't be empty");
>, <Line: +        for (int i = 0; i < featureProcessingFactories.size(); i++)
>, <Line: +        {
>, <Line: +            FeatureProcessingFactory<?> factory = featureProcessingFactories.get(i);
>, <Line: +            ArrayList<FeatureProcessorMetadata> featureProcessorMetadata = new ArrayList<>();
>, <Line: +            Feature annotation = factory.getClass().getAnnotation(Feature.class);
>, <Line: +            if (annotation == null)
>, <Line: +                throw new IllegalStateException("Feature class " + factory.getClass().getName() +
>, <Line: +                        " does not have required annotation " + Feature.class.getName());
>, <Line: +            if (factory.getFeatureProcessorMetadata() == null)
>, <Line: +                throw new IllegalStateException("Feature processor class " + factory.getClass().getName() +
>, <Line: +                        " does not have feature processor metadata");
>, <Line: +            this.featureProcessingFactories.add(i, factory);
>, <Line: +            featureProcessorMetadata.addAll(factory.getFeatureProcessorMetadata());
>, <Line: +            this.featureProcessingMetadata.add(new FeatureProcessingMetadata(annotation.name(), annotation.label(), featureProcessorMetadata));
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public ImmutableList<FeatureProcessingFactory<?>> getFeatureProcessingFactories()
>, <Line: +    {
>, <Line: +        return new ImmutableList.Builder<FeatureProcessingFactory<?>>().addAll(featureProcessingFactories).build();
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public FeatureProcessingFactory<?> getFeatureProcessingFactory(Class<?> feature)
>, <Line: +    {
>, <Line: +        for (FeatureProcessingFactory<?> factory : featureProcessingFactories)
>, <Line: +            if (factory.getFeature() == feature)
>, <Line: +                return factory;
>, <Line: +        return null;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public FeatureProcessingFactory<?> getFeatureProcessingFactory(String feature)
>, <Line: +    {
>, <Line: +        for (FeatureProcessingFactory<?> factory : featureProcessingFactories)
>, <Line: +        {
>, <Line: +            String factoryName = factory.getClass().getAnnotation(Feature.class).name();
>, <Line: +            if (factoryName.equalsIgnoreCase(feature))
>, <Line: +                return factory;
>, <Line: +        }
>, <Line: +        return null;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public ImmutableList<FeatureProcessingMetadata> getFeatureProcessingMetadata()
>, <Line: +    {
>, <Line: +        return new ImmutableList.Builder<FeatureProcessingMetadata>().addAll(featureProcessingMetadata).build();
>, <Line: +    }
>, <Line: +}
>]
[]