[<Line: +		'lodash',
>, <Line: +		'kbn'
>, <Line: +	],
>, <Line: +	function (_, kbn) {
>, <Line: +		'use strict';
>, <Line: +		function TimeSeries(opts) {
>, <Line: +			this.datapoints = opts.datapoints;
>, <Line: +			this.label = opts.alias;
>, <Line: +			this.id = opts.alias;
>, <Line: +			this.alias = opts.alias;
>, <Line: +			this.color = opts.color;
>, <Line: +			this.valueFormater = kbn.valueFormats.none;
>, <Line: +			this.stats = {};
>, <Line: +		}
>, <Line: +		function matchSeriesOverride(aliasOrRegex, seriesAlias) {
>, <Line: +			if (!aliasOrRegex) {
>, <Line: +				return false;
>, <Line: +			}
>, <Line: +			if (aliasOrRegex[0] === '/') {
>, <Line: +				var regex = kbn.stringToJsRegex(aliasOrRegex);
>, <Line: +				return seriesAlias.match(regex) != null;
>, <Line: +			}
>, <Line: +			return aliasOrRegex === seriesAlias;
>, <Line: +		}
>, <Line: +		function translateFillOption(fill) {
>, <Line: +			return fill === 0 ? 0.001 : fill / 10;
>, <Line: +		}
>, <Line: +		TimeSeries.prototype.applySeriesOverrides = function (overrides) {
>, <Line: +			this.lines = {};
>, <Line: +			this.points = {};
>, <Line: +			this.bars = {};
>, <Line: +			this.yaxis = 1;
>, <Line: +			this.zindex = 0;
>, <Line: +			delete this.stack;
>, <Line: +			for (var i = 0; i < overrides.length; i++) {
>, <Line: +				var override = overrides[i];
>, <Line: +				if (!matchSeriesOverride(override.alias, this.alias)) {
>, <Line: +					continue;
>, <Line: +				}
>, <Line: +				if (override.lines !== void 0) {
>, <Line: +					this.lines.show = override.lines;
>, <Line: +				}
>, <Line: +				if (override.points !== void 0) {
>, <Line: +					this.points.show = override.points;
>, <Line: +				}
>, <Line: +				if (override.bars !== void 0) {
>, <Line: +					this.bars.show = override.bars;
>, <Line: +				}
>, <Line: +				if (override.fill !== void 0) {
>, <Line: +					this.lines.fill = translateFillOption(override.fill);
>, <Line: +				}
>, <Line: +				if (override.stack !== void 0) {
>, <Line: +					this.stack = override.stack;
>, <Line: +				}
>, <Line: +				if (override.linewidth !== void 0) {
>, <Line: +					this.lines.lineWidth = override.linewidth;
>, <Line: +				}
>, <Line: +				if (override.pointradius !== void 0) {
>, <Line: +					this.points.radius = override.pointradius;
>, <Line: +				}
>, <Line: +				if (override.steppedLine !== void 0) {
>, <Line: +					this.lines.steps = override.steppedLine;
>, <Line: +				}
>, <Line: +				if (override.zindex !== void 0) {
>, <Line: +					this.zindex = override.zindex;
>, <Line: +				}
>, <Line: +				if (override.fillBelowTo !== void 0) {
>, <Line: +					this.fillBelowTo = override.fillBelowTo;
>, <Line: +				}
>, <Line: +				if (override.yaxis !== void 0) {
>, <Line: +					this.yaxis = override.yaxis;
>, <Line: +				}
>, <Line: +			}
>, <Line: +		};
>, <Line: +		TimeSeries.prototype.getFlotPairs = function (fillStyle) {
>, <Line: +			var result = [];
>, <Line: +			this.stats.total = 0;
>, <Line: +			this.stats.max = -Number.MAX_VALUE;
>, <Line: +			this.stats.min = Number.MAX_VALUE;
>, <Line: +			this.stats.avg = null;
>, <Line: +			this.stats.current = null;
>, <Line: +			this.allIsNull = true;
>, <Line: +			var ignoreNulls = fillStyle === 'connected';
>, <Line: +			var nullAsZero = fillStyle === 'null as zero';
>, <Line: +			var currentTime;
>, <Line: +			var currentValue;
>, <Line: +			for (var i = 0; i < this.datapoints.length; i++) {
>, <Line: +				currentValue = this.datapoints[i][0];
>, <Line: +				currentTime = this.datapoints[i][1];
>, <Line: +				if (currentValue === null) {
>, <Line: +					if (ignoreNulls) {
>, <Line: +						continue;
>, <Line: +					}
>, <Line: +					if (nullAsZero) {
>, <Line: +						currentValue = 0;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if (_.isNumber(currentValue)) {
>, <Line: +					this.stats.total += currentValue;
>, <Line: +					this.allIsNull = false;
>, <Line: +				}
>, <Line: +				if (currentValue > this.stats.max) {
>, <Line: +					this.stats.max = currentValue;
>, <Line: +				}
>, <Line: +				if (currentValue < this.stats.min) {
>, <Line: +					this.stats.min = currentValue;
>, <Line: +				}
>, <Line: +				result.push([currentTime, currentValue]);
>, <Line: +			}
>, <Line: +			if (this.datapoints.length >= 2) {
>, <Line: +				this.stats.timeStep = this.datapoints[1][1] - this.datapoints[0][1];
>, <Line: +			}
>, <Line: +			if (this.stats.max === -Number.MAX_VALUE) {
>, <Line: +				this.stats.max = null;
>, <Line: +			}
>, <Line: +			if (this.stats.min === Number.MAX_VALUE) {
>, <Line: +				this.stats.min = null;
>, <Line: +			}
>, <Line: +			if (result.length) {
>, <Line: +				this.stats.avg = (this.stats.total / result.length);
>, <Line: +				this.stats.current = result[result.length - 1][1];
>, <Line: +				if (this.stats.current === null && result.length > 1) {
>, <Line: +					this.stats.current = result[result.length - 2][1];
>, <Line: +				}
>, <Line: +			}
>, <Line: +			return result;
>, <Line: +		};
>, <Line: +		TimeSeries.prototype.updateLegendValues = function (formater, decimals, scaledDecimals) {
>, <Line: +			this.valueFormater = formater;
>, <Line: +			this.decimals = decimals;
>, <Line: +			this.scaledDecimals = scaledDecimals;
>, <Line: +		};
>, <Line: +		TimeSeries.prototype.formatValue = function (value) {
>, <Line: +			return this.valueFormater(value, this.decimals, this.scaledDecimals);
>, <Line: +		};
>, <Line: +		return TimeSeries;
>, <Line: +	});
>]
[<Line: -  'lodash',
>, <Line: -  'kbn'
>, <Line: -],
>, <Line: -function (_, kbn) {
>, <Line: -  'use strict';
>, <Line: -  function TimeSeries(opts) {
>, <Line: -    this.datapoints = opts.datapoints;
>, <Line: -    this.label = opts.alias;
>, <Line: -    this.id = opts.alias;
>, <Line: -    this.alias = opts.alias;
>, <Line: -    this.color = opts.color;
>, <Line: -    this.valueFormater = kbn.valueFormats.none;
>, <Line: -    this.stats = {};
>, <Line: -  }
>, <Line: -  function matchSeriesOverride(aliasOrRegex, seriesAlias) {
>, <Line: -    if (!aliasOrRegex) { return false; }
>, <Line: -    if (aliasOrRegex[0] === '/') {
>, <Line: -      var regex = kbn.stringToJsRegex(aliasOrRegex);
>, <Line: -      return seriesAlias.match(regex) != null;
>, <Line: -    }
>, <Line: -    return aliasOrRegex === seriesAlias;
>, <Line: -  }
>, <Line: -  function translateFillOption(fill) {
>, <Line: -    return fill === 0 ? 0.001 : fill/10;
>, <Line: -  }
>, <Line: -  TimeSeries.prototype.applySeriesOverrides = function(overrides) {
>, <Line: -    this.lines = {};
>, <Line: -    this.points = {};
>, <Line: -    this.bars = {};
>, <Line: -    this.yaxis = 1;
>, <Line: -    this.zindex = 0;
>, <Line: -    delete this.stack;
>, <Line: -    for (var i = 0; i < overrides.length; i++) {
>, <Line: -      var override = overrides[i];
>, <Line: -      if (!matchSeriesOverride(override.alias, this.alias)) {
>, <Line: -        continue;
>, <Line: -      }
>, <Line: -      if (override.lines !== void 0) { this.lines.show = override.lines; }
>, <Line: -      if (override.points !== void 0) { this.points.show = override.points; }
>, <Line: -      if (override.bars !== void 0) { this.bars.show = override.bars; }
>, <Line: -      if (override.fill !== void 0) { this.lines.fill = translateFillOption(override.fill); }
>, <Line: -      if (override.stack !== void 0) { this.stack = override.stack; }
>, <Line: -      if (override.linewidth !== void 0) { this.lines.lineWidth = override.linewidth; }
>, <Line: -      if (override.pointradius !== void 0) { this.points.radius = override.pointradius; }
>, <Line: -      if (override.steppedLine !== void 0) { this.lines.steps = override.steppedLine; }
>, <Line: -      if (override.zindex !== void 0) { this.zindex = override.zindex; }
>, <Line: -      if (override.fillBelowTo !== void 0) { this.fillBelowTo = override.fillBelowTo; }
>, <Line: -      if (override.yaxis !== void 0) {
>, <Line: -        this.yaxis = override.yaxis;
>, <Line: -      }
>, <Line: -    }
>, <Line: -  };
>, <Line: -  TimeSeries.prototype.getFlotPairs = function (fillStyle) {
>, <Line: -    var result = [];
>, <Line: -    this.stats.total = 0;
>, <Line: -    this.stats.max = -Number.MAX_VALUE;
>, <Line: -    this.stats.min = Number.MAX_VALUE;
>, <Line: -    this.stats.avg = null;
>, <Line: -    this.stats.current = null;
>, <Line: -    this.allIsNull = true;
>, <Line: -    var ignoreNulls = fillStyle === 'connected';
>, <Line: -    var nullAsZero = fillStyle === 'null as zero';
>, <Line: -    var currentTime;
>, <Line: -    var currentValue;
>, <Line: -    for (var i = 0; i < this.datapoints.length; i++) {
>, <Line: -      currentValue = this.datapoints[i][0];
>, <Line: -      currentTime = this.datapoints[i][1];
>, <Line: -      if (currentValue === null) {
>, <Line: -        if (ignoreNulls) { continue; }
>, <Line: -        if (nullAsZero) {
>, <Line: -          currentValue = 0;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if (_.isNumber(currentValue)) {
>, <Line: -        this.stats.total += currentValue;
>, <Line: -        this.allIsNull = false;
>, <Line: -      }
>, <Line: -      if (currentValue > this.stats.max) {
>, <Line: -        this.stats.max = currentValue;
>, <Line: -      }
>, <Line: -      if (currentValue < this.stats.min) {
>, <Line: -        this.stats.min = currentValue;
>, <Line: -      }
>, <Line: -      result.push([currentTime, currentValue]);
>, <Line: -    }
>, <Line: -    if (this.datapoints.length >= 2) {
>, <Line: -      this.stats.timeStep = this.datapoints[1][1] - this.datapoints[0][1];
>, <Line: -    }
>, <Line: -    if (this.stats.max === -Number.MAX_VALUE) { this.stats.max = null; }
>, <Line: -    if (this.stats.min === Number.MAX_VALUE) { this.stats.min = null; }
>, <Line: -    if (result.length) {
>, <Line: -      this.stats.avg = (this.stats.total / result.length);
>, <Line: -      this.stats.current = result[result.length-1][1];
>, <Line: -      if (this.stats.current === null && result.length > 1) {
>, <Line: -        this.stats.current = result[result.length-2][1];
>, <Line: -      }
>, <Line: -    }
>, <Line: -    return result;
>, <Line: -  };
>, <Line: -  TimeSeries.prototype.updateLegendValues = function(formater, decimals, scaledDecimals) {
>, <Line: -    this.valueFormater = formater;
>, <Line: -    this.decimals = decimals;
>, <Line: -    this.scaledDecimals = scaledDecimals;
>, <Line: -  };
>, <Line: -  TimeSeries.prototype.formatValue = function(value) {
>, <Line: -    return this.valueFormater(value, this.decimals, this.scaledDecimals);
>, <Line: -  };
>, <Line: -  return TimeSeries;
>, <Line: -});
>]