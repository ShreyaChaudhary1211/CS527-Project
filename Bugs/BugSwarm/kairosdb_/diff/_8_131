[<Line: +		'angular',
>, <Line: +		'jquery',
>, <Line: +		'lodash',
>, <Line: +		'require',
>, <Line: +		'config',
>, <Line: +		'bootstrap',
>, <Line: +		'angular-route',
>, <Line: +		'angular-sanitize',
>, <Line: +		'angular-strap',
>, <Line: +		'angular-dragdrop',
>, <Line: +		'extend-jquery',
>, <Line: +		'bindonce',
>, <Line: +	],
>, <Line: +	function (angular, $, _, appLevelRequire, config) {
>, <Line: +		"use strict";
>, <Line: +		var app = angular.module('grafana', []),
>, <Line: +		// we will keep a reference to each module defined before boot, so that we can
>, <Line: +		// go back and allow it to define new features later. Once we boot, this will be false
>, <Line: +			pre_boot_modules = [],
>, <Line: +		// these are the functions that we need to call to register different
>, <Line: +		// features if we define them after boot time
>, <Line: +			register_fns = {};
>, <Line: +		// This stores the grafana version number
>, <Line: +		app.constant('grafanaVersion', "@grafanaVersion@");
>, <Line: +		// Use this for cache busting partials
>, <Line: +		app.constant('cacheBust', "cache-bust=" + Date.now());
>, <Line: +		/**
>, <Line: +		 * Tells the application to watch the module, once bootstraping has completed
>, <Line: +		 * the modules controller, service, etc. functions will be overwritten to register directly
>, <Line: +		 * with this application.
>, <Line: +		 * @param  {[type]} module [description]
>, <Line: +		 * @return {[type]}        [description]
>, <Line: +		 */
>, <Line: +		app.useModule = function (module) {
>, <Line: +			if (pre_boot_modules) {
>, <Line: +				pre_boot_modules.push(module);
>, <Line: +			} else {
>, <Line: +				_.extend(module, register_fns);
>, <Line: +			}
>, <Line: +			return module;
>, <Line: +		};
>, <Line: +		app.config(function ($routeProvider, $controllerProvider, $compileProvider, $filterProvider, $provide) {
>, <Line: +			$routeProvider.otherwise({redirectTo: config.default_route});
>, <Line: +			// this is how the internet told me to dynamically add modules :/
>, <Line: +			register_fns.controller = $controllerProvider.register;
>, <Line: +			register_fns.directive = $compileProvider.directive;
>, <Line: +			register_fns.factory = $provide.factory;
>, <Line: +			register_fns.service = $provide.service;
>, <Line: +			register_fns.filter = $filterProvider.register;
>, <Line: +		});
>, <Line: +		var apps_deps = [
>, <Line: +			'ngRoute',
>, <Line: +			'ngSanitize',
>, <Line: +			'$strap.directives',
>, <Line: +			'ang-drag-drop',
>, <Line: +			'grafana',
>, <Line: +			'pasvaz.bindonce'
>, <Line: +		];
>, <Line: +		var module_types = ['controllers', 'directives', 'factories', 'services', 'filters', 'routes'];
>, <Line: +		_.each(module_types, function (type) {
>, <Line: +			var module_name = 'grafana.' + type;
>, <Line: +			// create the module
>, <Line: +			app.useModule(angular.module(module_name, []));
>, <Line: +			// push it into the apps dependencies
>, <Line: +			apps_deps.push(module_name);
>, <Line: +		});
>, <Line: +		var preBootRequires = [
>, <Line: +			'services/all',
>, <Line: +			'features/all',
>, <Line: +			'controllers/all',
>, <Line: +			'directives/all',
>, <Line: +			'filters/all',
>, <Line: +			'components/partials',
>, <Line: +			'routes/all',
>, <Line: +		];
>, <Line: +		_.each(config.plugins.dependencies, function (dep) {
>, <Line: +			preBootRequires.push('plugins/' + dep);
>, <Line: +		});
>, <Line: +		app.boot = function () {
>, <Line: +			require(preBootRequires, function () {
>, <Line: +				// disable tool tip animation
>, <Line: +				$.fn.tooltip.defaults.animation = false;
>, <Line: +				// bootstrap the app
>, <Line: +				angular
>, <Line: +					.element(document)
>, <Line: +					.ready(function () {
>, <Line: +						angular.bootstrap(document, apps_deps)
>, <Line: +							.invoke(['$rootScope', function ($rootScope) {
>, <Line: +								_.each(pre_boot_modules, function (module) {
>, <Line: +									_.extend(module, register_fns);
>, <Line: +								});
>, <Line: +								pre_boot_modules = false;
>, <Line: +								$rootScope.requireContext = appLevelRequire;
>, <Line: +								$rootScope.require = function (deps, fn) {
>, <Line: +									var $scope = this;
>, <Line: +									$scope.requireContext(deps, function () {
>, <Line: +										var deps = _.toArray(arguments);
>, <Line: +										// Check that this is a valid scope.
>, <Line: +										if ($scope.$id) {
>, <Line: +											$scope.$apply(function () {
>, <Line: +												fn.apply($scope, deps);
>, <Line: +											});
>, <Line: +										}
>, <Line: +									});
>, <Line: +								};
>, <Line: +							}]);
>, <Line: +					});
>, <Line: +			});
>, <Line: +		};
>, <Line: +		return app;
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'jquery',
>, <Line: -  'lodash',
>, <Line: -  'require',
>, <Line: -  'config',
>, <Line: -  'bootstrap',
>, <Line: -  'angular-route',
>, <Line: -  'angular-sanitize',
>, <Line: -  'angular-strap',
>, <Line: -  'angular-dragdrop',
>, <Line: -  'extend-jquery',
>, <Line: -  'bindonce',
>, <Line: -],
>, <Line: -function (angular, $, _, appLevelRequire, config) {
>, <Line: -  "use strict";
>, <Line: -  var app = angular.module('grafana', []),
>, <Line: -    // we will keep a reference to each module defined before boot, so that we can
>, <Line: -    // go back and allow it to define new features later. Once we boot, this will be false
>, <Line: -    pre_boot_modules = [],
>, <Line: -    // these are the functions that we need to call to register different
>, <Line: -    // features if we define them after boot time
>, <Line: -    register_fns = {};
>, <Line: -  // This stores the grafana version number
>, <Line: -  app.constant('grafanaVersion',"@grafanaVersion@");
>, <Line: -  // Use this for cache busting partials
>, <Line: -  app.constant('cacheBust',"cache-bust="+Date.now());
>, <Line: -  /**
>, <Line: -   * Tells the application to watch the module, once bootstraping has completed
>, <Line: -   * the modules controller, service, etc. functions will be overwritten to register directly
>, <Line: -   * with this application.
>, <Line: -   * @param  {[type]} module [description]
>, <Line: -   * @return {[type]}        [description]
>, <Line: -   */
>, <Line: -  app.useModule = function (module) {
>, <Line: -    if (pre_boot_modules) {
>, <Line: -      pre_boot_modules.push(module);
>, <Line: -    } else {
>, <Line: -      _.extend(module, register_fns);
>, <Line: -    }
>, <Line: -    return module;
>, <Line: -  };
>, <Line: -  app.config(function ($routeProvider, $controllerProvider, $compileProvider, $filterProvider, $provide) {
>, <Line: -    $routeProvider.otherwise({ redirectTo: config.default_route });
>, <Line: -    // this is how the internet told me to dynamically add modules :/
>, <Line: -    register_fns.controller = $controllerProvider.register;
>, <Line: -    register_fns.directive  = $compileProvider.directive;
>, <Line: -    register_fns.factory    = $provide.factory;
>, <Line: -    register_fns.service    = $provide.service;
>, <Line: -    register_fns.filter     = $filterProvider.register;
>, <Line: -  });
>, <Line: -  var apps_deps = [
>, <Line: -    'ngRoute',
>, <Line: -    'ngSanitize',
>, <Line: -    '$strap.directives',
>, <Line: -    'ang-drag-drop',
>, <Line: -    'grafana',
>, <Line: -    'pasvaz.bindonce'
>, <Line: -  ];
>, <Line: -  var module_types = ['controllers', 'directives', 'factories', 'services', 'filters', 'routes'];
>, <Line: -  _.each(module_types, function (type) {
>, <Line: -    var module_name = 'grafana.'+type;
>, <Line: -    // create the module
>, <Line: -    app.useModule(angular.module(module_name, []));
>, <Line: -    // push it into the apps dependencies
>, <Line: -    apps_deps.push(module_name);
>, <Line: -  });
>, <Line: -  var preBootRequires = [
>, <Line: -    'services/all',
>, <Line: -    'features/all',
>, <Line: -    'controllers/all',
>, <Line: -    'directives/all',
>, <Line: -    'filters/all',
>, <Line: -    'components/partials',
>, <Line: -    'routes/all',
>, <Line: -  ];
>, <Line: -  _.each(config.plugins.dependencies, function(dep) {
>, <Line: -    preBootRequires.push('plugins/' + dep);
>, <Line: -  });
>, <Line: -  app.boot = function() {
>, <Line: -    require(preBootRequires, function () {
>, <Line: -      // disable tool tip animation
>, <Line: -      $.fn.tooltip.defaults.animation = false;
>, <Line: -      // bootstrap the app
>, <Line: -      angular
>, <Line: -        .element(document)
>, <Line: -        .ready(function() {
>, <Line: -          angular.bootstrap(document, apps_deps)
>, <Line: -            .invoke(['$rootScope', function ($rootScope) {
>, <Line: -              _.each(pre_boot_modules, function (module) {
>, <Line: -                _.extend(module, register_fns);
>, <Line: -              });
>, <Line: -              pre_boot_modules = false;
>, <Line: -              $rootScope.requireContext = appLevelRequire;
>, <Line: -              $rootScope.require = function (deps, fn) {
>, <Line: -                var $scope = this;
>, <Line: -                $scope.requireContext(deps, function () {
>, <Line: -                  var deps = _.toArray(arguments);
>, <Line: -                  // Check that this is a valid scope.
>, <Line: -                  if($scope.$id) {
>, <Line: -                    $scope.$apply(function () {
>, <Line: -                      fn.apply($scope, deps);
>, <Line: -                    });
>, <Line: -                  }
>, <Line: -                });
>, <Line: -              };
>, <Line: -            }]);
>, <Line: -        });
>, <Line: -    });
>, <Line: -  };
>, <Line: -  return app;
>, <Line: -});
>]