[<Line: +import org.quartz.JobDetail;
>, <Line: +import org.quartz.JobKey;
>, <Line: +import org.quartz.Trigger;
>, <Line: +import java.util.Set;
>, <Line: +public interface KairosDBScheduler
>, <Line: +	void start() throws KairosDBException;
>, <Line: +	void stop();
>, <Line: +	/**
>, <Line: +	 Schedules a job with the specified id and trigger
>, <Line: +	 @param jobDetail job id
>, <Line: +	 @param trigger   job trigger
>, <Line: +	 @throws KairosDBException if the job could not be schedule
>, <Line: +	 */
>, <Line: +	void schedule(JobDetail jobDetail, Trigger trigger) throws KairosDBException;
>, <Line: +	/**
>, <Line: +	 Cancels a scheduled job.
>, <Line: +	 @param jobKey key of the job to cancel
>, <Line: +	 @throws KairosDBException if the job could not be canceled
>, <Line: +	 */
>, <Line: +	void cancel(JobKey jobKey) throws KairosDBException;
>, <Line: +	/**
>, <Line: +	 Returns a list of schedule job ids
>, <Line: +	 @return list of scheduled job ids
>, <Line: +	 @throws KairosDBException if could not get the list
>, <Line: +	 */
>, <Line: +	Set<String> getScheduledJobIds() throws KairosDBException;
>]
[<Line: -/*
>, <Line: - * Copyright 2013 Proofpoint Inc.
>, <Line: - *
>, <Line: - *    Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: - *    you may not use this file except in compliance with the License.
>, <Line: - *    You may obtain a copy of the License at
>, <Line: - *
>, <Line: - *        http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - *
>, <Line: - *    Unless required by applicable law or agreed to in writing, software
>, <Line: - *    distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: - *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - *    See the License for the specific language governing permissions and
>, <Line: - *    limitations under the License.
>, <Line: - */
>, <Line: -import com.google.inject.Inject;
>, <Line: -import com.google.inject.Injector;
>, <Line: -import com.google.inject.Key;
>, <Line: -import org.kairosdb.core.KairosDBService;
>, <Line: -import org.quartz.*;
>, <Line: -import org.quartz.impl.StdSchedulerFactory;
>, <Line: -import org.quartz.impl.matchers.GroupMatcher;
>, <Line: -import org.slf4j.Logger;
>, <Line: -import org.slf4j.LoggerFactory;
>, <Line: -import java.util.Date;
>, <Line: -import java.util.List;
>, <Line: -import java.util.Properties;
>, <Line: -import static org.quartz.JobBuilder.newJob;
>, <Line: -public class KairosDBScheduler implements KairosDBService
>, <Line: -	private static final Logger log = LoggerFactory.getLogger(KairosDBScheduler.class);
>, <Line: -	private final Scheduler scheduler;
>, <Line: -	private final Injector guice;
>, <Line: -	@Inject
>, <Line: -	public KairosDBScheduler(Injector guice) throws SchedulerException
>, <Line: -	{
>, <Line: -		this.guice = guice;
>, <Line: -		Properties props = new Properties();
>, <Line: -		props.setProperty("org.quartz.threadPool.threadCount", "4");
>, <Line: -		StdSchedulerFactory factory = new StdSchedulerFactory(props);
>, <Line: -		scheduler = factory.getScheduler();
>, <Line: -		scheduler.setJobFactory(new KairosDBJobFactory(guice));
>, <Line: -	}
>, <Line: -	@SuppressWarnings("unchecked")
>, <Line: -	@Override
>, <Line: -	public void start() throws KairosDBException
>, <Line: -	{
>, <Line: -		try
>, <Line: -		{
>, <Line: -			scheduler.start();
>, <Line: -			for (Key<?> key : guice.getAllBindings().keySet())
>, <Line: -			{
>, <Line: -				Class bindingClass = key.getTypeLiteral().getRawType();
>, <Line: -				if (KairosDBJob.class.isAssignableFrom(bindingClass))
>, <Line: -				{
>, <Line: -					KairosDBJob job = (KairosDBJob) guice.getInstance(bindingClass);
>, <Line: -					JobDetail jobDetail = newJob(job.getClass())
>, <Line: -							.withIdentity(job.getClass().getName()).build();
>, <Line: -					scheduler.scheduleJob(jobDetail, job.getTrigger());
>, <Line: -				}
>, <Line: -			}
>, <Line: -			for (String groupName : scheduler.getJobGroupNames()) {
>, <Line: -				for (JobKey jobKey : scheduler.getJobKeys(GroupMatcher.jobGroupEquals(groupName))) {
>, <Line: -					String jobName = jobKey.getName();
>, <Line: -					List<Trigger> triggers = (List<Trigger>) scheduler.getTriggersOfJob(jobKey);
>, <Line: -					Date nextFireTime = triggers.get(0).getNextFireTime();
>, <Line: -					log.info("*** Scheduled job " + jobName + " to execute next on " + nextFireTime);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}
>, <Line: -		catch (SchedulerException e)
>, <Line: -		{
>, <Line: -			throw new KairosDBException("Failed to start " + getClass().getName(), e);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public void stop()
>, <Line: -	{
>, <Line: -		try
>, <Line: -		{
>, <Line: -			scheduler.shutdown(true);
>, <Line: -		}
>, <Line: -		catch (SchedulerException e)
>, <Line: -		{
>, <Line: -			log.error("Failed to start " + getClass().getName(), e);
>, <Line: -		}
>, <Line: -	}
>]