[<Line: +	'lodash'
>, <Line: +], function (_) {
>, <Line: +	'use strict';
>, <Line: +	// This is auto generated from the unicode tables.
>, <Line: +	// The tables are at:
>, <Line: +	// http://www.fileformat.info/info/unicode/category/Lu/list.htm
>, <Line: +	// http://www.fileformat.info/info/unicode/category/Ll/list.htm
>, <Line: +	// http://www.fileformat.info/info/unicode/category/Lt/list.htm
>, <Line: +	// http://www.fileformat.info/info/unicode/category/Lm/list.htm
>, <Line: +	// http://www.fileformat.info/info/unicode/category/Lo/list.htm
>, <Line: +	// http://www.fileformat.info/info/unicode/category/Nl/list.htm
>, <Line: +	var unicodeLetterTable = [
>, <Line: +		170, 170, 181, 181, 186, 186, 192, 214,
>, <Line: +		216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750,
>, <Line: +		880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908,
>, <Line: +		910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366,
>, <Line: +		1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610,
>, <Line: +		1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775,
>, <Line: +		1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957,
>, <Line: +		1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069,
>, <Line: +		2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2308, 2361,
>, <Line: +		2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431,
>, <Line: +		2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482,
>, <Line: +		2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,
>, <Line: +		2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608,
>, <Line: +		2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654,
>, <Line: +		2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736,
>, <Line: +		2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785,
>, <Line: +		2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867,
>, <Line: +		2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929,
>, <Line: +		2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970,
>, <Line: +		2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001,
>, <Line: +		3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123,
>, <Line: +		3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212,
>, <Line: +		3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261,
>, <Line: +		3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344,
>, <Line: +		3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,
>, <Line: +		3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526,
>, <Line: +		3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716,
>, <Line: +		3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743,
>, <Line: +		3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760,
>, <Line: +		3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805,
>, <Line: +		3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138,
>, <Line: +		4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198,
>, <Line: +		4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4304, 4346,
>, <Line: +		4348, 4348, 4352, 4680, 4682, 4685, 4688, 4694, 4696, 4696,
>, <Line: +		4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789,
>, <Line: +		4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880,
>, <Line: +		4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740,
>, <Line: +		5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900,
>, <Line: +		5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000,
>, <Line: +		6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312,
>, <Line: +		6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516,
>, <Line: +		6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823,
>, <Line: +		6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7104, 7141,
>, <Line: +		7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409,
>, <Line: +		7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013,
>, <Line: +		8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061,
>, <Line: +		8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140,
>, <Line: +		8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,
>, <Line: +		8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455,
>, <Line: +		8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486,
>, <Line: +		8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521,
>, <Line: +		8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358,
>, <Line: +		11360, 11492, 11499, 11502, 11520, 11557, 11568, 11621,
>, <Line: +		11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694,
>, <Line: +		11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726,
>, <Line: +		11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295,
>, <Line: +		12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438,
>, <Line: +		12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589,
>, <Line: +		12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312,
>, <Line: +		19893, 19893, 19968, 19968, 40907, 40907, 40960, 42124,
>, <Line: +		42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539,
>, <Line: +		42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783,
>, <Line: +		42786, 42888, 42891, 42894, 42896, 42897, 42912, 42921,
>, <Line: +		43002, 43009, 43011, 43013, 43015, 43018, 43020, 43042,
>, <Line: +		43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,
>, <Line: +		43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442,
>, <Line: +		43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595,
>, <Line: +		43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697,
>, <Line: +		43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714,
>, <Line: +		43739, 43741, 43777, 43782, 43785, 43790, 43793, 43798,
>, <Line: +		43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032,
>, <Line: +		55203, 55203, 55216, 55238, 55243, 55291, 63744, 64045,
>, <Line: +		64048, 64109, 64112, 64217, 64256, 64262, 64275, 64279,
>, <Line: +		64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316,
>, <Line: +		64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433,
>, <Line: +		64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,
>, <Line: +		65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370,
>, <Line: +		65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495,
>, <Line: +		65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594,
>, <Line: +		65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786,
>, <Line: +		65856, 65908, 66176, 66204, 66208, 66256, 66304, 66334,
>, <Line: +		66352, 66378, 66432, 66461, 66464, 66499, 66504, 66511,
>, <Line: +		66513, 66517, 66560, 66717, 67584, 67589, 67592, 67592,
>, <Line: +		67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669,
>, <Line: +		67840, 67861, 67872, 67897, 68096, 68096, 68112, 68115,
>, <Line: +		68117, 68119, 68121, 68147, 68192, 68220, 68352, 68405,
>, <Line: +		68416, 68437, 68448, 68466, 68608, 68680, 69635, 69687,
>, <Line: +		69763, 69807, 73728, 74606, 74752, 74850, 77824, 78894,
>, <Line: +		92160, 92728, 110592, 110593, 119808, 119892, 119894, 119964,
>, <Line: +		119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980,
>, <Line: +		119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069,
>, <Line: +		120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121,
>, <Line: +		120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144,
>, <Line: +		120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570,
>, <Line: +		120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686,
>, <Line: +		120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779,
>, <Line: +		131072, 131072, 173782, 173782, 173824, 173824, 177972, 177972,
>, <Line: +		177984, 177984, 178205, 178205, 194560, 195101
>, <Line: +	];
>, <Line: +	var identifierStartTable = [];
>, <Line: +	for (var i = 0; i < 128; i++) {
>, <Line: +		identifierStartTable[i] =
>, <Line: +			i >= 48 && i <= 57 || // 0-9
>, <Line: +			i === 36 ||           // $
>, <Line: +			i >= 65 && i <= 90 || // A-Z
>, <Line: +			i === 95 ||           // _
>, <Line: +			i === 45 ||           // -
>, <Line: +			i === 42 ||           // *
>, <Line: +			i === 58 ||           // :
>, <Line: +			i === 91 ||           // templateStart [
>, <Line: +			i === 93 ||           // templateEnd ]
>, <Line: +			i === 63 ||           // ?
>, <Line: +			i === 37 ||           // %
>, <Line: +			i === 35 ||           // #
>, <Line: +			i === 61 ||           // =
>, <Line: +			i >= 97 && i <= 122;  // a-z
>, <Line: +	}
>, <Line: +	var identifierPartTable = [];
>, <Line: +	for (var i2 = 0; i2 < 128; i2++) {
>, <Line: +		identifierPartTable[i2] =
>, <Line: +			identifierStartTable[i2] || // $, _, A-Z, a-z
>, <Line: +			i2 >= 48 && i2 <= 57;        // 0-9
>, <Line: +	}
>, <Line: +	function Lexer(expression) {
>, <Line: +		this.input = expression;
>, <Line: +		this.char = 1;
>, <Line: +		this.from = 1;
>, <Line: +	}
>, <Line: +	Lexer.prototype = {
>, <Line: +		peek: function (i) {
>, <Line: +			return this.input.charAt(i || 0);
>, <Line: +		},
>, <Line: +		skip: function (i) {
>, <Line: +			i = i || 1;
>, <Line: +			this.char += i;
>, <Line: +			this.input = this.input.slice(i);
>, <Line: +		},
>, <Line: +		tokenize: function () {
>, <Line: +			var list = [];
>, <Line: +			var token;
>, <Line: +			while (token = this.next()) {
>, <Line: +				list.push(token);
>, <Line: +			}
>, <Line: +			return list;
>, <Line: +		},
>, <Line: +		next: function () {
>, <Line: +			this.from = this.char;
>, <Line: +			// Move to the next non-space character.
>, <Line: +			var start;
>, <Line: +			if (/\s/.test(this.peek())) {
>, <Line: +				start = this.char;
>, <Line: +				while (/\s/.test(this.peek())) {
>, <Line: +					this.from += 1;
>, <Line: +					this.skip();
>, <Line: +				}
>, <Line: +				if (this.peek() === "") { // EOL
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			var match = this.scanStringLiteral();
>, <Line: +			if (match) {
>, <Line: +				return match;
>, <Line: +			}
>, <Line: +			match =
>, <Line: +				this.scanPunctuator() ||
>, <Line: +				this.scanNumericLiteral() ||
>, <Line: +				this.scanIdentifier() ||
>, <Line: +				this.scanTemplateSequence();
>, <Line: +			if (match) {
>, <Line: +				this.skip(match.value.length);
>, <Line: +				return match;
>, <Line: +			}
>, <Line: +			// No token could be matched, give up.
>, <Line: +			return null;
>, <Line: +		},
>, <Line: +		scanTemplateSequence: function () {
>, <Line: +			if (this.peek() === '[' && this.peek(1) === '[') {
>, <Line: +				return {
>, <Line: +					type: 'templateStart',
>, <Line: +					value: '[[',
>, <Line: +					pos: this.char
>, <Line: +				};
>, <Line: +			}
>, <Line: +			if (this.peek() === ']' && this.peek(1) === ']') {
>, <Line: +				return {
>, <Line: +					type: 'templateEnd',
>, <Line: +					value: '[[',
>, <Line: +					pos: this.char
>, <Line: +				};
>, <Line: +			}
>, <Line: +			return null;
>, <Line: +		},
>, <Line: +		/*
>, <Line: +		 * Extract a JavaScript identifier out of the next sequence of
>, <Line: +		 * characters or return 'null' if its not possible. In addition,
>, <Line: +		 * to Identifier this method can also produce BooleanLiteral
>, <Line: +		 * (true/false) and NullLiteral (null).
>, <Line: +		 */
>, <Line: +		scanIdentifier: function () {
>, <Line: +			var id = "";
>, <Line: +			var index = 0;
>, <Line: +			var type, char;
>, <Line: +			// Detects any character in the Unicode categories "Uppercase
>, <Line: +			// letter (Lu)", "Lowercase letter (Ll)", "Titlecase letter
>, <Line: +			// (Lt)", "Modifier letter (Lm)", "Other letter (Lo)", or
>, <Line: +			// "Letter number (Nl)".
>, <Line: +			//
>, <Line: +			// Both approach and unicodeLetterTable were borrowed from
>, <Line: +			// Google's Traceur.
>, <Line: +			function isUnicodeLetter(code) {
>, <Line: +				for (var i = 0; i < unicodeLetterTable.length;) {
>, <Line: +					if (code < unicodeLetterTable[i++]) {
>, <Line: +						return false;
>, <Line: +					}
>, <Line: +					if (code <= unicodeLetterTable[i++]) {
>, <Line: +						return true;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				return false;
>, <Line: +			}
>, <Line: +			function isHexDigit(str) {
>, <Line: +				return (/^[0-9a-fA-F]$/).test(str);
>, <Line: +			}
>, <Line: +			var readUnicodeEscapeSequence = _.bind(function () {
>, <Line: +				/*jshint validthis:true */
>, <Line: +				index += 1;
>, <Line: +				if (this.peek(index) !== "u") {
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +				var ch1 = this.peek(index + 1);
>, <Line: +				var ch2 = this.peek(index + 2);
>, <Line: +				var ch3 = this.peek(index + 3);
>, <Line: +				var ch4 = this.peek(index + 4);
>, <Line: +				var code;
>, <Line: +				if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {
>, <Line: +					code = parseInt(ch1 + ch2 + ch3 + ch4, 16);
>, <Line: +					if (isUnicodeLetter(code)) {
>, <Line: +						index += 5;
>, <Line: +						return "\\u" + ch1 + ch2 + ch3 + ch4;
>, <Line: +					}
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +				return null;
>, <Line: +			}, this);
>, <Line: +			var getIdentifierStart = _.bind(function () {
>, <Line: +				/*jshint validthis:true */
>, <Line: +				var chr = this.peek(index);
>, <Line: +				var code = chr.charCodeAt(0);
>, <Line: +				if (chr === '*') {
>, <Line: +					index += 1;
>, <Line: +					return chr;
>, <Line: +				}
>, <Line: +				if (code === 92) {
>, <Line: +					return readUnicodeEscapeSequence();
>, <Line: +				}
>, <Line: +				if (code < 128) {
>, <Line: +					if (identifierStartTable[code]) {
>, <Line: +						index += 1;
>, <Line: +						return chr;
>, <Line: +					}
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +				if (isUnicodeLetter(code)) {
>, <Line: +					index += 1;
>, <Line: +					return chr;
>, <Line: +				}
>, <Line: +				return null;
>, <Line: +			}, this);
>, <Line: +			var getIdentifierPart = _.bind(function () {
>, <Line: +				/*jshint validthis:true */
>, <Line: +				var chr = this.peek(index);
>, <Line: +				var code = chr.charCodeAt(0);
>, <Line: +				if (code === 92) {
>, <Line: +					return readUnicodeEscapeSequence();
>, <Line: +				}
>, <Line: +				if (code < 128) {
>, <Line: +					if (identifierPartTable[code]) {
>, <Line: +						index += 1;
>, <Line: +						return chr;
>, <Line: +					}
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +				if (isUnicodeLetter(code)) {
>, <Line: +					index += 1;
>, <Line: +					return chr;
>, <Line: +				}
>, <Line: +				return null;
>, <Line: +			}, this);
>, <Line: +			char = getIdentifierStart();
>, <Line: +			if (char === null) {
>, <Line: +				return null;
>, <Line: +			}
>, <Line: +			id = char;
>, <Line: +			for (; ;) {
>, <Line: +				char = getIdentifierPart();
>, <Line: +				if (char === null) {
>, <Line: +					break;
>, <Line: +				}
>, <Line: +				id += char;
>, <Line: +			}
>, <Line: +			switch (id) {
>, <Line: +				default:
>, <Line: +					type = "identifier";
>, <Line: +			}
>, <Line: +			return {
>, <Line: +				type: type,
>, <Line: +				value: id,
>, <Line: +				pos: this.char
>, <Line: +			};
>, <Line: +		},
>, <Line: +		/*
>, <Line: +		 * Extract a numeric literal out of the next sequence of
>, <Line: +		 * characters or return 'null' if its not possible. This method
>, <Line: +		 * supports all numeric literals described in section 7.8.3
>, <Line: +		 * of the EcmaScript 5 specification.
>, <Line: +		 *
>, <Line: +		 * This method's implementation was heavily influenced by the
>, <Line: +		 * scanNumericLiteral function in the Esprima parser's source code.
>, <Line: +		 */
>, <Line: +		scanNumericLiteral: function () {
>, <Line: +			var index = 0;
>, <Line: +			var value = "";
>, <Line: +			var length = this.input.length;
>, <Line: +			var char = this.peek(index);
>, <Line: +			var bad;
>, <Line: +			function isDecimalDigit(str) {
>, <Line: +				return (/^[0-9]$/).test(str);
>, <Line: +			}
>, <Line: +			function isOctalDigit(str) {
>, <Line: +				return (/^[0-7]$/).test(str);
>, <Line: +			}
>, <Line: +			function isHexDigit(str) {
>, <Line: +				return (/^[0-9a-fA-F]$/).test(str);
>, <Line: +			}
>, <Line: +			function isIdentifierStart(ch) {
>, <Line: +				return (ch === "$") || (ch === "_") || (ch === "\\") ||
>, <Line: +					(ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z");
>, <Line: +			}
>, <Line: +			// handle negative num literals
>, <Line: +			if (char === '-') {
>, <Line: +				value += char;
>, <Line: +				index += 1;
>, <Line: +				char = this.peek(index);
>, <Line: +			}
>, <Line: +			// Numbers must start either with a decimal digit or a point.
>, <Line: +			if (char !== "." && !isDecimalDigit(char)) {
>, <Line: +				return null;
>, <Line: +			}
>, <Line: +			if (char !== ".") {
>, <Line: +				value += this.peek(index);
>, <Line: +				index += 1;
>, <Line: +				char = this.peek(index);
>, <Line: +				if (value === "0") {
>, <Line: +					// Base-16 numbers.
>, <Line: +					if (char === "x" || char === "X") {
>, <Line: +						index += 1;
>, <Line: +						value += char;
>, <Line: +						while (index < length) {
>, <Line: +							char = this.peek(index);
>, <Line: +							if (!isHexDigit(char)) {
>, <Line: +								break;
>, <Line: +							}
>, <Line: +							value += char;
>, <Line: +							index += 1;
>, <Line: +						}
>, <Line: +						if (value.length <= 2) { // 0x
>, <Line: +							return {
>, <Line: +								type: 'number',
>, <Line: +								value: value,
>, <Line: +								isMalformed: true,
>, <Line: +								pos: this.char
>, <Line: +							};
>, <Line: +						}
>, <Line: +						if (index < length) {
>, <Line: +							char = this.peek(index);
>, <Line: +							if (isIdentifierStart(char)) {
>, <Line: +								return null;
>, <Line: +							}
>, <Line: +						}
>, <Line: +						return {
>, <Line: +							type: 'number',
>, <Line: +							value: value,
>, <Line: +							base: 16,
>, <Line: +							isMalformed: false,
>, <Line: +							pos: this.char
>, <Line: +						};
>, <Line: +					}
>, <Line: +					// Base-8 numbers.
>, <Line: +					if (isOctalDigit(char)) {
>, <Line: +						index += 1;
>, <Line: +						value += char;
>, <Line: +						bad = false;
>, <Line: +						while (index < length) {
>, <Line: +							char = this.peek(index);
>, <Line: +							// Numbers like '019' (note the 9) are not valid octals
>, <Line: +							// but we still parse them and mark as malformed.
>, <Line: +							if (isDecimalDigit(char)) {
>, <Line: +								bad = true;
>, <Line: +							} else if (!isOctalDigit(char)) {
>, <Line: +								break;
>, <Line: +							}
>, <Line: +							value += char;
>, <Line: +							index += 1;
>, <Line: +						}
>, <Line: +						if (index < length) {
>, <Line: +							char = this.peek(index);
>, <Line: +							if (isIdentifierStart(char)) {
>, <Line: +								return null;
>, <Line: +							}
>, <Line: +						}
>, <Line: +						return {
>, <Line: +							type: 'number',
>, <Line: +							value: value,
>, <Line: +							base: 8,
>, <Line: +							isMalformed: false
>, <Line: +						};
>, <Line: +					}
>, <Line: +					// Decimal numbers that start with '0' such as '09' are illegal
>, <Line: +					// but we still parse them and return as malformed.
>, <Line: +					if (isDecimalDigit(char)) {
>, <Line: +						index += 1;
>, <Line: +						value += char;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				while (index < length) {
>, <Line: +					char = this.peek(index);
>, <Line: +					if (!isDecimalDigit(char)) {
>, <Line: +						break;
>, <Line: +					}
>, <Line: +					value += char;
>, <Line: +					index += 1;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			// Decimal digits.
>, <Line: +			if (char === ".") {
>, <Line: +				value += char;
>, <Line: +				index += 1;
>, <Line: +				while (index < length) {
>, <Line: +					char = this.peek(index);
>, <Line: +					if (!isDecimalDigit(char)) {
>, <Line: +						break;
>, <Line: +					}
>, <Line: +					value += char;
>, <Line: +					index += 1;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			// Exponent part.
>, <Line: +			if (char === "e" || char === "E") {
>, <Line: +				value += char;
>, <Line: +				index += 1;
>, <Line: +				char = this.peek(index);
>, <Line: +				if (char === "+" || char === "-") {
>, <Line: +					value += this.peek(index);
>, <Line: +					index += 1;
>, <Line: +				}
>, <Line: +				char = this.peek(index);
>, <Line: +				if (isDecimalDigit(char)) {
>, <Line: +					value += char;
>, <Line: +					index += 1;
>, <Line: +					while (index < length) {
>, <Line: +						char = this.peek(index);
>, <Line: +						if (!isDecimalDigit(char)) {
>, <Line: +							break;
>, <Line: +						}
>, <Line: +						value += char;
>, <Line: +						index += 1;
>, <Line: +					}
>, <Line: +				} else {
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			if (index < length) {
>, <Line: +				char = this.peek(index);
>, <Line: +				if (!this.isPunctuator(char)) {
>, <Line: +					return null;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			return {
>, <Line: +				type: 'number',
>, <Line: +				value: value,
>, <Line: +				base: 10,
>, <Line: +				pos: this.char,
>, <Line: +				isMalformed: !isFinite(value)
>, <Line: +			};
>, <Line: +		},
>, <Line: +		isPunctuator: function (ch1) {
>, <Line: +			switch (ch1) {
>, <Line: +				case ".":
>, <Line: +				case "(":
>, <Line: +				case ")":
>, <Line: +				case ",":
>, <Line: +				case "{":
>, <Line: +				case "}":
>, <Line: +					return true;
>, <Line: +			}
>, <Line: +			return false;
>, <Line: +		},
>, <Line: +		scanPunctuator: function () {
>, <Line: +			var ch1 = this.peek();
>, <Line: +			if (this.isPunctuator(ch1)) {
>, <Line: +				return {
>, <Line: +					type: ch1,
>, <Line: +					value: ch1,
>, <Line: +					pos: this.char
>, <Line: +				};
>, <Line: +			}
>, <Line: +			return null;
>, <Line: +		},
>, <Line: +		/*
>, <Line: +		 * Extract a string out of the next sequence of characters and/or
>, <Line: +		 * lines or return 'null' if its not possible. Since strings can
>, <Line: +		 * span across multiple lines this method has to move the char
>, <Line: +		 * pointer.
>, <Line: +		 *
>, <Line: +		 * This method recognizes pseudo-multiline JavaScript strings:
>, <Line: +		 *
>, <Line: +		 *   var str = "hello\
>, <Line: +		 *   world";
>, <Line: +		 */
>, <Line: +		scanStringLiteral: function () {
>, <Line: +			/*jshint loopfunc:true */
>, <Line: +			var quote = this.peek();
>, <Line: +			// String must start with a quote.
>, <Line: +			if (quote !== "\"" && quote !== "'") {
>, <Line: +				return null;
>, <Line: +			}
>, <Line: +			var value = "";
>, <Line: +			this.skip();
>, <Line: +			while (this.peek() !== quote) {
>, <Line: +				if (this.peek() === "") { // End Of Line
>, <Line: +					return {
>, <Line: +						type: 'string',
>, <Line: +						value: value,
>, <Line: +						isUnclosed: true,
>, <Line: +						quote: quote,
>, <Line: +						pos: this.char
>, <Line: +					};
>, <Line: +				}
>, <Line: +				var char = this.peek();
>, <Line: +				var jump = 1; // A length of a jump, after we're done
>, <Line: +							  // parsing this character.
>, <Line: +				value += char;
>, <Line: +				this.skip(jump);
>, <Line: +			}
>, <Line: +			this.skip();
>, <Line: +			return {
>, <Line: +				type: 'string',
>, <Line: +				value: value,
>, <Line: +				isUnclosed: false,
>, <Line: +				quote: quote,
>, <Line: +				pos: this.char
>, <Line: +			};
>, <Line: +		},
>, <Line: +	};
>, <Line: +	return Lexer;
>]
[<Line: -  'lodash'
>, <Line: -], function(_) {
>, <Line: -  'use strict';
>, <Line: -  // This is auto generated from the unicode tables.
>, <Line: -  // The tables are at:
>, <Line: -  // http://www.fileformat.info/info/unicode/category/Lu/list.htm
>, <Line: -  // http://www.fileformat.info/info/unicode/category/Ll/list.htm
>, <Line: -  // http://www.fileformat.info/info/unicode/category/Lt/list.htm
>, <Line: -  // http://www.fileformat.info/info/unicode/category/Lm/list.htm
>, <Line: -  // http://www.fileformat.info/info/unicode/category/Lo/list.htm
>, <Line: -  // http://www.fileformat.info/info/unicode/category/Nl/list.htm
>, <Line: -  var unicodeLetterTable = [
>, <Line: -    170, 170, 181, 181, 186, 186, 192, 214,
>, <Line: -    216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750,
>, <Line: -    880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908,
>, <Line: -    910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366,
>, <Line: -    1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610,
>, <Line: -    1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775,
>, <Line: -    1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957,
>, <Line: -    1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069,
>, <Line: -    2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2308, 2361,
>, <Line: -    2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431,
>, <Line: -    2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482,
>, <Line: -    2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,
>, <Line: -    2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608,
>, <Line: -    2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654,
>, <Line: -    2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736,
>, <Line: -    2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785,
>, <Line: -    2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867,
>, <Line: -    2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929,
>, <Line: -    2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970,
>, <Line: -    2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001,
>, <Line: -    3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123,
>, <Line: -    3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212,
>, <Line: -    3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261,
>, <Line: -    3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344,
>, <Line: -    3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,
>, <Line: -    3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526,
>, <Line: -    3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716,
>, <Line: -    3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743,
>, <Line: -    3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760,
>, <Line: -    3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805,
>, <Line: -    3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138,
>, <Line: -    4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198,
>, <Line: -    4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4304, 4346,
>, <Line: -    4348, 4348, 4352, 4680, 4682, 4685, 4688, 4694, 4696, 4696,
>, <Line: -    4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789,
>, <Line: -    4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880,
>, <Line: -    4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740,
>, <Line: -    5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900,
>, <Line: -    5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000,
>, <Line: -    6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312,
>, <Line: -    6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516,
>, <Line: -    6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823,
>, <Line: -    6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7104, 7141,
>, <Line: -    7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409,
>, <Line: -    7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013,
>, <Line: -    8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061,
>, <Line: -    8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140,
>, <Line: -    8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,
>, <Line: -    8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455,
>, <Line: -    8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486,
>, <Line: -    8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521,
>, <Line: -    8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358,
>, <Line: -    11360, 11492, 11499, 11502, 11520, 11557, 11568, 11621,
>, <Line: -    11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694,
>, <Line: -    11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726,
>, <Line: -    11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295,
>, <Line: -    12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438,
>, <Line: -    12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589,
>, <Line: -    12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312,
>, <Line: -    19893, 19893, 19968, 19968, 40907, 40907, 40960, 42124,
>, <Line: -    42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539,
>, <Line: -    42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783,
>, <Line: -    42786, 42888, 42891, 42894, 42896, 42897, 42912, 42921,
>, <Line: -    43002, 43009, 43011, 43013, 43015, 43018, 43020, 43042,
>, <Line: -    43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,
>, <Line: -    43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442,
>, <Line: -    43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595,
>, <Line: -    43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697,
>, <Line: -    43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714,
>, <Line: -    43739, 43741, 43777, 43782, 43785, 43790, 43793, 43798,
>, <Line: -    43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032,
>, <Line: -    55203, 55203, 55216, 55238, 55243, 55291, 63744, 64045,
>, <Line: -    64048, 64109, 64112, 64217, 64256, 64262, 64275, 64279,
>, <Line: -    64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316,
>, <Line: -    64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433,
>, <Line: -    64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,
>, <Line: -    65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370,
>, <Line: -    65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495,
>, <Line: -    65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594,
>, <Line: -    65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786,
>, <Line: -    65856, 65908, 66176, 66204, 66208, 66256, 66304, 66334,
>, <Line: -    66352, 66378, 66432, 66461, 66464, 66499, 66504, 66511,
>, <Line: -    66513, 66517, 66560, 66717, 67584, 67589, 67592, 67592,
>, <Line: -    67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669,
>, <Line: -    67840, 67861, 67872, 67897, 68096, 68096, 68112, 68115,
>, <Line: -    68117, 68119, 68121, 68147, 68192, 68220, 68352, 68405,
>, <Line: -    68416, 68437, 68448, 68466, 68608, 68680, 69635, 69687,
>, <Line: -    69763, 69807, 73728, 74606, 74752, 74850, 77824, 78894,
>, <Line: -    92160, 92728, 110592, 110593, 119808, 119892, 119894, 119964,
>, <Line: -    119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980,
>, <Line: -    119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069,
>, <Line: -    120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121,
>, <Line: -    120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144,
>, <Line: -    120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570,
>, <Line: -    120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686,
>, <Line: -    120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779,
>, <Line: -    131072, 131072, 173782, 173782, 173824, 173824, 177972, 177972,
>, <Line: -    177984, 177984, 178205, 178205, 194560, 195101
>, <Line: -  ];
>, <Line: -  var identifierStartTable = [];
>, <Line: -  for (var i = 0; i < 128; i++) {
>, <Line: -    identifierStartTable[i] =
>, <Line: -      i >= 48 && i <= 57 || // 0-9
>, <Line: -      i === 36 ||           // $
>, <Line: -      i >= 65 && i <= 90 || // A-Z
>, <Line: -      i === 95 ||           // _
>, <Line: -      i === 45 ||           // -
>, <Line: -      i === 42 ||           // *
>, <Line: -      i === 58 ||           // :
>, <Line: -      i === 91 ||           // templateStart [
>, <Line: -      i === 93 ||           // templateEnd ]
>, <Line: -      i === 63 ||           // ?
>, <Line: -      i === 37 ||           // %
>, <Line: -      i === 35 ||           // #
>, <Line: -      i === 61 ||           // =
>, <Line: -      i >= 97 && i <= 122;  // a-z
>, <Line: -  }
>, <Line: -  var identifierPartTable = [];
>, <Line: -  for (var i2 = 0; i2 < 128; i2++) {
>, <Line: -    identifierPartTable[i2] =
>, <Line: -      identifierStartTable[i2] || // $, _, A-Z, a-z
>, <Line: -      i2 >= 48 && i2 <= 57;        // 0-9
>, <Line: -  }
>, <Line: -  function Lexer(expression) {
>, <Line: -    this.input = expression;
>, <Line: -    this.char = 1;
>, <Line: -    this.from = 1;
>, <Line: -  }
>, <Line: -  Lexer.prototype = {
>, <Line: -    peek: function (i) {
>, <Line: -      return this.input.charAt(i || 0);
>, <Line: -    },
>, <Line: -    skip: function (i) {
>, <Line: -      i = i || 1;
>, <Line: -      this.char += i;
>, <Line: -      this.input = this.input.slice(i);
>, <Line: -    },
>, <Line: -    tokenize: function() {
>, <Line: -      var list = [];
>, <Line: -      var token;
>, <Line: -      while (token = this.next()) {
>, <Line: -        list.push(token);
>, <Line: -      }
>, <Line: -      return list;
>, <Line: -    },
>, <Line: -    next: function() {
>, <Line: -      this.from = this.char;
>, <Line: -      // Move to the next non-space character.
>, <Line: -      var start;
>, <Line: -      if (/\s/.test(this.peek())) {
>, <Line: -        start = this.char;
>, <Line: -        while (/\s/.test(this.peek())) {
>, <Line: -          this.from += 1;
>, <Line: -          this.skip();
>, <Line: -        }
>, <Line: -        if (this.peek() === "") { // EOL
>, <Line: -          return null;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      var match = this.scanStringLiteral();
>, <Line: -      if (match) {
>, <Line: -        return match;
>, <Line: -      }
>, <Line: -      match =
>, <Line: -        this.scanPunctuator() ||
>, <Line: -        this.scanNumericLiteral() ||
>, <Line: -        this.scanIdentifier() ||
>, <Line: -        this.scanTemplateSequence();
>, <Line: -      if (match) {
>, <Line: -        this.skip(match.value.length);
>, <Line: -        return match;
>, <Line: -      }
>, <Line: -      // No token could be matched, give up.
>, <Line: -      return null;
>, <Line: -    },
>, <Line: -    scanTemplateSequence: function() {
>, <Line: -      if (this.peek() === '[' && this.peek(1) === '[') {
>, <Line: -        return {
>, <Line: -          type: 'templateStart',
>, <Line: -          value: '[[',
>, <Line: -          pos: this.char
>, <Line: -        };
>, <Line: -      }
>, <Line: -      if (this.peek() === ']' && this.peek(1) === ']') {
>, <Line: -        return {
>, <Line: -          type: 'templateEnd',
>, <Line: -          value: '[[',
>, <Line: -          pos: this.char
>, <Line: -        };
>, <Line: -      }
>, <Line: -      return null;
>, <Line: -    },
>, <Line: -      /*
>, <Line: -     * Extract a JavaScript identifier out of the next sequence of
>, <Line: -     * characters or return 'null' if its not possible. In addition,
>, <Line: -     * to Identifier this method can also produce BooleanLiteral
>, <Line: -     * (true/false) and NullLiteral (null).
>, <Line: -     */
>, <Line: -    scanIdentifier: function() {
>, <Line: -      var id = "";
>, <Line: -      var index = 0;
>, <Line: -      var type, char;
>, <Line: -      // Detects any character in the Unicode categories "Uppercase
>, <Line: -      // letter (Lu)", "Lowercase letter (Ll)", "Titlecase letter
>, <Line: -      // (Lt)", "Modifier letter (Lm)", "Other letter (Lo)", or
>, <Line: -      // "Letter number (Nl)".
>, <Line: -      //
>, <Line: -      // Both approach and unicodeLetterTable were borrowed from
>, <Line: -      // Google's Traceur.
>, <Line: -      function isUnicodeLetter(code) {
>, <Line: -        for (var i = 0; i < unicodeLetterTable.length;) {
>, <Line: -          if (code < unicodeLetterTable[i++]) {
>, <Line: -            return false;
>, <Line: -          }
>, <Line: -          if (code <= unicodeLetterTable[i++]) {
>, <Line: -            return true;
>, <Line: -          }
>, <Line: -        }
>, <Line: -        return false;
>, <Line: -      }
>, <Line: -      function isHexDigit(str) {
>, <Line: -        return (/^[0-9a-fA-F]$/).test(str);
>, <Line: -      }
>, <Line: -      var readUnicodeEscapeSequence = _.bind(function () {
>, <Line: -        /*jshint validthis:true */
>, <Line: -        index += 1;
>, <Line: -        if (this.peek(index) !== "u") {
>, <Line: -          return null;
>, <Line: -        }
>, <Line: -        var ch1 = this.peek(index + 1);
>, <Line: -        var ch2 = this.peek(index + 2);
>, <Line: -        var ch3 = this.peek(index + 3);
>, <Line: -        var ch4 = this.peek(index + 4);
>, <Line: -        var code;
>, <Line: -        if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {
>, <Line: -          code = parseInt(ch1 + ch2 + ch3 + ch4, 16);
>, <Line: -          if (isUnicodeLetter(code)) {
>, <Line: -            index += 5;
>, <Line: -            return "\\u" + ch1 + ch2 + ch3 + ch4;
>, <Line: -          }
>, <Line: -          return null;
>, <Line: -        }
>, <Line: -        return null;
>, <Line: -      }, this);
>, <Line: -      var getIdentifierStart = _.bind(function () {
>, <Line: -        /*jshint validthis:true */
>, <Line: -        var chr = this.peek(index);
>, <Line: -        var code = chr.charCodeAt(0);
>, <Line: -        if (chr === '*') {
>, <Line: -          index += 1;
>, <Line: -          return chr;
>, <Line: -        }
>, <Line: -        if (code === 92) {
>, <Line: -          return readUnicodeEscapeSequence();
>, <Line: -        }
>, <Line: -        if (code < 128) {
>, <Line: -          if (identifierStartTable[code]) {
>, <Line: -            index += 1;
>, <Line: -            return chr;
>, <Line: -          }
>, <Line: -          return null;
>, <Line: -        }
>, <Line: -        if (isUnicodeLetter(code)) {
>, <Line: -          index += 1;
>, <Line: -          return chr;
>, <Line: -        }
>, <Line: -        return null;
>, <Line: -      }, this);
>, <Line: -      var getIdentifierPart = _.bind(function () {
>, <Line: -        /*jshint validthis:true */
>, <Line: -        var chr = this.peek(index);
>, <Line: -        var code = chr.charCodeAt(0);
>, <Line: -        if (code === 92) {
>, <Line: -          return readUnicodeEscapeSequence();
>, <Line: -        }
>, <Line: -        if (code < 128) {
>, <Line: -          if (identifierPartTable[code]) {
>, <Line: -            index += 1;
>, <Line: -            return chr;
>, <Line: -          }
>, <Line: -          return null;
>, <Line: -        }
>, <Line: -        if (isUnicodeLetter(code)) {
>, <Line: -          index += 1;
>, <Line: -          return chr;
>, <Line: -        }
>, <Line: -        return null;
>, <Line: -      }, this);
>, <Line: -      char = getIdentifierStart();
>, <Line: -      if (char === null) {
>, <Line: -        return null;
>, <Line: -      }
>, <Line: -      id = char;
>, <Line: -      for (;;) {
>, <Line: -        char = getIdentifierPart();
>, <Line: -        if (char === null) {
>, <Line: -          break;
>, <Line: -        }
>, <Line: -        id += char;
>, <Line: -      }
>, <Line: -      switch (id) {
>, <Line: -      default:
>, <Line: -        type = "identifier";
>, <Line: -      }
>, <Line: -      return {
>, <Line: -        type: type,
>, <Line: -        value: id,
>, <Line: -        pos: this.char
>, <Line: -      };
>, <Line: -    },
>, <Line: -      /*
>, <Line: -     * Extract a numeric literal out of the next sequence of
>, <Line: -     * characters or return 'null' if its not possible. This method
>, <Line: -     * supports all numeric literals described in section 7.8.3
>, <Line: -     * of the EcmaScript 5 specification.
>, <Line: -     *
>, <Line: -     * This method's implementation was heavily influenced by the
>, <Line: -     * scanNumericLiteral function in the Esprima parser's source code.
>, <Line: -     */
>, <Line: -    scanNumericLiteral: function () {
>, <Line: -      var index = 0;
>, <Line: -      var value = "";
>, <Line: -      var length = this.input.length;
>, <Line: -      var char = this.peek(index);
>, <Line: -      var bad;
>, <Line: -      function isDecimalDigit(str) {
>, <Line: -        return (/^[0-9]$/).test(str);
>, <Line: -      }
>, <Line: -      function isOctalDigit(str) {
>, <Line: -        return (/^[0-7]$/).test(str);
>, <Line: -      }
>, <Line: -      function isHexDigit(str) {
>, <Line: -        return (/^[0-9a-fA-F]$/).test(str);
>, <Line: -      }
>, <Line: -      function isIdentifierStart(ch) {
>, <Line: -        return (ch === "$") || (ch === "_") || (ch === "\\") ||
>, <Line: -          (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z");
>, <Line: -      }
>, <Line: -      // handle negative num literals
>, <Line: -      if (char === '-') {
>, <Line: -        value += char;
>, <Line: -        index += 1;
>, <Line: -        char = this.peek(index);
>, <Line: -      }
>, <Line: -      // Numbers must start either with a decimal digit or a point.
>, <Line: -      if (char !== "." && !isDecimalDigit(char)) {
>, <Line: -        return null;
>, <Line: -      }
>, <Line: -      if (char !== ".") {
>, <Line: -        value += this.peek(index);
>, <Line: -        index += 1;
>, <Line: -        char = this.peek(index);
>, <Line: -        if (value === "0") {
>, <Line: -          // Base-16 numbers.
>, <Line: -          if (char === "x" || char === "X") {
>, <Line: -            index += 1;
>, <Line: -            value += char;
>, <Line: -            while (index < length) {
>, <Line: -              char = this.peek(index);
>, <Line: -              if (!isHexDigit(char)) {
>, <Line: -                break;
>, <Line: -              }
>, <Line: -              value += char;
>, <Line: -              index += 1;
>, <Line: -            }
>, <Line: -            if (value.length <= 2) { // 0x
>, <Line: -              return {
>, <Line: -                type: 'number',
>, <Line: -                value: value,
>, <Line: -                isMalformed: true,
>, <Line: -                pos: this.char
>, <Line: -              };
>, <Line: -            }
>, <Line: -            if (index < length) {
>, <Line: -              char = this.peek(index);
>, <Line: -              if (isIdentifierStart(char)) {
>, <Line: -                return null;
>, <Line: -              }
>, <Line: -            }
>, <Line: -            return {
>, <Line: -              type: 'number',
>, <Line: -              value: value,
>, <Line: -              base: 16,
>, <Line: -              isMalformed: false,
>, <Line: -              pos: this.char
>, <Line: -            };
>, <Line: -          }
>, <Line: -          // Base-8 numbers.
>, <Line: -          if (isOctalDigit(char)) {
>, <Line: -            index += 1;
>, <Line: -            value += char;
>, <Line: -            bad = false;
>, <Line: -            while (index < length) {
>, <Line: -              char = this.peek(index);
>, <Line: -              // Numbers like '019' (note the 9) are not valid octals
>, <Line: -              // but we still parse them and mark as malformed.
>, <Line: -              if (isDecimalDigit(char)) {
>, <Line: -                bad = true;
>, <Line: -              } else if (!isOctalDigit(char)) {
>, <Line: -                break;
>, <Line: -              }
>, <Line: -              value += char;
>, <Line: -              index += 1;
>, <Line: -            }
>, <Line: -            if (index < length) {
>, <Line: -              char = this.peek(index);
>, <Line: -              if (isIdentifierStart(char)) {
>, <Line: -                return null;
>, <Line: -              }
>, <Line: -            }
>, <Line: -            return {
>, <Line: -              type: 'number',
>, <Line: -              value: value,
>, <Line: -              base: 8,
>, <Line: -              isMalformed: false
>, <Line: -            };
>, <Line: -          }
>, <Line: -          // Decimal numbers that start with '0' such as '09' are illegal
>, <Line: -          // but we still parse them and return as malformed.
>, <Line: -          if (isDecimalDigit(char)) {
>, <Line: -            index += 1;
>, <Line: -            value += char;
>, <Line: -          }
>, <Line: -        }
>, <Line: -        while (index < length) {
>, <Line: -          char = this.peek(index);
>, <Line: -          if (!isDecimalDigit(char)) {
>, <Line: -            break;
>, <Line: -          }
>, <Line: -          value += char;
>, <Line: -          index += 1;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      // Decimal digits.
>, <Line: -      if (char === ".") {
>, <Line: -        value += char;
>, <Line: -        index += 1;
>, <Line: -        while (index < length) {
>, <Line: -          char = this.peek(index);
>, <Line: -          if (!isDecimalDigit(char)) {
>, <Line: -            break;
>, <Line: -          }
>, <Line: -          value += char;
>, <Line: -          index += 1;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      // Exponent part.
>, <Line: -      if (char === "e" || char === "E") {
>, <Line: -        value += char;
>, <Line: -        index += 1;
>, <Line: -        char = this.peek(index);
>, <Line: -        if (char === "+" || char === "-") {
>, <Line: -          value += this.peek(index);
>, <Line: -          index += 1;
>, <Line: -        }
>, <Line: -        char = this.peek(index);
>, <Line: -        if (isDecimalDigit(char)) {
>, <Line: -          value += char;
>, <Line: -          index += 1;
>, <Line: -          while (index < length) {
>, <Line: -            char = this.peek(index);
>, <Line: -            if (!isDecimalDigit(char)) {
>, <Line: -              break;
>, <Line: -            }
>, <Line: -            value += char;
>, <Line: -            index += 1;
>, <Line: -          }
>, <Line: -        } else {
>, <Line: -          return null;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if (index < length) {
>, <Line: -        char = this.peek(index);
>, <Line: -        if (!this.isPunctuator(char)) {
>, <Line: -          return null;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      return {
>, <Line: -        type: 'number',
>, <Line: -        value: value,
>, <Line: -        base: 10,
>, <Line: -        pos: this.char,
>, <Line: -        isMalformed: !isFinite(value)
>, <Line: -      };
>, <Line: -    },
>, <Line: -    isPunctuator: function (ch1) {
>, <Line: -      switch (ch1) {
>, <Line: -      case ".":
>, <Line: -      case "(":
>, <Line: -      case ")":
>, <Line: -      case ",":
>, <Line: -      case "{":
>, <Line: -      case "}":
>, <Line: -        return true;
>, <Line: -      }
>, <Line: -      return false;
>, <Line: -    },
>, <Line: -    scanPunctuator: function () {
>, <Line: -      var ch1 = this.peek();
>, <Line: -      if (this.isPunctuator(ch1)) {
>, <Line: -        return {
>, <Line: -          type: ch1,
>, <Line: -          value: ch1,
>, <Line: -          pos: this.char
>, <Line: -        };
>, <Line: -      }
>, <Line: -      return null;
>, <Line: -    },
>, <Line: -      /*
>, <Line: -     * Extract a string out of the next sequence of characters and/or
>, <Line: -     * lines or return 'null' if its not possible. Since strings can
>, <Line: -     * span across multiple lines this method has to move the char
>, <Line: -     * pointer.
>, <Line: -     *
>, <Line: -     * This method recognizes pseudo-multiline JavaScript strings:
>, <Line: -     *
>, <Line: -     *   var str = "hello\
>, <Line: -     *   world";
>, <Line: -     */
>, <Line: -    scanStringLiteral: function () {
>, <Line: -      /*jshint loopfunc:true */
>, <Line: -      var quote = this.peek();
>, <Line: -      // String must start with a quote.
>, <Line: -      if (quote !== "\"" && quote !== "'") {
>, <Line: -        return null;
>, <Line: -      }
>, <Line: -      var value = "";
>, <Line: -      this.skip();
>, <Line: -      while (this.peek() !== quote) {
>, <Line: -        if (this.peek() === "") { // End Of Line
>, <Line: -          return {
>, <Line: -            type: 'string',
>, <Line: -            value: value,
>, <Line: -            isUnclosed: true,
>, <Line: -            quote: quote,
>, <Line: -            pos: this.char
>, <Line: -          };
>, <Line: -        }
>, <Line: -        var char = this.peek();
>, <Line: -        var jump = 1; // A length of a jump, after we're done
>, <Line: -                      // parsing this character.
>, <Line: -        value += char;
>, <Line: -        this.skip(jump);
>, <Line: -      }
>, <Line: -      this.skip();
>, <Line: -      return {
>, <Line: -        type: 'string',
>, <Line: -        value: value,
>, <Line: -        isUnclosed: false,
>, <Line: -        quote: quote,
>, <Line: -        pos: this.char
>, <Line: -      };
>, <Line: -    },
>, <Line: -  };
>, <Line: -  return Lexer;
>]