[<Line: +import org.kairosdb.plugin.Aggregator;
>, <Line: +import org.kairosdb.plugin.GroupBy;
>, <Line: +	public Query parseQueryMetric(String json) throws QueryException, BeanValidationException
>, <Line: +	private Query parseQueryMetric(JsonObject obj) throws QueryException, BeanValidationException
>, <Line: +	private Query parseQueryMetric(JsonObject obj, String contextPrefix) throws QueryException, BeanValidationException
>, <Line: +		//Parses plugins for the entire query
>, <Line: +		//Initial use was for post processing plugins
>, <Line: +		JsonElement queryPlugins = obj.get("plugins");
>, <Line: +		if (queryPlugins != null)
>, <Line: +		{
>, <Line: +			JsonArray pluginArray = queryPlugins.getAsJsonArray();
>, <Line: +			if (pluginArray.size() > 0)
>, <Line: +				parsePlugins("", query, pluginArray);
>, <Line: +		}
>, <Line: +				query.addQueryMetric(queryMetric);
>, <Line: +		return (query);
>, <Line: +				List<QueryMetric> queries = parseQueryMetric(queryObject, context).getQueryMetrics();
>, <Line: +	private void parsePlugins(String context, PluggableQuery queryMetric, JsonArray plugins) throws BeanValidationException, QueryException
>]
[<Line: -import org.kairosdb.core.groupby.GroupBy;
>, <Line: -import javax.validation.constraints.Min;
>, <Line: -	public List<QueryMetric> parseQueryMetric(String json) throws QueryException, BeanValidationException
>, <Line: -	private List<QueryMetric> parseQueryMetric(JsonObject obj) throws QueryException, BeanValidationException
>, <Line: -	private List<QueryMetric> parseQueryMetric(JsonObject obj, String contextPrefix) throws QueryException, BeanValidationException
>, <Line: -		List<QueryMetric> ret = new ArrayList<>();
>, <Line: -				ret.add(queryMetric);
>, <Line: -		return (ret);
>, <Line: -				List<QueryMetric> queries = parseQueryMetric(queryObject, context);
>, <Line: -	private void parsePlugins(String context, QueryMetric queryMetric, JsonArray plugins) throws BeanValidationException, QueryException
>, <Line: -	//===========================================================================
>, <Line: -	private static class Query
>, <Line: -	{
>, <Line: -		@SerializedName("start_absolute")
>, <Line: -		private Long m_startAbsolute;
>, <Line: -		@SerializedName("end_absolute")
>, <Line: -		private Long m_endAbsolute;
>, <Line: -		@Min(0)
>, <Line: -		@SerializedName("cache_time")
>, <Line: -		private int cache_time;
>, <Line: -		@Valid
>, <Line: -		@SerializedName("start_relative")
>, <Line: -		private RelativeTime start_relative;
>, <Line: -		@Valid
>, <Line: -		@SerializedName("end_relative")
>, <Line: -		private RelativeTime end_relative;
>, <Line: -		@Valid
>, <Line: -		@SerializedName("time_zone")
>, <Line: -		private DateTimeZone m_timeZone;// = DateTimeZone.UTC;;
>, <Line: -		public Long getStartAbsolute()
>, <Line: -		{
>, <Line: -			return m_startAbsolute;
>, <Line: -		}
>, <Line: -		public Long getEndAbsolute()
>, <Line: -		{
>, <Line: -			return m_endAbsolute;
>, <Line: -		}
>, <Line: -		public int getCacheTime()
>, <Line: -		{
>, <Line: -			return cache_time;
>, <Line: -		}
>, <Line: -		public RelativeTime getStartRelative()
>, <Line: -		{
>, <Line: -			return start_relative;
>, <Line: -		}
>, <Line: -		public RelativeTime getEndRelative()
>, <Line: -		{
>, <Line: -			return end_relative;
>, <Line: -		}
>, <Line: -		public DateTimeZone getTimeZone()
>, <Line: -		{
>, <Line: -			return m_timeZone;
>, <Line: -		}
>, <Line: -		public String getCacheString()
>, <Line: -		{
>, <Line: -			StringBuilder sb = new StringBuilder();
>, <Line: -			if (m_startAbsolute != null)
>, <Line: -				sb.append(m_startAbsolute).append(":");
>, <Line: -			if (start_relative != null)
>, <Line: -				sb.append(start_relative.toString()).append(":");
>, <Line: -			if (m_endAbsolute != null)
>, <Line: -				sb.append(m_endAbsolute).append(":");
>, <Line: -			if (end_relative != null)
>, <Line: -				sb.append(end_relative.toString()).append(":");
>, <Line: -			return (sb.toString());
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public String toString()
>, <Line: -		{
>, <Line: -			return "Query{" +
>, <Line: -					"startAbsolute='" + m_startAbsolute + '\'' +
>, <Line: -					", endAbsolute='" + m_endAbsolute + '\'' +
>, <Line: -					", cache_time=" + cache_time +
>, <Line: -					", startRelative=" + start_relative +
>, <Line: -					", endRelative=" + end_relative +
>, <Line: -					'}';
>, <Line: -		}
>, <Line: -	}
>]