[<Line: +package org.kairosdb.core.queue;
>, <Line: +import com.google.common.collect.ImmutableSortedMap;
>, <Line: +import com.google.common.io.ByteArrayDataInput;
>, <Line: +import com.google.common.io.ByteArrayDataOutput;
>, <Line: +import com.google.common.io.ByteStreams;
>, <Line: +import org.kairosdb.core.DataPoint;
>, <Line: +import org.kairosdb.core.KairosDataPointFactory;
>, <Line: +import org.kairosdb.events.DataPointEvent;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +import javax.inject.Inject;
>, <Line: +import java.io.IOException;
>, <Line: +import java.util.Map;
>, <Line: +/**
>, <Line: + Created by bhawkins on 10/25/16.
>, <Line: + */
>, <Line: +public class DataPointEventSerializer
>, <Line: +{
>, <Line: +	public static final Logger logger = LoggerFactory.getLogger(DataPointEventSerializer.class);
>, <Line: +	private final KairosDataPointFactory m_kairosDataPointFactory;
>, <Line: +	@Inject
>, <Line: +	public DataPointEventSerializer(KairosDataPointFactory kairosDataPointFactory)
>, <Line: +	{
>, <Line: +		m_kairosDataPointFactory = kairosDataPointFactory;
>, <Line: +	}
>, <Line: +	public byte[] serializeEvent(DataPointEvent dataPointEvent)
>, <Line: +	{
>, <Line: +		//Todo: Create some adaptive value here, keep stats on if the buffer increases and slowely increase it
>, <Line: +		ByteArrayDataOutput dataOutput = ByteStreams.newDataOutput(64);
>, <Line: +		dataOutput.writeUTF(dataPointEvent.getMetricName());
>, <Line: +		dataOutput.writeInt(dataPointEvent.getTtl());
>, <Line: +		dataOutput.writeLong(dataPointEvent.getDataPoint().getTimestamp());
>, <Line: +		dataOutput.writeUTF(dataPointEvent.getDataPoint().getDataStoreDataType());
>, <Line: +		try
>, <Line: +		{
>, <Line: +			dataPointEvent.getDataPoint().writeValueToBuffer(dataOutput);
>, <Line: +		}
>, <Line: +		catch (IOException e)
>, <Line: +		{
>, <Line: +			logger.error("Error serializing DataPoint", e);
>, <Line: +		}
>, <Line: +		dataOutput.writeInt(dataPointEvent.getTags().size());
>, <Line: +		for (Map.Entry<String, String> entry : dataPointEvent.getTags().entrySet())
>, <Line: +		{
>, <Line: +			dataOutput.writeUTF(entry.getKey());
>, <Line: +			dataOutput.writeUTF(entry.getValue());
>, <Line: +		}
>, <Line: +		return dataOutput.toByteArray();
>, <Line: +	}
>, <Line: +	DataPointEvent deserializeEvent(byte[] bytes)
>, <Line: +	{
>, <Line: +		DataPointEvent ret = null;
>, <Line: +		try
>, <Line: +		{
>, <Line: +			ByteArrayDataInput dataInput = ByteStreams.newDataInput(bytes);
>, <Line: +			String metricName = dataInput.readUTF();
>, <Line: +			int ttl = dataInput.readInt();
>, <Line: +			long timestamp = dataInput.readLong();
>, <Line: +			String storeType = dataInput.readUTF();
>, <Line: +			DataPoint dataPoint = m_kairosDataPointFactory.createDataPoint(storeType, timestamp, dataInput);
>, <Line: +			int tagCount = dataInput.readInt();
>, <Line: +			ImmutableSortedMap.Builder<String, String> builder = ImmutableSortedMap.naturalOrder();
>, <Line: +			for (int I = 0; I < tagCount; I++)
>, <Line: +			{
>, <Line: +				builder.put(dataInput.readUTF(), dataInput.readUTF());
>, <Line: +			}
>, <Line: +			ret = new DataPointEvent(metricName, builder.build(), dataPoint, ttl);
>, <Line: +		}
>, <Line: +		catch (IOException e)
>, <Line: +		{
>, <Line: +			e.printStackTrace();
>, <Line: +		}
>, <Line: +		return ret;
>, <Line: +	}
>, <Line: +}
>]
[]