[<Line: +package org.kairosdb.core.http.rest.json;
>, <Line: +import com.google.gson.annotations.Expose;
>, <Line: +import com.google.gson.annotations.SerializedName;
>, <Line: +import org.joda.time.DateTimeZone;
>, <Line: +import org.kairosdb.core.datastore.PluggableQuery;
>, <Line: +import org.kairosdb.core.datastore.QueryMetric;
>, <Line: +import org.kairosdb.core.datastore.QueryPlugin;
>, <Line: +import javax.validation.Valid;
>, <Line: +import javax.validation.constraints.Min;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +/**
>, <Line: + Created by bhawkins on 5/18/17.
>, <Line: + */
>, <Line: +public class Query implements PluggableQuery
>, <Line: +{
>, <Line: +	@SerializedName("start_absolute")
>, <Line: +	private Long m_startAbsolute;
>, <Line: +	@SerializedName("end_absolute")
>, <Line: +	private Long m_endAbsolute;
>, <Line: +	@Min(0)
>, <Line: +	@SerializedName("cache_time")
>, <Line: +	private int cache_time;
>, <Line: +	@Valid
>, <Line: +	@SerializedName("start_relative")
>, <Line: +	private RelativeTime start_relative;
>, <Line: +	@Valid
>, <Line: +	@SerializedName("end_relative")
>, <Line: +	private RelativeTime end_relative;
>, <Line: +	@Valid
>, <Line: +	@SerializedName("time_zone")
>, <Line: +	private DateTimeZone m_timeZone;// = DateTimeZone.UTC;;
>, <Line: +	@Expose(deserialize = false)
>, <Line: +	private List<QueryPlugin> m_plugins = new ArrayList<>();
>, <Line: +	@Expose(deserialize = false)
>, <Line: +	private List<QueryMetric> m_queryMetrics = new ArrayList<>();
>, <Line: +	public void setStartAbsolute(Long startAbsolute)
>, <Line: +	{
>, <Line: +		m_startAbsolute = startAbsolute;
>, <Line: +	}
>, <Line: +	public void setEndAbsolute(Long endAbsolute)
>, <Line: +	{
>, <Line: +		m_endAbsolute = endAbsolute;
>, <Line: +	}
>, <Line: +	public void setCacheTime(int cache_time)
>, <Line: +	{
>, <Line: +		this.cache_time = cache_time;
>, <Line: +	}
>, <Line: +	public void setStartRelative(RelativeTime start_relative)
>, <Line: +	{
>, <Line: +		this.start_relative = start_relative;
>, <Line: +	}
>, <Line: +	public void setEndRelative(RelativeTime end_relative)
>, <Line: +	{
>, <Line: +		this.end_relative = end_relative;
>, <Line: +	}
>, <Line: +	public void setTimeZone(DateTimeZone timeZone)
>, <Line: +	{
>, <Line: +		m_timeZone = timeZone;
>, <Line: +	}
>, <Line: +	public void setPlugins(List<QueryPlugin> plugins)
>, <Line: +	{
>, <Line: +		m_plugins = plugins;
>, <Line: +	}
>, <Line: +	public void setQueryMetrics(List<QueryMetric> queryMetrics)
>, <Line: +	{
>, <Line: +		m_queryMetrics = queryMetrics;
>, <Line: +	}
>, <Line: +	public Long getStartAbsolute()
>, <Line: +	{
>, <Line: +		return m_startAbsolute;
>, <Line: +	}
>, <Line: +	public Long getEndAbsolute()
>, <Line: +	{
>, <Line: +		return m_endAbsolute;
>, <Line: +	}
>, <Line: +	public int getCacheTime()
>, <Line: +	{
>, <Line: +		return cache_time;
>, <Line: +	}
>, <Line: +	public RelativeTime getStartRelative()
>, <Line: +	{
>, <Line: +		return start_relative;
>, <Line: +	}
>, <Line: +	public RelativeTime getEndRelative()
>, <Line: +	{
>, <Line: +		return end_relative;
>, <Line: +	}
>, <Line: +	public DateTimeZone getTimeZone()
>, <Line: +	{
>, <Line: +		return m_timeZone;
>, <Line: +	}
>, <Line: +	public String getCacheString()
>, <Line: +	{
>, <Line: +		StringBuilder sb = new StringBuilder();
>, <Line: +		if (m_startAbsolute != null)
>, <Line: +			sb.append(m_startAbsolute).append(":");
>, <Line: +		if (start_relative != null)
>, <Line: +			sb.append(start_relative.toString()).append(":");
>, <Line: +		if (m_endAbsolute != null)
>, <Line: +			sb.append(m_endAbsolute).append(":");
>, <Line: +		if (end_relative != null)
>, <Line: +			sb.append(end_relative.toString()).append(":");
>, <Line: +		return (sb.toString());
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public String toString()
>, <Line: +	{
>, <Line: +		return "Query{" +
>, <Line: +				"startAbsolute='" + m_startAbsolute + '\'' +
>, <Line: +				", endAbsolute='" + m_endAbsolute + '\'' +
>, <Line: +				", cache_time=" + cache_time +
>, <Line: +				", startRelative=" + start_relative +
>, <Line: +				", endRelative=" + end_relative +
>, <Line: +				'}';
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public List<QueryPlugin> getPlugins()
>, <Line: +	{
>, <Line: +		return m_plugins;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void addPlugin(QueryPlugin plugin)
>, <Line: +	{
>, <Line: +		m_plugins.add(plugin);
>, <Line: +	}
>, <Line: +	public void addQueryMetric(QueryMetric queryMetric)
>, <Line: +	{
>, <Line: +		m_queryMetrics.add(queryMetric);
>, <Line: +	}
>, <Line: +	public List<QueryMetric> getQueryMetrics()
>, <Line: +	{
>, <Line: +		return m_queryMetrics;
>, <Line: +	}
>, <Line: +}
>]
[]