[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +	],
>, <Line: +	function (angular, _) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.services');
>, <Line: +		module.service('popoverSrv', function ($templateCache, $timeout, $q, $http, $compile) {
>, <Line: +			this.getTemplate = function (url) {
>, <Line: +				return $q.when($templateCache.get(url) || $http.get(url, {cache: true}));
>, <Line: +			};
>, <Line: +			this.show = function (options) {
>, <Line: +				var popover = options.element.data('popover');
>, <Line: +				if (popover) {
>, <Line: +					popover.scope.$destroy();
>, <Line: +					popover.destroy();
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				this.getTemplate(options.templateUrl).then(function (result) {
>, <Line: +					var template = _.isString(result) ? result : result.data;
>, <Line: +					options.element.popover({
>, <Line: +						content: template,
>, <Line: +						placement: 'bottom',
>, <Line: +						html: true
>, <Line: +					});
>, <Line: +					popover = options.element.data('popover');
>, <Line: +					popover.hasContent = function () {
>, <Line: +						return template;
>, <Line: +					};
>, <Line: +					popover.toggle();
>, <Line: +					popover.scope = options.scope;
>, <Line: +					$compile(popover.$tip)(popover.scope);
>, <Line: +				});
>, <Line: +			};
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -],
>, <Line: -function (angular, _) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.services');
>, <Line: -  module.service('popoverSrv', function($templateCache, $timeout, $q, $http, $compile) {
>, <Line: -    this.getTemplate = function(url) {
>, <Line: -      return $q.when($templateCache.get(url) || $http.get(url, {cache: true}));
>, <Line: -    };
>, <Line: -    this.show = function(options) {
>, <Line: -      var popover = options.element.data('popover');
>, <Line: -      if (popover) {
>, <Line: -        popover.scope.$destroy();
>, <Line: -        popover.destroy();
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      this.getTemplate(options.templateUrl).then(function(result) {
>, <Line: -        var template = _.isString(result) ? result : result.data;
>, <Line: -        options.element.popover({
>, <Line: -          content: template,
>, <Line: -          placement: 'bottom',
>, <Line: -          html: true
>, <Line: -        });
>, <Line: -        popover = options.element.data('popover');
>, <Line: -        popover.hasContent = function () {
>, <Line: -          return template;
>, <Line: -        };
>, <Line: -        popover.toggle();
>, <Line: -        popover.scope = options.scope;
>, <Line: -        $compile(popover.$tip)(popover.scope);
>, <Line: -      });
>, <Line: -    };
>, <Line: -  });
>, <Line: -});
>]