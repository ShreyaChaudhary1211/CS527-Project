[<Line: +/**
>, <Line: + * bootbox.js v4.4.0
>, <Line: + *
>, <Line: + * http://bootboxjs.com/license.txt
>, <Line: + */
>, <Line: +!function (a, b) {
>, <Line: +	"use strict";
>, <Line: +	"function" == typeof define && define.amd ? define(["jquery"], b) : "object" == typeof exports ? module.exports = b(require("jquery")) : a.bootbox = b(a.jQuery)
>, <Line: +}(this, function a(b, c) {
>, <Line: +	"use strict";
>, <Line: +	function d(a) {
>, <Line: +		var b = q[o.locale];
>, <Line: +		return b ? b[a] : q.en[a]
>, <Line: +	}
>, <Line: +	function e(a, c, d) {
>, <Line: +		a.stopPropagation(), a.preventDefault();
>, <Line: +		var e = b.isFunction(d) && d.call(c, a) === !1;
>, <Line: +		e || c.modal("hide")
>, <Line: +	}
>, <Line: +	function f(a) {
>, <Line: +		var b, c = 0;
>, <Line: +		for (b in a)c++;
>, <Line: +		return c
>, <Line: +	}
>, <Line: +	function g(a, c) {
>, <Line: +		var d = 0;
>, <Line: +		b.each(a, function (a, b) {
>, <Line: +			c(a, b, d++)
>, <Line: +		})
>, <Line: +	}
>, <Line: +	function h(a) {
>, <Line: +		var c, d;
>, <Line: +		if ("object" != typeof a)throw new Error("Please supply an object of options");
>, <Line: +		if (!a.message)throw new Error("Please specify a message");
>, <Line: +		return a = b.extend({}, o, a), a.buttons || (a.buttons = {}), c = a.buttons, d = f(c), g(c, function (a, e, f) {
>, <Line: +			if (b.isFunction(e) && (e = c[a] = {callback: e}), "object" !== b.type(e))throw new Error("button with key " + a + " must be an object");
>, <Line: +			e.label || (e.label = a), e.className || (e.className = 2 >= d && f === d - 1 ? "btn-primary" : "btn-default")
>, <Line: +		}), a
>, <Line: +	}
>, <Line: +	function i(a, b) {
>, <Line: +		var c = a.length, d = {};
>, <Line: +		if (1 > c || c > 2)throw new Error("Invalid argument length");
>, <Line: +		return 2 === c || "string" == typeof a[0] ? (d[b[0]] = a[0], d[b[1]] = a[1]) : d = a[0], d
>, <Line: +	}
>, <Line: +	function j(a, c, d) {
>, <Line: +		return b.extend(!0, {}, a, i(c, d))
>, <Line: +	}
>, <Line: +	function k(a, b, c, d) {
>, <Line: +		var e = {className: "bootbox-" + a, buttons: l.apply(null, b)};
>, <Line: +		return m(j(e, d, c), b)
>, <Line: +	}
>, <Line: +	function l() {
>, <Line: +		for (var a = {}, b = 0, c = arguments.length; c > b; b++) {
>, <Line: +			var e = arguments[b], f = e.toLowerCase(), g = e.toUpperCase();
>, <Line: +			a[f] = {label: d(g)}
>, <Line: +		}
>, <Line: +		return a
>, <Line: +	}
>, <Line: +	function m(a, b) {
>, <Line: +		var d = {};
>, <Line: +		return g(b, function (a, b) {
>, <Line: +			d[b] = !0
>, <Line: +		}), g(a.buttons, function (a) {
>, <Line: +			if (d[a] === c)throw new Error("button key " + a + " is not allowed (options are " + b.join("\n") + ")")
>, <Line: +		}), a
>, <Line: +	}
>, <Line: +	var n = {
>, <Line: +		dialog: "<div class='bootbox modal' tabindex='-1' role='dialog'><div class='modal-dialog'><div class='modal-content'><div class='modal-body'><div class='bootbox-body'></div></div></div></div></div>",
>, <Line: +		header: "<div class='modal-header'><h4 class='modal-title'></h4></div>",
>, <Line: +		footer: "<div class='modal-footer'></div>",
>, <Line: +		closeButton: "<button type='button' class='bootbox-close-button close' data-dismiss='modal' aria-hidden='true'>&times;</button>",
>, <Line: +		form: "<form class='bootbox-form'></form>",
>, <Line: +		inputs: {
>, <Line: +			text: "<input class='bootbox-input bootbox-input-text form-control' autocomplete=off type=text />",
>, <Line: +			textarea: "<textarea class='bootbox-input bootbox-input-textarea form-control'></textarea>",
>, <Line: +			email: "<input class='bootbox-input bootbox-input-email form-control' autocomplete='off' type='email' />",
>, <Line: +			select: "<select class='bootbox-input bootbox-input-select form-control'></select>",
>, <Line: +			checkbox: "<div class='checkbox'><label><input class='bootbox-input bootbox-input-checkbox' type='checkbox' /></label></div>",
>, <Line: +			date: "<input class='bootbox-input bootbox-input-date form-control' autocomplete=off type='date' />",
>, <Line: +			time: "<input class='bootbox-input bootbox-input-time form-control' autocomplete=off type='time' />",
>, <Line: +			number: "<input class='bootbox-input bootbox-input-number form-control' autocomplete=off type='number' />",
>, <Line: +			password: "<input class='bootbox-input bootbox-input-password form-control' autocomplete='off' type='password' />"
>, <Line: +		}
>, <Line: +	}, o = {
>, <Line: +		locale: "en",
>, <Line: +		backdrop: "static",
>, <Line: +		animate: !0,
>, <Line: +		className: null,
>, <Line: +		closeButton: !0,
>, <Line: +		show: !0,
>, <Line: +		container: "body"
>, <Line: +	}, p = {};
>, <Line: +	p.alert = function () {
>, <Line: +		var a;
>, <Line: +		if (a = k("alert", ["ok"], ["message", "callback"], arguments), a.callback && !b.isFunction(a.callback))throw new Error("alert requires callback property to be a function when provided");
>, <Line: +		return a.buttons.ok.callback = a.onEscape = function () {
>, <Line: +			return b.isFunction(a.callback) ? a.callback.call(this) : !0
>, <Line: +		}, p.dialog(a)
>, <Line: +	}, p.confirm = function () {
>, <Line: +		var a;
>, <Line: +		if (a = k("confirm", ["cancel", "confirm"], ["message", "callback"], arguments), a.buttons.cancel.callback = a.onEscape = function () {
>, <Line: +				return a.callback.call(this, !1)
>, <Line: +			}, a.buttons.confirm.callback = function () {
>, <Line: +				return a.callback.call(this, !0)
>, <Line: +			}, !b.isFunction(a.callback))throw new Error("confirm requires a callback");
>, <Line: +		return p.dialog(a)
>, <Line: +	}, p.prompt = function () {
>, <Line: +		var a, d, e, f, h, i, k;
>, <Line: +		if (f = b(n.form), d = {
>, <Line: +				className: "bootbox-prompt",
>, <Line: +				buttons: l("cancel", "confirm"),
>, <Line: +				value: "",
>, <Line: +				inputType: "text"
>, <Line: +			}, a = m(j(d, arguments, ["title", "callback"]), ["cancel", "confirm"]), i = a.show === c ? !0 : a.show, a.message = f, a.buttons.cancel.callback = a.onEscape = function () {
>, <Line: +				return a.callback.call(this, null)
>, <Line: +			}, a.buttons.confirm.callback = function () {
>, <Line: +				var c;
>, <Line: +				switch (a.inputType) {
>, <Line: +					case"text":
>, <Line: +					case"textarea":
>, <Line: +					case"email":
>, <Line: +					case"select":
>, <Line: +					case"date":
>, <Line: +					case"time":
>, <Line: +					case"number":
>, <Line: +					case"password":
>, <Line: +						c = h.val();
>, <Line: +						break;
>, <Line: +					case"checkbox":
>, <Line: +						var d = h.find("input:checked");
>, <Line: +						c = [], g(d, function (a, d) {
>, <Line: +							c.push(b(d).val())
>, <Line: +						})
>, <Line: +				}
>, <Line: +				return a.callback.call(this, c)
>, <Line: +			}, a.show = !1, !a.title)throw new Error("prompt requires a title");
>, <Line: +		if (!b.isFunction(a.callback))throw new Error("prompt requires a callback");
>, <Line: +		if (!n.inputs[a.inputType])throw new Error("invalid prompt type");
>, <Line: +		switch (h = b(n.inputs[a.inputType]), a.inputType) {
>, <Line: +			case"text":
>, <Line: +			case"textarea":
>, <Line: +			case"email":
>, <Line: +			case"date":
>, <Line: +			case"time":
>, <Line: +			case"number":
>, <Line: +			case"password":
>, <Line: +				h.val(a.value);
>, <Line: +				break;
>, <Line: +			case"select":
>, <Line: +				var o = {};
>, <Line: +				if (k = a.inputOptions || [], !b.isArray(k))throw new Error("Please pass an array of input options");
>, <Line: +				if (!k.length)throw new Error("prompt with select requires options");
>, <Line: +				g(k, function (a, d) {
>, <Line: +					var e = h;
>, <Line: +					if (d.value === c || d.text === c)throw new Error("given options in wrong format");
>, <Line: +					d.group && (o[d.group] || (o[d.group] = b("<optgroup/>").attr("label", d.group)), e = o[d.group]), e.append("<option value='" + d.value + "'>" + d.text + "</option>")
>, <Line: +				}), g(o, function (a, b) {
>, <Line: +					h.append(b)
>, <Line: +				}), h.val(a.value);
>, <Line: +				break;
>, <Line: +			case"checkbox":
>, <Line: +				var q = b.isArray(a.value) ? a.value : [a.value];
>, <Line: +				if (k = a.inputOptions || [], !k.length)throw new Error("prompt with checkbox requires options");
>, <Line: +				if (!k[0].value || !k[0].text)throw new Error("given options in wrong format");
>, <Line: +				h = b("<div/>"), g(k, function (c, d) {
>, <Line: +					var e = b(n.inputs[a.inputType]);
>, <Line: +					e.find("input").attr("value", d.value), e.find("label").append(d.text), g(q, function (a, b) {
>, <Line: +						b === d.value && e.find("input").prop("checked", !0)
>, <Line: +					}), h.append(e)
>, <Line: +				})
>, <Line: +		}
>, <Line: +		return a.placeholder && h.attr("placeholder", a.placeholder), a.pattern && h.attr("pattern", a.pattern), a.maxlength && h.attr("maxlength", a.maxlength), f.append(h), f.on("submit", function (a) {
>, <Line: +			a.preventDefault(), a.stopPropagation(), e.find(".btn-primary").click()
>, <Line: +		}), e = p.dialog(a), e.off("shown.bs.modal"), e.on("shown.bs.modal", function () {
>, <Line: +			h.focus()
>, <Line: +		}), i === !0 && e.modal("show"), e
>, <Line: +	}, p.dialog = function (a) {
>, <Line: +		a = h(a);
>, <Line: +		var d = b(n.dialog), f = d.find(".modal-dialog"), i = d.find(".modal-body"), j = a.buttons, k = "", l = {onEscape: a.onEscape};
>, <Line: +		if (b.fn.modal === c)throw new Error("$.fn.modal is not defined; please double check you have included the Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ for more details.");
>, <Line: +		if (g(j, function (a, b) {
>, <Line: +				k += "<button data-bb-handler='" + a + "' type='button' class='btn " + b.className + "'>" + b.label + "</button>", l[a] = b.callback
>, <Line: +			}), i.find(".bootbox-body").html(a.message), a.animate === !0 && d.addClass("fade"), a.className && d.addClass(a.className), "large" === a.size ? f.addClass("modal-lg") : "small" === a.size && f.addClass("modal-sm"), a.title && i.before(n.header), a.closeButton) {
>, <Line: +			var m = b(n.closeButton);
>, <Line: +			a.title ? d.find(".modal-header").prepend(m) : m.css("margin-top", "-10px").prependTo(i)
>, <Line: +		}
>, <Line: +		return a.title && d.find(".modal-title").html(a.title), k.length && (i.after(n.footer), d.find(".modal-footer").html(k)), d.on("hidden.bs.modal", function (a) {
>, <Line: +			a.target === this && d.remove()
>, <Line: +		}), d.on("shown.bs.modal", function () {
>, <Line: +			d.find(".btn-primary:first").focus()
>, <Line: +		}), "static" !== a.backdrop && d.on("click.dismiss.bs.modal", function (a) {
>, <Line: +			d.children(".modal-backdrop").length && (a.currentTarget = d.children(".modal-backdrop").get(0)), a.target === a.currentTarget && d.trigger("escape.close.bb")
>, <Line: +		}), d.on("escape.close.bb", function (a) {
>, <Line: +			l.onEscape && e(a, d, l.onEscape)
>, <Line: +		}), d.on("click", ".modal-footer button", function (a) {
>, <Line: +			var c = b(this).data("bb-handler");
>, <Line: +			e(a, d, l[c])
>, <Line: +		}), d.on("click", ".bootbox-close-button", function (a) {
>, <Line: +			e(a, d, l.onEscape)
>, <Line: +		}), d.on("keyup", function (a) {
>, <Line: +			27 === a.which && d.trigger("escape.close.bb")
>, <Line: +		}), b(a.container).append(d), d.modal({
>, <Line: +			backdrop: a.backdrop ? "static" : !1,
>, <Line: +			keyboard: !1,
>, <Line: +			show: !1
>, <Line: +		}), a.show && d.modal("show"), d
>, <Line: +	}, p.setDefaults = function () {
>, <Line: +		var a = {};
>, <Line: +		2 === arguments.length ? a[arguments[0]] = arguments[1] : a = arguments[0], b.extend(o, a)
>, <Line: +	}, p.hideAll = function () {
>, <Line: +		return b(".bootbox").modal("hide"), p
>, <Line: +	};
>, <Line: +	var q = {
>, <Line: +		bg_BG: {OK: "Ок", CANCEL: "Отказ", CONFIRM: "Потвърждавам"},
>, <Line: +		br: {OK: "OK", CANCEL: "Cancelar", CONFIRM: "Sim"},
>, <Line: +		cs: {OK: "OK", CANCEL: "Zrušit", CONFIRM: "Potvrdit"},
>, <Line: +		da: {OK: "OK", CANCEL: "Annuller", CONFIRM: "Accepter"},
>, <Line: +		de: {OK: "OK", CANCEL: "Abbrechen", CONFIRM: "Akzeptieren"},
>, <Line: +		el: {OK: "Εντάξει", CANCEL: "Ακύρωση", CONFIRM: "Επιβεβαίωση"},
>, <Line: +		en: {OK: "OK", CANCEL: "Cancel", CONFIRM: "OK"},
>, <Line: +		es: {OK: "OK", CANCEL: "Cancelar", CONFIRM: "Aceptar"},
>, <Line: +		et: {OK: "OK", CANCEL: "Katkesta", CONFIRM: "OK"},
>, <Line: +		fa: {OK: "قبول", CANCEL: "لغو", CONFIRM: "تایید"},
>, <Line: +		fi: {OK: "OK", CANCEL: "Peruuta", CONFIRM: "OK"},
>, <Line: +		fr: {OK: "OK", CANCEL: "Annuler", CONFIRM: "D'accord"},
>, <Line: +		he: {OK: "אישור", CANCEL: "ביטול", CONFIRM: "אישור"},
>, <Line: +		hu: {OK: "OK", CANCEL: "Mégsem", CONFIRM: "Megerősít"},
>, <Line: +		hr: {OK: "OK", CANCEL: "Odustani", CONFIRM: "Potvrdi"},
>, <Line: +		id: {OK: "OK", CANCEL: "Batal", CONFIRM: "OK"},
>, <Line: +		it: {OK: "OK", CANCEL: "Annulla", CONFIRM: "Conferma"},
>, <Line: +		ja: {OK: "OK", CANCEL: "キャンセル", CONFIRM: "確認"},
>, <Line: +		lt: {OK: "Gerai", CANCEL: "Atšaukti", CONFIRM: "Patvirtinti"},
>, <Line: +		lv: {OK: "Labi", CANCEL: "Atcelt", CONFIRM: "Apstiprināt"},
>, <Line: +		nl: {OK: "OK", CANCEL: "Annuleren", CONFIRM: "Accepteren"},
>, <Line: +		no: {OK: "OK", CANCEL: "Avbryt", CONFIRM: "OK"},
>, <Line: +		pl: {OK: "OK", CANCEL: "Anuluj", CONFIRM: "Potwierdź"},
>, <Line: +		pt: {OK: "OK", CANCEL: "Cancelar", CONFIRM: "Confirmar"},
>, <Line: +		ru: {OK: "OK", CANCEL: "Отмена", CONFIRM: "Применить"},
>, <Line: +		sq: {OK: "OK", CANCEL: "Anulo", CONFIRM: "Prano"},
>, <Line: +		sv: {OK: "OK", CANCEL: "Avbryt", CONFIRM: "OK"},
>, <Line: +		th: {OK: "ตกลง", CANCEL: "ยกเลิก", CONFIRM: "ยืนยัน"},
>, <Line: +		tr: {OK: "Tamam", CANCEL: "İptal", CONFIRM: "Onayla"},
>, <Line: +		zh_CN: {OK: "OK", CANCEL: "取消", CONFIRM: "确认"},
>, <Line: +		zh_TW: {OK: "OK", CANCEL: "取消", CONFIRM: "確認"}
>, <Line: +	};
>, <Line: +	return p.addLocale = function (a, c) {
>, <Line: +		return b.each(["OK", "CANCEL", "CONFIRM"], function (a, b) {
>, <Line: +			if (!c[b])throw new Error("Please supply a translation for '" + b + "'")
>, <Line: +		}), q[a] = {OK: c.OK, CANCEL: c.CANCEL, CONFIRM: c.CONFIRM}, p
>, <Line: +	}, p.removeLocale = function (a) {
>, <Line: +		return delete q[a], p
>, <Line: +	}, p.setLocale = function (a) {
>, <Line: +		return p.setDefaults("locale", a)
>, <Line: +	}, p.init = function (c) {
>, <Line: +		return a(c || b)
>, <Line: +	}, p
>, <Line: +});
>]
[]