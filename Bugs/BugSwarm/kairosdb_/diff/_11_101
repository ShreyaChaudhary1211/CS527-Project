[<Line: +package org.kairosdb.rollup;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Rule;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.rules.ExpectedException;
>, <Line: +import org.kairosdb.core.datastore.Duration;
>, <Line: +import org.kairosdb.core.datastore.KairosDatastore;
>, <Line: +import org.kairosdb.core.datastore.TimeUnit;
>, <Line: +import org.kairosdb.core.exception.KairosDBException;
>, <Line: +import org.kairosdb.core.scheduler.KairosDBScheduler;
>, <Line: +import org.quartz.impl.JobDetailImpl;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +import static org.kairosdb.rollup.RollupTaskChangeListener.Action;
>, <Line: +import static org.mockito.Mockito.*;
>, <Line: +public class RollUpManagerTest
>, <Line: +{
>, <Line: +	@Rule
>, <Line: +	public ExpectedException expectedException = ExpectedException.none();
>, <Line: +	private RollUpTasksStore mockTaskStore;
>, <Line: +	private KairosDBScheduler mockScheduler;
>, <Line: +	private KairosDatastore mockDatastore;
>, <Line: +	@Before
>, <Line: +	public void setup() throws RollUpException
>, <Line: +	{
>, <Line: +		mockTaskStore = mock(RollUpTasksStore.class);
>, <Line: +		mockScheduler = mock(KairosDBScheduler.class);
>, <Line: +		mockDatastore = mock(KairosDatastore.class);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testConstructor_taskStore_null_invalid() throws RollUpException
>, <Line: +	{
>, <Line: +		expectedException.expect(NullPointerException.class);
>, <Line: +		expectedException.expectMessage("taskStore cannot be null");
>, <Line: +		new RollUpManager(null, mockScheduler, mockDatastore);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testConstructor_dataStore_null_invalid() throws RollUpException
>, <Line: +	{
>, <Line: +		expectedException.expect(NullPointerException.class);
>, <Line: +		expectedException.expectMessage("dataStore cannot be null");
>, <Line: +		new RollUpManager(mockTaskStore, mockScheduler, null);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testConstructor_loadsExistingTasks() throws KairosDBException
>, <Line: +	{
>, <Line: +		List<RollupTask> tasks = new ArrayList<RollupTask>();
>, <Line: +		tasks.add(createTask("task1"));
>, <Line: +		tasks.add(createTask("task2"));
>, <Line: +		tasks.add(createTask("task3"));
>, <Line: +		when(mockTaskStore.read()).thenReturn(tasks);
>, <Line: +		RollUpManager manager = new RollUpManager(mockTaskStore, mockScheduler, mockDatastore);
>, <Line: +		verify(mockTaskStore).addListener(manager);
>, <Line: +		verify(mockScheduler, times(1)).schedule(RollUpManager.createJobDetail(tasks.get(0), mockDatastore, "localhost"), RollUpManager.createTrigger(tasks.get(0)));
>, <Line: +		verify(mockScheduler, times(1)).schedule(RollUpManager.createJobDetail(tasks.get(1), mockDatastore, "localhost"), RollUpManager.createTrigger(tasks.get(1)));
>, <Line: +		verify(mockScheduler, times(1)).schedule(RollUpManager.createJobDetail(tasks.get(2), mockDatastore, "localhost"), RollUpManager.createTrigger(tasks.get(2)));
>, <Line: +	}
>, <Line: +	@Test(expected = NullPointerException.class)
>, <Line: +	public void testChange_nullTask_invalid() throws RollUpException
>, <Line: +	{
>, <Line: +		RollUpManager manager = new RollUpManager(mockTaskStore, mockScheduler, mockDatastore);
>, <Line: +		manager.change(null, Action.CHANGED);
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void testChange() throws KairosDBException
>, <Line: +	{
>, <Line: +		RollupTask added = createTask("task1");
>, <Line: +		RollupTask updated = createTask("task2");
>, <Line: +		RollupTask removed = createTask("task3");
>, <Line: +		RollUpManager manager = new RollUpManager(mockTaskStore, mockScheduler, mockDatastore);
>, <Line: +		manager.change(added, Action.ADDED);
>, <Line: +		verify(mockScheduler, times(1)).schedule(RollUpManager.createJobDetail(added, mockDatastore, "localhost"), RollUpManager.createTrigger(added));
>, <Line: +		manager.change(updated, Action.CHANGED);
>, <Line: +		JobDetailImpl job = RollUpManager.createJobDetail(updated, mockDatastore, "localhost");
>, <Line: +		verify(mockScheduler, times(1)).cancel(job.getKey());
>, <Line: +		verify(mockScheduler, times(1)).schedule(RollUpManager.createJobDetail(updated, mockDatastore, "localhost"), RollUpManager.createTrigger(updated));
>, <Line: +		manager.change(removed, Action.REMOVED);
>, <Line: +		job = RollUpManager.createJobDetail(removed, mockDatastore, "localhost");
>, <Line: +		verify(mockScheduler, times(1)).cancel(job.getKey());
>, <Line: +	}
>, <Line: +	private static RollupTask createTask(String name)
>, <Line: +	{
>, <Line: +		Duration duration = new Duration(1, TimeUnit.HOURS);
>, <Line: +		List<Rollup> rollups = new ArrayList<Rollup>();
>, <Line: +		rollups.add(new Rollup());
>, <Line: +		return new RollupTask(name, duration, rollups);
>, <Line: +	}
>, <Line: +}
>]
[]