[<Line: +import org.kairosdb.core.annotation.FeatureCompoundProperty;
>, <Line: +import org.kairosdb.core.annotation.FeatureProperty;
>, <Line: +import org.kairosdb.core.processingstage.metadata.FeatureProcessorMetadata;
>, <Line: +import org.kairosdb.core.processingstage.metadata.FeaturePropertyMetadata;
>, <Line: +public class GenericFeatureProcessorFactoryTest
>, <Line: +    private static FeatureProcessingFactory<Aggregator> factory;
>, <Line: +        GenericFeatureProcessorFactoryTest.factory = new AggregatorFactory(injector);
>, <Line: +        FeatureProcessingFactory<Aggregator> factory = new AggregatorFactory(injector);
>, <Line: +        FeatureProcessingFactory<?> factory = new AggregatorFactory(null);
>, <Line: +        assertEquals("FeatureComponent family don't match", Aggregator.class, GenericFeatureProcessorFactoryTest.factory.getFeature());
>, <Line: +                GenericFeatureProcessorFactoryTest.factory.getFeatureProcessorMetadata()
>, <Line: +        assertEquals("FeatureComponent created was invalid",
>, <Line: +                GenericFeatureProcessorFactoryTest.factory.createFeatureProcessor("A").getClass());
>, <Line: +    static List<FeaturePropertyMetadata> getPropertyMetadata(Class clazz)
>, <Line: +        List<FeaturePropertyMetadata> properties = new ArrayList<>();
>, <Line: +            if (field.getAnnotation(FeatureProperty.class) != null)
>, <Line: +                FeatureProperty property = field.getAnnotation(FeatureProperty.class);
>, <Line: +                properties.add(new FeaturePropertyMetadata(field.getName(), type, options,
>, <Line: +            FeatureCompoundProperty annotation = field.getAnnotation(FeatureCompoundProperty.class);
>, <Line: +                properties.add(new FeaturePropertyMetadata(field.getName(), annotation, getPropertyMetadata(field.getType())));
>, <Line: +        properties.sort(new Comparator<FeaturePropertyMetadata>()
>, <Line: +            public int compare(FeaturePropertyMetadata o1, FeaturePropertyMetadata o2)
>, <Line: +    static FeatureProcessorMetadata[] factory_valid_metadata_generator()
>, <Line: +        return new FeatureProcessorMetadata[]{
>, <Line: +                new FeatureProcessorMetadata(
>, <Line: +    static void assertQueryProcessors(ImmutableList<FeatureProcessorMetadata> expectedFeatureProcessorMetadata,
>, <Line: +                                      ImmutableList<FeatureProcessorMetadata> actualFeatureProcessorMetadata)
>, <Line: +        assertEquals("FeatureComponent metadata quantity don't match", expectedFeatureProcessorMetadata.size(), actualFeatureProcessorMetadata.size());
>, <Line: +        for (int i = 0; i < actualFeatureProcessorMetadata.size(); i++)
>, <Line: +            FeatureProcessorMetadata expectedQueryProcessor = expectedFeatureProcessorMetadata.get(i);
>, <Line: +            FeatureProcessorMetadata actualQueryProcessorActual = actualFeatureProcessorMetadata.get(i);
>, <Line: +            assertEquals("FeatureComponent metadata name don't match", expectedQueryProcessor.getName(), actualQueryProcessorActual.getName());
>, <Line: +            assertEquals("FeatureComponent metadata description don't match", expectedQueryProcessor.getDescription(), actualQueryProcessorActual.getDescription());
>, <Line: +            assertEquals("FeatureComponent metadata label don't match", expectedQueryProcessor.getLabel(), actualQueryProcessorActual.getLabel());
>, <Line: +    static void assertQueryProperties(ImmutableList<FeaturePropertyMetadata> expectedFeaturePropertyMetadata,
>, <Line: +                                      ImmutableList<FeaturePropertyMetadata> actualFeaturePropertyMetadata)
>, <Line: +        assertEquals("FeatureProperty metadata quantity don't match", expectedFeaturePropertyMetadata.size(), actualFeaturePropertyMetadata.size());
>, <Line: +        for (int i = 0; i < actualFeaturePropertyMetadata.size(); i++)
>, <Line: +            FeaturePropertyMetadata expectedQueryProperty = expectedFeaturePropertyMetadata.get(i);
>, <Line: +            FeaturePropertyMetadata actualQueryProperty = actualFeaturePropertyMetadata.get(i);
>]
[<Line: -import org.kairosdb.core.annotation.QueryCompoundProperty;
>, <Line: -import org.kairosdb.core.annotation.QueryProperty;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryPropertyMetadata;
>, <Line: -public class GenericQueryProcessingStageFactoryTest
>, <Line: -    private static QueryProcessingStageFactory<Aggregator> factory;
>, <Line: -        GenericQueryProcessingStageFactoryTest.factory = new AggregatorFactory(injector);
>, <Line: -        QueryProcessingStageFactory<Aggregator> factory = new AggregatorFactory(injector);
>, <Line: -        QueryProcessingStageFactory<?> factory = new AggregatorFactory(null);
>, <Line: -        assertEquals("QueryProcessor family don't match", Aggregator.class, GenericQueryProcessingStageFactoryTest.factory.getQueryProcessorFamily());
>, <Line: -                GenericQueryProcessingStageFactoryTest.factory.getQueryProcessorMetadata()
>, <Line: -        assertEquals("QueryProcessor created was invalid",
>, <Line: -                GenericQueryProcessingStageFactoryTest.factory.createQueryProcessor("A").getClass());
>, <Line: -    static List<QueryPropertyMetadata> getPropertyMetadata(Class clazz)
>, <Line: -        List<QueryPropertyMetadata> properties = new ArrayList<>();
>, <Line: -            if (field.getAnnotation(QueryProperty.class) != null)
>, <Line: -                QueryProperty property = field.getAnnotation(QueryProperty.class);
>, <Line: -                properties.add(new QueryPropertyMetadata(field.getName(), type, options,
>, <Line: -            QueryCompoundProperty annotation = field.getAnnotation(QueryCompoundProperty.class);
>, <Line: -                properties.add(new QueryPropertyMetadata(field.getName(), annotation, getPropertyMetadata(field.getType())));
>, <Line: -        properties.sort(new Comparator<QueryPropertyMetadata>()
>, <Line: -            public int compare(QueryPropertyMetadata o1, QueryPropertyMetadata o2)
>, <Line: -    static QueryProcessorMetadata[] factory_valid_metadata_generator()
>, <Line: -        return new QueryProcessorMetadata[]{
>, <Line: -                new QueryProcessorMetadata(
>, <Line: -    static void assertQueryProcessors(ImmutableList<QueryProcessorMetadata> expectedQueryProcessorMetadatas,
>, <Line: -                                      ImmutableList<QueryProcessorMetadata> actualQueryProcessorMetadatas)
>, <Line: -        assertEquals("QueryProcessor metadata quantity don't match", expectedQueryProcessorMetadatas.size(), actualQueryProcessorMetadatas.size());
>, <Line: -        for (int i = 0; i < actualQueryProcessorMetadatas.size(); i++)
>, <Line: -            QueryProcessorMetadata expectedQueryProcessor = expectedQueryProcessorMetadatas.get(i);
>, <Line: -            QueryProcessorMetadata actualQueryProcessorActual = actualQueryProcessorMetadatas.get(i);
>, <Line: -            assertEquals("QueryProcessor metadata name don't match", expectedQueryProcessor.getName(), actualQueryProcessorActual.getName());
>, <Line: -            assertEquals("QueryProcessor metadata description don't match", expectedQueryProcessor.getDescription(), actualQueryProcessorActual.getDescription());
>, <Line: -            assertEquals("QueryProcessor metadata label don't match", expectedQueryProcessor.getLabel(), actualQueryProcessorActual.getLabel());
>, <Line: -    static void assertQueryProperties(ImmutableList<QueryPropertyMetadata> expectedQueryPropertyMetadatas,
>, <Line: -                                      ImmutableList<QueryPropertyMetadata> actualQueryPropertyMetadatas)
>, <Line: -        assertEquals("QueryProperty metadata quantity don't match", expectedQueryPropertyMetadatas.size(), actualQueryPropertyMetadatas.size());
>, <Line: -        for (int i = 0; i < actualQueryPropertyMetadatas.size(); i++)
>, <Line: -            QueryPropertyMetadata expectedQueryProperty = expectedQueryPropertyMetadatas.get(i);
>, <Line: -            QueryPropertyMetadata actualQueryProperty = actualQueryPropertyMetadatas.get(i);
>]