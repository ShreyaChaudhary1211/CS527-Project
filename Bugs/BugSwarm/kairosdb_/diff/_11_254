[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +		'config',
>, <Line: +		'./graphite/graphiteDatasource',
>, <Line: +		'./influxdb/influxdbDatasource',
>, <Line: +		'./opentsdb/opentsdbDatasource',
>, <Line: +		'./elasticsearch/es-datasource',
>, <Line: +	],
>, <Line: +	function (angular, _, config) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.services');
>, <Line: +		module.service('datasourceSrv', function ($q, $http, $injector) {
>, <Line: +			var datasources = {};
>, <Line: +			var metricSources = [];
>, <Line: +			var annotationSources = [];
>, <Line: +			var grafanaDB = {};
>, <Line: +			this.init = function () {
>, <Line: +				_.each(config.datasources, function (value, key) {
>, <Line: +					var ds = this.datasourceFactory(value);
>, <Line: +					if (value.default) {
>, <Line: +						this.default = ds;
>, <Line: +						ds.default = true;
>, <Line: +					}
>, <Line: +					datasources[key] = ds;
>, <Line: +				}, this);
>, <Line: +				if (!this.default) {
>, <Line: +					this.default = datasources[_.keys(datasources)[0]];
>, <Line: +					this.default.default = true;
>, <Line: +				}
>, <Line: +				// create list of different source types
>, <Line: +				_.each(datasources, function (value, key) {
>, <Line: +					if (value.supportMetrics) {
>, <Line: +						metricSources.push({
>, <Line: +							name: value.name,
>, <Line: +							value: value.default ? null : key,
>, <Line: +							default: value.default,
>, <Line: +						});
>, <Line: +					}
>, <Line: +					if (value.supportAnnotations) {
>, <Line: +						annotationSources.push({
>, <Line: +							name: key,
>, <Line: +							editorSrc: value.annotationEditorSrc,
>, <Line: +						});
>, <Line: +					}
>, <Line: +					if (value.grafanaDB) {
>, <Line: +						grafanaDB = value;
>, <Line: +					}
>, <Line: +				});
>, <Line: +			};
>, <Line: +			this.datasourceFactory = function (ds) {
>, <Line: +				var Datasource = null;
>, <Line: +				switch (ds.type) {
>, <Line: +					case 'graphite':
>, <Line: +						Datasource = $injector.get('GraphiteDatasource');
>, <Line: +						break;
>, <Line: +					case 'influxdb':
>, <Line: +						Datasource = $injector.get('InfluxDatasource');
>, <Line: +						break;
>, <Line: +					case 'opentsdb':
>, <Line: +						Datasource = $injector.get('OpenTSDBDatasource');
>, <Line: +						break;
>, <Line: +					case 'elasticsearch':
>, <Line: +						Datasource = $injector.get('ElasticDatasource');
>, <Line: +						break;
>, <Line: +					default:
>, <Line: +						Datasource = $injector.get(ds.type);
>, <Line: +				}
>, <Line: +				return new Datasource(ds);
>, <Line: +			};
>, <Line: +			this.get = function (name) {
>, <Line: +				if (!name) {
>, <Line: +					return this.default;
>, <Line: +				}
>, <Line: +				if (datasources[name]) {
>, <Line: +					return datasources[name];
>, <Line: +				}
>, <Line: +				return this.default;
>, <Line: +			};
>, <Line: +			this.getAnnotationSources = function () {
>, <Line: +				return annotationSources;
>, <Line: +			};
>, <Line: +			this.getMetricSources = function () {
>, <Line: +				return metricSources;
>, <Line: +			};
>, <Line: +			this.getGrafanaDB = function () {
>, <Line: +				return grafanaDB;
>, <Line: +			};
>, <Line: +			this.init();
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -  'config',
>, <Line: -  './graphite/graphiteDatasource',
>, <Line: -  './influxdb/influxdbDatasource',
>, <Line: -  './opentsdb/opentsdbDatasource',
>, <Line: -  './elasticsearch/es-datasource',
>, <Line: -],
>, <Line: -function (angular, _, config) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.services');
>, <Line: -  module.service('datasourceSrv', function($q, $http, $injector) {
>, <Line: -    var datasources = {};
>, <Line: -    var metricSources = [];
>, <Line: -    var annotationSources = [];
>, <Line: -    var grafanaDB = {};
>, <Line: -    this.init = function() {
>, <Line: -      _.each(config.datasources, function(value, key) {
>, <Line: -        var ds = this.datasourceFactory(value);
>, <Line: -        if (value.default) {
>, <Line: -          this.default = ds;
>, <Line: -          ds.default = true;
>, <Line: -        }
>, <Line: -        datasources[key] = ds;
>, <Line: -      }, this);
>, <Line: -      if (!this.default) {
>, <Line: -        this.default = datasources[_.keys(datasources)[0]];
>, <Line: -        this.default.default = true;
>, <Line: -      }
>, <Line: -      // create list of different source types
>, <Line: -      _.each(datasources, function(value, key) {
>, <Line: -        if (value.supportMetrics) {
>, <Line: -          metricSources.push({
>, <Line: -            name: value.name,
>, <Line: -            value: value.default ? null : key,
>, <Line: -            default: value.default,
>, <Line: -          });
>, <Line: -        }
>, <Line: -        if (value.supportAnnotations) {
>, <Line: -          annotationSources.push({
>, <Line: -            name: key,
>, <Line: -            editorSrc: value.annotationEditorSrc,
>, <Line: -          });
>, <Line: -        }
>, <Line: -        if (value.grafanaDB) {
>, <Line: -          grafanaDB = value;
>, <Line: -        }
>, <Line: -      });
>, <Line: -    };
>, <Line: -    this.datasourceFactory = function(ds) {
>, <Line: -      var Datasource = null;
>, <Line: -      switch(ds.type) {
>, <Line: -      case 'graphite':
>, <Line: -        Datasource = $injector.get('GraphiteDatasource');
>, <Line: -        break;
>, <Line: -      case 'influxdb':
>, <Line: -        Datasource = $injector.get('InfluxDatasource');
>, <Line: -        break;
>, <Line: -      case 'opentsdb':
>, <Line: -        Datasource = $injector.get('OpenTSDBDatasource');
>, <Line: -        break;
>, <Line: -      case 'elasticsearch':
>, <Line: -        Datasource = $injector.get('ElasticDatasource');
>, <Line: -        break;
>, <Line: -      default:
>, <Line: -        Datasource = $injector.get(ds.type);
>, <Line: -      }
>, <Line: -      return new Datasource(ds);
>, <Line: -    };
>, <Line: -    this.get = function(name) {
>, <Line: -      if (!name) { return this.default; }
>, <Line: -      if (datasources[name]) { return datasources[name]; }
>, <Line: -      return this.default;
>, <Line: -    };
>, <Line: -    this.getAnnotationSources = function() {
>, <Line: -      return annotationSources;
>, <Line: -    };
>, <Line: -    this.getMetricSources = function() {
>, <Line: -      return metricSources;
>, <Line: -    };
>, <Line: -    this.getGrafanaDB = function() {
>, <Line: -      return grafanaDB;
>, <Line: -    };
>, <Line: -    this.init();
>, <Line: -  });
>, <Line: -});
>]