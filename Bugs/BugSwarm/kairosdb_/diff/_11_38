[<Line: +package org.kairosdb.core.http.rest;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import com.google.inject.Inject;
>, <Line: +import org.kairosdb.core.http.rest.json.ErrorResponse;
>, <Line: +import org.kairosdb.core.http.rest.json.JsonResponseBuilder;
>, <Line: +import org.kairosdb.core.http.rest.json.QueryParser;
>, <Line: +import org.kairosdb.core.http.rest.json.RollupResponse;
>, <Line: +import org.kairosdb.rollup.RollUpException;
>, <Line: +import org.kairosdb.rollup.RollUpTasksStore;
>, <Line: +import org.kairosdb.rollup.RollupTask;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +import javax.ws.rs.*;
>, <Line: +import javax.ws.rs.core.MediaType;
>, <Line: +import javax.ws.rs.core.Response;
>, <Line: +import javax.ws.rs.core.Response.ResponseBuilder;
>, <Line: +import javax.ws.rs.core.Response.Status;
>, <Line: +import java.util.List;
>, <Line: +import static com.google.common.base.Preconditions.checkNotNull;
>, <Line: +import static org.kairosdb.util.Preconditions.checkNotNullOrEmpty;
>, <Line: +@Path("/api/v1/rollups")
>, <Line: +public class RollUpResource
>, <Line: +{
>, <Line: +	private static final Logger logger = LoggerFactory.getLogger(MetricsResource.class);
>, <Line: +	public static final String RESOURCE_URL = "/api/v1/rollups/";
>, <Line: +	private final QueryParser parser;
>, <Line: +	private final RollUpTasksStore store;
>, <Line: +	@Inject
>, <Line: +	public RollUpResource(QueryParser parser, RollUpTasksStore store)
>, <Line: +	{
>, <Line: +		this.parser = checkNotNull(parser);
>, <Line: +		this.store = checkNotNull(store);
>, <Line: +	}
>, <Line: +	//	@POST
>, <Line: +	//	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	//	@Path("/{id}/queries")
>, <Line: +	//	public Response addQuery(@PathParam("id") String id, String json)
>, <Line: +	//	{
>, <Line: +	//		checkNotNullOrEmpty(id);
>, <Line: +	//		checkNotNullOrEmpty(json);
>, <Line: +	//		try
>, <Line: +	//		{
>, <Line: +	//			ResponseBuilder responseBuilder;
>, <Line: +	//			RollupTask task = findExistingTask(id);
>, <Line: +	//			if (task != null)
>, <Line: +	//			{
>, <Line: +	//				List<QueryMetric> queryMetrics = parser.parseQueryMetric(json);
>, <Line: +	//				Rollup rollup = new Rollup();
>, <Line: +	//				rollup.addQuery(queryMetrics.get(0));
>, <Line: +	//				task.addRollup(rollup);
>, <Line: +	//				store.write(ImmutableList.of(task));
>, <Line: +	//				responseBuilder = Response.status(Status.NO_CONTENT);
>, <Line: +	//			}
>, <Line: +	//			else
>, <Line: +	//			{
>, <Line: +	//				responseBuilder = Response.status(Status.NOT_FOUND).entity(new ErrorResponse("Resource not found for id " + id));
>, <Line: +	//			}
>, <Line: +	//			setHeaders(responseBuilder);
>, <Line: +	//			return responseBuilder.build();
>, <Line: +	//		}
>, <Line: +	//		catch (Exception e)
>, <Line: +	//		{
>, <Line: +	//			logger.error("Failed to create roll-up.", e);
>, <Line: +	//			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +	//		}
>, <Line: +	//	}
>, <Line: +	//
>, <Line: +	@POST
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	public Response create(String json)
>, <Line: +	{
>, <Line: +		checkNotNullOrEmpty(json);
>, <Line: +		try
>, <Line: +		{
>, <Line: +			RollupTask task = parser.parseRollupTask(json);
>, <Line: +			store.write(ImmutableList.of(task));
>, <Line: +			ResponseBuilder responseBuilder = Response.status(Status.OK).entity(parser.getGson().toJson(createResponse(task)));
>, <Line: +			setHeaders(responseBuilder);
>, <Line: +			return responseBuilder.build();
>, <Line: +		}
>, <Line: +		catch (BeanValidationException e)
>, <Line: +		{
>, <Line: +			JsonResponseBuilder builder = new JsonResponseBuilder(Status.BAD_REQUEST);
>, <Line: +			return builder.addErrors(e.getErrorMessages()).build();
>, <Line: +		}
>, <Line: +		catch (Exception e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to add roll-up.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@GET
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	public Response list()
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			List<RollupTask> tasks = store.read();
>, <Line: +			StringBuilder json = new StringBuilder();
>, <Line: +			json.append('[');
>, <Line: +			for (RollupTask task : tasks)
>, <Line: +			{
>, <Line: +				json.append(task.getJson()).append(",");
>, <Line: +			}
>, <Line: +			if (json.length() > 1)
>, <Line: +				json.deleteCharAt(json.length() - 1);
>, <Line: +			json.append(']');
>, <Line: +			ResponseBuilder responseBuilder = Response.status(Status.OK).entity(json.toString());
>, <Line: +			setHeaders(responseBuilder);
>, <Line: +			return responseBuilder.build();
>, <Line: +		}
>, <Line: +		catch (RollUpException e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to list roll-ups.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@GET
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("{id}")
>, <Line: +	public Response get(@PathParam("id") String id)
>, <Line: +	{
>, <Line: +		checkNotNullOrEmpty(id);
>, <Line: +		try
>, <Line: +		{
>, <Line: +			ResponseBuilder responseBuilder;
>, <Line: +			RollupTask found = null;
>, <Line: +			List<RollupTask> tasks = store.read();
>, <Line: +			for (RollupTask task : tasks)
>, <Line: +			{
>, <Line: +				if (task.getId().equals(id))
>, <Line: +				{
>, <Line: +					found = task;
>, <Line: +					break;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			if (found != null)
>, <Line: +			{
>, <Line: +				responseBuilder = Response.status(Status.OK).entity(found.getJson());
>, <Line: +			}
>, <Line: +			else
>, <Line: +			{
>, <Line: +				responseBuilder = Response.status(Status.NOT_FOUND).entity(new ErrorResponse("Resource not found for id " + id));
>, <Line: +			}
>, <Line: +			setHeaders(responseBuilder);
>, <Line: +			return responseBuilder.build();
>, <Line: +		}
>, <Line: +		catch (RollUpException e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to get roll-up.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@DELETE
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("{id}")
>, <Line: +	public Response delete(@PathParam("id") String id)
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			checkNotNullOrEmpty(id);
>, <Line: +			if (findExistingTask(id) != null)
>, <Line: +			{
>, <Line: +				store.remove(id);
>, <Line: +				return setHeaders(Response.status(Status.NO_CONTENT)).entity("").build();
>, <Line: +			}
>, <Line: +			else
>, <Line: +			{
>, <Line: +				ResponseBuilder responseBuilder = Response.status(Status.NOT_FOUND).entity(new ErrorResponse("Resource not found for id " + id));
>, <Line: +				setHeaders(responseBuilder);
>, <Line: +				return responseBuilder.build();
>, <Line: +			}
>, <Line: +		}
>, <Line: +		catch (RollUpException e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to delete roll-up.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@PUT
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("{id}")
>, <Line: +	public Response update(@PathParam("id") String id, String json)
>, <Line: +	{
>, <Line: +		checkNotNullOrEmpty(id);
>, <Line: +		checkNotNullOrEmpty(json);
>, <Line: +		try
>, <Line: +		{
>, <Line: +			ResponseBuilder responseBuilder;
>, <Line: +			if (findExistingTask(id) == null)
>, <Line: +			{
>, <Line: +				responseBuilder = Response.status(Status.NOT_FOUND).entity(new ErrorResponse("Resource not found for id " + id));
>, <Line: +			}
>, <Line: +			else
>, <Line: +			{
>, <Line: +				RollupTask task = parser.parseRollupTask(json);
>, <Line: +				RollupTask updatedTask = new RollupTask(id, task.getName(), task.getExecutionInterval(), task.getRollups(), task.getJson());
>, <Line: +				store.write(ImmutableList.of(updatedTask));
>, <Line: +				responseBuilder = Response.status(Status.OK).entity(parser.getGson().toJson(createResponse(updatedTask)));
>, <Line: +			}
>, <Line: +			setHeaders(responseBuilder);
>, <Line: +			return responseBuilder.build();
>, <Line: +		}
>, <Line: +		catch (BeanValidationException e)
>, <Line: +		{
>, <Line: +			JsonResponseBuilder builder = new JsonResponseBuilder(Status.BAD_REQUEST);
>, <Line: +			return builder.addErrors(e.getErrorMessages()).build();
>, <Line: +		}
>, <Line: +		catch (Exception e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to add roll-up.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	private RollupResponse createResponse(RollupTask task)
>, <Line: +	{
>, <Line: +		return new RollupResponse(task.getId(), task.getName(), RESOURCE_URL + task.getId());
>, <Line: +	}
>, <Line: +	private RollupTask findExistingTask(String id) throws RollUpException
>, <Line: +	{
>, <Line: +		List<RollupTask> tasks = store.read();
>, <Line: +		for (RollupTask task : tasks)
>, <Line: +		{
>, <Line: +			if (task.getId().equals(id))
>, <Line: +			{
>, <Line: +				return task;
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return null;
>, <Line: +	}
>, <Line: +	private ResponseBuilder setHeaders(ResponseBuilder responseBuilder)
>, <Line: +	{
>, <Line: +		responseBuilder.header("Access-Control-Allow-Origin", "*");
>, <Line: +		responseBuilder.header("Pragma", "no-cache");
>, <Line: +		responseBuilder.header("Cache-Control", "no-cache");
>, <Line: +		responseBuilder.header("Expires", 0);
>, <Line: +		return (responseBuilder);
>, <Line: +	}
>, <Line: +}
>]
[]