[<Line: +		this(value, TimeUnit.from(unit));
>, <Line: +	}
>, <Line: +	public RelativeTime(int value, TimeUnit unit)
>, <Line: +	{
>, <Line: +		super(value, unit);
>, <Line: +		int valueToUse = -(int) value;
>, <Line: +		else if (getUnit() == TimeUnit.SECONDS)
>, <Line: +			field = Calendar.SECOND;
>, <Line: +		else if (getUnit() == TimeUnit.MINUTES)
>, <Line: +			field = Calendar.MINUTE;
>, <Line: +		else if (getUnit() == TimeUnit.HOURS)
>, <Line: +			field = Calendar.HOUR;
>, <Line: +		else if (getUnit() == TimeUnit.DAYS)
>, <Line: +			field = Calendar.DATE;
>, <Line: +		else if (getUnit() == TimeUnit.WEEKS)
>, <Line: +			field = Calendar.WEEK_OF_MONTH;
>, <Line: +		else if (getUnit() == TimeUnit.MONTHS)
>, <Line: +			field = Calendar.MONTH;
>, <Line: +		else if (getUnit() == TimeUnit.YEARS)
>, <Line: +			field = Calendar.YEAR;
>, <Line: +		calendar.setTimeInMillis(time);
>, <Line: +		calendar.add(field, valueToUse);
>, <Line: +		return calendar.getTime().getTime();
>, <Line: +	}
>, <Line: +	public long getFutureTimeRelativeTo(long time)
>, <Line: +	{
>, <Line: +		int valueToUse = (int) value;
>, <Line: +		int field = 0;
>, <Line: +		if (getUnit() == TimeUnit.MILLISECONDS)
>, <Line: +		{
>, <Line: +			field = Calendar.MILLISECOND;
>, <Line: +			//we do our own adjustment as calendar cannot handle a long.
>, <Line: +			time += value;
>, <Line: +			valueToUse = 0;
>, <Line: +		}
>, <Line: +		else if (getUnit() == TimeUnit.SECONDS)
>]
[<Line: -		super(value, TimeUnit.from(unit));
>, <Line: -		int valueToUse = -(int)value;
>, <Line: -		else if (getUnit() == TimeUnit.SECONDS )
>]