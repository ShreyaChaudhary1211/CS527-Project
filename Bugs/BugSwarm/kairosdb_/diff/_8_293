[<Line: +	'$strap.filters',
>, <Line: +	'$strap.directives',
>, <Line: +	'$strap.config'
>, <Line: +	'$timeout',
>, <Line: +	'$strapConfig',
>, <Line: +	function ($timeout, $strapConfig) {
>, <Line: +		var isAppleTouch = /(iP(a|o)d|iPhone)/g.test(navigator.userAgent);
>, <Line: +		var regexpMap = function regexpMap(language) {
>, <Line: +			language = language || 'en';
>, <Line: +			return {
>, <Line: +				'/': '[\\/]',
>, <Line: +				'-': '[-]',
>, <Line: +				'.': '[.]',
>, <Line: +				' ': '[\\s]',
>, <Line: +				'dd': '(?:(?:[0-2]?[0-9]{1})|(?:[3][01]{1}))',
>, <Line: +				'd': '(?:(?:[0-2]?[0-9]{1})|(?:[3][01]{1}))',
>, <Line: +				'mm': '(?:[0]?[1-9]|[1][012])',
>, <Line: +				'm': '(?:[0]?[1-9]|[1][012])',
>, <Line: +				'DD': '(?:' + $.fn.datepicker.dates[language].days.join('|') + ')',
>, <Line: +				'D': '(?:' + $.fn.datepicker.dates[language].daysShort.join('|') + ')',
>, <Line: +				'MM': '(?:' + $.fn.datepicker.dates[language].months.join('|') + ')',
>, <Line: +				'M': '(?:' + $.fn.datepicker.dates[language].monthsShort.join('|') + ')',
>, <Line: +				'yyyy': '(?:(?:[1]{1}[0-9]{1}[0-9]{1}[0-9]{1})|(?:[2]{1}[0-9]{3}))(?![[0-9]])',
>, <Line: +				'yy': '(?:(?:[0-9]{1}[0-9]{1}))(?![[0-9]])'
>, <Line: +			};
>, <Line: +		};
>, <Line: +		var regexpForDateFormat = function regexpForDateFormat(format, language) {
>, <Line: +			var re = format, map = regexpMap(language), i;
>, <Line: +			i = 0;
>, <Line: +			angular.forEach(map, function (v, k) {
>, <Line: +				re = re.split(k).join('${' + i + '}');
>, <Line: +				i++;
>, <Line: +			});
>, <Line: +			i = 0;
>, <Line: +			angular.forEach(map, function (v, k) {
>, <Line: +				re = re.split('${' + i + '}').join(v);
>, <Line: +				i++;
>, <Line: +			});
>, <Line: +			return new RegExp('^' + re + '$', ['i']);
>, <Line: +		};
>, <Line: +		return {
>, <Line: +			restrict: 'A',
>, <Line: +			require: '?ngModel',
>, <Line: +			link: function postLink(scope, element, attrs, controller) {
>, <Line: +				var options = angular.extend({autoclose: true}, $strapConfig.datepicker || {}), type = attrs.dateType || options.type || 'date';
>, <Line: +				angular.forEach([
>, <Line: +					'format',
>, <Line: +					'weekStart',
>, <Line: +					'calendarWeeks',
>, <Line: +					'startDate',
>, <Line: +					'endDate',
>, <Line: +					'daysOfWeekDisabled',
>, <Line: +					'autoclose',
>, <Line: +					'startView',
>, <Line: +					'minViewMode',
>, <Line: +					'todayBtn',
>, <Line: +					'todayHighlight',
>, <Line: +					'keyboardNavigation',
>, <Line: +					'language',
>, <Line: +					'forceParse'
>, <Line: +				], function (key) {
>, <Line: +					if (angular.isDefined(attrs[key]))
>, <Line: +						options[key] = attrs[key];
>, <Line: +				});
>, <Line: +				var language = options.language || 'en', readFormat = attrs.dateFormat || options.format || $.fn.datepicker.dates[language] && $.fn.datepicker.dates[language].format || 'mm/dd/yyyy', format = isAppleTouch ? 'yyyy-mm-dd' : readFormat, dateFormatRegexp = regexpForDateFormat(format, language);
>, <Line: +				if (controller) {
>, <Line: +					controller.$formatters.unshift(function (modelValue) {
>, <Line: +						return type === 'date' && angular.isString(modelValue) && modelValue ? $.fn.datepicker.DPGlobal.parseDate(modelValue, $.fn.datepicker.DPGlobal.parseFormat(readFormat), language) : modelValue;
>, <Line: +					});
>, <Line: +					controller.$parsers.unshift(function (viewValue) {
>, <Line: +						if (!viewValue) {
>, <Line: +							controller.$setValidity('date', true);
>, <Line: +							return null;
>, <Line: +						} else if (type === 'date' && angular.isDate(viewValue)) {
>, <Line: +							controller.$setValidity('date', true);
>, <Line: +							return viewValue;
>, <Line: +						} else if (angular.isString(viewValue) && dateFormatRegexp.test(viewValue)) {
>, <Line: +							controller.$setValidity('date', true);
>, <Line: +							if (isAppleTouch)
>, <Line: +								return new Date(viewValue);
>, <Line: +							return type === 'string' ? viewValue : $.fn.datepicker.DPGlobal.parseDate(viewValue, $.fn.datepicker.DPGlobal.parseFormat(format), language);
>, <Line: +						} else {
>, <Line: +							controller.$setValidity('date', false);
>, <Line: +							return undefined;
>, <Line: +						}
>, <Line: +					});
>, <Line: +					controller.$render = function ngModelRender() {
>, <Line: +						if (isAppleTouch) {
>, <Line: +							var date = controller.$viewValue ? $.fn.datepicker.DPGlobal.formatDate(controller.$viewValue, $.fn.datepicker.DPGlobal.parseFormat(format), language) : '';
>, <Line: +							element.val(date);
>, <Line: +							return date;
>, <Line: +						}
>, <Line: +						if (!controller.$viewValue)
>, <Line: +							element.val('');
>, <Line: +						return element.datepicker('update', controller.$viewValue);
>, <Line: +					};
>, <Line: +				}
>, <Line: +				if (isAppleTouch) {
>, <Line: +					element.prop('type', 'date').css('-webkit-appearance', 'textfield');
>, <Line: +				} else {
>, <Line: +					if (controller) {
>, <Line: +						element.on('changeDate', function (ev) {
>, <Line: +							scope.$apply(function () {
>, <Line: +								controller.$setViewValue(type === 'string' ? element.val() : ev.date);
>, <Line: +							});
>, <Line: +						});
>, <Line: +					}
>, <Line: +					element.datepicker(angular.extend(options, {
>, <Line: +						format: format,
>, <Line: +						language: language
>, <Line: +					}));
>, <Line: +					scope.$on('$destroy', function () {
>, <Line: +						var datepicker = element.data('datepicker');
>, <Line: +						if (datepicker) {
>, <Line: +							datepicker.picker.remove();
>, <Line: +							element.data('datepicker', null);
>, <Line: +						}
>, <Line: +					});
>, <Line: +					attrs.$observe('startDate', function (value) {
>, <Line: +						element.datepicker('setStartDate', value);
>, <Line: +					});
>, <Line: +					attrs.$observe('endDate', function (value) {
>, <Line: +						element.datepicker('setEndDate', value);
>, <Line: +					});
>, <Line: +				}
>, <Line: +				var component = element.siblings('[data-toggle="datepicker"]');
>, <Line: +				if (component.length) {
>, <Line: +					component.on('click', function () {
>, <Line: +						if (!element.prop('disabled')) {
>, <Line: +							element.trigger('focus');
>, <Line: +						}
>, <Line: +					});
>, <Line: +				}
>, <Line: +			}
>, <Line: +		};
>, <Line: +	}
>, <Line: +	'$rootScope',
>, <Line: +	'$compile',
>, <Line: +	'$http',
>, <Line: +	'$timeout',
>, <Line: +	'$q',
>, <Line: +	'$templateCache',
>, <Line: +	'$strapConfig',
>, <Line: +	function ($rootScope, $compile, $http, $timeout, $q, $templateCache, $strapConfig) {
>, <Line: +		var ModalFactory = function ModalFactory(config) {
>, <Line: +			function Modal(config) {
>, <Line: +				var options = angular.extend({show: true}, $strapConfig.modal, config), scope = options.scope ? options.scope : $rootScope.$new(), templateUrl = options.template;
>, <Line: +				return $q.when($templateCache.get(templateUrl) || $http.get(templateUrl, {cache: true}).then(function (res) {
>, <Line: +						return res.data;
>, <Line: +					})).then(function onSuccess(template) {
>, <Line: +					var id = templateUrl.replace('.html', '').replace(/[\/|\.|:]/g, '-') + '-' + scope.$id;
>, <Line: +					// grafana change, removed fade
>, <Line: +					var $modal = $('<div class="modal hide" tabindex="-1"></div>').attr('id', id).html(template);
>, <Line: +					if (options.modalClass)
>, <Line: +						$modal.addClass(options.modalClass);
>, <Line: +					$('body').append($modal);
>, <Line: +					$timeout(function () {
>, <Line: +						$compile($modal)(scope);
>, <Line: +					});
>, <Line: +					scope.$modal = function (name) {
>, <Line: +						$modal.modal(name);
>, <Line: +					};
>, <Line: +					angular.forEach([
>, <Line: +						'show',
>, <Line: +						'hide'
>, <Line: +					], function (name) {
>, <Line: +						scope[name] = function () {
>, <Line: +							$modal.modal(name);
>, <Line: +						};
>, <Line: +					});
>, <Line: +					scope.dismiss = scope.hide;
>, <Line: +					angular.forEach([
>, <Line: +						'show',
>, <Line: +						'shown',
>, <Line: +						'hide',
>, <Line: +						'hidden'
>, <Line: +					], function (name) {
>, <Line: +						$modal.on(name, function (ev) {
>, <Line: +							scope.$emit('modal-' + name, ev);
>, <Line: +						});
>, <Line: +					});
>, <Line: +					$modal.on('shown', function (ev) {
>, <Line: +						$('input[autofocus], textarea[autofocus]', $modal).first().trigger('focus');
>, <Line: +					});
>, <Line: +					$modal.on('hidden', function (ev) {
>, <Line: +						if (!options.persist)
>, <Line: +							scope.$destroy();
>, <Line: +					});
>, <Line: +					scope.$on('$destroy', function () {
>, <Line: +						$modal.remove();
>, <Line: +					});
>, <Line: +					$modal.modal(options);
>, <Line: +					return $modal;
>, <Line: +				});
>, <Line: +			}
>, <Line: +			return new Modal(config);
>, <Line: +		};
>, <Line: +		return ModalFactory;
>, <Line: +	}
>, <Line: +	'$parse',
>, <Line: +	'$compile',
>, <Line: +	'$timeout',
>, <Line: +	function ($parse, $compile, $timeout) {
>, <Line: +		var template = '<div class="tabs">' + '<ul class="nav nav-tabs">' + '<li ng-repeat="pane in panes" ng-class="{active:pane.active}">' + '<a data-target="#{{pane.id}}" data-index="{{$index}}" data-toggle="tab">{{pane.title}}</a>' + '</li>' + '</ul>' + '<div class="tab-content" ng-transclude>' + '</div>';
>, <Line: +		return {
>, <Line: +			restrict: 'A',
>, <Line: +			require: '?ngModel',
>, <Line: +			priority: 0,
>, <Line: +			scope: true,
>, <Line: +			template: template,
>, <Line: +			replace: true,
>, <Line: +			transclude: true,
>, <Line: +			compile: function compile(tElement, tAttrs, transclude) {
>, <Line: +				return function postLink(scope, iElement, iAttrs, controller) {
>, <Line: +					var getter = $parse(iAttrs.bsTabs), setter = getter.assign, value = getter(scope);
>, <Line: +					scope.panes = [];
>, <Line: +					var $tabs = iElement.find('ul.nav-tabs');
>, <Line: +					var $panes = iElement.find('div.tab-content');
>, <Line: +					var activeTab = 0, id, title, active;
>, <Line: +					$timeout(function () {
>, <Line: +						$panes.find('[data-title], [data-tab]').each(function (index) {
>, <Line: +							var $this = angular.element(this);
>, <Line: +							id = 'tab-' + scope.$id + '-' + index;
>, <Line: +							title = $this.data('title') || $this.data('tab');
>, <Line: +							active = !active && $this.hasClass('active');
>, <Line: +							$this.attr('id', id).addClass('tab-pane');
>, <Line: +							if (iAttrs.fade)
>, <Line: +								$this.addClass('fade');
>, <Line: +							scope.panes.push({
>, <Line: +								id: id,
>, <Line: +								title: title,
>, <Line: +								content: this.innerHTML,
>, <Line: +								active: active
>, <Line: +							});
>, <Line: +						});
>, <Line: +						if (scope.panes.length && !active) {
>, <Line: +							$panes.find('.tab-pane:first-child').addClass('active' + (iAttrs.fade ? ' in' : ''));
>, <Line: +							scope.panes[0].active = true;
>, <Line: +						}
>, <Line: +					});
>, <Line: +					if (controller) {
>, <Line: +						iElement.on('show', function (ev) {
>, <Line: +							var $target = $(ev.target);
>, <Line: +							scope.$apply(function () {
>, <Line: +								controller.$setViewValue($target.data('index'));
>, <Line: +							});
>, <Line: +						});
>, <Line: +						scope.$watch(iAttrs.ngModel, function (newValue, oldValue) {
>, <Line: +							if (angular.isUndefined(newValue))
>, <Line: +								return;
>, <Line: +							activeTab = newValue;
>, <Line: +							setTimeout(function () {
>, <Line: +								// Check if we're still on the same tab before making the switch
>, <Line: +								if (activeTab === newValue) {
>, <Line: +									var $next = $($tabs[0].querySelectorAll('li')[newValue * 1]);
>, <Line: +									if (!$next.hasClass('active')) {
>, <Line: +										$next.children('a').tab('show');
>, <Line: +									}
>, <Line: +								}
>, <Line: +							});
>, <Line: +						});
>, <Line: +					}
>, <Line: +				};
>, <Line: +			}
>, <Line: +		};
>, <Line: +	}
>, <Line: +	'$parse',
>, <Line: +	'$compile',
>, <Line: +	function ($parse, $compile) {
>, <Line: +		return {
>, <Line: +			restrict: 'A',
>, <Line: +			scope: true,
>, <Line: +			link: function postLink(scope, element, attrs, ctrl) {
>, <Line: +				var getter = $parse(attrs.bsTooltip), setter = getter.assign, value = getter(scope);
>, <Line: +				scope.$watch(attrs.bsTooltip, function (newValue, oldValue) {
>, <Line: +					if (newValue !== oldValue) {
>, <Line: +						value = newValue;
>, <Line: +					}
>, <Line: +				});
>, <Line: +				// Grafana change, always hide other tooltips
>, <Line: +				if (true) {
>, <Line: +					element.on('show', function (ev) {
>, <Line: +						$('.tooltip.in').each(function () {
>, <Line: +							var $this = $(this), tooltip = $this.data('tooltip');
>, <Line: +							if (tooltip && !tooltip.$element.is(element)) {
>, <Line: +								$this.tooltip('hide');
>, <Line: +							}
>, <Line: +						});
>, <Line: +					});
>, <Line: +				}
>, <Line: +				element.tooltip({
>, <Line: +					title: function () {
>, <Line: +						return angular.isFunction(value) ? value.apply(null, arguments) : value;
>, <Line: +					},
>, <Line: +					html: true,
>, <Line: +					container: 'body', // Grafana change
>, <Line: +				});
>, <Line: +				var tooltip = element.data('tooltip');
>, <Line: +				tooltip.show = function () {
>, <Line: +					var r = $.fn.tooltip.Constructor.prototype.show.apply(this, arguments);
>, <Line: +					this.tip().data('tooltip', this);
>, <Line: +					return r;
>, <Line: +				};
>, <Line: +				scope._tooltip = function (event) {
>, <Line: +					element.tooltip(event);
>, <Line: +				};
>, <Line: +				scope.hide = function () {
>, <Line: +					element.tooltip('hide');
>, <Line: +				};
>, <Line: +				scope.show = function () {
>, <Line: +					element.tooltip('show');
>, <Line: +				};
>, <Line: +				scope.dismiss = scope.hide;
>, <Line: +			}
>, <Line: +		};
>, <Line: +	}
>, <Line: +	'$parse',
>, <Line: +	function ($parse) {
>, <Line: +		return {
>, <Line: +			restrict: 'A',
>, <Line: +			require: '?ngModel',
>, <Line: +			link: function postLink(scope, element, attrs, controller) {
>, <Line: +				var getter = $parse(attrs.bsTypeahead), setter = getter.assign, value = getter(scope);
>, <Line: +				scope.$watch(attrs.bsTypeahead, function (newValue, oldValue) {
>, <Line: +					if (newValue !== oldValue) {
>, <Line: +						value = newValue;
>, <Line: +					}
>, <Line: +				});
>, <Line: +				element.attr('data-provide', 'typeahead');
>, <Line: +				element.typeahead({
>, <Line: +					source: function (query) {
>, <Line: +						return angular.isFunction(value) ? value.apply(null, arguments) : value;
>, <Line: +					},
>, <Line: +					minLength: attrs.minLength || 1,
>, <Line: +					items: attrs.items,
>, <Line: +					updater: function (value) {
>, <Line: +						if (controller) {
>, <Line: +							scope.$apply(function () {
>, <Line: +								controller.$setViewValue(value);
>, <Line: +							});
>, <Line: +						}
>, <Line: +						scope.$emit('typeahead-updated', value);
>, <Line: +						return value;
>, <Line: +					}
>, <Line: +				});
>, <Line: +				var typeahead = element.data('typeahead');
>, <Line: +				typeahead.lookup = function (ev) {
>, <Line: +					var items;
>, <Line: +					this.query = this.$element.val() || '';
>, <Line: +					if (this.query.length < this.options.minLength) {
>, <Line: +						return this.shown ? this.hide() : this;
>, <Line: +					}
>, <Line: +					items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;
>, <Line: +					return items ? this.process(items) : this;
>, <Line: +				};
>, <Line: +				if (!!attrs.matchAll) {
>, <Line: +					typeahead.matcher = function (item) {
>, <Line: +						return true;
>, <Line: +					};
>, <Line: +				}
>, <Line: +				if (attrs.minLength === '0') {
>, <Line: +					setTimeout(function () {
>, <Line: +						element.on('focus', function () {
>, <Line: +							element.val().length === 0 && setTimeout(element.typeahead.bind(element, 'lookup'), 200);
>, <Line: +						});
>, <Line: +					});
>, <Line: +				}
>, <Line: +			}
>, <Line: +		};
>, <Line: +	}
>]
[<Line: -  '$strap.filters',
>, <Line: -  '$strap.directives',
>, <Line: -  '$strap.config'
>, <Line: -  '$timeout',
>, <Line: -  '$strapConfig',
>, <Line: -  function ($timeout, $strapConfig) {
>, <Line: -    var isAppleTouch = /(iP(a|o)d|iPhone)/g.test(navigator.userAgent);
>, <Line: -    var regexpMap = function regexpMap(language) {
>, <Line: -      language = language || 'en';
>, <Line: -      return {
>, <Line: -        '/': '[\\/]',
>, <Line: -        '-': '[-]',
>, <Line: -        '.': '[.]',
>, <Line: -        ' ': '[\\s]',
>, <Line: -        'dd': '(?:(?:[0-2]?[0-9]{1})|(?:[3][01]{1}))',
>, <Line: -        'd': '(?:(?:[0-2]?[0-9]{1})|(?:[3][01]{1}))',
>, <Line: -        'mm': '(?:[0]?[1-9]|[1][012])',
>, <Line: -        'm': '(?:[0]?[1-9]|[1][012])',
>, <Line: -        'DD': '(?:' + $.fn.datepicker.dates[language].days.join('|') + ')',
>, <Line: -        'D': '(?:' + $.fn.datepicker.dates[language].daysShort.join('|') + ')',
>, <Line: -        'MM': '(?:' + $.fn.datepicker.dates[language].months.join('|') + ')',
>, <Line: -        'M': '(?:' + $.fn.datepicker.dates[language].monthsShort.join('|') + ')',
>, <Line: -        'yyyy': '(?:(?:[1]{1}[0-9]{1}[0-9]{1}[0-9]{1})|(?:[2]{1}[0-9]{3}))(?![[0-9]])',
>, <Line: -        'yy': '(?:(?:[0-9]{1}[0-9]{1}))(?![[0-9]])'
>, <Line: -      };
>, <Line: -    };
>, <Line: -    var regexpForDateFormat = function regexpForDateFormat(format, language) {
>, <Line: -      var re = format, map = regexpMap(language), i;
>, <Line: -      i = 0;
>, <Line: -      angular.forEach(map, function (v, k) {
>, <Line: -        re = re.split(k).join('${' + i + '}');
>, <Line: -        i++;
>, <Line: -      });
>, <Line: -      i = 0;
>, <Line: -      angular.forEach(map, function (v, k) {
>, <Line: -        re = re.split('${' + i + '}').join(v);
>, <Line: -        i++;
>, <Line: -      });
>, <Line: -      return new RegExp('^' + re + '$', ['i']);
>, <Line: -    };
>, <Line: -    return {
>, <Line: -      restrict: 'A',
>, <Line: -      require: '?ngModel',
>, <Line: -      link: function postLink(scope, element, attrs, controller) {
>, <Line: -        var options = angular.extend({ autoclose: true }, $strapConfig.datepicker || {}), type = attrs.dateType || options.type || 'date';
>, <Line: -        angular.forEach([
>, <Line: -          'format',
>, <Line: -          'weekStart',
>, <Line: -          'calendarWeeks',
>, <Line: -          'startDate',
>, <Line: -          'endDate',
>, <Line: -          'daysOfWeekDisabled',
>, <Line: -          'autoclose',
>, <Line: -          'startView',
>, <Line: -          'minViewMode',
>, <Line: -          'todayBtn',
>, <Line: -          'todayHighlight',
>, <Line: -          'keyboardNavigation',
>, <Line: -          'language',
>, <Line: -          'forceParse'
>, <Line: -        ], function (key) {
>, <Line: -          if (angular.isDefined(attrs[key]))
>, <Line: -            options[key] = attrs[key];
>, <Line: -        });
>, <Line: -        var language = options.language || 'en', readFormat = attrs.dateFormat || options.format || $.fn.datepicker.dates[language] && $.fn.datepicker.dates[language].format || 'mm/dd/yyyy', format = isAppleTouch ? 'yyyy-mm-dd' : readFormat, dateFormatRegexp = regexpForDateFormat(format, language);
>, <Line: -        if (controller) {
>, <Line: -          controller.$formatters.unshift(function (modelValue) {
>, <Line: -            return type === 'date' && angular.isString(modelValue) && modelValue ? $.fn.datepicker.DPGlobal.parseDate(modelValue, $.fn.datepicker.DPGlobal.parseFormat(readFormat), language) : modelValue;
>, <Line: -          });
>, <Line: -          controller.$parsers.unshift(function (viewValue) {
>, <Line: -            if (!viewValue) {
>, <Line: -              controller.$setValidity('date', true);
>, <Line: -              return null;
>, <Line: -            } else if (type === 'date' && angular.isDate(viewValue)) {
>, <Line: -              controller.$setValidity('date', true);
>, <Line: -              return viewValue;
>, <Line: -            } else if (angular.isString(viewValue) && dateFormatRegexp.test(viewValue)) {
>, <Line: -              controller.$setValidity('date', true);
>, <Line: -              if (isAppleTouch)
>, <Line: -                return new Date(viewValue);
>, <Line: -              return type === 'string' ? viewValue : $.fn.datepicker.DPGlobal.parseDate(viewValue, $.fn.datepicker.DPGlobal.parseFormat(format), language);
>, <Line: -            } else {
>, <Line: -              controller.$setValidity('date', false);
>, <Line: -              return undefined;
>, <Line: -            }
>, <Line: -          });
>, <Line: -          controller.$render = function ngModelRender() {
>, <Line: -            if (isAppleTouch) {
>, <Line: -              var date = controller.$viewValue ? $.fn.datepicker.DPGlobal.formatDate(controller.$viewValue, $.fn.datepicker.DPGlobal.parseFormat(format), language) : '';
>, <Line: -              element.val(date);
>, <Line: -              return date;
>, <Line: -            }
>, <Line: -            if (!controller.$viewValue)
>, <Line: -              element.val('');
>, <Line: -            return element.datepicker('update', controller.$viewValue);
>, <Line: -          };
>, <Line: -        }
>, <Line: -        if (isAppleTouch) {
>, <Line: -          element.prop('type', 'date').css('-webkit-appearance', 'textfield');
>, <Line: -        } else {
>, <Line: -          if (controller) {
>, <Line: -            element.on('changeDate', function (ev) {
>, <Line: -              scope.$apply(function () {
>, <Line: -                controller.$setViewValue(type === 'string' ? element.val() : ev.date);
>, <Line: -              });
>, <Line: -            });
>, <Line: -          }
>, <Line: -          element.datepicker(angular.extend(options, {
>, <Line: -            format: format,
>, <Line: -            language: language
>, <Line: -          }));
>, <Line: -          scope.$on('$destroy', function () {
>, <Line: -            var datepicker = element.data('datepicker');
>, <Line: -            if (datepicker) {
>, <Line: -              datepicker.picker.remove();
>, <Line: -              element.data('datepicker', null);
>, <Line: -            }
>, <Line: -          });
>, <Line: -          attrs.$observe('startDate', function (value) {
>, <Line: -            element.datepicker('setStartDate', value);
>, <Line: -          });
>, <Line: -          attrs.$observe('endDate', function (value) {
>, <Line: -            element.datepicker('setEndDate', value);
>, <Line: -          });
>, <Line: -        }
>, <Line: -        var component = element.siblings('[data-toggle="datepicker"]');
>, <Line: -        if (component.length) {
>, <Line: -          component.on('click', function () {
>, <Line: -            if (!element.prop('disabled')) {
>, <Line: -              element.trigger('focus');
>, <Line: -            }
>, <Line: -          });
>, <Line: -        }
>, <Line: -      }
>, <Line: -    };
>, <Line: -  }
>, <Line: -  '$rootScope',
>, <Line: -  '$compile',
>, <Line: -  '$http',
>, <Line: -  '$timeout',
>, <Line: -  '$q',
>, <Line: -  '$templateCache',
>, <Line: -  '$strapConfig',
>, <Line: -  function ($rootScope, $compile, $http, $timeout, $q, $templateCache, $strapConfig) {
>, <Line: -    var ModalFactory = function ModalFactory(config) {
>, <Line: -      function Modal(config) {
>, <Line: -        var options = angular.extend({ show: true }, $strapConfig.modal, config), scope = options.scope ? options.scope : $rootScope.$new(), templateUrl = options.template;
>, <Line: -        return $q.when($templateCache.get(templateUrl) || $http.get(templateUrl, { cache: true }).then(function (res) {
>, <Line: -          return res.data;
>, <Line: -        })).then(function onSuccess(template) {
>, <Line: -          var id = templateUrl.replace('.html', '').replace(/[\/|\.|:]/g, '-') + '-' + scope.$id;
>, <Line: -          // grafana change, removed fade
>, <Line: -          var $modal = $('<div class="modal hide" tabindex="-1"></div>').attr('id', id).html(template);
>, <Line: -          if (options.modalClass)
>, <Line: -            $modal.addClass(options.modalClass);
>, <Line: -          $('body').append($modal);
>, <Line: -          $timeout(function () {
>, <Line: -            $compile($modal)(scope);
>, <Line: -          });
>, <Line: -          scope.$modal = function (name) {
>, <Line: -            $modal.modal(name);
>, <Line: -          };
>, <Line: -          angular.forEach([
>, <Line: -            'show',
>, <Line: -            'hide'
>, <Line: -          ], function (name) {
>, <Line: -            scope[name] = function () {
>, <Line: -              $modal.modal(name);
>, <Line: -            };
>, <Line: -          });
>, <Line: -          scope.dismiss = scope.hide;
>, <Line: -          angular.forEach([
>, <Line: -            'show',
>, <Line: -            'shown',
>, <Line: -            'hide',
>, <Line: -            'hidden'
>, <Line: -          ], function (name) {
>, <Line: -            $modal.on(name, function (ev) {
>, <Line: -              scope.$emit('modal-' + name, ev);
>, <Line: -            });
>, <Line: -          });
>, <Line: -          $modal.on('shown', function (ev) {
>, <Line: -            $('input[autofocus], textarea[autofocus]', $modal).first().trigger('focus');
>, <Line: -          });
>, <Line: -          $modal.on('hidden', function (ev) {
>, <Line: -            if (!options.persist)
>, <Line: -              scope.$destroy();
>, <Line: -          });
>, <Line: -          scope.$on('$destroy', function () {
>, <Line: -            $modal.remove();
>, <Line: -          });
>, <Line: -          $modal.modal(options);
>, <Line: -          return $modal;
>, <Line: -        });
>, <Line: -      }
>, <Line: -      return new Modal(config);
>, <Line: -    };
>, <Line: -    return ModalFactory;
>, <Line: -  }
>, <Line: -  '$parse',
>, <Line: -  '$compile',
>, <Line: -  '$timeout',
>, <Line: -  function ($parse, $compile, $timeout) {
>, <Line: -    var template = '<div class="tabs">' + '<ul class="nav nav-tabs">' + '<li ng-repeat="pane in panes" ng-class="{active:pane.active}">' + '<a data-target="#{{pane.id}}" data-index="{{$index}}" data-toggle="tab">{{pane.title}}</a>' + '</li>' + '</ul>' + '<div class="tab-content" ng-transclude>' + '</div>';
>, <Line: -    return {
>, <Line: -      restrict: 'A',
>, <Line: -      require: '?ngModel',
>, <Line: -      priority: 0,
>, <Line: -      scope: true,
>, <Line: -      template: template,
>, <Line: -      replace: true,
>, <Line: -      transclude: true,
>, <Line: -      compile: function compile(tElement, tAttrs, transclude) {
>, <Line: -        return function postLink(scope, iElement, iAttrs, controller) {
>, <Line: -          var getter = $parse(iAttrs.bsTabs), setter = getter.assign, value = getter(scope);
>, <Line: -          scope.panes = [];
>, <Line: -          var $tabs = iElement.find('ul.nav-tabs');
>, <Line: -          var $panes = iElement.find('div.tab-content');
>, <Line: -          var activeTab = 0, id, title, active;
>, <Line: -          $timeout(function () {
>, <Line: -            $panes.find('[data-title], [data-tab]').each(function (index) {
>, <Line: -              var $this = angular.element(this);
>, <Line: -              id = 'tab-' + scope.$id + '-' + index;
>, <Line: -              title = $this.data('title') || $this.data('tab');
>, <Line: -              active = !active && $this.hasClass('active');
>, <Line: -              $this.attr('id', id).addClass('tab-pane');
>, <Line: -              if (iAttrs.fade)
>, <Line: -                $this.addClass('fade');
>, <Line: -              scope.panes.push({
>, <Line: -                id: id,
>, <Line: -                title: title,
>, <Line: -                content: this.innerHTML,
>, <Line: -                active: active
>, <Line: -              });
>, <Line: -            });
>, <Line: -            if (scope.panes.length && !active) {
>, <Line: -              $panes.find('.tab-pane:first-child').addClass('active' + (iAttrs.fade ? ' in' : ''));
>, <Line: -              scope.panes[0].active = true;
>, <Line: -            }
>, <Line: -          });
>, <Line: -          if (controller) {
>, <Line: -            iElement.on('show', function (ev) {
>, <Line: -              var $target = $(ev.target);
>, <Line: -              scope.$apply(function () {
>, <Line: -                controller.$setViewValue($target.data('index'));
>, <Line: -              });
>, <Line: -            });
>, <Line: -            scope.$watch(iAttrs.ngModel, function (newValue, oldValue) {
>, <Line: -              if (angular.isUndefined(newValue))
>, <Line: -                return;
>, <Line: -              activeTab = newValue;
>, <Line: -              setTimeout(function () {
>, <Line: -                // Check if we're still on the same tab before making the switch
>, <Line: -                if(activeTab === newValue) {
>, <Line: -                  var $next = $($tabs[0].querySelectorAll('li')[newValue * 1]);
>, <Line: -                  if (!$next.hasClass('active')) {
>, <Line: -                    $next.children('a').tab('show');
>, <Line: -                  }
>, <Line: -                }
>, <Line: -              });
>, <Line: -            });
>, <Line: -          }
>, <Line: -        };
>, <Line: -      }
>, <Line: -    };
>, <Line: -  }
>, <Line: -  '$parse',
>, <Line: -  '$compile',
>, <Line: -  function ($parse, $compile) {
>, <Line: -    return {
>, <Line: -      restrict: 'A',
>, <Line: -      scope: true,
>, <Line: -      link: function postLink(scope, element, attrs, ctrl) {
>, <Line: -        var getter = $parse(attrs.bsTooltip), setter = getter.assign, value = getter(scope);
>, <Line: -        scope.$watch(attrs.bsTooltip, function (newValue, oldValue) {
>, <Line: -          if (newValue !== oldValue) {
>, <Line: -            value = newValue;
>, <Line: -          }
>, <Line: -        });
>, <Line: -        // Grafana change, always hide other tooltips
>, <Line: -        if (true) {
>, <Line: -          element.on('show', function (ev) {
>, <Line: -            $('.tooltip.in').each(function () {
>, <Line: -              var $this = $(this), tooltip = $this.data('tooltip');
>, <Line: -              if (tooltip && !tooltip.$element.is(element)) {
>, <Line: -                $this.tooltip('hide');
>, <Line: -              }
>, <Line: -            });
>, <Line: -          });
>, <Line: -        }
>, <Line: -        element.tooltip({
>, <Line: -          title: function () {
>, <Line: -            return angular.isFunction(value) ? value.apply(null, arguments) : value;
>, <Line: -          },
>, <Line: -          html: true,
>, <Line: -          container: 'body', // Grafana change
>, <Line: -        });
>, <Line: -        var tooltip = element.data('tooltip');
>, <Line: -        tooltip.show = function () {
>, <Line: -          var r = $.fn.tooltip.Constructor.prototype.show.apply(this, arguments);
>, <Line: -          this.tip().data('tooltip', this);
>, <Line: -          return r;
>, <Line: -        };
>, <Line: -        scope._tooltip = function (event) {
>, <Line: -          element.tooltip(event);
>, <Line: -        };
>, <Line: -        scope.hide = function () {
>, <Line: -          element.tooltip('hide');
>, <Line: -        };
>, <Line: -        scope.show = function () {
>, <Line: -          element.tooltip('show');
>, <Line: -        };
>, <Line: -        scope.dismiss = scope.hide;
>, <Line: -      }
>, <Line: -    };
>, <Line: -  }
>, <Line: -  '$parse',
>, <Line: -  function ($parse) {
>, <Line: -    return {
>, <Line: -      restrict: 'A',
>, <Line: -      require: '?ngModel',
>, <Line: -      link: function postLink(scope, element, attrs, controller) {
>, <Line: -        var getter = $parse(attrs.bsTypeahead), setter = getter.assign, value = getter(scope);
>, <Line: -        scope.$watch(attrs.bsTypeahead, function (newValue, oldValue) {
>, <Line: -          if (newValue !== oldValue) {
>, <Line: -            value = newValue;
>, <Line: -          }
>, <Line: -        });
>, <Line: -        element.attr('data-provide', 'typeahead');
>, <Line: -        element.typeahead({
>, <Line: -          source: function (query) {
>, <Line: -            return angular.isFunction(value) ? value.apply(null, arguments) : value;
>, <Line: -          },
>, <Line: -          minLength: attrs.minLength || 1,
>, <Line: -          items: attrs.items,
>, <Line: -          updater: function (value) {
>, <Line: -            if (controller) {
>, <Line: -              scope.$apply(function () {
>, <Line: -                controller.$setViewValue(value);
>, <Line: -              });
>, <Line: -            }
>, <Line: -            scope.$emit('typeahead-updated', value);
>, <Line: -            return value;
>, <Line: -          }
>, <Line: -        });
>, <Line: -        var typeahead = element.data('typeahead');
>, <Line: -        typeahead.lookup = function (ev) {
>, <Line: -          var items;
>, <Line: -          this.query = this.$element.val() || '';
>, <Line: -          if (this.query.length < this.options.minLength) {
>, <Line: -            return this.shown ? this.hide() : this;
>, <Line: -          }
>, <Line: -          items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;
>, <Line: -          return items ? this.process(items) : this;
>, <Line: -        };
>, <Line: -        if (!!attrs.matchAll) {
>, <Line: -          typeahead.matcher = function (item) {
>, <Line: -            return true;
>, <Line: -          };
>, <Line: -        }
>, <Line: -        if (attrs.minLength === '0') {
>, <Line: -          setTimeout(function () {
>, <Line: -            element.on('focus', function () {
>, <Line: -              element.val().length === 0 && setTimeout(element.typeahead.bind(element, 'lookup'), 200);
>, <Line: -            });
>, <Line: -          });
>, <Line: -        }
>, <Line: -      }
>, <Line: -    };
>, <Line: -  }
>]