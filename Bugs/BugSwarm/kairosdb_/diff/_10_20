[<Line: +import com.datastax.driver.core.BoundStatement;
>, <Line: +import com.datastax.driver.core.ResultSet;
>, <Line: +import com.datastax.driver.core.ResultSetFuture;
>, <Line: +import com.datastax.driver.core.Row;
>, <Line: +import com.datastax.driver.core.Session;
>, <Line: +import com.datastax.driver.core.policies.LoadBalancingPolicy;
>, <Line: +import org.kairosdb.core.datapoints.DataPointFactory;
>, <Line: +import org.kairosdb.core.datapoints.LegacyDataPointFactory;
>, <Line: +import org.kairosdb.core.datapoints.LegacyDoubleDataPoint;
>, <Line: +import org.kairosdb.core.datapoints.LegacyLongDataPoint;
>, <Line: +import org.kairosdb.util.IngestExecutorService;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.Date;
>, <Line: +import java.util.Iterator;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Map;
>, <Line: +import java.util.Set;
>, <Line: +import java.util.SortedMap;
>, <Line: +import java.util.TreeMap;
>, <Line: +import java.util.concurrent.ExecutionException;
>, <Line: +import java.util.concurrent.ExecutorService;
>, <Line: +import java.util.concurrent.Executors;
>, <Line: +import java.util.concurrent.Semaphore;
>, <Line: +public class CassandraDatastore implements Datastore, ProcessorHandler, KairosMetricReporter,
>, <Line: +		ServiceKeyStore
>, <Line: +	private final Schema m_schema;
>, <Line: +	private LoadBalancingPolicy m_loadBalancingPolicy;
>, <Line: +	private final IngestExecutorService m_congestionExecutor;
>, <Line: +			IngestExecutorService congestionExecutor) throws DatastoreException
>, <Line: +		m_schema = new Schema(m_cassandraClient);
>, <Line: +		m_session = m_schema.getSession();
>, <Line: +		m_loadBalancingPolicy = m_cassandraClient.getLoadBalancingPolicy();
>, <Line: +				m_schema, fullBatch, m_batchStats, m_loadBalancingPolicy);
>, <Line: +		BoundStatement boundStatement = new BoundStatement(m_schema.psStringIndexQuery);
>, <Line: +		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexInsert);
>, <Line: +		statement.setString(0, service);
>, <Line: +		statement.setString(1, serviceKey);
>, <Line: +		statement.setString(2, key);
>, <Line: +		statement.setString(3, value);
>, <Line: +		m_session.execute(statement);
>, <Line: +		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexGet);
>, <Line: +		statement.setString(0, service);
>, <Line: +		statement.setString(1, serviceKey);
>, <Line: +		statement.setString(2, key);
>, <Line: +		ResultSet resultSet = m_session.execute(statement);
>, <Line: +		Row row = resultSet.one();
>, <Line: +		String value = null;
>, <Line: +		if (row != null)
>, <Line: +			value = row.getString(0);
>, <Line: +		return value;
>, <Line: +	public Iterable<String> listServiceKeys(String service)
>, <Line: +			throws DatastoreException
>, <Line: +	{
>, <Line: +		List<String> ret = new ArrayList<>();
>, <Line: +		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexListServiceKeys);
>, <Line: +		statement.setString(0, service);
>, <Line: +		ResultSet resultSet = m_session.execute(statement);
>, <Line: +		while (!resultSet.isExhausted())
>, <Line: +		{
>, <Line: +			ret.add(resultSet.one().getString(0));
>, <Line: +		}
>, <Line: +		return ret;
>, <Line: +	}
>, <Line: +    @Override
>, <Line: +		List<String> ret = new ArrayList<>();
>, <Line: +		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexListKeys);
>, <Line: +		statement.setString(0, service);
>, <Line: +		statement.setString(1, serviceKey);
>, <Line: +		ResultSet resultSet = m_session.execute(statement);
>, <Line: +		while (!resultSet.isExhausted())
>, <Line: +		{
>, <Line: +			ret.add(resultSet.one().getString(0));
>, <Line: +		}
>, <Line: +		return ret;
>, <Line: +		String begin = keyStartsWith;
>, <Line: +		String end = keyStartsWith + Character.MAX_VALUE;
>, <Line: +		List<String> ret = new ArrayList<>();
>, <Line: +		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexListKeysPrefix);
>, <Line: +		statement.setString(0, service);
>, <Line: +		statement.setString(1, serviceKey);
>, <Line: +		statement.setString(2, begin);
>, <Line: +		statement.setString(3, end);
>, <Line: +		ResultSet resultSet = m_session.execute(statement);
>, <Line: +		while (!resultSet.isExhausted())
>, <Line: +		{
>, <Line: +			ret.add(resultSet.one().getString(0));
>, <Line: +		}
>, <Line: +		return ret;
>, <Line: +	public void deleteKey(String service, String serviceKey, String key)
>, <Line: +			throws DatastoreException
>, <Line: +	{
>, <Line: +		BoundStatement statement = new BoundStatement(m_schema.psServiceIndexDeleteKey);
>, <Line: +		statement.setString(0, service);
>, <Line: +		statement.setString(1, serviceKey);
>, <Line: +		statement.setString(2, key);
>, <Line: +		m_session.execute(statement);
>, <Line: +	}
>, <Line: +    @Override
>, <Line: +				"kairosdb.datastore.cassandra.write_batch_size",
>, <Line: +				"kairosdb.datastore.cassandra.write_batch_size",
>, <Line: +				"kairosdb.datastore.cassandra.write_batch_size",
>, <Line: +		boolean useLimit = query.getLimit() != 0;
>, <Line: +		//todo add memory monitor
>, <Line: +			if (useLimit)
>, <Line: +			{
>, <Line: +				if (query.getOrder() == Order.ASC)
>, <Line: +					boundStatement = new BoundStatement(m_schema.psDataPointsQueryAscLimit);
>, <Line: +				else
>, <Line: +					boundStatement = new BoundStatement(m_schema.psDataPointsQueryDescLimit);
>, <Line: +			}
>, <Line: +			{
>, <Line: +				if (query.getOrder() == Order.ASC)
>, <Line: +					boundStatement = new BoundStatement(m_schema.psDataPointsQueryAsc);
>, <Line: +				else
>, <Line: +					boundStatement = new BoundStatement(m_schema.psDataPointsQueryDesc);
>, <Line: +			}
>, <Line: +			if (useLimit)
>, <Line: +				boundStatement.setInt(3, query.getLimit());
>, <Line: +				BoundStatement statement = new BoundStatement(m_schema.psDataPointsDeleteRow);
>, <Line: +				statement = new BoundStatement(m_schema.psRowKeyIndexDelete);
>, <Line: +			BoundStatement statement = new BoundStatement(m_schema.psRowKeyIndexDeleteRow);
>, <Line: +				BoundStatement negStatement = new BoundStatement(m_schema.psRowKeyIndexQuery);
>, <Line: +				BoundStatement posStatement = new BoundStatement(m_schema.psRowKeyIndexQuery);
>, <Line: +				BoundStatement statement = new BoundStatement(m_schema.psRowKeyIndexQuery);
>, <Line: +				BoundStatement statement = new BoundStatement(m_schema.psRowKeyQuery);
>, <Line: +			BoundStatement statement = new BoundStatement(m_schema.psRowKeyTimeQuery);
>, <Line: +			BoundStatement statement = new BoundStatement(m_schema.psDataPointsDelete);
>]
[<Line: -import com.datastax.driver.core.*;
>, <Line: -import org.kairosdb.core.datapoints.*;
>, <Line: -import org.kairosdb.util.AdaptiveExecutorService;
>, <Line: -import java.util.*;
>, <Line: -import java.util.concurrent.*;
>, <Line: -public class CassandraDatastore implements Datastore, ProcessorHandler, KairosMetricReporter
>, <Line: -	public static final String CREATE_KEYSPACE = "" +
>, <Line: -			"CREATE KEYSPACE IF NOT EXISTS %s" +
>, <Line: -			"  WITH REPLICATION = {'class': 'SimpleStrategy'," +
>, <Line: -			"  'replication_factor' : 1}";
>, <Line: -	public static final String DATA_POINTS_TABLE = "" +
>, <Line: -			"CREATE TABLE IF NOT EXISTS data_points (\n" +
>, <Line: -			"  key blob,\n" +
>, <Line: -			"  column1 blob,\n" +
>, <Line: -			"  value blob,\n" +
>, <Line: -			"  PRIMARY KEY ((key), column1)\n" +
>, <Line: -			") WITH COMPACT STORAGE";
>, <Line: -	public static final String ROW_KEY_INDEX_TABLE = "" +
>, <Line: -			"CREATE TABLE IF NOT EXISTS row_key_index (\n" +
>, <Line: -			"  key blob,\n" +
>, <Line: -			"  column1 blob,\n" +
>, <Line: -			"  value blob,\n" +
>, <Line: -			"  PRIMARY KEY ((key), column1)\n" +
>, <Line: -			") WITH COMPACT STORAGE";
>, <Line: -	public static final String ROW_KEY_TIME_INDEX = "" +
>, <Line: -			"CREATE TABLE IF NOT EXISTS row_key_time_index (\n" +
>, <Line: -			"  metric text,\n" +
>, <Line: -			"  row_time timestamp,\n" +
>, <Line: -			"  value text,\n" +
>, <Line: -			"  PRIMARY KEY ((metric), row_time)\n" +
>, <Line: -			")";
>, <Line: -	public static final String ROW_KEYS = "" +
>, <Line: -			"CREATE TABLE IF NOT EXISTS row_keys (\n" +
>, <Line: -			"  metric text,\n" +
>, <Line: -			"  row_time timestamp,\n" +
>, <Line: -			"  data_type text,\n" +
>, <Line: -			"  tags frozen<map<text, text>>,\n" +
>, <Line: -			"  value text,\n" +
>, <Line: -			"  PRIMARY KEY ((metric, row_time), data_type, tags)\n" +
>, <Line: -			")";
>, <Line: -	public static final String STRING_INDEX_TABLE = "" +
>, <Line: -			"CREATE TABLE IF NOT EXISTS string_index (\n" +
>, <Line: -			"  key blob,\n" +
>, <Line: -			"  column1 blob,\n" +
>, <Line: -			"  value blob,\n" +
>, <Line: -			"  PRIMARY KEY ((key), column1)\n" +
>, <Line: -			") WITH COMPACT STORAGE";
>, <Line: -	public static final String SERVICE_INDEX = "" +
>, <Line: -			"CREATE TABLE IF NOT EXISTS service_index (" +
>, <Line: -			" service text," +
>, <Line: -			" service_key text," +
>, <Line: -			" key text," +
>, <Line: -			" value text," +
>, <Line: -			" PRIMARY KEY ((service, service_key), key)" +
>, <Line: -			")";
>, <Line: -	//All inserts and deletes add millisecond timestamp consistency with old code and TWCS instead of nanos
>, <Line: -	public static final String DATA_POINTS_INSERT = "INSERT INTO data_points " +
>, <Line: -			"(key, column1, value) VALUES (?, ?, ?) USING TTL ? AND TIMESTAMP ?";
>, <Line: -	public static final String ROW_KEY_TIME_INSERT = "INSERT INTO row_key_time_index " +
>, <Line: -			"(metric, row_time) VALUES (?, ?) USING TTL ? AND TIMESTAMP ?";
>, <Line: -	public static final String ROW_KEY_INSERT = "INSERT INTO row_keys " +
>, <Line: -			"(metric, row_time, data_type, tags) VALUES (?, ?, ?, ?) USING TTL ?"; // AND TIMESTAMP ?";
>, <Line: -	public static final String STRING_INDEX_INSERT = "INSERT INTO string_index " +
>, <Line: -			"(key, column1, value) VALUES (?, ?, 0x00)";
>, <Line: -	public static final String DATA_POINTS_QUERY = "SELECT column1, value FROM data_points WHERE key = ? AND " +
>, <Line: -			"column1 >= ? AND column1 < ? ORDER BY column1";
>, <Line: -	public static final String DATA_POINTS_QUERY_ASC = DATA_POINTS_QUERY+" ASC";
>, <Line: -	public static final String DATA_POINTS_QUERY_DESC = DATA_POINTS_QUERY+" DESC";
>, <Line: -	public static final String DATA_POINTS_DELETE = "DELETE FROM data_points " +
>, <Line: -			"WHERE key = ? AND column1 = ?";
>, <Line: -	public static final String DATA_POINTS_DELETE_ROW = "DELETE FROM data_points " +
>, <Line: -			"WHERE key = ?";
>, <Line: -	public static final String STRING_INDEX_QUERY = "SELECT column1 FROM string_index " +
>, <Line: -			"WHERE key = ?";
>, <Line: -	//This is the old row key index query
>, <Line: -	public static final String ROW_KEY_INDEX_QUERY = "SELECT column1 FROM row_key_index " +
>, <Line: -			"WHERE key = ? AND column1 >= ? AND column1 < ?";
>, <Line: -	public static final String ROW_KEY_INDEX_DELETE = "DELETE FROM row_key_index " +
>, <Line: -			"WHERE KEY = ? AND column1 = ?";
>, <Line: -	public static final String ROW_KEY_INDEX_DELETE_ROW = "DELETE FROM row_key_index " +
>, <Line: -			"WHERE KEY = ?";
>, <Line: -	//New Row key queries
>, <Line: -	public static final String ROW_KEY_TIME_QUERY = "SELECT row_time " +
>, <Line: -			"FROM row_key_time_index WHERE metric = ? AND " +
>, <Line: -			"row_time >= ? AND row_time <= ?";
>, <Line: -	public static final String ROW_KEY_QUERY = "SELECT row_time, data_type, tags " +
>, <Line: -			"FROM row_keys WHERE metric = ? AND row_time = ?";
>, <Line: -	public static final String ROW_KEY_TAG_QUERY_WITH_TYPE = "SELECT row_time, data_type, tags " +
>, <Line: -			"FROM row_keys WHERE metric = ? AND row_time = ? AND data_type IN %s"; //Use ValueSequence when setting this
>, <Line: -	private final PreparedStatements m_preparedStatements;
>, <Line: -	public class PreparedStatements
>, <Line: -	{
>, <Line: -		public final PreparedStatement psDataPointsInsert;
>, <Line: -		//public final PreparedStatement m_psInsertRowKey;
>, <Line: -		public final PreparedStatement psStringIndexInsert;
>, <Line: -		public final PreparedStatement psDataPointsQueryAsc;
>, <Line: -		public final PreparedStatement psStringIndexQuery;
>, <Line: -		public final PreparedStatement psRowKeyIndexQuery;
>, <Line: -		public final PreparedStatement psRowKeyQuery;
>, <Line: -		public final PreparedStatement psRowKeyTimeQuery;
>, <Line: -		public final PreparedStatement psDataPointsDeleteRow;
>, <Line: -		public final PreparedStatement psDataPointsDelete;
>, <Line: -		public final PreparedStatement psRowKeyIndexDelete;
>, <Line: -		public final PreparedStatement psRowKeyIndexDeleteRow;
>, <Line: -		public final PreparedStatement psDataPointsQueryDesc;
>, <Line: -		public final PreparedStatement psRowKeyTimeInsert;
>, <Line: -		public final PreparedStatement psRowKeyInsert;
>, <Line: -		public PreparedStatements()
>, <Line: -		{
>, <Line: -			psDataPointsInsert  = m_session.prepare(DATA_POINTS_INSERT);
>, <Line: -			//m_psInsertRowKey      = m_session.prepare(ROW_KEY_INDEX_INSERT);
>, <Line: -			psRowKeyTimeInsert = m_session.prepare(ROW_KEY_TIME_INSERT);
>, <Line: -			psRowKeyInsert = m_session.prepare(ROW_KEY_INSERT);
>, <Line: -			psStringIndexInsert = m_session.prepare(STRING_INDEX_INSERT);
>, <Line: -			psDataPointsQueryAsc = m_session.prepare(DATA_POINTS_QUERY_ASC);
>, <Line: -			psDataPointsQueryDesc = m_session.prepare(DATA_POINTS_QUERY_DESC);
>, <Line: -			psStringIndexQuery = m_session.prepare(STRING_INDEX_QUERY);
>, <Line: -			psRowKeyIndexQuery  = m_session.prepare(ROW_KEY_INDEX_QUERY);
>, <Line: -			psRowKeyQuery       = m_session.prepare(ROW_KEY_QUERY);
>, <Line: -			psRowKeyTimeQuery   = m_session.prepare(ROW_KEY_TIME_QUERY);
>, <Line: -			psDataPointsDelete = m_session.prepare(DATA_POINTS_DELETE);
>, <Line: -			psDataPointsDeleteRow = m_session.prepare(DATA_POINTS_DELETE_ROW);
>, <Line: -			psRowKeyIndexDelete = m_session.prepare(ROW_KEY_INDEX_DELETE);
>, <Line: -			psRowKeyIndexDeleteRow = m_session.prepare(ROW_KEY_INDEX_DELETE_ROW);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private final AdaptiveExecutorService m_congestionExecutor;
>, <Line: -			AdaptiveExecutorService congestionExecutor) throws DatastoreException
>, <Line: -		setupSchema();
>, <Line: -		m_session = m_cassandraClient.getKeyspaceSession();
>, <Line: -		//Prepare queries
>, <Line: -		m_preparedStatements = new PreparedStatements();
>, <Line: -	private void setupSchema()
>, <Line: -	{
>, <Line: -		try (Session session = m_cassandraClient.getSession())
>, <Line: -		{
>, <Line: -			session.execute(String.format(CREATE_KEYSPACE, m_cassandraClient.getKeyspace()));
>, <Line: -		}
>, <Line: -		try (Session session = m_cassandraClient.getKeyspaceSession())
>, <Line: -		{
>, <Line: -			session.execute(DATA_POINTS_TABLE);
>, <Line: -			session.execute(ROW_KEY_INDEX_TABLE);
>, <Line: -			session.execute(STRING_INDEX_TABLE);
>, <Line: -			session.execute(ROW_KEYS);
>, <Line: -			session.execute(ROW_KEY_TIME_INDEX);
>, <Line: -			session.execute(SERVICE_INDEX);
>, <Line: -		}
>, <Line: -	}
>, <Line: -				m_preparedStatements, fullBatch, m_batchStats);
>, <Line: -		BoundStatement boundStatement = new BoundStatement(m_preparedStatements.psStringIndexQuery);
>, <Line: -		return null;
>, <Line: -		return null;
>, <Line: -		return null;
>, <Line: -				"kairosdb.datastore.cassandra.write_batch",
>, <Line: -				"kairosdb.datastore.cassandra.write_batch",
>, <Line: -				"kairosdb.datastore.cassandra.write_batch",
>, <Line: -			if (query.getOrder() == Order.ASC)
>, <Line: -				boundStatement = new BoundStatement(m_preparedStatements.psDataPointsQueryAsc);
>, <Line: -				boundStatement = new BoundStatement(m_preparedStatements.psDataPointsQueryDesc);
>, <Line: -			//boundStatement.setInt(3, Integer.MAX_VALUE);
>, <Line: -				BoundStatement statement = new BoundStatement(m_preparedStatements.psDataPointsDeleteRow);
>, <Line: -				statement = new BoundStatement(m_preparedStatements.psRowKeyIndexDelete);
>, <Line: -			BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyIndexDeleteRow);
>, <Line: -				BoundStatement negStatement = new BoundStatement(m_preparedStatements.psRowKeyIndexQuery);
>, <Line: -				BoundStatement posStatement = new BoundStatement(m_preparedStatements.psRowKeyIndexQuery);
>, <Line: -				BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyIndexQuery);
>, <Line: -				BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyQuery);
>, <Line: -			BoundStatement statement = new BoundStatement(m_preparedStatements.psRowKeyTimeQuery);
>, <Line: -			BoundStatement statement = new BoundStatement(m_preparedStatements.psDataPointsDelete);
>]