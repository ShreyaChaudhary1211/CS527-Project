[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +		'kbn'
>, <Line: +	],
>, <Line: +	function (angular, _, kbn) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.controllers');
>, <Line: +		module.controller('OpenTSDBTargetCtrl', function ($scope, $timeout) {
>, <Line: +			$scope.init = function () {
>, <Line: +				$scope.target.errors = validateTarget($scope.target);
>, <Line: +				$scope.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];
>, <Line: +				if (!$scope.target.aggregator) {
>, <Line: +					$scope.target.aggregator = 'sum';
>, <Line: +				}
>, <Line: +				if (!$scope.target.downsampleAggregator) {
>, <Line: +					$scope.target.downsampleAggregator = 'sum';
>, <Line: +				}
>, <Line: +				$scope.$on('typeahead-updated', function () {
>, <Line: +					$timeout($scope.targetBlur);
>, <Line: +				});
>, <Line: +			};
>, <Line: +			$scope.targetBlur = function () {
>, <Line: +				$scope.target.errors = validateTarget($scope.target);
>, <Line: +				// this does not work so good
>, <Line: +				if (!_.isEqual($scope.oldTarget, $scope.target) && _.isEmpty($scope.target.errors)) {
>, <Line: +					$scope.oldTarget = angular.copy($scope.target);
>, <Line: +					$scope.get_data();
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.duplicate = function () {
>, <Line: +				var clone = angular.copy($scope.target);
>, <Line: +				$scope.panel.targets.push(clone);
>, <Line: +			};
>, <Line: +			$scope.suggestMetrics = function (query, callback) {
>, <Line: +				$scope.datasource
>, <Line: +					.performSuggestQuery(query, 'metrics')
>, <Line: +					.then(callback);
>, <Line: +			};
>, <Line: +			$scope.suggestTagKeys = function (query, callback) {
>, <Line: +				$scope.datasource
>, <Line: +					.performSuggestQuery(query, 'tagk')
>, <Line: +					.then(callback);
>, <Line: +			};
>, <Line: +			$scope.suggestTagValues = function (query, callback) {
>, <Line: +				$scope.datasource
>, <Line: +					.performSuggestQuery(query, 'tagv')
>, <Line: +					.then(callback);
>, <Line: +			};
>, <Line: +			$scope.addTag = function () {
>, <Line: +				if (!$scope.addTagMode) {
>, <Line: +					$scope.addTagMode = true;
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				if (!$scope.target.tags) {
>, <Line: +					$scope.target.tags = {};
>, <Line: +				}
>, <Line: +				$scope.target.errors = validateTarget($scope.target);
>, <Line: +				if (!$scope.target.errors.tags) {
>, <Line: +					$scope.target.tags[$scope.target.currentTagKey] = $scope.target.currentTagValue;
>, <Line: +					$scope.target.currentTagKey = '';
>, <Line: +					$scope.target.currentTagValue = '';
>, <Line: +					$scope.targetBlur();
>, <Line: +				}
>, <Line: +				$scope.addTagMode = false;
>, <Line: +			};
>, <Line: +			$scope.removeTag = function (key) {
>, <Line: +				delete $scope.target.tags[key];
>, <Line: +				$scope.targetBlur();
>, <Line: +			};
>, <Line: +			function validateTarget(target) {
>, <Line: +				var errs = {};
>, <Line: +				if (!target.metric) {
>, <Line: +					errs.metric = "You must supply a metric name.";
>, <Line: +				}
>, <Line: +				if (target.shouldDownsample) {
>, <Line: +					try {
>, <Line: +						if (target.downsampleInterval) {
>, <Line: +							kbn.describe_interval(target.downsampleInterval);
>, <Line: +						} else {
>, <Line: +							errs.downsampleInterval = "You must supply a downsample interval (e.g. '1m' or '1h').";
>, <Line: +						}
>, <Line: +					} catch (err) {
>, <Line: +						errs.downsampleInterval = err.message;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if (target.tags && _.has(target.tags, target.currentTagKey)) {
>, <Line: +					errs.tags = "Duplicate tag key '" + target.currentTagKey + "'.";
>, <Line: +				}
>, <Line: +				return errs;
>, <Line: +			}
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -  'kbn'
>, <Line: -],
>, <Line: -function (angular, _, kbn) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.controllers');
>, <Line: -  module.controller('OpenTSDBTargetCtrl', function($scope, $timeout) {
>, <Line: -    $scope.init = function() {
>, <Line: -      $scope.target.errors = validateTarget($scope.target);
>, <Line: -      $scope.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];
>, <Line: -      if (!$scope.target.aggregator) {
>, <Line: -        $scope.target.aggregator = 'sum';
>, <Line: -      }
>, <Line: -      if (!$scope.target.downsampleAggregator) {
>, <Line: -        $scope.target.downsampleAggregator = 'sum';
>, <Line: -      }
>, <Line: -      $scope.$on('typeahead-updated', function() {
>, <Line: -        $timeout($scope.targetBlur);
>, <Line: -      });
>, <Line: -    };
>, <Line: -    $scope.targetBlur = function() {
>, <Line: -      $scope.target.errors = validateTarget($scope.target);
>, <Line: -      // this does not work so good
>, <Line: -      if (!_.isEqual($scope.oldTarget, $scope.target) && _.isEmpty($scope.target.errors)) {
>, <Line: -        $scope.oldTarget = angular.copy($scope.target);
>, <Line: -        $scope.get_data();
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.duplicate = function() {
>, <Line: -      var clone = angular.copy($scope.target);
>, <Line: -      $scope.panel.targets.push(clone);
>, <Line: -    };
>, <Line: -    $scope.suggestMetrics = function(query, callback) {
>, <Line: -      $scope.datasource
>, <Line: -        .performSuggestQuery(query, 'metrics')
>, <Line: -        .then(callback);
>, <Line: -    };
>, <Line: -    $scope.suggestTagKeys = function(query, callback) {
>, <Line: -      $scope.datasource
>, <Line: -        .performSuggestQuery(query, 'tagk')
>, <Line: -        .then(callback);
>, <Line: -    };
>, <Line: -    $scope.suggestTagValues = function(query, callback) {
>, <Line: -      $scope.datasource
>, <Line: -        .performSuggestQuery(query, 'tagv')
>, <Line: -        .then(callback);
>, <Line: -    };
>, <Line: -    $scope.addTag = function() {
>, <Line: -      if (!$scope.addTagMode) {
>, <Line: -        $scope.addTagMode = true;
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      if (!$scope.target.tags) {
>, <Line: -        $scope.target.tags = {};
>, <Line: -      }
>, <Line: -      $scope.target.errors = validateTarget($scope.target);
>, <Line: -      if (!$scope.target.errors.tags) {
>, <Line: -        $scope.target.tags[$scope.target.currentTagKey] = $scope.target.currentTagValue;
>, <Line: -        $scope.target.currentTagKey = '';
>, <Line: -        $scope.target.currentTagValue = '';
>, <Line: -        $scope.targetBlur();
>, <Line: -      }
>, <Line: -      $scope.addTagMode = false;
>, <Line: -    };
>, <Line: -    $scope.removeTag = function(key) {
>, <Line: -      delete $scope.target.tags[key];
>, <Line: -      $scope.targetBlur();
>, <Line: -    };
>, <Line: -    function validateTarget(target) {
>, <Line: -      var errs = {};
>, <Line: -      if (!target.metric) {
>, <Line: -        errs.metric = "You must supply a metric name.";
>, <Line: -      }
>, <Line: -      if (target.shouldDownsample) {
>, <Line: -        try {
>, <Line: -          if (target.downsampleInterval) {
>, <Line: -            kbn.describe_interval(target.downsampleInterval);
>, <Line: -          } else {
>, <Line: -            errs.downsampleInterval = "You must supply a downsample interval (e.g. '1m' or '1h').";
>, <Line: -          }
>, <Line: -        } catch(err) {
>, <Line: -          errs.downsampleInterval = err.message;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if (target.tags && _.has(target.tags, target.currentTagKey)) {
>, <Line: -        errs.tags = "Duplicate tag key '" + target.currentTagKey + "'.";
>, <Line: -      }
>, <Line: -      return errs;
>, <Line: -    }
>, <Line: -  });
>, <Line: -});
>]