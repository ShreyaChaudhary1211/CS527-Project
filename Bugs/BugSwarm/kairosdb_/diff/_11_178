[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +		'jquery',
>, <Line: +	],
>, <Line: +	function (angular, _, $) {
>, <Line: +		'use strict';
>, <Line: +		angular
>, <Line: +			.module('grafana.directives')
>, <Line: +			.directive('graphiteFuncEditor', function ($compile, templateSrv) {
>, <Line: +				var funcSpanTemplate = '<a ng-click="">{{func.def.name}}</a><span>(</span>';
>, <Line: +				var paramTemplate = '<input type="text" style="display:none"' +
>, <Line: +					' class="input-mini grafana-function-param-input"></input>';
>, <Line: +				var funcControlsTemplate =
>, <Line: +					'<div class="graphite-func-controls">' +
>, <Line: +					'<span class="pointer icon-arrow-left"></span>' +
>, <Line: +					'<span class="pointer icon-info-sign"></span>' +
>, <Line: +					'<span class="pointer icon-remove" ></span>' +
>, <Line: +					'<span class="pointer icon-arrow-right"></span>' +
>, <Line: +					'</div>';
>, <Line: +				return {
>, <Line: +					restrict: 'A',
>, <Line: +					link: function postLink($scope, elem) {
>, <Line: +						var $funcLink = $(funcSpanTemplate);
>, <Line: +						var $funcControls = $(funcControlsTemplate);
>, <Line: +						var func = $scope.func;
>, <Line: +						var funcDef = func.def;
>, <Line: +						var scheduledRelink = false;
>, <Line: +						var paramCountAtLink = 0;
>, <Line: +						function clickFuncParam(paramIndex) {
>, <Line: +							/*jshint validthis:true */
>, <Line: +							var $link = $(this);
>, <Line: +							var $input = $link.next();
>, <Line: +							$input.val(func.params[paramIndex]);
>, <Line: +							$input.css('width', ($link.width() + 16) + 'px');
>, <Line: +							$link.hide();
>, <Line: +							$input.show();
>, <Line: +							$input.focus();
>, <Line: +							$input.select();
>, <Line: +							var typeahead = $input.data('typeahead');
>, <Line: +							if (typeahead) {
>, <Line: +								$input.val('');
>, <Line: +								typeahead.lookup();
>, <Line: +							}
>, <Line: +						}
>, <Line: +						function scheduledRelinkIfNeeded() {
>, <Line: +							if (paramCountAtLink === func.params.length) {
>, <Line: +								return;
>, <Line: +							}
>, <Line: +							if (!scheduledRelink) {
>, <Line: +								scheduledRelink = true;
>, <Line: +								setTimeout(function () {
>, <Line: +									relink();
>, <Line: +									scheduledRelink = false;
>, <Line: +								}, 200);
>, <Line: +							}
>, <Line: +						}
>, <Line: +						function inputBlur(paramIndex) {
>, <Line: +							/*jshint validthis:true */
>, <Line: +							var $input = $(this);
>, <Line: +							var $link = $input.prev();
>, <Line: +							var newValue = $input.val();
>, <Line: +							if (newValue !== '' || func.def.params[paramIndex].optional) {
>, <Line: +								$link.html(templateSrv.highlightVariablesAsHtml(newValue));
>, <Line: +								func.updateParam($input.val(), paramIndex);
>, <Line: +								scheduledRelinkIfNeeded();
>, <Line: +								$scope.$apply($scope.targetChanged);
>, <Line: +							}
>, <Line: +							$input.hide();
>, <Line: +							$link.show();
>, <Line: +						}
>, <Line: +						function inputKeyPress(paramIndex, e) {
>, <Line: +							/*jshint validthis:true */
>, <Line: +							if (e.which === 13) {
>, <Line: +								inputBlur.call(this, paramIndex);
>, <Line: +							}
>, <Line: +						}
>, <Line: +						function inputKeyDown() {
>, <Line: +							/*jshint validthis:true */
>, <Line: +							this.style.width = (3 + this.value.length) * 8 + 'px';
>, <Line: +						}
>, <Line: +						function addTypeahead($input, paramIndex) {
>, <Line: +							$input.attr('data-provide', 'typeahead');
>, <Line: +							var options = funcDef.params[paramIndex].options;
>, <Line: +							if (funcDef.params[paramIndex].type === 'int') {
>, <Line: +								options = _.map(options, function (val) {
>, <Line: +									return val.toString();
>, <Line: +								});
>, <Line: +							}
>, <Line: +							$input.typeahead({
>, <Line: +								source: options,
>, <Line: +								minLength: 0,
>, <Line: +								items: 20,
>, <Line: +								updater: function (value) {
>, <Line: +									setTimeout(function () {
>, <Line: +										inputBlur.call($input[0], paramIndex);
>, <Line: +									}, 0);
>, <Line: +									return value;
>, <Line: +								}
>, <Line: +							});
>, <Line: +							var typeahead = $input.data('typeahead');
>, <Line: +							typeahead.lookup = function () {
>, <Line: +								this.query = this.$element.val() || '';
>, <Line: +								return this.process(this.source);
>, <Line: +							};
>, <Line: +						}
>, <Line: +						function toggleFuncControls() {
>, <Line: +							var targetDiv = elem.closest('.grafana-target-inner');
>, <Line: +							if (elem.hasClass('show-function-controls')) {
>, <Line: +								elem.removeClass('show-function-controls');
>, <Line: +								targetDiv.removeClass('has-open-function');
>, <Line: +								$funcControls.hide();
>, <Line: +								return;
>, <Line: +							}
>, <Line: +							elem.addClass('show-function-controls');
>, <Line: +							targetDiv.addClass('has-open-function');
>, <Line: +							$funcControls.show();
>, <Line: +						}
>, <Line: +						function addElementsAndCompile() {
>, <Line: +							$funcControls.appendTo(elem);
>, <Line: +							$funcLink.appendTo(elem);
>, <Line: +							_.each(funcDef.params, function (param, index) {
>, <Line: +								if (param.optional && func.params.length <= index) {
>, <Line: +									return;
>, <Line: +								}
>, <Line: +								if (index > 0) {
>, <Line: +									$('<span>, </span>').appendTo(elem);
>, <Line: +								}
>, <Line: +								var paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);
>, <Line: +								var $paramLink = $('<a ng-click="" class="graphite-func-param-link">' + paramValue + '</a>');
>, <Line: +								var $input = $(paramTemplate);
>, <Line: +								paramCountAtLink++;
>, <Line: +								$paramLink.appendTo(elem);
>, <Line: +								$input.appendTo(elem);
>, <Line: +								$input.blur(_.partial(inputBlur, index));
>, <Line: +								$input.keyup(inputKeyDown);
>, <Line: +								$input.keypress(_.partial(inputKeyPress, index));
>, <Line: +								$paramLink.click(_.partial(clickFuncParam, index));
>, <Line: +								if (funcDef.params[index].options) {
>, <Line: +									addTypeahead($input, index);
>, <Line: +								}
>, <Line: +							});
>, <Line: +							$('<span>)</span>').appendTo(elem);
>, <Line: +							$compile(elem.contents())($scope);
>, <Line: +						}
>, <Line: +						function ifJustAddedFocusFistParam() {
>, <Line: +							if ($scope.func.added) {
>, <Line: +								$scope.func.added = false;
>, <Line: +								setTimeout(function () {
>, <Line: +									elem.find('.graphite-func-param-link').first().click();
>, <Line: +								}, 10);
>, <Line: +							}
>, <Line: +						}
>, <Line: +						function registerFuncControlsToggle() {
>, <Line: +							$funcLink.click(toggleFuncControls);
>, <Line: +						}
>, <Line: +						function registerFuncControlsActions() {
>, <Line: +							$funcControls.click(function (e) {
>, <Line: +								var $target = $(e.target);
>, <Line: +								if ($target.hasClass('icon-remove')) {
>, <Line: +									toggleFuncControls();
>, <Line: +									$scope.$apply(function () {
>, <Line: +										$scope.removeFunction($scope.func);
>, <Line: +									});
>, <Line: +									return;
>, <Line: +								}
>, <Line: +								if ($target.hasClass('icon-arrow-left')) {
>, <Line: +									$scope.$apply(function () {
>, <Line: +										_.move($scope.functions, $scope.$index, $scope.$index - 1);
>, <Line: +										$scope.targetChanged();
>, <Line: +									});
>, <Line: +									return;
>, <Line: +								}
>, <Line: +								if ($target.hasClass('icon-arrow-right')) {
>, <Line: +									$scope.$apply(function () {
>, <Line: +										_.move($scope.functions, $scope.$index, $scope.$index + 1);
>, <Line: +										$scope.targetChanged();
>, <Line: +									});
>, <Line: +									return;
>, <Line: +								}
>, <Line: +								if ($target.hasClass('icon-info-sign')) {
>, <Line: +									window.open("http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions." + funcDef.name, '_blank');
>, <Line: +									return;
>, <Line: +								}
>, <Line: +							});
>, <Line: +						}
>, <Line: +						function relink() {
>, <Line: +							elem.children().remove();
>, <Line: +							addElementsAndCompile();
>, <Line: +							ifJustAddedFocusFistParam();
>, <Line: +							registerFuncControlsToggle();
>, <Line: +							registerFuncControlsActions();
>, <Line: +						}
>, <Line: +						relink();
>, <Line: +					}
>, <Line: +				};
>, <Line: +			});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -  'jquery',
>, <Line: -],
>, <Line: -function (angular, _, $) {
>, <Line: -  'use strict';
>, <Line: -  angular
>, <Line: -    .module('grafana.directives')
>, <Line: -    .directive('graphiteFuncEditor', function($compile, templateSrv) {
>, <Line: -      var funcSpanTemplate = '<a ng-click="">{{func.def.name}}</a><span>(</span>';
>, <Line: -      var paramTemplate = '<input type="text" style="display:none"' +
>, <Line: -                          ' class="input-mini grafana-function-param-input"></input>';
>, <Line: -      var funcControlsTemplate =
>, <Line: -         '<div class="graphite-func-controls">' +
>, <Line: -           '<span class="pointer icon-arrow-left"></span>' +
>, <Line: -           '<span class="pointer icon-info-sign"></span>' +
>, <Line: -           '<span class="pointer icon-remove" ></span>' +
>, <Line: -           '<span class="pointer icon-arrow-right"></span>' +
>, <Line: -         '</div>';
>, <Line: -      return {
>, <Line: -        restrict: 'A',
>, <Line: -        link: function postLink($scope, elem) {
>, <Line: -          var $funcLink = $(funcSpanTemplate);
>, <Line: -          var $funcControls = $(funcControlsTemplate);
>, <Line: -          var func = $scope.func;
>, <Line: -          var funcDef = func.def;
>, <Line: -          var scheduledRelink = false;
>, <Line: -          var paramCountAtLink = 0;
>, <Line: -          function clickFuncParam(paramIndex) {
>, <Line: -            /*jshint validthis:true */
>, <Line: -            var $link = $(this);
>, <Line: -            var $input = $link.next();
>, <Line: -            $input.val(func.params[paramIndex]);
>, <Line: -            $input.css('width', ($link.width() + 16) + 'px');
>, <Line: -            $link.hide();
>, <Line: -            $input.show();
>, <Line: -            $input.focus();
>, <Line: -            $input.select();
>, <Line: -            var typeahead = $input.data('typeahead');
>, <Line: -            if (typeahead) {
>, <Line: -              $input.val('');
>, <Line: -              typeahead.lookup();
>, <Line: -            }
>, <Line: -          }
>, <Line: -          function scheduledRelinkIfNeeded() {
>, <Line: -            if (paramCountAtLink === func.params.length) {
>, <Line: -              return;
>, <Line: -            }
>, <Line: -            if (!scheduledRelink) {
>, <Line: -              scheduledRelink = true;
>, <Line: -              setTimeout(function() {
>, <Line: -                relink();
>, <Line: -                scheduledRelink = false;
>, <Line: -              }, 200);
>, <Line: -            }
>, <Line: -          }
>, <Line: -          function inputBlur(paramIndex) {
>, <Line: -            /*jshint validthis:true */
>, <Line: -            var $input = $(this);
>, <Line: -            var $link = $input.prev();
>, <Line: -            var newValue = $input.val();
>, <Line: -            if (newValue !== '' || func.def.params[paramIndex].optional) {
>, <Line: -              $link.html(templateSrv.highlightVariablesAsHtml(newValue));
>, <Line: -              func.updateParam($input.val(), paramIndex);
>, <Line: -              scheduledRelinkIfNeeded();
>, <Line: -              $scope.$apply($scope.targetChanged);
>, <Line: -            }
>, <Line: -            $input.hide();
>, <Line: -            $link.show();
>, <Line: -          }
>, <Line: -          function inputKeyPress(paramIndex, e) {
>, <Line: -            /*jshint validthis:true */
>, <Line: -            if(e.which === 13) {
>, <Line: -              inputBlur.call(this, paramIndex);
>, <Line: -            }
>, <Line: -          }
>, <Line: -          function inputKeyDown() {
>, <Line: -            /*jshint validthis:true */
>, <Line: -            this.style.width = (3 + this.value.length) * 8 + 'px';
>, <Line: -          }
>, <Line: -          function addTypeahead($input, paramIndex) {
>, <Line: -            $input.attr('data-provide', 'typeahead');
>, <Line: -            var options = funcDef.params[paramIndex].options;
>, <Line: -            if (funcDef.params[paramIndex].type === 'int') {
>, <Line: -              options = _.map(options, function(val) { return val.toString(); });
>, <Line: -            }
>, <Line: -            $input.typeahead({
>, <Line: -              source: options,
>, <Line: -              minLength: 0,
>, <Line: -              items: 20,
>, <Line: -              updater: function (value) {
>, <Line: -                setTimeout(function() {
>, <Line: -                  inputBlur.call($input[0], paramIndex);
>, <Line: -                }, 0);
>, <Line: -                return value;
>, <Line: -              }
>, <Line: -            });
>, <Line: -            var typeahead = $input.data('typeahead');
>, <Line: -            typeahead.lookup = function () {
>, <Line: -              this.query = this.$element.val() || '';
>, <Line: -              return this.process(this.source);
>, <Line: -            };
>, <Line: -          }
>, <Line: -          function toggleFuncControls() {
>, <Line: -            var targetDiv = elem.closest('.grafana-target-inner');
>, <Line: -            if (elem.hasClass('show-function-controls')) {
>, <Line: -              elem.removeClass('show-function-controls');
>, <Line: -              targetDiv.removeClass('has-open-function');
>, <Line: -              $funcControls.hide();
>, <Line: -              return;
>, <Line: -            }
>, <Line: -            elem.addClass('show-function-controls');
>, <Line: -            targetDiv.addClass('has-open-function');
>, <Line: -            $funcControls.show();
>, <Line: -          }
>, <Line: -          function addElementsAndCompile() {
>, <Line: -            $funcControls.appendTo(elem);
>, <Line: -            $funcLink.appendTo(elem);
>, <Line: -            _.each(funcDef.params, function(param, index) {
>, <Line: -              if (param.optional && func.params.length <= index) {
>, <Line: -                return;
>, <Line: -              }
>, <Line: -              if (index > 0) {
>, <Line: -                $('<span>, </span>').appendTo(elem);
>, <Line: -              }
>, <Line: -              var paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);
>, <Line: -              var $paramLink = $('<a ng-click="" class="graphite-func-param-link">' + paramValue + '</a>');
>, <Line: -              var $input = $(paramTemplate);
>, <Line: -              paramCountAtLink++;
>, <Line: -              $paramLink.appendTo(elem);
>, <Line: -              $input.appendTo(elem);
>, <Line: -              $input.blur(_.partial(inputBlur, index));
>, <Line: -              $input.keyup(inputKeyDown);
>, <Line: -              $input.keypress(_.partial(inputKeyPress, index));
>, <Line: -              $paramLink.click(_.partial(clickFuncParam, index));
>, <Line: -              if (funcDef.params[index].options) {
>, <Line: -                addTypeahead($input, index);
>, <Line: -              }
>, <Line: -            });
>, <Line: -            $('<span>)</span>').appendTo(elem);
>, <Line: -            $compile(elem.contents())($scope);
>, <Line: -          }
>, <Line: -          function ifJustAddedFocusFistParam() {
>, <Line: -            if ($scope.func.added) {
>, <Line: -              $scope.func.added = false;
>, <Line: -              setTimeout(function() {
>, <Line: -                elem.find('.graphite-func-param-link').first().click();
>, <Line: -              }, 10);
>, <Line: -            }
>, <Line: -          }
>, <Line: -          function registerFuncControlsToggle() {
>, <Line: -            $funcLink.click(toggleFuncControls);
>, <Line: -          }
>, <Line: -          function registerFuncControlsActions() {
>, <Line: -            $funcControls.click(function(e) {
>, <Line: -              var $target = $(e.target);
>, <Line: -              if ($target.hasClass('icon-remove')) {
>, <Line: -                toggleFuncControls();
>, <Line: -                $scope.$apply(function() {
>, <Line: -                  $scope.removeFunction($scope.func);
>, <Line: -                });
>, <Line: -                return;
>, <Line: -              }
>, <Line: -              if ($target.hasClass('icon-arrow-left')) {
>, <Line: -                $scope.$apply(function() {
>, <Line: -                  _.move($scope.functions, $scope.$index, $scope.$index - 1);
>, <Line: -                  $scope.targetChanged();
>, <Line: -                });
>, <Line: -                return;
>, <Line: -              }
>, <Line: -              if ($target.hasClass('icon-arrow-right')) {
>, <Line: -                $scope.$apply(function() {
>, <Line: -                  _.move($scope.functions, $scope.$index, $scope.$index + 1);
>, <Line: -                  $scope.targetChanged();
>, <Line: -                });
>, <Line: -                return;
>, <Line: -              }
>, <Line: -              if ($target.hasClass('icon-info-sign')) {
>, <Line: -                window.open("http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions." + funcDef.name,'_blank');
>, <Line: -                return;
>, <Line: -              }
>, <Line: -            });
>, <Line: -          }
>, <Line: -          function relink() {
>, <Line: -            elem.children().remove();
>, <Line: -            addElementsAndCompile();
>, <Line: -            ifJustAddedFocusFistParam();
>, <Line: -            registerFuncControlsToggle();
>, <Line: -            registerFuncControlsActions();
>, <Line: -          }
>, <Line: -          relink();
>, <Line: -        }
>, <Line: -      };
>, <Line: -    });
>, <Line: -});
>]