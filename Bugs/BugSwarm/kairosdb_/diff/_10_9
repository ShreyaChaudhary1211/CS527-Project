[<Line: +package org.kairosdb.core.http.rest;
>, <Line: +import com.google.inject.Inject;
>, <Line: +import org.h2.util.StringUtils;
>, <Line: +import org.kairosdb.core.datastore.ServiceKeyStore;
>, <Line: +import org.kairosdb.core.formatter.JsonFormatter;
>, <Line: +import org.kairosdb.core.http.rest.MetricsResource.ValuesStreamingOutput;
>, <Line: +import org.kairosdb.core.http.rest.json.ErrorResponse;
>, <Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +import javax.ws.rs.DELETE;
>, <Line: +import javax.ws.rs.GET;
>, <Line: +import javax.ws.rs.POST;
>, <Line: +import javax.ws.rs.Path;
>, <Line: +import javax.ws.rs.PathParam;
>, <Line: +import javax.ws.rs.Produces;
>, <Line: +import javax.ws.rs.QueryParam;
>, <Line: +import javax.ws.rs.core.MediaType;
>, <Line: +import javax.ws.rs.core.Response;
>, <Line: +import javax.ws.rs.core.Response.ResponseBuilder;
>, <Line: +import javax.ws.rs.core.Response.Status;
>, <Line: +import static com.google.common.base.Preconditions.checkNotNull;
>, <Line: +import static org.kairosdb.core.http.rest.MetricsResource.setHeaders;
>, <Line: +@Path("/api/v1/metadata")
>, <Line: +public class MetadataResource
>, <Line: +{
>, <Line: +	private static final Logger logger = LoggerFactory.getLogger(MetadataResource.class);
>, <Line: +	private final ServiceKeyStore m_keyStore;
>, <Line: +	private final JsonFormatter jsonFormatter = new JsonFormatter();
>, <Line: +	@SuppressWarnings("ConstantConditions")
>, <Line: +	@Inject
>, <Line: +	public MetadataResource(ServiceKeyStore keyStore)
>, <Line: +	{
>, <Line: +		this.m_keyStore = checkNotNull(keyStore, "m_keyStore cannot be null");
>, <Line: +	}
>, <Line: +	@GET
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("/{service}")
>, <Line: +	public Response listServiceKeys(@PathParam("service") String service)
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			checkLocalService(service);
>, <Line: +			Iterable<String> keys = m_keyStore.listServiceKeys(service);
>, <Line: +			ResponseBuilder responseBuilder = Response.status(Status.OK).entity(
>, <Line: +					new ValuesStreamingOutput(jsonFormatter, keys));
>, <Line: +			setHeaders(responseBuilder);
>, <Line: +			return responseBuilder.build();
>, <Line: +		}
>, <Line: +		catch (NotAuthorizedException e)
>, <Line: +		{
>, <Line: +			logger.error("Attempt to access a local service.");
>, <Line: +			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
>, <Line: +		}
>, <Line: +		catch (Exception e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to get keys.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@GET
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("/{service}/{serviceKey}")
>, <Line: +	public Response listKeys(@PathParam("service") String service,
>, <Line: +			@PathParam("serviceKey") String serviceKey, @QueryParam("startsWith") String startsWidth)
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			checkLocalService(service);
>, <Line: +			Iterable<String> keys;
>, <Line: +			keys = StringUtils.isNullOrEmpty(startsWidth) ?
>, <Line: +					m_keyStore.listKeys(service, serviceKey) :
>, <Line: +					m_keyStore.listKeys(service, serviceKey, startsWidth);
>, <Line: +			ResponseBuilder responseBuilder = Response.status(Status.OK).entity(
>, <Line: +					new ValuesStreamingOutput(jsonFormatter, keys));
>, <Line: +			setHeaders(responseBuilder);
>, <Line: +			return responseBuilder.build();
>, <Line: +		}
>, <Line: +		catch (NotAuthorizedException e)
>, <Line: +		{
>, <Line: +			logger.error("Attempt to access a local service.");
>, <Line: +			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
>, <Line: +		}
>, <Line: +		catch (Exception e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to get keys.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@GET
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("/{service}/{serviceKey}/{key}")
>, <Line: +	public Response getValue(@PathParam("service") String service, @PathParam("serviceKey")
>, <Line: +			String serviceKey, @PathParam("key") String key)
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			checkLocalService(service);
>, <Line: +			String value = m_keyStore.getValue(service, serviceKey, key);
>, <Line: +			ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(value);
>, <Line: +			setHeaders(responseBuilder);
>, <Line: +			return responseBuilder.build();
>, <Line: +		}
>, <Line: +		catch (NotAuthorizedException e)
>, <Line: +		{
>, <Line: +			logger.error("Attempt to access a local service.");
>, <Line: +			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
>, <Line: +		}
>, <Line: +		catch (Exception e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to retrieve value.", e);
>, <Line: +			return setHeaders(Response.status(Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@POST
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("/{service}/{serviceKey}/{key}")
>, <Line: +	public Response setValue(@PathParam("service") String service, @PathParam("serviceKey") String serviceKey,
>, <Line: +			@PathParam("key") String key, String value)
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			checkLocalService(service);
>, <Line: +			m_keyStore.setValue(service, serviceKey, key, value);
>, <Line: +			return setHeaders(Response.status(Response.Status.NO_CONTENT)).build();
>, <Line: +		}
>, <Line: +		catch (NotAuthorizedException e)
>, <Line: +		{
>, <Line: +			logger.error("Attempt to access a local service.");
>, <Line: +			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
>, <Line: +		}
>, <Line: +		catch (Exception e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to add value.", e);
>, <Line: +			return setHeaders(Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	@DELETE
>, <Line: +	@Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: +	@Path("/{service}/{serviceKey}/{key}")
>, <Line: +	public Response deleteKey(@PathParam("service") String service, @PathParam("serviceKey") String serviceKey,
>, <Line: +			@PathParam("key") String key)
>, <Line: +	{
>, <Line: +		try
>, <Line: +		{
>, <Line: +			checkLocalService(service);
>, <Line: +			m_keyStore.deleteKey(service, serviceKey, key);
>, <Line: +			return setHeaders(Response.status(Response.Status.NO_CONTENT)).build();
>, <Line: +		}
>, <Line: +		catch (NotAuthorizedException e)
>, <Line: +		{
>, <Line: +			logger.error("Attempt to access a local service.");
>, <Line: +			return setHeaders(Response.status(Status.UNAUTHORIZED)).build();
>, <Line: +		}
>, <Line: +		catch (Exception e)
>, <Line: +		{
>, <Line: +			logger.error("Failed to delete key.", e);
>, <Line: +			return setHeaders(Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(new ErrorResponse(e.getMessage()))).build();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	private void checkLocalService(String service)
>, <Line: +			throws NotAuthorizedException
>, <Line: +	{
>, <Line: +		if (service.startsWith("_"))
>, <Line: +		{
>, <Line: +			throw new NotAuthorizedException("Attempt to access an unauthorized service");
>, <Line: +		}
>, <Line: +	}
>, <Line: +	private class NotAuthorizedException extends Exception
>, <Line: +	{
>, <Line: +		NotAuthorizedException(String message)
>, <Line: +		{
>, <Line: +			super(message);
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]