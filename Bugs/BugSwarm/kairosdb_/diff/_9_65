[]
[<Line: -/*
>, <Line: - * Copyright 2016 KairosDB Authors
>, <Line: - *
>, <Line: - *    Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: - *    you may not use this file except in compliance with the License.
>, <Line: - *    You may obtain a copy of the License at
>, <Line: - *
>, <Line: - *        http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - *
>, <Line: - *    Unless required by applicable law or agreed to in writing, software
>, <Line: - *    distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: - *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - *    See the License for the specific language governing permissions and
>, <Line: - *    limitations under the License.
>, <Line: - */
>, <Line: -package org.kairosdb.datastore.cassandra;
>, <Line: -import me.prettyprint.cassandra.connection.DynamicLoadBalancingPolicy;
>, <Line: -import me.prettyprint.cassandra.connection.LoadBalancingPolicy;
>, <Line: -import me.prettyprint.cassandra.connection.RoundRobinBalancingPolicy;
>, <Line: -import me.prettyprint.cassandra.service.CassandraHostConfigurator;
>, <Line: -import org.junit.Test;
>, <Line: -import java.lang.reflect.Field;
>, <Line: -import java.util.Arrays;
>, <Line: -import java.util.List;
>, <Line: -import static org.hamcrest.CoreMatchers.equalTo;
>, <Line: -import static org.junit.Assert.assertThat;
>, <Line: -public class HectorConfigurationTest
>, <Line: -{
>, <Line: -	@Test
>, <Line: -	public void test_defaults() throws NoSuchFieldException, IllegalAccessException
>, <Line: -	{
>, <Line: -		HectorConfiguration hectorConfiguration = new HectorConfiguration("host");
>, <Line: -		CassandraHostConfigurator config = hectorConfiguration.getConfiguration();
>, <Line: -		assertThat(getIntFieldValue(config, "maxActive"), equalTo(50));
>, <Line: -		assertThat(getLongFieldValue(config, "maxWaitTimeWhenExhausted"), equalTo(-1L));
>, <Line: -		assertThat(config.getUseSocketKeepalive(), equalTo(false));
>, <Line: -		assertThat(getIntFieldValue(config, "cassandraThriftSocketTimeout"), equalTo(0));
>, <Line: -		assertThat(getBooleanFieldValue(config, "retryDownedHosts"), equalTo(true));
>, <Line: -		assertThat(getIntFieldValue(config, "retryDownedHostsDelayInSeconds"), equalTo(10));
>, <Line: -		assertThat(getIntFieldValue(config, "retryDownedHostsQueueSize"), equalTo(-1));
>, <Line: -		assertThat(getBooleanFieldValue(config, "autoDiscoverHosts"), equalTo(false));
>, <Line: -		assertThat(getIntFieldValue(config, "autoDiscoveryDelayInSeconds"), equalTo(30));
>, <Line: -		assertThat(getListFieldValue(config, "autoDiscoveryDataCenters"), equalTo(null));
>, <Line: -		assertThat(getBooleanFieldValue(config, "runAutoDiscoveryAtStartup"), equalTo(false));
>, <Line: -		assertThat(getBooleanFieldValue(config, "useHostTimeoutTracker"), equalTo(false));
>, <Line: -		assertThat(getIntFieldValue(config, "maxFrameSize"), equalTo(2147483647));
>, <Line: -		assertThat(getPolicyFieldValue(config, "loadBalancingPolicy").getClass().getName(), equalTo(RoundRobinBalancingPolicy.class.getName()));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutCounter"), equalTo(10));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutWindow"), equalTo(500));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutSuspensionDurationInSeconds"), equalTo(10));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutUnsuspendCheckDelay"), equalTo(10));
>, <Line: -		assertThat(getLongFieldValue(config, "maxConnectTimeMillis"), equalTo(-1L));
>, <Line: -		assertThat(getLongFieldValue(config, "maxLastSuccessTimeMillis"), equalTo(-1L));
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void test_setValues() throws NoSuchFieldException, IllegalAccessException
>, <Line: -	{
>, <Line: -		HectorConfiguration hectorConfiguration = new HectorConfiguration("host");
>, <Line: -		hectorConfiguration.setMaxActive(100);
>, <Line: -		hectorConfiguration.setMaxWaitTimeWhenExhausted(101);
>, <Line: -		hectorConfiguration.setUseSocketKeepalive(true);
>, <Line: -		hectorConfiguration.setCassandraThriftSocketTimeout(102);
>, <Line: -		hectorConfiguration.setRetryDownedHosts(false);
>, <Line: -		hectorConfiguration.setRetryDownedHostsDelayInSeconds(103);
>, <Line: -		hectorConfiguration.setRetryDownedHostsQueueSize(104);
>, <Line: -		hectorConfiguration.setAutoDiscoverHosts(true);
>, <Line: -		hectorConfiguration.setAutoDiscoveryDelayInSeconds(105);
>, <Line: -		hectorConfiguration.setAutoDiscoveryDataCenters(Arrays.asList("foo", "bar"));
>, <Line: -		hectorConfiguration.setRunAutoDiscoveryAtStartup(true);
>, <Line: -		hectorConfiguration.setUseHostTimeoutTracker(true);
>, <Line: -		hectorConfiguration.setMaxFrameSize(106);
>, <Line: -		hectorConfiguration.setLoadBalancingPolicy("dynamic");
>, <Line: -		hectorConfiguration.setHostTimeOutCounter(107);
>, <Line: -		hectorConfiguration.setHostTimeoutWindow(108);
>, <Line: -		hectorConfiguration.setHostTimeOutSuspensionDurationInSeconds(109);
>, <Line: -		hectorConfiguration.setHostTimeOutUnsuspendCheckDelay(110);
>, <Line: -		hectorConfiguration.setMaxConnectTimeMillis(111L);
>, <Line: -		hectorConfiguration.setMaxLastSuccessTimeMillis(112L);
>, <Line: -		CassandraHostConfigurator config = hectorConfiguration.getConfiguration();
>, <Line: -		assertThat(getIntFieldValue(config, "maxActive"), equalTo(100));
>, <Line: -		assertThat(getLongFieldValue(config, "maxWaitTimeWhenExhausted"), equalTo(101L));
>, <Line: -		assertThat(config.getUseSocketKeepalive(), equalTo(true));
>, <Line: -		assertThat(getIntFieldValue(config, "cassandraThriftSocketTimeout"), equalTo(102));
>, <Line: -		assertThat(getBooleanFieldValue(config, "retryDownedHosts"), equalTo(false));
>, <Line: -		assertThat(getIntFieldValue(config, "retryDownedHostsDelayInSeconds"), equalTo(103));
>, <Line: -		assertThat(getIntFieldValue(config, "retryDownedHostsQueueSize"), equalTo(104));
>, <Line: -		assertThat(getBooleanFieldValue(config, "autoDiscoverHosts"), equalTo(true));
>, <Line: -		assertThat(getIntFieldValue(config, "autoDiscoveryDelayInSeconds"), equalTo(105));
>, <Line: -		assertThat(getListFieldValue(config, "autoDiscoveryDataCenters"), equalTo(Arrays.asList("foo", "bar")));
>, <Line: -		assertThat(getBooleanFieldValue(config, "runAutoDiscoveryAtStartup"), equalTo(true));
>, <Line: -		assertThat(getBooleanFieldValue(config, "useHostTimeoutTracker"), equalTo(true));
>, <Line: -		assertThat(getIntFieldValue(config, "maxFrameSize"), equalTo(106));
>, <Line: -		assertThat(getPolicyFieldValue(config, "loadBalancingPolicy").getClass().getName(), equalTo(DynamicLoadBalancingPolicy.class.getName()));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutCounter"), equalTo(107));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutWindow"), equalTo(108));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutSuspensionDurationInSeconds"), equalTo(109));
>, <Line: -		assertThat(getIntFieldValue(config, "hostTimeoutUnsuspendCheckDelay"), equalTo(110));
>, <Line: -		assertThat(getLongFieldValue(config, "maxConnectTimeMillis"), equalTo(111L));
>, <Line: -		assertThat(getLongFieldValue(config, "maxLastSuccessTimeMillis"), equalTo(112L));
>, <Line: -	}
>, <Line: -	private static int getIntFieldValue(Object config, String fieldName) throws NoSuchFieldException, IllegalAccessException
>, <Line: -	{
>, <Line: -		Field field = config.getClass().getDeclaredField(fieldName);
>, <Line: -		field.setAccessible(true);
>, <Line: -		return field.getInt(config);
>, <Line: -	}
>, <Line: -	private static long getLongFieldValue(Object config, String fieldName) throws NoSuchFieldException, IllegalAccessException
>, <Line: -	{
>, <Line: -		Field field = config.getClass().getDeclaredField(fieldName);
>, <Line: -		field.setAccessible(true);
>, <Line: -		return field.getLong(config);
>, <Line: -	}
>, <Line: -	private static boolean getBooleanFieldValue(Object config, String fieldName) throws NoSuchFieldException, IllegalAccessException
>, <Line: -	{
>, <Line: -		Field field = config.getClass().getDeclaredField(fieldName);
>, <Line: -		field.setAccessible(true);
>, <Line: -		return field.getBoolean(config);
>, <Line: -	}
>, <Line: -	@SuppressWarnings("unchecked")
>, <Line: -	private static List<String> getListFieldValue(Object config, String fieldName) throws NoSuchFieldException, IllegalAccessException
>, <Line: -	{
>, <Line: -		Field field = config.getClass().getDeclaredField(fieldName);
>, <Line: -		field.setAccessible(true);
>, <Line: -		return (List<String>) field.get(config);
>, <Line: -	}
>, <Line: -	private static LoadBalancingPolicy getPolicyFieldValue(Object config, String fieldName) throws NoSuchFieldException, IllegalAccessException
>, <Line: -	{
>, <Line: -		Field field = config.getClass().getDeclaredField(fieldName);
>, <Line: -		field.setAccessible(true);
>, <Line: -		return (LoadBalancingPolicy) field.get(config);
>, <Line: -	}
>, <Line: -}
>]