[<Line: +public class MetricsResourceTest extends ResourceBase
>, <Line: +    @Test
>, <Line: +			datastore.throwException(new DatastoreException("bogus"));
>, <Line: +			datastore.throwException(null);
>]
[<Line: -import com.google.common.collect.ImmutableSortedMap;
>, <Line: -import com.google.common.eventbus.EventBus;
>, <Line: -import com.google.inject.*;
>, <Line: -import com.google.inject.matcher.Matchers;
>, <Line: -import com.google.inject.name.Names;
>, <Line: -import com.google.inject.spi.InjectionListener;
>, <Line: -import com.google.inject.spi.TypeEncounter;
>, <Line: -import com.google.inject.spi.TypeListener;
>, <Line: -import org.junit.AfterClass;
>, <Line: -import org.junit.BeforeClass;
>, <Line: -import org.kairosdb.core.*;
>, <Line: -import org.kairosdb.core.aggregator.AggregatorFactory;
>, <Line: -import org.kairosdb.core.aggregator.TestAggregatorFactory;
>, <Line: -import org.kairosdb.core.datapoints.*;
>, <Line: -import org.kairosdb.core.datastore.*;
>, <Line: -import org.kairosdb.core.groupby.GroupByFactory;
>, <Line: -import org.kairosdb.core.groupby.TestGroupByFactory;
>, <Line: -import org.kairosdb.core.http.WebServer;
>, <Line: -import org.kairosdb.core.http.WebServletModule;
>, <Line: -import org.kairosdb.core.http.rest.json.QueryParser;
>, <Line: -import org.kairosdb.core.http.rest.json.TestQueryPluginFactory;
>, <Line: -import org.kairosdb.testing.Client;
>, <Line: -import org.kairosdb.util.SimpleStatsReporter;
>, <Line: -import org.slf4j.bridge.SLF4JBridgeHandler;
>, <Line: -import java.io.InputStream;
>, <Line: -import java.util.*;
>, <Line: -public class MetricsResourceTest
>, <Line: -	private static TestDatastore datastore;
>, <Line: -	private static QueryQueuingManager queuingManager;
>, <Line: -	private static Client client;
>, <Line: -	private static WebServer server;
>, <Line: -	private static final EventBus m_eventBus = new EventBus();
>, <Line: -	@BeforeClass
>, <Line: -	public static void startup() throws Exception
>, <Line: -	{
>, <Line: -		//This sends jersey java util logging to logback
>, <Line: -		SLF4JBridgeHandler.removeHandlersForRootLogger();
>, <Line: -		SLF4JBridgeHandler.install();
>, <Line: -		datastore = new TestDatastore();
>, <Line: -		queuingManager = new QueryQueuingManager(3, "localhost");
>, <Line: -		Injector injector = Guice.createInjector(new WebServletModule(new Properties()), new AbstractModule()
>, <Line: -		{
>, <Line: -			@Override
>, <Line: -			protected void configure()
>, <Line: -			{
>, <Line: -				bind(EventBus.class).toInstance(m_eventBus);
>, <Line: -				//Need to register an exception handler
>, <Line: -				bindListener(Matchers.any(), new TypeListener()
>, <Line: -				{
>, <Line: -					public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
>, <Line: -					{
>, <Line: -						typeEncounter.register(new InjectionListener<I>()
>, <Line: -						{
>, <Line: -							public void afterInjection(I i)
>, <Line: -							{
>, <Line: -								m_eventBus.register(i);
>, <Line: -							}
>, <Line: -						});
>, <Line: -					}
>, <Line: -				});
>, <Line: -				bind(String.class).annotatedWith(Names.named(WebServer.JETTY_ADDRESS_PROPERTY)).toInstance("0.0.0.0");
>, <Line: -				bind(Integer.class).annotatedWith(Names.named(WebServer.JETTY_PORT_PROPERTY)).toInstance(9001);
>, <Line: -				bind(String.class).annotatedWith(Names.named(WebServer.JETTY_WEB_ROOT_PROPERTY)).toInstance("bogus");
>, <Line: -				bind(Datastore.class).toInstance(datastore);
>, <Line: -				bind(KairosDatastore.class).in(Singleton.class);
>, <Line: -				bind(AggregatorFactory.class).to(TestAggregatorFactory.class);
>, <Line: -				bind(GroupByFactory.class).to(TestGroupByFactory.class);
>, <Line: -				bind(QueryParser.class).in(Singleton.class);
>, <Line: -				bind(QueryQueuingManager.class).toInstance(queuingManager);
>, <Line: -				bindConstant().annotatedWith(Names.named("HOSTNAME")).to("HOST");
>, <Line: -				bindConstant().annotatedWith(Names.named("kairosdb.datastore.concurrentQueryThreads")).to(1);
>, <Line: -				bindConstant().annotatedWith(Names.named("kairosdb.query_cache.keep_cache_files")).to(false);
>, <Line: -				bind(KairosDataPointFactory.class).to(GuiceKairosDataPointFactory.class);
>, <Line: -				bind(QueryPluginFactory.class).to(TestQueryPluginFactory.class);
>, <Line: -				bind(SimpleStatsReporter.class);
>, <Line: -				Properties props = new Properties();
>, <Line: -				InputStream is = getClass().getClassLoader().getResourceAsStream("kairosdb.properties");
>, <Line: -				try
>, <Line: -				{
>, <Line: -					props.load(is);
>, <Line: -					is.close();
>, <Line: -				}
>, <Line: -				catch (IOException e)
>, <Line: -				{
>, <Line: -					e.printStackTrace();
>, <Line: -				}
>, <Line: -				//Names.bindProperties(binder(), props);
>, <Line: -				bind(Properties.class).toInstance(props);
>, <Line: -				bind(DoubleDataPointFactory.class)
>, <Line: -						.to(DoubleDataPointFactoryImpl.class).in(Singleton.class);
>, <Line: -				bind(DoubleDataPointFactoryImpl.class).in(Singleton.class);
>, <Line: -				bind(LongDataPointFactory.class)
>, <Line: -						.to(LongDataPointFactoryImpl.class).in(Singleton.class);
>, <Line: -				bind(LongDataPointFactoryImpl.class).in(Singleton.class);
>, <Line: -				bind(LegacyDataPointFactory.class).in(Singleton.class);
>, <Line: -				bind(StringDataPointFactory.class).in(Singleton.class);
>, <Line: -			}
>, <Line: -		});
>, <Line: -		server = injector.getInstance(WebServer.class);
>, <Line: -		server.start();
>, <Line: -		client = new Client();
>, <Line: -	}
>, <Line: -	@AfterClass
>, <Line: -	public static void tearDown() throws Exception
>, <Line: -	{
>, <Line: -		if (server != null)
>, <Line: -		{
>, <Line: -			server.stop();
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -			datastore.throwQueryException(new DatastoreException("bogus"));
>, <Line: -			datastore.throwQueryException(null);
>, <Line: -	public static class TestDatastore implements Datastore
>, <Line: -	{
>, <Line: -		private DatastoreException m_toThrow = null;
>, <Line: -		protected TestDatastore() throws DatastoreException
>, <Line: -		{
>, <Line: -		}
>, <Line: -		public void throwQueryException(DatastoreException toThrow)
>, <Line: -		{
>, <Line: -			m_toThrow = toThrow;
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void close() throws InterruptedException
>, <Line: -		{
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public Iterable<String> getMetricNames()
>, <Line: -		{
>, <Line: -			return Arrays.asList("cpu", "memory", "disk", "network");
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public Iterable<String> getTagNames()
>, <Line: -		{
>, <Line: -			return Arrays.asList("server1", "server2", "server3");
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public Iterable<String> getTagValues()
>, <Line: -		{
>, <Line: -			return Arrays.asList("larry", "moe", "curly");
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void queryDatabase(DatastoreMetricQuery query, QueryCallback queryCallback) throws DatastoreException
>, <Line: -		{
>, <Line: -			if (m_toThrow != null)
>, <Line: -				throw m_toThrow;
>, <Line: -			try
>, <Line: -			{
>, <Line: -				Map<String, String> tags = new TreeMap<String, String>();
>, <Line: -				tags.put("server", "server1");
>, <Line: -				queryCallback.startDataPointSet(LongDataPointFactoryImpl.DST_LONG, tags);
>, <Line: -				queryCallback.addDataPoint(new LongDataPoint(1, 10));
>, <Line: -				queryCallback.addDataPoint(new LongDataPoint(1, 20));
>, <Line: -				queryCallback.addDataPoint(new LongDataPoint(2, 10));
>, <Line: -				queryCallback.addDataPoint(new LongDataPoint(2, 5));
>, <Line: -				queryCallback.addDataPoint(new LongDataPoint(3, 10));
>, <Line: -				tags = new TreeMap<String, String>();
>, <Line: -				tags.put("server", "server2");
>, <Line: -				queryCallback.startDataPointSet(DoubleDataPointFactoryImpl.DST_DOUBLE, tags);
>, <Line: -				queryCallback.addDataPoint(new DoubleDataPoint(1, 10.1));
>, <Line: -				queryCallback.addDataPoint(new DoubleDataPoint(1, 20.1));
>, <Line: -				queryCallback.addDataPoint(new DoubleDataPoint(2, 10.1));
>, <Line: -				queryCallback.addDataPoint(new DoubleDataPoint(2, 5.1));
>, <Line: -				queryCallback.addDataPoint(new DoubleDataPoint(3, 10.1));
>, <Line: -				queryCallback.endDataPoints();
>, <Line: -			}
>, <Line: -			catch (IOException e)
>, <Line: -			{
>, <Line: -				throw new DatastoreException(e);
>, <Line: -			}
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void deleteDataPoints(DatastoreMetricQuery deleteQuery) throws DatastoreException
>, <Line: -		{
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public TagSet queryMetricTags(DatastoreMetricQuery query) throws DatastoreException
>, <Line: -		{
>, <Line: -			return null;
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void setValue(String service, String serviceKey, String key, String value) throws DatastoreException
>, <Line: -		{
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public String getValue(String service, String serviceKey, String key) throws DatastoreException
>, <Line: -		{
>, <Line: -			return null;
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public Iterable<String> listKeys(String service, String serviceKey) throws DatastoreException
>, <Line: -		{
>, <Line: -			return null;
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public Iterable<String> listKeys(String service, String serviceKey, String keyStartsWith) throws DatastoreException
>, <Line: -		{
>, <Line: -			return null;
>, <Line: -		}
>, <Line: -	}
>]