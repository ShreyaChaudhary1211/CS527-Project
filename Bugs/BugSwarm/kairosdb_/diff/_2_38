[]
[<Line: -package org.kairosdb.core.http.rest;
>, <Line: -import com.google.common.collect.ImmutableList;
>, <Line: -import com.google.gson.Gson;
>, <Line: -import com.google.inject.Inject;
>, <Line: -import org.kairosdb.core.http.rest.json.JsonResponseBuilder;
>, <Line: -import org.kairosdb.core.processingstage.QueryProcessingChain;
>, <Line: -import org.kairosdb.core.processingstage.QueryProcessingStageFactory;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryProcessingStageMetadata;
>, <Line: -import org.kairosdb.core.processingstage.metadata.QueryProcessorMetadata;
>, <Line: -import javax.ws.rs.GET;
>, <Line: -import javax.ws.rs.Path;
>, <Line: -import javax.ws.rs.PathParam;
>, <Line: -import javax.ws.rs.Produces;
>, <Line: -import javax.ws.rs.core.MediaType;
>, <Line: -import javax.ws.rs.core.Response;
>, <Line: -import static org.kairosdb.core.http.rest.MetricsResource.setHeaders;
>, <Line: -@Path("/api/v1/queryprocessing")
>, <Line: -public class QueryProcessingChainResource
>, <Line: -{
>, <Line: -    private QueryProcessingChain queryProcessingChain;
>, <Line: -    private Gson gson = new Gson();
>, <Line: -    @Inject
>, <Line: -    public QueryProcessingChainResource(QueryProcessingChain queryProcessingChain)
>, <Line: -    {
>, <Line: -        this.queryProcessingChain = queryProcessingChain;
>, <Line: -    }
>, <Line: -    @GET
>, <Line: -    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: -    @Path("/stages/{queryProcessorFamily}")
>, <Line: -    public Response getQueryProcessor(@PathParam("queryProcessorFamily") String queryProcessorFamilyName)
>, <Line: -    {
>, <Line: -        QueryProcessingStageFactory<?> queryProcessingStageFactory = queryProcessingChain.getQueryProcessingStageFactory(queryProcessorFamilyName);
>, <Line: -        if (queryProcessingStageFactory == null)
>, <Line: -        {
>, <Line: -            JsonResponseBuilder builder = new JsonResponseBuilder(Response.Status.NOT_FOUND);
>, <Line: -            builder.addError("Unknown processing stage family '" + queryProcessorFamilyName.toLowerCase() + "'");
>, <Line: -            return builder.build();
>, <Line: -        }
>, <Line: -        ImmutableList<QueryProcessorMetadata> queryProcessorMetadata = queryProcessingStageFactory.getQueryProcessorMetadata();
>, <Line: -        Response.ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(gson.toJson(queryProcessorMetadata));
>, <Line: -        setHeaders(responseBuilder);
>, <Line: -        return responseBuilder.build();
>, <Line: -    }
>, <Line: -    @GET
>, <Line: -    @Produces(MediaType.APPLICATION_JSON + "; charset=UTF-8")
>, <Line: -    @Path("/chain")
>, <Line: -    public Response getQueryProcessingChain()
>, <Line: -    {
>, <Line: -        ImmutableList<QueryProcessingStageMetadata> processingChainMetadata = queryProcessingChain.getQueryProcessingChainMetadata();
>, <Line: -        Response.ResponseBuilder responseBuilder = Response.status(Response.Status.OK).entity(gson.toJson(processingChainMetadata));
>, <Line: -        setHeaders(responseBuilder);
>, <Line: -        return responseBuilder.build();
>, <Line: -    }
>, <Line: -}
>]