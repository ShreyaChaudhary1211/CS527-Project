[<Line: +		'angular',
>, <Line: +		'lodash'
>, <Line: +	],
>, <Line: +	function (angular, _) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.controllers');
>, <Line: +		var MetricStruct = {};
>, <Line: +		var metricList = null;
>, <Line: +		var targetLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O'];
>, <Line: +		module.controller('KairosDBTargetCtrl', function ($scope) {
>, <Line: +			$scope.init = function () {
>, <Line: +				$scope.metric = {
>, <Line: +					list: ["Loading..."],
>, <Line: +					value: "Loading..."
>, <Line: +				};
>, <Line: +				$scope.panel.stack = false;
>, <Line: +				if (!$scope.panel.downsampling) {
>, <Line: +					$scope.panel.downsampling = 'avg';
>, <Line: +				}
>, <Line: +				if (!$scope.target.downsampling) {
>, <Line: +					$scope.target.downsampling = $scope.panel.downsampling;
>, <Line: +					$scope.target.sampling = $scope.panel.sampling;
>, <Line: +				}
>, <Line: +				$scope.targetLetters = targetLetters;
>, <Line: +				$scope.updateMetricList();
>, <Line: +				$scope.target.errors = validateTarget($scope.target);
>, <Line: +			};
>, <Line: +			$scope.targetBlur = function () {
>, <Line: +				$scope.target.metric = $scope.metric.value;
>, <Line: +				$scope.target.errors = validateTarget($scope.target);
>, <Line: +				if (!_.isEqual($scope.oldTarget, $scope.target) && _.isEmpty($scope.target.errors)) {
>, <Line: +					$scope.oldTarget = angular.copy($scope.target);
>, <Line: +					$scope.get_data();
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.panelBlur = function () {
>, <Line: +				_.each($scope.panel.targets, function (target) {
>, <Line: +					target.downsampling = $scope.panel.downsampling;
>, <Line: +					target.sampling = $scope.panel.sampling;
>, <Line: +				});
>, <Line: +				$scope.get_data();
>, <Line: +			};
>, <Line: +			$scope.duplicate = function () {
>, <Line: +				var clone = angular.copy($scope.target);
>, <Line: +				$scope.panel.targets.push(clone);
>, <Line: +			};
>, <Line: +			$scope.moveMetricQuery = function (fromIndex, toIndex) {
>, <Line: +				_.move($scope.panel.targets, fromIndex, toIndex);
>, <Line: +			};
>, <Line: +			//////////////////////////////
>, <Line: +			// SUGGESTION QUERIES
>, <Line: +			//////////////////////////////
>, <Line: +			$scope.updateMetricList = function () {
>, <Line: +				$scope.metricListLoading = true;
>, <Line: +				metricList = [];
>, <Line: +				$scope.datasource.performMetricSuggestQuery().then(function (series) {
>, <Line: +					metricList = series;
>, <Line: +					$scope.metric.list = series;
>, <Line: +					if ($scope.target.metric)
>, <Line: +						$scope.metric.value = $scope.target.metric;
>, <Line: +					else
>, <Line: +						$scope.metric.value = "";
>, <Line: +					$scope.metricListLoading = false;
>, <Line: +					return metricList;
>, <Line: +				});
>, <Line: +			};
>, <Line: +			$scope.suggestTagKeys = function (query, callback) {
>, <Line: +				$scope.updateTimeRange();
>, <Line: +				callback($scope.datasource
>, <Line: +					.performTagSuggestQuery($scope.target.metric, $scope.rangeUnparsed, 'key', ''));
>, <Line: +			};
>, <Line: +			$scope.suggestTagValues = function (query, callback) {
>, <Line: +				callback($scope.datasource
>, <Line: +					.performTagSuggestQuery($scope.target.metric, $scope.rangeUnparsed, 'value', $scope.target.currentTagKey));
>, <Line: +			};
>, <Line: +			//////////////////////////////
>, <Line: +			// FILTER by TAG
>, <Line: +			//////////////////////////////
>, <Line: +			$scope.addFilterTag = function () {
>, <Line: +				if (!$scope.addFilterTagMode) {
>, <Line: +					$scope.addFilterTagMode = true;
>, <Line: +					$scope.validateFilterTag();
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				if (!$scope.target.tags) {
>, <Line: +					$scope.target.tags = {};
>, <Line: +				}
>, <Line: +				$scope.validateFilterTag();
>, <Line: +				if (!$scope.target.errors.tags) {
>, <Line: +					if (!_.has($scope.target.tags, $scope.target.currentTagKey)) {
>, <Line: +						$scope.target.tags[$scope.target.currentTagKey] = [];
>, <Line: +					}
>, <Line: +					$scope.target.tags[$scope.target.currentTagKey].push($scope.target.currentTagValue);
>, <Line: +					$scope.target.currentTagKey = '';
>, <Line: +					$scope.target.currentTagValue = '';
>, <Line: +					$scope.targetBlur();
>, <Line: +				}
>, <Line: +				$scope.addFilterTagMode = false;
>, <Line: +			};
>, <Line: +			$scope.removeFilterTag = function (key) {
>, <Line: +				delete $scope.target.tags[key];
>, <Line: +				if (_.size($scope.target.tags) === 0) {
>, <Line: +					$scope.target.tags = null;
>, <Line: +				}
>, <Line: +				$scope.targetBlur();
>, <Line: +			};
>, <Line: +			$scope.validateFilterTag = function () {
>, <Line: +				$scope.target.errors.tags = null;
>, <Line: +				if (!$scope.target.currentTagKey || !$scope.target.currentTagValue) {
>, <Line: +					$scope.target.errors.tags = "You must specify a tag name and value.";
>, <Line: +				}
>, <Line: +			};
>, <Line: +			//////////////////////////////
>, <Line: +			// GROUP BY
>, <Line: +			//////////////////////////////
>, <Line: +			$scope.addGroupBy = function () {
>, <Line: +				if (!$scope.addGroupByMode) {
>, <Line: +					$scope.addGroupByMode = true;
>, <Line: +					$scope.target.currentGroupByType = 'tag';
>, <Line: +					$scope.isTagGroupBy = true;
>, <Line: +					$scope.validateGroupBy();
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				$scope.validateGroupBy();
>, <Line: +				// nb: if error is found, means that user clicked on cross : cancels input
>, <Line: +				if (_.isEmpty($scope.target.errors.groupBy)) {
>, <Line: +					if ($scope.isTagGroupBy) {
>, <Line: +						if (!$scope.target.groupByTags) {
>, <Line: +							$scope.target.groupByTags = [];
>, <Line: +						}
>, <Line: +						console.log($scope.target.groupBy.tagKey);
>, <Line: +						if (!_.contains($scope.target.groupByTags, $scope.target.groupBy.tagKey)) {
>, <Line: +							$scope.target.groupByTags.push($scope.target.groupBy.tagKey);
>, <Line: +							$scope.targetBlur();
>, <Line: +						}
>, <Line: +						$scope.target.groupBy.tagKey = '';
>, <Line: +					}
>, <Line: +					else {
>, <Line: +						if (!$scope.target.nonTagGroupBys) {
>, <Line: +							$scope.target.nonTagGroupBys = [];
>, <Line: +						}
>, <Line: +						var groupBy = {
>, <Line: +							name: $scope.target.currentGroupByType
>, <Line: +						};
>, <Line: +						if ($scope.isValueGroupBy) {
>, <Line: +							groupBy.range_size = $scope.target.groupBy.valueRange;
>, <Line: +						}
>, <Line: +						else if ($scope.isTimeGroupBy) {
>, <Line: +							groupBy.range_size = $scope.target.groupBy.timeInterval;
>, <Line: +							groupBy.group_count = $scope.target.groupBy.groupCount;
>, <Line: +						}
>, <Line: +						$scope.target.nonTagGroupBys.push(groupBy);
>, <Line: +					}
>, <Line: +					$scope.targetBlur();
>, <Line: +				}
>, <Line: +				$scope.isTagGroupBy = false;
>, <Line: +				$scope.isValueGroupBy = false;
>, <Line: +				$scope.isTimeGroupBy = false;
>, <Line: +				$scope.addGroupByMode = false;
>, <Line: +			};
>, <Line: +			$scope.removeGroupByTag = function (index) {
>, <Line: +				$scope.target.groupByTags.splice(index, 1);
>, <Line: +				if (_.size($scope.target.groupByTags) === 0) {
>, <Line: +					$scope.target.groupByTags = null;
>, <Line: +				}
>, <Line: +				$scope.targetBlur();
>, <Line: +			};
>, <Line: +			$scope.removeNonTagGroupBy = function (index) {
>, <Line: +				$scope.target.nonTagGroupBys.splice(index, 1);
>, <Line: +				if (_.size($scope.target.nonTagGroupBys) === 0) {
>, <Line: +					$scope.target.nonTagGroupBys = null;
>, <Line: +				}
>, <Line: +				$scope.targetBlur();
>, <Line: +			};
>, <Line: +			$scope.changeGroupByInput = function () {
>, <Line: +				$scope.isTagGroupBy = $scope.target.currentGroupByType === 'tag';
>, <Line: +				$scope.isValueGroupBy = $scope.target.currentGroupByType === 'value';
>, <Line: +				$scope.isTimeGroupBy = $scope.target.currentGroupByType === 'time';
>, <Line: +				$scope.validateGroupBy();
>, <Line: +			};
>, <Line: +			$scope.validateGroupBy = function () {
>, <Line: +				delete $scope.target.errors.groupBy;
>, <Line: +				var errors = {};
>, <Line: +				$scope.isGroupByValid = true;
>, <Line: +				if ($scope.isTagGroupBy) {
>, <Line: +					if (!$scope.target.groupBy.tagKey) {
>, <Line: +						$scope.isGroupByValid = false;
>, <Line: +						errors.tagKey = 'You must supply a tag name';
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if ($scope.isValueGroupBy) {
>, <Line: +					if (!$scope.target.groupBy.valueRange || !isInt($scope.target.groupBy.valueRange)) {
>, <Line: +						errors.valueRange = "Range must be an integer";
>, <Line: +						$scope.isGroupByValid = false;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if ($scope.isTimeGroupBy) {
>, <Line: +					try {
>, <Line: +						$scope.datasource.convertToKairosInterval($scope.target.groupBy.timeInterval);
>, <Line: +					} catch (err) {
>, <Line: +						errors.timeInterval = err.message;
>, <Line: +						$scope.isGroupByValid = false;
>, <Line: +					}
>, <Line: +					if (!$scope.target.groupBy.groupCount || !isInt($scope.target.groupBy.groupCount)) {
>, <Line: +						errors.groupCount = "Group count must be an integer";
>, <Line: +						$scope.isGroupByValid = false;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if (!_.isEmpty(errors)) {
>, <Line: +					$scope.target.errors.groupBy = errors;
>, <Line: +				}
>, <Line: +			};
>, <Line: +			function isInt(n) {
>, <Line: +				return parseInt(n) % 1 === 0;
>, <Line: +			}
>, <Line: +			//////////////////////////////
>, <Line: +			// HORIZONTAL AGGREGATION
>, <Line: +			//////////////////////////////
>, <Line: +			$scope.addHorizontalAggregator = function () {
>, <Line: +				if (!$scope.addHorizontalAggregatorMode) {
>, <Line: +					$scope.addHorizontalAggregatorMode = true;
>, <Line: +					$scope.target.currentHorizontalAggregatorName = 'avg';
>, <Line: +					$scope.hasSamplingRate = true;
>, <Line: +					$scope.validateHorizontalAggregator();
>, <Line: +					return;
>, <Line: +				}
>, <Line: +				$scope.validateHorizontalAggregator();
>, <Line: +				// nb: if error is found, means that user clicked on cross : cancels input
>, <Line: +				if (_.isEmpty($scope.target.errors.horAggregator)) {
>, <Line: +					if (!$scope.target.horizontalAggregators) {
>, <Line: +						$scope.target.horizontalAggregators = [];
>, <Line: +					}
>, <Line: +					var aggregator = {
>, <Line: +						name: $scope.target.currentHorizontalAggregatorName
>, <Line: +					};
>, <Line: +					if ($scope.hasSamplingRate) {
>, <Line: +						aggregator.sampling_rate = $scope.target.horAggregator.samplingRate;
>, <Line: +					}
>, <Line: +					if ($scope.hasUnit) {
>, <Line: +						aggregator.unit = $scope.target.horAggregator.unit;
>, <Line: +					}
>, <Line: +					if ($scope.hasFactor) {
>, <Line: +						aggregator.factor = $scope.target.horAggregator.factor;
>, <Line: +					}
>, <Line: +					if ($scope.hasPercentile) {
>, <Line: +						aggregator.percentile = $scope.target.horAggregator.percentile;
>, <Line: +					}
>, <Line: +					$scope.target.horizontalAggregators.push(aggregator);
>, <Line: +					$scope.targetBlur();
>, <Line: +				}
>, <Line: +				$scope.addHorizontalAggregatorMode = false;
>, <Line: +				$scope.hasSamplingRate = false;
>, <Line: +				$scope.hasUnit = false;
>, <Line: +				$scope.hasFactor = false;
>, <Line: +				$scope.hasPercentile = false;
>, <Line: +			};
>, <Line: +			$scope.removeHorizontalAggregator = function (index) {
>, <Line: +				$scope.target.horizontalAggregators.splice(index, 1);
>, <Line: +				if (_.size($scope.target.horizontalAggregators) === 0) {
>, <Line: +					$scope.target.horizontalAggregators = null;
>, <Line: +				}
>, <Line: +				$scope.targetBlur();
>, <Line: +			};
>, <Line: +			$scope.changeHorAggregationInput = function () {
>, <Line: +				$scope.hasSamplingRate = _.contains(['avg', 'dev', 'max', 'min', 'sum', 'least_squares', 'count', 'percentile'],
>, <Line: +					$scope.target.currentHorizontalAggregatorName);
>, <Line: +				$scope.hasUnit = _.contains(['sampler', 'rate'], $scope.target.currentHorizontalAggregatorName);
>, <Line: +				$scope.hasFactor = _.contains(['div', 'scale'], $scope.target.currentHorizontalAggregatorName);
>, <Line: +				$scope.hasPercentile = 'percentile' === $scope.target.currentHorizontalAggregatorName;
>, <Line: +				$scope.validateHorizontalAggregator();
>, <Line: +			};
>, <Line: +			$scope.validateHorizontalAggregator = function () {
>, <Line: +				delete $scope.target.errors.horAggregator;
>, <Line: +				var errors = {};
>, <Line: +				$scope.isAggregatorValid = true;
>, <Line: +				if ($scope.hasSamplingRate) {
>, <Line: +					try {
>, <Line: +						$scope.datasource.convertToKairosInterval($scope.target.horAggregator.samplingRate);
>, <Line: +					} catch (err) {
>, <Line: +						errors.samplingRate = err.message;
>, <Line: +						$scope.isAggregatorValid = false;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if ($scope.hasFactor) {
>, <Line: +					if (!$scope.target.horAggregator.factor) {
>, <Line: +						errors.factor = 'You must supply a numeric value for this aggregator';
>, <Line: +						$scope.isAggregatorValid = false;
>, <Line: +					}
>, <Line: +					else if (parseInt($scope.target.horAggregator.factor) === 0 && $scope.target.currentHorizontalAggregatorName === 'div') {
>, <Line: +						errors.factor = 'Cannot divide by 0';
>, <Line: +						$scope.isAggregatorValid = false;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if ($scope.hasPercentile) {
>, <Line: +					if (!$scope.target.horAggregator.percentile ||
>, <Line: +						$scope.target.horAggregator.percentile <= 0 ||
>, <Line: +						$scope.target.horAggregator.percentile > 1) {
>, <Line: +						errors.percentile = 'Percentile must be between 0 and 1';
>, <Line: +						$scope.isAggregatorValid = false;
>, <Line: +					}
>, <Line: +				}
>, <Line: +				if (!_.isEmpty(errors)) {
>, <Line: +					$scope.target.errors.horAggregator = errors;
>, <Line: +				}
>, <Line: +			};
>, <Line: +			$scope.alert = function (message) {
>, <Line: +				alert(message);
>, <Line: +			};
>, <Line: +			//////////////////////////////
>, <Line: +			// VALIDATION
>, <Line: +			//////////////////////////////
>, <Line: +			function MetricListToObject(MetricList) {
>, <Line: +				var result = {};
>, <Line: +				var Metric;
>, <Line: +				var MetricArray = [];
>, <Line: +				var MetricCnt = 0;
>, <Line: +				for (var i = 0; i < MetricList.length; i++) {
>, <Line: +					Metric = MetricList[i];
>, <Line: +					MetricArray = Metric.split('.');
>, <Line: +					if (!result.hasOwnProperty(MetricArray[0])) {
>, <Line: +						result[MetricArray[0]] = {};
>, <Line: +					}
>, <Line: +					if (!result[MetricArray[0]].hasOwnProperty(MetricArray[1])) {
>, <Line: +						result[MetricArray[0]][MetricArray[1]] = [];
>, <Line: +					}
>, <Line: +					result[MetricArray[0]][MetricArray[1]].push(MetricArray[2]);
>, <Line: +				}
>, <Line: +				return result;
>, <Line: +			}
>, <Line: +			function validateTarget(target) {
>, <Line: +				var errs = {};
>, <Line: +				if (!target.metric) {
>, <Line: +					errs.metric = "You must supply a metric name.";
>, <Line: +				}
>, <Line: +				try {
>, <Line: +					if (target.sampling) {
>, <Line: +						$scope.datasource.convertToKairosInterval(target.sampling);
>, <Line: +					}
>, <Line: +				} catch (err) {
>, <Line: +					errs.sampling = err.message;
>, <Line: +				}
>, <Line: +				return errs;
>, <Line: +			}
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash'
>, <Line: -],
>, <Line: -function (angular, _) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.controllers');
>, <Line: -  var MetricStruct = {};
>, <Line: -  var metricList = null;
>, <Line: -  var targetLetters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O'];
>, <Line: -  module.controller('KairosDBTargetCtrl', function($scope) {
>, <Line: -    $scope.init = function() {
>, <Line: -      $scope.metric = {
>, <Line: -        list: ["Loading..."],
>, <Line: -        value: "Loading..."
>, <Line: -      };
>, <Line: -      $scope.panel.stack = false;
>, <Line: -      if (!$scope.panel.downsampling) {
>, <Line: -        $scope.panel.downsampling = 'avg';
>, <Line: -      }
>, <Line: -      if (!$scope.target.downsampling) {
>, <Line: -        $scope.target.downsampling = $scope.panel.downsampling;
>, <Line: -        $scope.target.sampling = $scope.panel.sampling;
>, <Line: -      }
>, <Line: -      $scope.targetLetters = targetLetters;
>, <Line: -      $scope.updateMetricList();
>, <Line: -      $scope.target.errors = validateTarget($scope.target);
>, <Line: -    };
>, <Line: -    $scope.targetBlur = function() {
>, <Line: -      $scope.target.metric = $scope.metric.value;
>, <Line: -      $scope.target.errors = validateTarget($scope.target);
>, <Line: -      if (!_.isEqual($scope.oldTarget, $scope.target) && _.isEmpty($scope.target.errors)) {
>, <Line: -        $scope.oldTarget = angular.copy($scope.target);
>, <Line: -        $scope.get_data();
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.panelBlur = function() {
>, <Line: -      _.each($scope.panel.targets, function(target) {
>, <Line: -        target.downsampling = $scope.panel.downsampling;
>, <Line: -        target.sampling = $scope.panel.sampling;
>, <Line: -      });
>, <Line: -      $scope.get_data();
>, <Line: -    };
>, <Line: -    $scope.duplicate = function() {
>, <Line: -      var clone = angular.copy($scope.target);
>, <Line: -      $scope.panel.targets.push(clone);
>, <Line: -    };
>, <Line: -    $scope.moveMetricQuery = function(fromIndex, toIndex) {
>, <Line: -      _.move($scope.panel.targets, fromIndex, toIndex);
>, <Line: -    };
>, <Line: -    //////////////////////////////
>, <Line: -    // SUGGESTION QUERIES
>, <Line: -    //////////////////////////////
>, <Line: -    $scope.updateMetricList = function() {
>, <Line: -      $scope.metricListLoading = true;
>, <Line: -      metricList = [];
>, <Line: -      $scope.datasource.performMetricSuggestQuery().then(function(series) {
>, <Line: -        metricList = series;
>, <Line: -        $scope.metric.list = series;
>, <Line: -        if ($scope.target.metric)
>, <Line: -          $scope.metric.value = $scope.target.metric;
>, <Line: -        else 
>, <Line: -          $scope.metric.value = "";
>, <Line: -        $scope.metricListLoading = false;
>, <Line: -        return metricList;
>, <Line: -      });
>, <Line: -    };
>, <Line: -    $scope.suggestTagKeys = function(query, callback) {
>, <Line: -      $scope.updateTimeRange();
>, <Line: -      callback($scope.datasource
>, <Line: -        .performTagSuggestQuery($scope.target.metric,$scope.rangeUnparsed, 'key',''));
>, <Line: -    };
>, <Line: -    $scope.suggestTagValues = function(query, callback) {
>, <Line: -      callback($scope.datasource
>, <Line: -        .performTagSuggestQuery($scope.target.metric,$scope.rangeUnparsed, 'value',$scope.target.currentTagKey));
>, <Line: -    };
>, <Line: -    //////////////////////////////
>, <Line: -    // FILTER by TAG
>, <Line: -    //////////////////////////////
>, <Line: -    $scope.addFilterTag = function() {
>, <Line: -      if (!$scope.addFilterTagMode) {
>, <Line: -        $scope.addFilterTagMode = true;
>, <Line: -        $scope.validateFilterTag();
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      if (!$scope.target.tags) {
>, <Line: -        $scope.target.tags = {};
>, <Line: -      }
>, <Line: -      $scope.validateFilterTag();
>, <Line: -      if (!$scope.target.errors.tags) {
>, <Line: -        if(!_.has($scope.target.tags,$scope.target.currentTagKey)) {
>, <Line: -          $scope.target.tags[$scope.target.currentTagKey] = [];
>, <Line: -        }
>, <Line: -        $scope.target.tags[$scope.target.currentTagKey].push($scope.target.currentTagValue);
>, <Line: -        $scope.target.currentTagKey = '';
>, <Line: -        $scope.target.currentTagValue = '';
>, <Line: -        $scope.targetBlur();
>, <Line: -      }
>, <Line: -      $scope.addFilterTagMode = false;
>, <Line: -    };
>, <Line: -    $scope.removeFilterTag = function(key) {
>, <Line: -      delete $scope.target.tags[key];
>, <Line: -      if(_.size($scope.target.tags)===0) {
>, <Line: -        $scope.target.tags = null;
>, <Line: -      }
>, <Line: -      $scope.targetBlur();
>, <Line: -    };
>, <Line: -    $scope.validateFilterTag = function() {
>, <Line: -      $scope.target.errors.tags = null;
>, <Line: -      if(!$scope.target.currentTagKey || !$scope.target.currentTagValue) {
>, <Line: -        $scope.target.errors.tags = "You must specify a tag name and value.";
>, <Line: -      }
>, <Line: -    };
>, <Line: -    //////////////////////////////
>, <Line: -    // GROUP BY
>, <Line: -    //////////////////////////////
>, <Line: -    $scope.addGroupBy = function() {
>, <Line: -      if (!$scope.addGroupByMode) {
>, <Line: -        $scope.addGroupByMode = true;
>, <Line: -        $scope.target.currentGroupByType = 'tag';
>, <Line: -        $scope.isTagGroupBy = true;
>, <Line: -        $scope.validateGroupBy();
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      $scope.validateGroupBy();
>, <Line: -      // nb: if error is found, means that user clicked on cross : cancels input
>, <Line: -      if (_.isEmpty($scope.target.errors.groupBy)) {
>, <Line: -        if($scope.isTagGroupBy) {
>, <Line: -          if (!$scope.target.groupByTags) {
>, <Line: -            $scope.target.groupByTags = [];
>, <Line: -          }
>, <Line: -          console.log($scope.target.groupBy.tagKey);
>, <Line: -          if (!_.contains($scope.target.groupByTags, $scope.target.groupBy.tagKey)) {
>, <Line: -            $scope.target.groupByTags.push($scope.target.groupBy.tagKey);
>, <Line: -            $scope.targetBlur();
>, <Line: -          }
>, <Line: -          $scope.target.groupBy.tagKey = '';
>, <Line: -        }
>, <Line: -        else  {
>, <Line: -          if (!$scope.target.nonTagGroupBys) {
>, <Line: -            $scope.target.nonTagGroupBys = [];
>, <Line: -          }
>, <Line: -          var groupBy = {
>, <Line: -            name: $scope.target.currentGroupByType
>, <Line: -          };
>, <Line: -          if($scope.isValueGroupBy) {groupBy.range_size = $scope.target.groupBy.valueRange;}
>, <Line: -          else if($scope.isTimeGroupBy) {
>, <Line: -            groupBy.range_size = $scope.target.groupBy.timeInterval;
>, <Line: -            groupBy.group_count = $scope.target.groupBy.groupCount;
>, <Line: -          }
>, <Line: -          $scope.target.nonTagGroupBys.push(groupBy);
>, <Line: -        }
>, <Line: -        $scope.targetBlur();
>, <Line: -      }
>, <Line: -      $scope.isTagGroupBy = false;
>, <Line: -      $scope.isValueGroupBy = false;
>, <Line: -      $scope.isTimeGroupBy = false;
>, <Line: -      $scope.addGroupByMode = false;
>, <Line: -    };
>, <Line: -    $scope.removeGroupByTag = function(index) {
>, <Line: -      $scope.target.groupByTags.splice(index, 1);
>, <Line: -      if(_.size($scope.target.groupByTags)===0) {
>, <Line: -        $scope.target.groupByTags = null;
>, <Line: -      }
>, <Line: -      $scope.targetBlur();
>, <Line: -    };
>, <Line: -    $scope.removeNonTagGroupBy = function(index) {
>, <Line: -      $scope.target.nonTagGroupBys.splice(index, 1);
>, <Line: -      if(_.size($scope.target.nonTagGroupBys)===0) {
>, <Line: -        $scope.target.nonTagGroupBys = null;
>, <Line: -      }
>, <Line: -      $scope.targetBlur();
>, <Line: -    };
>, <Line: -    $scope.changeGroupByInput = function() {
>, <Line: -      $scope.isTagGroupBy = $scope.target.currentGroupByType==='tag';
>, <Line: -      $scope.isValueGroupBy = $scope.target.currentGroupByType==='value';
>, <Line: -      $scope.isTimeGroupBy = $scope.target.currentGroupByType==='time';
>, <Line: -      $scope.validateGroupBy();
>, <Line: -    };
>, <Line: -    $scope.validateGroupBy = function() {
>, <Line: -      delete $scope.target.errors.groupBy;
>, <Line: -      var errors = {};
>, <Line: -      $scope.isGroupByValid = true;
>, <Line: -      if($scope.isTagGroupBy) {
>, <Line: -        if(!$scope.target.groupBy.tagKey) {
>, <Line: -          $scope.isGroupByValid = false;
>, <Line: -          errors.tagKey = 'You must supply a tag name';
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if($scope.isValueGroupBy) {
>, <Line: -        if(!$scope.target.groupBy.valueRange || !isInt($scope.target.groupBy.valueRange)) {
>, <Line: -          errors.valueRange = "Range must be an integer";
>, <Line: -          $scope.isGroupByValid = false;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if($scope.isTimeGroupBy) {
>, <Line: -        try {
>, <Line: -          $scope.datasource.convertToKairosInterval($scope.target.groupBy.timeInterval);
>, <Line: -        } catch(err) {
>, <Line: -          errors.timeInterval = err.message;
>, <Line: -          $scope.isGroupByValid = false;
>, <Line: -        }
>, <Line: -        if(!$scope.target.groupBy.groupCount || !isInt($scope.target.groupBy.groupCount)) {
>, <Line: -          errors.groupCount = "Group count must be an integer";
>, <Line: -          $scope.isGroupByValid = false;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if(!_.isEmpty(errors)) {
>, <Line: -        $scope.target.errors.groupBy = errors;
>, <Line: -      }
>, <Line: -    };
>, <Line: -    function isInt(n) {
>, <Line: -      return parseInt(n) % 1 === 0;
>, <Line: -    }
>, <Line: -    //////////////////////////////
>, <Line: -    // HORIZONTAL AGGREGATION
>, <Line: -    //////////////////////////////
>, <Line: -    $scope.addHorizontalAggregator = function() {
>, <Line: -      if (!$scope.addHorizontalAggregatorMode) {
>, <Line: -        $scope.addHorizontalAggregatorMode = true;
>, <Line: -        $scope.target.currentHorizontalAggregatorName = 'avg';
>, <Line: -        $scope.hasSamplingRate = true;
>, <Line: -        $scope.validateHorizontalAggregator();
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      $scope.validateHorizontalAggregator();
>, <Line: -      // nb: if error is found, means that user clicked on cross : cancels input
>, <Line: -      if(_.isEmpty($scope.target.errors.horAggregator)) {
>, <Line: -        if (!$scope.target.horizontalAggregators) {
>, <Line: -          $scope.target.horizontalAggregators = [];
>, <Line: -        }
>, <Line: -        var aggregator = {
>, <Line: -          name:$scope.target.currentHorizontalAggregatorName
>, <Line: -        };
>, <Line: -        if($scope.hasSamplingRate) {aggregator.sampling_rate = $scope.target.horAggregator.samplingRate;}
>, <Line: -        if($scope.hasUnit) {aggregator.unit = $scope.target.horAggregator.unit;}
>, <Line: -        if($scope.hasFactor) {aggregator.factor = $scope.target.horAggregator.factor;}
>, <Line: -        if($scope.hasPercentile) {aggregator.percentile = $scope.target.horAggregator.percentile;}
>, <Line: -        $scope.target.horizontalAggregators.push(aggregator);
>, <Line: -        $scope.targetBlur();
>, <Line: -      }
>, <Line: -      $scope.addHorizontalAggregatorMode = false;
>, <Line: -      $scope.hasSamplingRate = false;
>, <Line: -      $scope.hasUnit = false;
>, <Line: -      $scope.hasFactor = false;
>, <Line: -      $scope.hasPercentile = false;
>, <Line: -    };
>, <Line: -    $scope.removeHorizontalAggregator = function(index) {
>, <Line: -      $scope.target.horizontalAggregators.splice(index, 1);
>, <Line: -      if(_.size($scope.target.horizontalAggregators)===0) {
>, <Line: -        $scope.target.horizontalAggregators = null;
>, <Line: -      }
>, <Line: -      $scope.targetBlur();
>, <Line: -    };
>, <Line: -    $scope.changeHorAggregationInput = function() {
>, <Line: -      $scope.hasSamplingRate = _.contains(['avg','dev','max','min','sum','least_squares','count','percentile'],
>, <Line: -        $scope.target.currentHorizontalAggregatorName);
>, <Line: -      $scope.hasUnit = _.contains(['sampler','rate'], $scope.target.currentHorizontalAggregatorName);
>, <Line: -      $scope.hasFactor = _.contains(['div','scale'], $scope.target.currentHorizontalAggregatorName);
>, <Line: -      $scope.hasPercentile = 'percentile'===$scope.target.currentHorizontalAggregatorName;
>, <Line: -      $scope.validateHorizontalAggregator();
>, <Line: -    };
>, <Line: -    $scope.validateHorizontalAggregator = function() {
>, <Line: -      delete $scope.target.errors.horAggregator;
>, <Line: -      var errors = {};
>, <Line: -      $scope.isAggregatorValid = true;
>, <Line: -      if($scope.hasSamplingRate) {
>, <Line: -        try {
>, <Line: -          $scope.datasource.convertToKairosInterval($scope.target.horAggregator.samplingRate);
>, <Line: -        } catch(err) {
>, <Line: -          errors.samplingRate = err.message;
>, <Line: -          $scope.isAggregatorValid = false;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if($scope.hasFactor) {
>, <Line: -        if(!$scope.target.horAggregator.factor) {
>, <Line: -          errors.factor = 'You must supply a numeric value for this aggregator';
>, <Line: -          $scope.isAggregatorValid = false;
>, <Line: -        }
>, <Line: -        else if(parseInt($scope.target.horAggregator.factor)===0 && $scope.target.currentHorizontalAggregatorName==='div') {
>, <Line: -          errors.factor = 'Cannot divide by 0';
>, <Line: -          $scope.isAggregatorValid = false;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if($scope.hasPercentile) {
>, <Line: -        if(!$scope.target.horAggregator.percentile ||
>, <Line: -          $scope.target.horAggregator.percentile<=0 ||
>, <Line: -          $scope.target.horAggregator.percentile>1) {
>, <Line: -          errors.percentile = 'Percentile must be between 0 and 1';
>, <Line: -          $scope.isAggregatorValid = false;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if(!_.isEmpty(errors)) {
>, <Line: -        $scope.target.errors.horAggregator = errors;
>, <Line: -      }
>, <Line: -    };
>, <Line: -    $scope.alert = function(message) {
>, <Line: -      alert(message);
>, <Line: -    };
>, <Line: -    //////////////////////////////
>, <Line: -    // VALIDATION
>, <Line: -    //////////////////////////////
>, <Line: -    function MetricListToObject(MetricList) {
>, <Line: -      var result = {};
>, <Line: -      var Metric;
>, <Line: -      var MetricArray = [];
>, <Line: -      var MetricCnt = 0;
>, <Line: -      for (var i =0;i < MetricList.length; i++) {
>, <Line: -        Metric = MetricList[i];
>, <Line: -        MetricArray = Metric.split('.');
>, <Line: -        if(!result.hasOwnProperty(MetricArray[0])) {
>, <Line: -          result[MetricArray[0]] = {};
>, <Line: -        }
>, <Line: -        if(!result[MetricArray[0]].hasOwnProperty(MetricArray[1])) {
>, <Line: -          result[MetricArray[0]][MetricArray[1]] = [];
>, <Line: -        }
>, <Line: -        result[MetricArray[0]][MetricArray[1]].push(MetricArray[2]);
>, <Line: -      }
>, <Line: -      return result;
>, <Line: -    }
>, <Line: -    function validateTarget(target) {
>, <Line: -      var errs = {};
>, <Line: -      if (!target.metric) {
>, <Line: -        errs.metric = "You must supply a metric name.";
>, <Line: -      }
>, <Line: -      try {
>, <Line: -        if (target.sampling) {
>, <Line: -          $scope.datasource.convertToKairosInterval(target.sampling);
>, <Line: -        }
>, <Line: -      } catch(err) {
>, <Line: -        errs.sampling = err.message;
>, <Line: -      }
>, <Line: -      return errs;
>, <Line: -    }
>, <Line: -  });
>, <Line: -});
>]