[<Line: +	bindonceModule.directive('bindonce', function () {
>, <Line: +		var toBoolean = function (value) {
>, <Line: +			if (value && value.length !== 0) {
>, <Line: +			else {
>, <Line: +		if (isNaN(msie)) {
>, <Line: +			controller: ['$scope', '$element', '$attrs', '$interpolate', function ($scope, $element, $attrs, $interpolate) {
>, <Line: +				var showHideBinder = function (elm, attr, value) {
>, <Line: +				var classBinder = function (elm, value) {
>, <Line: +					if (angular.isObject(value) && !angular.isArray(value)) {
>, <Line: +						angular.forEach(value, function (value, index) {
>, <Line: +					if (value) {
>, <Line: +				var transclude = function (transcluder, scope) {
>, <Line: +					transcluder.transclude(scope, function (clone) {
>, <Line: +						angular.forEach(clone, function (node) {
>, <Line: +					addBinder: function (binder) {
>, <Line: +						if (this.ran) {
>, <Line: +					setupWatcher: function (bindonceValue) {
>, <Line: +						this.watcherRemover = $scope.$watch(bindonceValue, function (newValue) {
>, <Line: +					checkBindonce: function (value) {
>, <Line: +						if (typeof promise === 'function') {
>, <Line: +							promise(function () {
>, <Line: +						else {
>, <Line: +					removeWatcher: function () {
>, <Line: +						if (this.watcherRemover !== undefined) {
>, <Line: +					runBinders: function () {
>, <Line: +						while (this.binders.length > 0) {
>, <Line: +							switch (binder.attr) {
>, <Line: +									if (toBoolean(value)) {
>, <Line: +									if ((selectedTranscludes = switchCtrl.cases['!' + value] || switchCtrl.cases['?'])) {
>, <Line: +										angular.forEach(selectedTranscludes, function (selectedTransclude) {
>, <Line: +									ctrl.cases['!' + binder.attrs.boSwitchWhen].push({
>, <Line: +										transclude: binder.transclude,
>, <Line: +										element: binder.element
>, <Line: +									});
>, <Line: +									ctrl.cases['?'].push({
>, <Line: +										transclude: binder.transclude,
>, <Line: +										element: binder.element
>, <Line: +									});
>, <Line: +									angular.forEach(binder.attrs, function (attrValue, attrKey) {
>, <Line: +										if (attrKey.match(/^boAttr./) && binder.attrs[attrKey]) {
>, <Line: +			link: function (scope, elm, attrs, bindonceController) {
>, <Line: +				if (value !== undefined) {
>, <Line: +				else {
>, <Line: +		[
>, <Line: +			{directiveName: 'boShow', attribute: 'show'},
>, <Line: +			{directiveName: 'boHide', attribute: 'hide'},
>, <Line: +			{directiveName: 'boClass', attribute: 'class'},
>, <Line: +			{directiveName: 'boText', attribute: 'text'},
>, <Line: +			{directiveName: 'boBind', attribute: 'text'},
>, <Line: +			{directiveName: 'boHtml', attribute: 'html'},
>, <Line: +			{directiveName: 'boSrcI', attribute: 'src', interpolate: true},
>, <Line: +			{directiveName: 'boSrc', attribute: 'src'},
>, <Line: +			{directiveName: 'boHrefI', attribute: 'href', interpolate: true},
>, <Line: +			{directiveName: 'boHref', attribute: 'href'},
>, <Line: +			{directiveName: 'boAlt', attribute: 'alt'},
>, <Line: +			{directiveName: 'boTitle', attribute: 'title'},
>, <Line: +			{directiveName: 'boId', attribute: 'id'},
>, <Line: +			{directiveName: 'boStyle', attribute: 'style'},
>, <Line: +			{directiveName: 'boValue', attribute: 'value'},
>, <Line: +			{directiveName: 'boAttr', attribute: 'attr'},
>, <Line: +				directiveName: 'boIf',
>, <Line: +				transclude: 'element',
>, <Line: +				terminal: true,
>, <Line: +				priority: 1000
>, <Line: +			},
>, <Line: +			{
>, <Line: +				directiveName: 'boSwitch',
>, <Line: +				require: 'boSwitch',
>, <Line: +				controller: function () {
>, <Line: +					this.cases = {};
>, <Line: +				}
>, <Line: +			},
>, <Line: +			{
>, <Line: +				directiveName: 'boSwitchWhen',
>, <Line: +				transclude: 'element',
>, <Line: +				priority: 800,
>, <Line: +				require: '^boSwitch'
>, <Line: +			},
>, <Line: +			{
>, <Line: +				directiveName: 'boSwitchDefault',
>, <Line: +				transclude: 'element',
>, <Line: +				priority: 800,
>, <Line: +				require: '^boSwitch'
>, <Line: +			}
>, <Line: +		],
>, <Line: +		function (boDirective) {
>, <Line: +			var childPriority = 200;
>, <Line: +			return bindonceModule.directive(boDirective.directiveName, function () {
>, <Line: +				var bindonceDirective =
>, <Line: +					priority: boDirective.priority || childPriority,
>, <Line: +					transclude: boDirective.transclude || false,
>, <Line: +					terminal: boDirective.terminal || false,
>, <Line: +					require: ['^bindonce'].concat(boDirective.require || []),
>, <Line: +					controller: boDirective.controller,
>, <Line: +					compile: function (tElement, tAttrs, transclude) {
>, <Line: +						return function (scope, elm, attrs, controllers) {
>, <Line: +							var bindonceController = controllers[0];
>, <Line: +							var name = attrs.boParent;
>, <Line: +							if (name && bindonceController.group !== name) {
>, <Line: +								var element = bindonceController.element.parent();
>, <Line: +								bindonceController = undefined;
>, <Line: +								var parentValue;
>, <Line: +								while (element[0].nodeType !== 9 && element.length) {
>, <Line: +									if ((parentValue = element.data('$bindonceController'))
>, <Line: +										&& parentValue.group === name) {
>, <Line: +										bindonceController = parentValue;
>, <Line: +										break;
>, <Line: +									}
>, <Line: +									element = element.parent();
>, <Line: +								}
>, <Line: +								if (!bindonceController) {
>, <Line: +									throw new Error("No bindonce controller: " + name);
>, <Line: +							bindonceController.addBinder(
>, <Line: +								{
>, <Line: +									element: elm,
>, <Line: +									attr: boDirective.attribute || boDirective.directiveName,
>, <Line: +									attrs: attrs,
>, <Line: +									value: attrs[boDirective.directiveName],
>, <Line: +									interpolate: boDirective.interpolate,
>, <Line: +									group: name,
>, <Line: +									transclude: transclude,
>, <Line: +									controller: controllers.slice(1),
>, <Line: +									scope: scope
>, <Line: +								});
>, <Line: +						};
>, <Line: +					}
>, <Line: +				};
>, <Line: +				return bindonceDirective;
>, <Line: +			});
>, <Line: +		})
>]
[<Line: -	bindonceModule.directive('bindonce', function ()
>, <Line: -	{
>, <Line: -		var toBoolean = function (value)
>, <Line: -		{
>, <Line: -			if (value && value.length !== 0)
>, <Line: -			{
>, <Line: -			else
>, <Line: -			{
>, <Line: -		if (isNaN(msie))
>, <Line: -		{
>, <Line: -			controller: ['$scope', '$element', '$attrs', '$interpolate', function ($scope, $element, $attrs, $interpolate)
>, <Line: -			{
>, <Line: -				var showHideBinder = function (elm, attr, value)
>, <Line: -				{
>, <Line: -				var classBinder = function (elm, value)
>, <Line: -				{
>, <Line: -					if (angular.isObject(value) && !angular.isArray(value))
>, <Line: -					{
>, <Line: -						angular.forEach(value, function (value, index)
>, <Line: -						{
>, <Line: -					if (value)
>, <Line: -					{
>, <Line: -				var transclude = function (transcluder, scope)
>, <Line: -				{
>, <Line: -					transcluder.transclude(scope, function (clone)
>, <Line: -					{
>, <Line: -						angular.forEach(clone, function (node)
>, <Line: -						{
>, <Line: -					addBinder: function (binder)
>, <Line: -					{
>, <Line: -						if (this.ran)
>, <Line: -						{
>, <Line: -					setupWatcher: function (bindonceValue)
>, <Line: -					{
>, <Line: -						this.watcherRemover = $scope.$watch(bindonceValue, function (newValue)
>, <Line: -						{
>, <Line: -					checkBindonce: function (value)
>, <Line: -					{
>, <Line: -						if (typeof promise === 'function')
>, <Line: -						{
>, <Line: -							promise(function ()
>, <Line: -							{
>, <Line: -						else
>, <Line: -						{
>, <Line: -					removeWatcher: function ()
>, <Line: -					{
>, <Line: -						if (this.watcherRemover !== undefined)
>, <Line: -						{
>, <Line: -					runBinders: function ()
>, <Line: -					{
>, <Line: -						while (this.binders.length > 0)
>, <Line: -						{
>, <Line: -							switch (binder.attr)
>, <Line: -							{
>, <Line: -									if (toBoolean(value))
>, <Line: -									{
>, <Line: -									if ((selectedTranscludes = switchCtrl.cases['!' + value] || switchCtrl.cases['?']))
>, <Line: -									{
>, <Line: -										angular.forEach(selectedTranscludes, function (selectedTransclude)
>, <Line: -										{
>, <Line: -									ctrl.cases['!' + binder.attrs.boSwitchWhen].push({ transclude: binder.transclude, element: binder.element });
>, <Line: -									ctrl.cases['?'].push({ transclude: binder.transclude, element: binder.element });
>, <Line: -									angular.forEach(binder.attrs, function (attrValue, attrKey)
>, <Line: -									{
>, <Line: -										if (attrKey.match(/^boAttr./) && binder.attrs[attrKey])
>, <Line: -										{
>, <Line: -			link: function (scope, elm, attrs, bindonceController)
>, <Line: -			{
>, <Line: -				if (value !== undefined)
>, <Line: -				{
>, <Line: -				else
>, <Line: -				{
>, <Line: -	[
>, <Line: -		{ directiveName: 'boShow', attribute: 'show' },
>, <Line: -		{ directiveName: 'boHide', attribute: 'hide' },
>, <Line: -		{ directiveName: 'boClass', attribute: 'class' },
>, <Line: -		{ directiveName: 'boText', attribute: 'text' },
>, <Line: -		{ directiveName: 'boBind', attribute: 'text' },
>, <Line: -		{ directiveName: 'boHtml', attribute: 'html' },
>, <Line: -		{ directiveName: 'boSrcI', attribute: 'src', interpolate: true },
>, <Line: -		{ directiveName: 'boSrc', attribute: 'src' },
>, <Line: -		{ directiveName: 'boHrefI', attribute: 'href', interpolate: true },
>, <Line: -		{ directiveName: 'boHref', attribute: 'href' },
>, <Line: -		{ directiveName: 'boAlt', attribute: 'alt' },
>, <Line: -		{ directiveName: 'boTitle', attribute: 'title' },
>, <Line: -		{ directiveName: 'boId', attribute: 'id' },
>, <Line: -		{ directiveName: 'boStyle', attribute: 'style' },
>, <Line: -		{ directiveName: 'boValue', attribute: 'value' },
>, <Line: -		{ directiveName: 'boAttr', attribute: 'attr' },
>, <Line: -		{ directiveName: 'boIf', transclude: 'element', terminal: true, priority: 1000 },
>, <Line: -		{ directiveName: 'boSwitch', require: 'boSwitch', controller: function () { this.cases = {}; } },
>, <Line: -		{ directiveName: 'boSwitchWhen', transclude: 'element', priority: 800, require: '^boSwitch' },
>, <Line: -		{ directiveName: 'boSwitchDefault', transclude: 'element', priority: 800, require: '^boSwitch' }
>, <Line: -	],
>, <Line: -	function (boDirective)
>, <Line: -	{
>, <Line: -		var childPriority = 200;
>, <Line: -		return bindonceModule.directive(boDirective.directiveName, function ()
>, <Line: -		{
>, <Line: -			var bindonceDirective =
>, <Line: -				priority: boDirective.priority || childPriority,
>, <Line: -				transclude: boDirective.transclude || false,
>, <Line: -				terminal: boDirective.terminal || false,
>, <Line: -				require: ['^bindonce'].concat(boDirective.require || []),
>, <Line: -				controller: boDirective.controller,
>, <Line: -				compile: function (tElement, tAttrs, transclude)
>, <Line: -					return function (scope, elm, attrs, controllers)
>, <Line: -					{
>, <Line: -						var bindonceController = controllers[0];
>, <Line: -						var name = attrs.boParent;
>, <Line: -						if (name && bindonceController.group !== name)
>, <Line: -						{
>, <Line: -							var element = bindonceController.element.parent();
>, <Line: -							bindonceController = undefined;
>, <Line: -							var parentValue;
>, <Line: -							while (element[0].nodeType !== 9 && element.length)
>, <Line: -							{
>, <Line: -								if ((parentValue = element.data('$bindonceController'))
>, <Line: -									&& parentValue.group === name)
>, <Line: -								{
>, <Line: -									bindonceController = parentValue;
>, <Line: -									break;
>, <Line: -								element = element.parent();
>, <Line: -							}
>, <Line: -							if (!bindonceController)
>, <Line: -							{
>, <Line: -								throw new Error("No bindonce controller: " + name);
>, <Line: -						}
>, <Line: -						bindonceController.addBinder(
>, <Line: -						{
>, <Line: -							element: elm,
>, <Line: -							attr: boDirective.attribute || boDirective.directiveName,
>, <Line: -							attrs: attrs,
>, <Line: -							value: attrs[boDirective.directiveName],
>, <Line: -							interpolate: boDirective.interpolate,
>, <Line: -							group: name,
>, <Line: -							transclude: transclude,
>, <Line: -							controller: controllers.slice(1),
>, <Line: -							scope: scope
>, <Line: -						});
>, <Line: -					};
>, <Line: -				}
>, <Line: -			};
>, <Line: -			return bindonceDirective;
>, <Line: -		});
>, <Line: -	})
>]