[]
[<Line: -	@Test
>, <Line: -	public void test_validateCharacterSet_valid() throws ValidationException
>, <Line: -	{
>, <Line: -		Validator.validateCharacterSet("test", "ABC-123_xyz/456.789");
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void test_validateCharacterSet_invalid() throws ValidationException
>, <Line: -	{
>, <Line: -		try
>, <Line: -		{
>, <Line: -			Validator.validateCharacterSet("test", "abc:123");
>, <Line: -			fail("Expected ValidationException");
>, <Line: -		}
>, <Line: -		catch (ValidationException e)
>, <Line: -		{
>, <Line: -			assertThat(e.getMessage(), equalTo("test may contain any character except colon ':', and equals '='."));
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void test_isValidateCharacterSet_valid()
>, <Line: -	{
>, <Line: -		ValidationErrors errors = new ValidationErrors();
>, <Line: -		assertThat(Validator.isValidateCharacterSet(errors, "test", "ABC-123_xyz/456.789"), equalTo(true));
>, <Line: -		assertThat(errors.size(), equalTo(0));
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void test_isValidateCharacterSet_invalid() throws ValidationException
>, <Line: -	{
>, <Line: -		ValidationErrors errors = new ValidationErrors();
>, <Line: -		assertThat(Validator.isValidateCharacterSet(errors, "test", "ABC:123"), equalTo(false));
>, <Line: -		assertThat(errors.getErrors(), hasItem("test may contain any character except colon ':', and equals '='."));
>, <Line: -	}
>]