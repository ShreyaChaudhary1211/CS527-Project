[<Line: +		QueueProcessor queueProcessor = new FileQueueProcessor(serializer,
>, <Line: +		verify(processorHandler, times(1)).handleEvents(eq(Arrays.asList(event)), Matchers.<EventCompletionCallBack>any(), eq(false));
>, <Line: +		QueueProcessor queueProcessor = new FileQueueProcessor(serializer,
>, <Line: +		when(bigArray.append(Matchers.<byte[]>any())).thenReturn(1L);
>, <Line: +		when(bigArray.get(0L)).thenReturn(serializer.serializeEvent(event));
>, <Line: +		verify(processorHandler, times(1)).handleEvents(eq(Arrays.asList(event, event)), Matchers.<EventCompletionCallBack>any(), eq(false));
>, <Line: +		final EventBus eventBus = mock(EventBus.class);
>, <Line: +			public void handleEvents(List<DataPointEvent> events, EventCompletionCallBack eventCompletionCallBack, boolean fullBatch)
>, <Line: +				System.out.println("Handling events "+events.size());
>, <Line: +		QueueProcessor queueProcessor = new FileQueueProcessor(serializer,
>, <Line: +				bigArray, new TestExecutor(), 3, 2, -1);
>, <Line: +		when(bigArray.append(Matchers.<byte[]>any())).thenReturn(1L);
>, <Line: +		//verify(bigArray, times(1)).get(anyLong()); //Item taken from memory
>]
[<Line: -		EventBus eventBus = mock(EventBus.class);
>, <Line: -		QueueProcessor queueProcessor = new QueueProcessor(serializer,
>, <Line: -		verify(processorHandler, times(1)).handleEvents(eq(Arrays.asList(event)), Matchers.<EventCompletionCallBack>any());
>, <Line: -		EventBus eventBus = mock(EventBus.class);
>, <Line: -		QueueProcessor queueProcessor = new QueueProcessor(serializer,
>, <Line: -		verify(processorHandler, times(1)).handleEvents(eq(Arrays.asList(event, event)), Matchers.<EventCompletionCallBack>any());
>, <Line: -		EventBus eventBus = mock(EventBus.class);
>, <Line: -			public void handleEvents(List<DataPointEvent> events, EventCompletionCallBack eventCompletionCallBack)
>, <Line: -		QueueProcessor queueProcessor = new QueueProcessor(serializer,
>, <Line: -				bigArray, new TestExecutor(), 3, 1, -1);
>, <Line: -		verify(bigArray, times(1)).get(anyLong());
>]