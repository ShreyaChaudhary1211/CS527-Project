[<Line: +		'angular',
>, <Line: +		'app',
>, <Line: +		'lodash',
>, <Line: +		'kbn',
>, <Line: +		'jquery',
>, <Line: +		'jquery.flot',
>, <Line: +		'jquery.flot.time',
>, <Line: +	],
>, <Line: +	function (angular, app, _, kbn, $) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.panels.graph');
>, <Line: +		module.directive('graphLegend', function (popoverSrv) {
>, <Line: +			return {
>, <Line: +				link: function (scope, elem) {
>, <Line: +					var $container = $('<section class="graph-legend"></section>');
>, <Line: +					var firstRender = true;
>, <Line: +					var panel = scope.panel;
>, <Line: +					var data;
>, <Line: +					var seriesList;
>, <Line: +					var i;
>, <Line: +					scope.$on('render', function () {
>, <Line: +						data = scope.seriesList;
>, <Line: +						if (data) {
>, <Line: +							render();
>, <Line: +						}
>, <Line: +					});
>, <Line: +					function getSeriesIndexForElement(el) {
>, <Line: +						return el.parents('[data-series-index]').data('series-index');
>, <Line: +					}
>, <Line: +					function openColorSelector(e) {
>, <Line: +						var el = $(e.currentTarget);
>, <Line: +						var index = getSeriesIndexForElement(el);
>, <Line: +						var seriesInfo = seriesList[index];
>, <Line: +						var popoverScope = scope.$new();
>, <Line: +						popoverScope.series = seriesInfo;
>, <Line: +						popoverSrv.show({
>, <Line: +							element: $(':first-child', el),
>, <Line: +							templateUrl: 'app/panels/graph/legend.popover.html',
>, <Line: +							scope: popoverScope
>, <Line: +						});
>, <Line: +					}
>, <Line: +					function toggleSeries(e) {
>, <Line: +						var el = $(e.currentTarget);
>, <Line: +						var index = getSeriesIndexForElement(el);
>, <Line: +						var seriesInfo = seriesList[index];
>, <Line: +						scope.toggleSeries(seriesInfo, e);
>, <Line: +					}
>, <Line: +					function sortLegend(e) {
>, <Line: +						var el = $(e.currentTarget);
>, <Line: +						var stat = el.data('stat');
>, <Line: +						if (stat !== panel.legend.sort) {
>, <Line: +							panel.legend.sortDesc = null;
>, <Line: +						}
>, <Line: +						// if already sort ascending, disable sorting
>, <Line: +						if (panel.legend.sortDesc === false) {
>, <Line: +							panel.legend.sort = null;
>, <Line: +							panel.legend.sortDesc = null;
>, <Line: +							render();
>, <Line: +							return;
>, <Line: +						}
>, <Line: +						panel.legend.sortDesc = !panel.legend.sortDesc;
>, <Line: +						panel.legend.sort = stat;
>, <Line: +						render();
>, <Line: +					}
>, <Line: +					function getTableHeaderHtml(statName) {
>, <Line: +						if (!panel.legend[statName]) {
>, <Line: +							return "";
>, <Line: +						}
>, <Line: +						var html = '<th class="pointer" data-stat="' + statName + '">' + statName;
>, <Line: +						if (panel.legend.sort === statName) {
>, <Line: +							var cssClass = panel.legend.sortDesc ? 'icon-caret-down' : 'icon-caret-up';
>, <Line: +							html += ' <span class="' + cssClass + '"></span>';
>, <Line: +						}
>, <Line: +						return html + '</th>';
>, <Line: +					}
>, <Line: +					function render() {
>, <Line: +						if (firstRender) {
>, <Line: +							elem.append($container);
>, <Line: +							$container.on('click', '.graph-legend-icon', openColorSelector);
>, <Line: +							$container.on('click', '.graph-legend-alias', toggleSeries);
>, <Line: +							$container.on('click', 'th', sortLegend);
>, <Line: +							firstRender = false;
>, <Line: +						}
>, <Line: +						seriesList = data;
>, <Line: +						$container.empty();
>, <Line: +						$container.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);
>, <Line: +						if (panel.legend.alignAsTable) {
>, <Line: +							var header = '<tr>';
>, <Line: +							header += '<th colspan="2" style="text-align:left"></th>';
>, <Line: +							if (panel.legend.values) {
>, <Line: +								header += getTableHeaderHtml('min');
>, <Line: +								header += getTableHeaderHtml('max');
>, <Line: +								header += getTableHeaderHtml('avg');
>, <Line: +								header += getTableHeaderHtml('current');
>, <Line: +								header += getTableHeaderHtml('total');
>, <Line: +							}
>, <Line: +							header += '</tr>';
>, <Line: +							$container.append($(header));
>, <Line: +						}
>, <Line: +						if (panel.legend.sort) {
>, <Line: +							seriesList = _.sortBy(seriesList, function (series) {
>, <Line: +								return series.stats[panel.legend.sort];
>, <Line: +							});
>, <Line: +							if (panel.legend.sortDesc) {
>, <Line: +								seriesList = seriesList.reverse();
>, <Line: +							}
>, <Line: +						}
>, <Line: +						for (i = 0; i < seriesList.length; i++) {
>, <Line: +							var series = seriesList[i];
>, <Line: +							// ignore empty series
>, <Line: +							if (panel.legend.hideEmpty && series.allIsNull) {
>, <Line: +								continue;
>, <Line: +							}
>, <Line: +							var html = '<div class="graph-legend-series';
>, <Line: +							if (series.yaxis === 2) {
>, <Line: +								html += ' pull-right';
>, <Line: +							}
>, <Line: +							if (scope.hiddenSeries[series.alias]) {
>, <Line: +								html += ' graph-legend-series-hidden';
>, <Line: +							}
>, <Line: +							html += '" data-series-index="' + i + '">';
>, <Line: +							html += '<div class="graph-legend-icon">';
>, <Line: +							html += '<i class="icon-minus pointer" style="color:' + series.color + '"></i>';
>, <Line: +							html += '</div>';
>, <Line: +							html += '<div class="graph-legend-alias">';
>, <Line: +							html += '<a>' + series.label + '</a>';
>, <Line: +							html += '</div>';
>, <Line: +							var avg = series.formatValue(series.stats.avg);
>, <Line: +							var current = series.formatValue(series.stats.current);
>, <Line: +							var min = series.formatValue(series.stats.min);
>, <Line: +							var max = series.formatValue(series.stats.max);
>, <Line: +							var total = series.formatValue(series.stats.total);
>, <Line: +							if (panel.legend.values) {
>, <Line: +								if (panel.legend.min) {
>, <Line: +									html += '<div class="graph-legend-value min">' + min + '</div>';
>, <Line: +								}
>, <Line: +								if (panel.legend.max) {
>, <Line: +									html += '<div class="graph-legend-value max">' + max + '</div>';
>, <Line: +								}
>, <Line: +								if (panel.legend.avg) {
>, <Line: +									html += '<div class="graph-legend-value avg">' + avg + '</div>';
>, <Line: +								}
>, <Line: +								if (panel.legend.current) {
>, <Line: +									html += '<div class="graph-legend-value current">' + current + '</div>';
>, <Line: +								}
>, <Line: +								if (panel.legend.total) {
>, <Line: +									html += '<div class="graph-legend-value total">' + total + '</div>';
>, <Line: +								}
>, <Line: +							}
>, <Line: +							html += '</div>';
>, <Line: +							$container.append($(html));
>, <Line: +						}
>, <Line: +					}
>, <Line: +				}
>, <Line: +			};
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'app',
>, <Line: -  'lodash',
>, <Line: -  'kbn',
>, <Line: -  'jquery',
>, <Line: -  'jquery.flot',
>, <Line: -  'jquery.flot.time',
>, <Line: -],
>, <Line: -function (angular, app, _, kbn, $) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.panels.graph');
>, <Line: -  module.directive('graphLegend', function(popoverSrv) {
>, <Line: -    return {
>, <Line: -      link: function(scope, elem) {
>, <Line: -        var $container = $('<section class="graph-legend"></section>');
>, <Line: -        var firstRender = true;
>, <Line: -        var panel = scope.panel;
>, <Line: -        var data;
>, <Line: -        var seriesList;
>, <Line: -        var i;
>, <Line: -        scope.$on('render', function() {
>, <Line: -          data = scope.seriesList;
>, <Line: -          if (data) {
>, <Line: -            render();
>, <Line: -          }
>, <Line: -        });
>, <Line: -        function getSeriesIndexForElement(el) {
>, <Line: -          return el.parents('[data-series-index]').data('series-index');
>, <Line: -        }
>, <Line: -        function openColorSelector(e) {
>, <Line: -          var el = $(e.currentTarget);
>, <Line: -          var index = getSeriesIndexForElement(el);
>, <Line: -          var seriesInfo = seriesList[index];
>, <Line: -          var popoverScope = scope.$new();
>, <Line: -          popoverScope.series = seriesInfo;
>, <Line: -          popoverSrv.show({
>, <Line: -            element: $(':first-child', el),
>, <Line: -            templateUrl:  'app/panels/graph/legend.popover.html',
>, <Line: -            scope: popoverScope
>, <Line: -          });
>, <Line: -        }
>, <Line: -        function toggleSeries(e) {
>, <Line: -          var el = $(e.currentTarget);
>, <Line: -          var index = getSeriesIndexForElement(el);
>, <Line: -          var seriesInfo = seriesList[index];
>, <Line: -          scope.toggleSeries(seriesInfo, e);
>, <Line: -        }
>, <Line: -        function sortLegend(e) {
>, <Line: -          var el = $(e.currentTarget);
>, <Line: -          var stat = el.data('stat');
>, <Line: -          if (stat !== panel.legend.sort) { panel.legend.sortDesc = null; }
>, <Line: -          // if already sort ascending, disable sorting
>, <Line: -          if (panel.legend.sortDesc === false) {
>, <Line: -            panel.legend.sort = null;
>, <Line: -            panel.legend.sortDesc = null;
>, <Line: -            render();
>, <Line: -            return;
>, <Line: -          }
>, <Line: -          panel.legend.sortDesc = !panel.legend.sortDesc;
>, <Line: -          panel.legend.sort = stat;
>, <Line: -          render();
>, <Line: -        }
>, <Line: -        function getTableHeaderHtml(statName) {
>, <Line: -          if (!panel.legend[statName]) { return ""; }
>, <Line: -          var html = '<th class="pointer" data-stat="' + statName + '">' + statName;
>, <Line: -          if (panel.legend.sort === statName) {
>, <Line: -            var cssClass = panel.legend.sortDesc ? 'icon-caret-down' : 'icon-caret-up' ;
>, <Line: -            html += ' <span class="' + cssClass + '"></span>';
>, <Line: -          }
>, <Line: -          return html + '</th>';
>, <Line: -        }
>, <Line: -        function render() {
>, <Line: -          if (firstRender) {
>, <Line: -            elem.append($container);
>, <Line: -            $container.on('click', '.graph-legend-icon', openColorSelector);
>, <Line: -            $container.on('click', '.graph-legend-alias', toggleSeries);
>, <Line: -            $container.on('click', 'th', sortLegend);
>, <Line: -            firstRender = false;
>, <Line: -          }
>, <Line: -          seriesList = data;
>, <Line: -          $container.empty();
>, <Line: -          $container.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);
>, <Line: -          if (panel.legend.alignAsTable) {
>, <Line: -            var header = '<tr>';
>, <Line: -            header += '<th colspan="2" style="text-align:left"></th>';
>, <Line: -            if (panel.legend.values) {
>, <Line: -              header += getTableHeaderHtml('min');
>, <Line: -              header += getTableHeaderHtml('max');
>, <Line: -              header += getTableHeaderHtml('avg');
>, <Line: -              header += getTableHeaderHtml('current');
>, <Line: -              header += getTableHeaderHtml('total');
>, <Line: -            }
>, <Line: -            header += '</tr>';
>, <Line: -            $container.append($(header));
>, <Line: -          }
>, <Line: -          if (panel.legend.sort) {
>, <Line: -            seriesList = _.sortBy(seriesList, function(series) {
>, <Line: -              return series.stats[panel.legend.sort];
>, <Line: -            });
>, <Line: -            if (panel.legend.sortDesc) {
>, <Line: -              seriesList = seriesList.reverse();
>, <Line: -            }
>, <Line: -          }
>, <Line: -          for (i = 0; i < seriesList.length; i++) {
>, <Line: -            var series = seriesList[i];
>, <Line: -            // ignore empty series
>, <Line: -            if (panel.legend.hideEmpty && series.allIsNull) {
>, <Line: -              continue;
>, <Line: -            }
>, <Line: -            var html = '<div class="graph-legend-series';
>, <Line: -            if (series.yaxis === 2) { html += ' pull-right'; }
>, <Line: -            if (scope.hiddenSeries[series.alias]) { html += ' graph-legend-series-hidden'; }
>, <Line: -            html += '" data-series-index="' + i + '">';
>, <Line: -            html += '<div class="graph-legend-icon">';
>, <Line: -            html += '<i class="icon-minus pointer" style="color:' + series.color + '"></i>';
>, <Line: -            html += '</div>';
>, <Line: -            html += '<div class="graph-legend-alias">';
>, <Line: -            html += '<a>' + series.label + '</a>';
>, <Line: -            html += '</div>';
>, <Line: -            var avg = series.formatValue(series.stats.avg);
>, <Line: -            var current = series.formatValue(series.stats.current);
>, <Line: -            var min = series.formatValue(series.stats.min);
>, <Line: -            var max = series.formatValue(series.stats.max);
>, <Line: -            var total = series.formatValue(series.stats.total);
>, <Line: -            if (panel.legend.values) {
>, <Line: -              if (panel.legend.min) { html += '<div class="graph-legend-value min">' + min + '</div>'; }
>, <Line: -              if (panel.legend.max) { html += '<div class="graph-legend-value max">' + max + '</div>'; }
>, <Line: -              if (panel.legend.avg) { html += '<div class="graph-legend-value avg">' + avg + '</div>'; }
>, <Line: -              if (panel.legend.current) { html += '<div class="graph-legend-value current">' + current + '</div>'; }
>, <Line: -              if (panel.legend.total) { html += '<div class="graph-legend-value total">' + total + '</div>'; }
>, <Line: -            }
>, <Line: -            html += '</div>';
>, <Line: -            $container.append($(html));
>, <Line: -          }
>, <Line: -        }
>, <Line: -      }
>, <Line: -    };
>, <Line: -  });
>, <Line: -});
>]