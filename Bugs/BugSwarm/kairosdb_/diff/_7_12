[<Line: +import org.kairosdb.core.DataPointSet;
>, <Line: +import org.kairosdb.util.SimpleStats;
>, <Line: +import org.kairosdb.util.SimpleStatsReporter;
>, <Line: +import javax.inject.Inject;
>, <Line: +import java.util.ArrayList;
>, <Line: +	public static final String MINIMUM_BATCH_SIZE = "kairosdb.queue_processor.min_batch_size";
>, <Line: +	private final int m_minimumBatchSize;
>, <Line: +	private final SimpleStats m_batchStats = new SimpleStats();
>, <Line: +	@Inject
>, <Line: +	private SimpleStatsReporter m_simpleStatsReporter = new SimpleStatsReporter();
>, <Line: +	public QueueProcessor(Executor executor, int batchSize, int minimumBatchSize)
>, <Line: +		m_minimumBatchSize = minimumBatchSize;
>, <Line: +	protected abstract int getAvailableDataPointEvents();
>, <Line: +	protected abstract void addReportedMetrics(ArrayList<DataPointSet> metrics, long now);
>, <Line: +	public List<DataPointSet> getMetrics(long now)
>, <Line: +	{
>, <Line: +		ArrayList<DataPointSet> metrics = new ArrayList<>();
>, <Line: +		addReportedMetrics(metrics, now);
>, <Line: +		m_simpleStatsReporter.reportStats(m_batchStats.getAndClear(), now,
>, <Line: +				"kairosdb.queue.batch_stats", metrics);
>, <Line: +		return metrics;
>, <Line: +	}
>, <Line: +					if (getAvailableDataPointEvents() < m_minimumBatchSize)
>, <Line: +					{
>, <Line: +						Thread.sleep(500);
>, <Line: +					}
>, <Line: +					m_batchStats.addValue(results.size());
>, <Line: +							m_batchSize += 5;
>]
[<Line: -	public QueueProcessor(Executor executor, int batchSize)
>, <Line: -							m_batchSize ++;
>]