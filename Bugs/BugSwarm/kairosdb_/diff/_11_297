[<Line: +(function ($, window, document, undefined) {
>, <Line: +	'use strict';
>, <Line: +	// TIMEPICKER PUBLIC CLASS DEFINITION
>, <Line: +	var Timepicker = function (element, options) {
>, <Line: +		this.widget = '';
>, <Line: +		this.$element = $(element);
>, <Line: +		this.defaultTime = options.defaultTime;
>, <Line: +		this.disableFocus = options.disableFocus;
>, <Line: +		this.isOpen = options.isOpen;
>, <Line: +		this.minuteStep = options.minuteStep;
>, <Line: +		this.modalBackdrop = options.modalBackdrop;
>, <Line: +		this.secondStep = options.secondStep;
>, <Line: +		this.showInputs = options.showInputs;
>, <Line: +		this.showMeridian = options.showMeridian;
>, <Line: +		this.showSeconds = options.showSeconds;
>, <Line: +		this.template = options.template;
>, <Line: +		this.appendWidgetTo = options.appendWidgetTo;
>, <Line: +		this._init();
>, <Line: +	};
>, <Line: +	Timepicker.prototype = {
>, <Line: +		constructor: Timepicker,
>, <Line: +		_init: function () {
>, <Line: +			var self = this;
>, <Line: +			if (this.$element.parent().hasClass('input-append') || this.$element.parent().hasClass('input-prepend')) {
>, <Line: +				this.$element.parent('.input-append, .input-prepend').find('.add-on').on({
>, <Line: +					'click.timepicker': $.proxy(this.showWidget, this)
>, <Line: +				});
>, <Line: +				this.$element.on({
>, <Line: +					'focus.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: +					'click.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: +					'keydown.timepicker': $.proxy(this.elementKeydown, this),
>, <Line: +					'blur.timepicker': $.proxy(this.blurElement, this)
>, <Line: +				});
>, <Line: +			} else {
>, <Line: +				if (this.template) {
>, <Line: +					this.$element.on({
>, <Line: +						'focus.timepicker': $.proxy(this.showWidget, this),
>, <Line: +						'click.timepicker': $.proxy(this.showWidget, this),
>, <Line: +						'blur.timepicker': $.proxy(this.blurElement, this)
>, <Line: +					});
>, <Line: +				} else {
>, <Line: +					this.$element.on({
>, <Line: +						'focus.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: +						'click.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: +						'keydown.timepicker': $.proxy(this.elementKeydown, this),
>, <Line: +						'blur.timepicker': $.proxy(this.blurElement, this)
>, <Line: +					});
>, <Line: +				}
>, <Line: +			}
>, <Line: +			if (this.template !== false) {
>, <Line: +				this.$widget = $(this.getTemplate()).prependTo(this.$element.parents(this.appendWidgetTo)).on('click', $.proxy(this.widgetClick, this));
>, <Line: +			} else {
>, <Line: +				this.$widget = false;
>, <Line: +			}
>, <Line: +			if (this.showInputs && this.$widget !== false) {
>, <Line: +				this.$widget.find('input').each(function () {
>, <Line: +					$(this).on({
>, <Line: +						'click.timepicker': function () {
>, <Line: +							$(this).select();
>, <Line: +						},
>, <Line: +						'keydown.timepicker': $.proxy(self.widgetKeydown, self)
>, <Line: +					});
>, <Line: +				});
>, <Line: +			}
>, <Line: +			this.setDefaultTime(this.defaultTime);
>, <Line: +		},
>, <Line: +		blurElement: function () {
>, <Line: +			this.highlightedUnit = undefined;
>, <Line: +			this.updateFromElementVal();
>, <Line: +		},
>, <Line: +		decrementHour: function () {
>, <Line: +			if (this.showMeridian) {
>, <Line: +				if (this.hour === 1) {
>, <Line: +					this.hour = 12;
>, <Line: +				} else if (this.hour === 12) {
>, <Line: +					this.hour--;
>, <Line: +					return this.toggleMeridian();
>, <Line: +				} else if (this.hour === 0) {
>, <Line: +					this.hour = 11;
>, <Line: +					return this.toggleMeridian();
>, <Line: +				} else {
>, <Line: +					this.hour--;
>, <Line: +				}
>, <Line: +			} else {
>, <Line: +				if (this.hour === 0) {
>, <Line: +					this.hour = 23;
>, <Line: +				} else {
>, <Line: +					this.hour--;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		decrementMinute: function (step) {
>, <Line: +			var newVal;
>, <Line: +			if (step) {
>, <Line: +				newVal = this.minute - step;
>, <Line: +			} else {
>, <Line: +				newVal = this.minute - this.minuteStep;
>, <Line: +			}
>, <Line: +			if (newVal < 0) {
>, <Line: +				this.decrementHour();
>, <Line: +				this.minute = newVal + 60;
>, <Line: +			} else {
>, <Line: +				this.minute = newVal;
>, <Line: +			}
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		decrementSecond: function () {
>, <Line: +			var newVal = this.second - this.secondStep;
>, <Line: +			if (newVal < 0) {
>, <Line: +				this.decrementMinute(true);
>, <Line: +				this.second = newVal + 60;
>, <Line: +			} else {
>, <Line: +				this.second = newVal;
>, <Line: +			}
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		elementKeydown: function (e) {
>, <Line: +			switch (e.keyCode) {
>, <Line: +				case 9: //tab
>, <Line: +					this.updateFromElementVal();
>, <Line: +					switch (this.highlightedUnit) {
>, <Line: +						case 'hour':
>, <Line: +							e.preventDefault();
>, <Line: +							this.highlightNextUnit();
>, <Line: +							break;
>, <Line: +						case 'minute':
>, <Line: +							if (this.showMeridian || this.showSeconds) {
>, <Line: +								e.preventDefault();
>, <Line: +								this.highlightNextUnit();
>, <Line: +							}
>, <Line: +							break;
>, <Line: +						case 'second':
>, <Line: +							if (this.showMeridian) {
>, <Line: +								e.preventDefault();
>, <Line: +								this.highlightNextUnit();
>, <Line: +							}
>, <Line: +							break;
>, <Line: +					}
>, <Line: +					break;
>, <Line: +				case 27: // escape
>, <Line: +					this.updateFromElementVal();
>, <Line: +					break;
>, <Line: +				case 37: // left arrow
>, <Line: +					e.preventDefault();
>, <Line: +					this.highlightPrevUnit();
>, <Line: +					this.updateFromElementVal();
>, <Line: +					break;
>, <Line: +				case 38: // up arrow
>, <Line: +					e.preventDefault();
>, <Line: +					switch (this.highlightedUnit) {
>, <Line: +						case 'hour':
>, <Line: +							this.incrementHour();
>, <Line: +							this.highlightHour();
>, <Line: +							break;
>, <Line: +						case 'minute':
>, <Line: +							this.incrementMinute();
>, <Line: +							this.highlightMinute();
>, <Line: +							break;
>, <Line: +						case 'second':
>, <Line: +							this.incrementSecond();
>, <Line: +							this.highlightSecond();
>, <Line: +							break;
>, <Line: +						case 'meridian':
>, <Line: +							this.toggleMeridian();
>, <Line: +							this.highlightMeridian();
>, <Line: +							break;
>, <Line: +					}
>, <Line: +					break;
>, <Line: +				case 39: // right arrow
>, <Line: +					e.preventDefault();
>, <Line: +					this.updateFromElementVal();
>, <Line: +					this.highlightNextUnit();
>, <Line: +					break;
>, <Line: +				case 40: // down arrow
>, <Line: +					e.preventDefault();
>, <Line: +					switch (this.highlightedUnit) {
>, <Line: +						case 'hour':
>, <Line: +							this.decrementHour();
>, <Line: +							this.highlightHour();
>, <Line: +							break;
>, <Line: +						case 'minute':
>, <Line: +							this.decrementMinute();
>, <Line: +							this.highlightMinute();
>, <Line: +							break;
>, <Line: +						case 'second':
>, <Line: +							this.decrementSecond();
>, <Line: +							this.highlightSecond();
>, <Line: +							break;
>, <Line: +						case 'meridian':
>, <Line: +							this.toggleMeridian();
>, <Line: +							this.highlightMeridian();
>, <Line: +							break;
>, <Line: +					}
>, <Line: +					break;
>, <Line: +			}
>, <Line: +		},
>, <Line: +		formatTime: function (hour, minute, second, meridian) {
>, <Line: +			hour = hour < 10 ? '0' + hour : hour;
>, <Line: +			minute = minute < 10 ? '0' + minute : minute;
>, <Line: +			second = second < 10 ? '0' + second : second;
>, <Line: +			return hour + ':' + minute + (this.showSeconds ? ':' + second : '') + (this.showMeridian ? ' ' + meridian : '');
>, <Line: +		},
>, <Line: +		getCursorPosition: function () {
>, <Line: +			var input = this.$element.get(0);
>, <Line: +			if ('selectionStart' in input) {// Standard-compliant browsers
>, <Line: +				return input.selectionStart;
>, <Line: +			} else if (document.selection) {// IE fix
>, <Line: +				input.focus();
>, <Line: +				var sel = document.selection.createRange(),
>, <Line: +					selLen = document.selection.createRange().text.length;
>, <Line: +				sel.moveStart('character', -input.value.length);
>, <Line: +				return sel.text.length - selLen;
>, <Line: +			}
>, <Line: +		},
>, <Line: +		getTemplate: function () {
>, <Line: +			var template,
>, <Line: +				hourTemplate,
>, <Line: +				minuteTemplate,
>, <Line: +				secondTemplate,
>, <Line: +				meridianTemplate,
>, <Line: +				templateContent;
>, <Line: +			if (this.showInputs) {
>, <Line: +				hourTemplate = '<input type="text" name="hour" class="bootstrap-timepicker-hour" maxlength="2"/>';
>, <Line: +				minuteTemplate = '<input type="text" name="minute" class="bootstrap-timepicker-minute" maxlength="2"/>';
>, <Line: +				secondTemplate = '<input type="text" name="second" class="bootstrap-timepicker-second" maxlength="2"/>';
>, <Line: +				meridianTemplate = '<input type="text" name="meridian" class="bootstrap-timepicker-meridian" maxlength="2"/>';
>, <Line: +			} else {
>, <Line: +				hourTemplate = '<span class="bootstrap-timepicker-hour"></span>';
>, <Line: +				minuteTemplate = '<span class="bootstrap-timepicker-minute"></span>';
>, <Line: +				secondTemplate = '<span class="bootstrap-timepicker-second"></span>';
>, <Line: +				meridianTemplate = '<span class="bootstrap-timepicker-meridian"></span>';
>, <Line: +			}
>, <Line: +			templateContent = '<table>' +
>, <Line: +				'<tr>' +
>, <Line: +				'<td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td>' +
>, <Line: +				'<td class="separator">&nbsp;</td>' +
>, <Line: +				'<td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>' +
>, <Line: +				(this.showSeconds ?
>, <Line: +				'<td class="separator">&nbsp;</td>' +
>, <Line: +				'<td><a href="#" data-action="incrementSecond"><i class="icon-chevron-up"></i></a></td>'
>, <Line: +					: '') +
>, <Line: +				(this.showMeridian ?
>, <Line: +				'<td class="separator">&nbsp;</td>' +
>, <Line: +				'<td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>'
>, <Line: +					: '') +
>, <Line: +				'</tr>' +
>, <Line: +				'<tr>' +
>, <Line: +				'<td>' + hourTemplate + '</td> ' +
>, <Line: +				'<td class="separator">:</td>' +
>, <Line: +				'<td>' + minuteTemplate + '</td> ' +
>, <Line: +				(this.showSeconds ?
>, <Line: +				'<td class="separator">:</td>' +
>, <Line: +				'<td>' + secondTemplate + '</td>'
>, <Line: +					: '') +
>, <Line: +				(this.showMeridian ?
>, <Line: +				'<td class="separator">&nbsp;</td>' +
>, <Line: +				'<td>' + meridianTemplate + '</td>'
>, <Line: +					: '') +
>, <Line: +				'</tr>' +
>, <Line: +				'<tr>' +
>, <Line: +				'<td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td>' +
>, <Line: +				'<td class="separator"></td>' +
>, <Line: +				'<td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>' +
>, <Line: +				(this.showSeconds ?
>, <Line: +				'<td class="separator">&nbsp;</td>' +
>, <Line: +				'<td><a href="#" data-action="decrementSecond"><i class="icon-chevron-down"></i></a></td>'
>, <Line: +					: '') +
>, <Line: +				(this.showMeridian ?
>, <Line: +				'<td class="separator">&nbsp;</td>' +
>, <Line: +				'<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>'
>, <Line: +					: '') +
>, <Line: +				'</tr>' +
>, <Line: +				'</table>';
>, <Line: +			switch (this.template) {
>, <Line: +				case 'modal':
>, <Line: +					template = '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="' + (this.modalBackdrop ? 'true' : 'false') + '">' +
>, <Line: +						'<div class="modal-header">' +
>, <Line: +						'<a href="#" class="close" data-dismiss="modal">×</a>' +
>, <Line: +						'<h3>Pick a Time</h3>' +
>, <Line: +						'</div>' +
>, <Line: +						'<div class="modal-content">' +
>, <Line: +						templateContent +
>, <Line: +						'</div>' +
>, <Line: +						'<div class="modal-footer">' +
>, <Line: +						'<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>' +
>, <Line: +						'</div>' +
>, <Line: +						'</div>';
>, <Line: +					break;
>, <Line: +				case 'dropdown':
>, <Line: +					template = '<div class="bootstrap-timepicker-widget dropdown-menu">' + templateContent + '</div>';
>, <Line: +					break;
>, <Line: +			}
>, <Line: +			return template;
>, <Line: +		},
>, <Line: +		getTime: function () {
>, <Line: +			return this.formatTime(this.hour, this.minute, this.second, this.meridian);
>, <Line: +		},
>, <Line: +		hideWidget: function () {
>, <Line: +			if (this.isOpen === false) {
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			if (this.showInputs) {
>, <Line: +				this.updateFromWidgetInputs();
>, <Line: +			}
>, <Line: +			this.$element.trigger({
>, <Line: +				'type': 'hide.timepicker',
>, <Line: +				'time': {
>, <Line: +					'value': this.getTime(),
>, <Line: +					'hours': this.hour,
>, <Line: +					'minutes': this.minute,
>, <Line: +					'seconds': this.second,
>, <Line: +					'meridian': this.meridian
>, <Line: +				}
>, <Line: +			});
>, <Line: +			if (this.template === 'modal') {
>, <Line: +				this.$widget.modal('hide');
>, <Line: +			} else {
>, <Line: +				this.$widget.removeClass('open');
>, <Line: +			}
>, <Line: +			$(document).off('mousedown.timepicker');
>, <Line: +			this.isOpen = false;
>, <Line: +		},
>, <Line: +		highlightUnit: function () {
>, <Line: +			this.position = this.getCursorPosition();
>, <Line: +			if (this.position >= 0 && this.position <= 2) {
>, <Line: +				this.highlightHour();
>, <Line: +			} else if (this.position >= 3 && this.position <= 5) {
>, <Line: +				this.highlightMinute();
>, <Line: +			} else if (this.position >= 6 && this.position <= 8) {
>, <Line: +				if (this.showSeconds) {
>, <Line: +					this.highlightSecond();
>, <Line: +				} else {
>, <Line: +					this.highlightMeridian();
>, <Line: +				}
>, <Line: +			} else if (this.position >= 9 && this.position <= 11) {
>, <Line: +				this.highlightMeridian();
>, <Line: +			}
>, <Line: +		},
>, <Line: +		highlightNextUnit: function () {
>, <Line: +			switch (this.highlightedUnit) {
>, <Line: +				case 'hour':
>, <Line: +					this.highlightMinute();
>, <Line: +					break;
>, <Line: +				case 'minute':
>, <Line: +					if (this.showSeconds) {
>, <Line: +						this.highlightSecond();
>, <Line: +					} else if (this.showMeridian) {
>, <Line: +						this.highlightMeridian();
>, <Line: +					} else {
>, <Line: +						this.highlightHour();
>, <Line: +					}
>, <Line: +					break;
>, <Line: +				case 'second':
>, <Line: +					if (this.showMeridian) {
>, <Line: +						this.highlightMeridian();
>, <Line: +					} else {
>, <Line: +						this.highlightHour();
>, <Line: +					}
>, <Line: +					break;
>, <Line: +				case 'meridian':
>, <Line: +					this.highlightHour();
>, <Line: +					break;
>, <Line: +			}
>, <Line: +		},
>, <Line: +		highlightPrevUnit: function () {
>, <Line: +			switch (this.highlightedUnit) {
>, <Line: +				case 'hour':
>, <Line: +					this.highlightMeridian();
>, <Line: +					break;
>, <Line: +				case 'minute':
>, <Line: +					this.highlightHour();
>, <Line: +					break;
>, <Line: +				case 'second':
>, <Line: +					this.highlightMinute();
>, <Line: +					break;
>, <Line: +				case 'meridian':
>, <Line: +					if (this.showSeconds) {
>, <Line: +						this.highlightSecond();
>, <Line: +					} else {
>, <Line: +						this.highlightMinute();
>, <Line: +					}
>, <Line: +					break;
>, <Line: +			}
>, <Line: +		},
>, <Line: +		highlightHour: function () {
>, <Line: +			var $element = this.$element.get(0);
>, <Line: +			this.highlightedUnit = 'hour';
>, <Line: +			if ($element.setSelectionRange) {
>, <Line: +				setTimeout(function () {
>, <Line: +					$element.setSelectionRange(0, 2);
>, <Line: +				}, 0);
>, <Line: +			}
>, <Line: +		},
>, <Line: +		highlightMinute: function () {
>, <Line: +			var $element = this.$element.get(0);
>, <Line: +			this.highlightedUnit = 'minute';
>, <Line: +			if ($element.setSelectionRange) {
>, <Line: +				setTimeout(function () {
>, <Line: +					$element.setSelectionRange(3, 5);
>, <Line: +				}, 0);
>, <Line: +			}
>, <Line: +		},
>, <Line: +		highlightSecond: function () {
>, <Line: +			var $element = this.$element.get(0);
>, <Line: +			this.highlightedUnit = 'second';
>, <Line: +			if ($element.setSelectionRange) {
>, <Line: +				setTimeout(function () {
>, <Line: +					$element.setSelectionRange(6, 8);
>, <Line: +				}, 0);
>, <Line: +			}
>, <Line: +		},
>, <Line: +		highlightMeridian: function () {
>, <Line: +			var $element = this.$element.get(0);
>, <Line: +			this.highlightedUnit = 'meridian';
>, <Line: +			if ($element.setSelectionRange) {
>, <Line: +				if (this.showSeconds) {
>, <Line: +					setTimeout(function () {
>, <Line: +						$element.setSelectionRange(9, 11);
>, <Line: +					}, 0);
>, <Line: +				} else {
>, <Line: +					setTimeout(function () {
>, <Line: +						$element.setSelectionRange(6, 8);
>, <Line: +					}, 0);
>, <Line: +				}
>, <Line: +			}
>, <Line: +		},
>, <Line: +		incrementHour: function () {
>, <Line: +			if (this.showMeridian) {
>, <Line: +				if (this.hour === 11) {
>, <Line: +					this.hour++;
>, <Line: +					return this.toggleMeridian();
>, <Line: +				} else if (this.hour === 12) {
>, <Line: +					this.hour = 0;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			if (this.hour === 23) {
>, <Line: +				this.hour = 0;
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			this.hour++;
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		incrementMinute: function (step) {
>, <Line: +			var newVal;
>, <Line: +			if (step) {
>, <Line: +				newVal = this.minute + step;
>, <Line: +			} else {
>, <Line: +				newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep);
>, <Line: +			}
>, <Line: +			if (newVal > 59) {
>, <Line: +				this.incrementHour();
>, <Line: +				this.minute = newVal - 60;
>, <Line: +			} else {
>, <Line: +				this.minute = newVal;
>, <Line: +			}
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		incrementSecond: function () {
>, <Line: +			var newVal = this.second + this.secondStep - (this.second % this.secondStep);
>, <Line: +			if (newVal > 59) {
>, <Line: +				this.incrementMinute(true);
>, <Line: +				this.second = newVal - 60;
>, <Line: +			} else {
>, <Line: +				this.second = newVal;
>, <Line: +			}
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		remove: function () {
>, <Line: +			$('document').off('.timepicker');
>, <Line: +			if (this.$widget) {
>, <Line: +				this.$widget.remove();
>, <Line: +			}
>, <Line: +			delete this.$element.data().timepicker;
>, <Line: +		},
>, <Line: +		setDefaultTime: function (defaultTime) {
>, <Line: +			if (!this.$element.val()) {
>, <Line: +				if (defaultTime === 'current') {
>, <Line: +					var dTime = new Date(),
>, <Line: +						hours = dTime.getHours(),
>, <Line: +						minutes = Math.floor(dTime.getMinutes() / this.minuteStep) * this.minuteStep,
>, <Line: +						seconds = Math.floor(dTime.getSeconds() / this.secondStep) * this.secondStep,
>, <Line: +						meridian = 'AM';
>, <Line: +					if (this.showMeridian) {
>, <Line: +						if (hours === 0) {
>, <Line: +							hours = 12;
>, <Line: +						} else if (hours >= 12) {
>, <Line: +							if (hours > 12) {
>, <Line: +								hours = hours - 12;
>, <Line: +							}
>, <Line: +							meridian = 'PM';
>, <Line: +						} else {
>, <Line: +							meridian = 'AM';
>, <Line: +						}
>, <Line: +					}
>, <Line: +					this.hour = hours;
>, <Line: +					this.minute = minutes;
>, <Line: +					this.second = seconds;
>, <Line: +					this.meridian = meridian;
>, <Line: +					this.update();
>, <Line: +				} else if (defaultTime === false) {
>, <Line: +					this.hour = 0;
>, <Line: +					this.minute = 0;
>, <Line: +					this.second = 0;
>, <Line: +					this.meridian = 'AM';
>, <Line: +				} else {
>, <Line: +					this.setTime(defaultTime);
>, <Line: +				}
>, <Line: +			} else {
>, <Line: +				this.updateFromElementVal();
>, <Line: +			}
>, <Line: +		},
>, <Line: +		setTime: function (time) {
>, <Line: +			var arr,
>, <Line: +				timeArray;
>, <Line: +			if (this.showMeridian) {
>, <Line: +				arr = time.split(' ');
>, <Line: +				timeArray = arr[0].split(':');
>, <Line: +				this.meridian = arr[1];
>, <Line: +			} else {
>, <Line: +				timeArray = time.split(':');
>, <Line: +			}
>, <Line: +			this.hour = parseInt(timeArray[0], 10);
>, <Line: +			this.minute = parseInt(timeArray[1], 10);
>, <Line: +			this.second = parseInt(timeArray[2], 10);
>, <Line: +			if (isNaN(this.hour)) {
>, <Line: +				this.hour = 0;
>, <Line: +			}
>, <Line: +			if (isNaN(this.minute)) {
>, <Line: +				this.minute = 0;
>, <Line: +			}
>, <Line: +			if (this.showMeridian) {
>, <Line: +				if (this.hour > 12) {
>, <Line: +					this.hour = 12;
>, <Line: +				} else if (this.hour < 1) {
>, <Line: +					this.hour = 12;
>, <Line: +				}
>, <Line: +				if (this.meridian === 'am' || this.meridian === 'a') {
>, <Line: +					this.meridian = 'AM';
>, <Line: +				} else if (this.meridian === 'pm' || this.meridian === 'p') {
>, <Line: +					this.meridian = 'PM';
>, <Line: +				}
>, <Line: +				if (this.meridian !== 'AM' && this.meridian !== 'PM') {
>, <Line: +					this.meridian = 'AM';
>, <Line: +				}
>, <Line: +			} else {
>, <Line: +				if (this.hour >= 24) {
>, <Line: +					this.hour = 23;
>, <Line: +				} else if (this.hour < 0) {
>, <Line: +					this.hour = 0;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			if (this.minute < 0) {
>, <Line: +				this.minute = 0;
>, <Line: +			} else if (this.minute >= 60) {
>, <Line: +				this.minute = 59;
>, <Line: +			}
>, <Line: +			if (this.showSeconds) {
>, <Line: +				if (isNaN(this.second)) {
>, <Line: +					this.second = 0;
>, <Line: +				} else if (this.second < 0) {
>, <Line: +					this.second = 0;
>, <Line: +				} else if (this.second >= 60) {
>, <Line: +					this.second = 59;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		showWidget: function () {
>, <Line: +			if (this.isOpen) {
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			if (this.$element.is(':disabled')) {
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			var self = this;
>, <Line: +			$(document).on('mousedown.timepicker', function (e) {
>, <Line: +				// Clicked outside the timepicker, hide it
>, <Line: +				if ($(e.target).closest('.bootstrap-timepicker-widget').length === 0) {
>, <Line: +					self.hideWidget();
>, <Line: +				}
>, <Line: +			});
>, <Line: +			this.$element.trigger({
>, <Line: +				'type': 'show.timepicker',
>, <Line: +				'time': {
>, <Line: +					'value': this.getTime(),
>, <Line: +					'hours': this.hour,
>, <Line: +					'minutes': this.minute,
>, <Line: +					'seconds': this.second,
>, <Line: +					'meridian': this.meridian
>, <Line: +				}
>, <Line: +			});
>, <Line: +			if (this.disableFocus) {
>, <Line: +				this.$element.blur();
>, <Line: +			}
>, <Line: +			this.updateFromElementVal();
>, <Line: +			if (this.template === 'modal') {
>, <Line: +				this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));
>, <Line: +			} else {
>, <Line: +				if (this.isOpen === false) {
>, <Line: +					this.$widget.addClass('open');
>, <Line: +				}
>, <Line: +			}
>, <Line: +			this.isOpen = true;
>, <Line: +		},
>, <Line: +		toggleMeridian: function () {
>, <Line: +			this.meridian = this.meridian === 'AM' ? 'PM' : 'AM';
>, <Line: +			this.update();
>, <Line: +		},
>, <Line: +		update: function () {
>, <Line: +			this.$element.trigger({
>, <Line: +				'type': 'changeTime.timepicker',
>, <Line: +				'time': {
>, <Line: +					'value': this.getTime(),
>, <Line: +					'hours': this.hour,
>, <Line: +					'minutes': this.minute,
>, <Line: +					'seconds': this.second,
>, <Line: +					'meridian': this.meridian
>, <Line: +				}
>, <Line: +			});
>, <Line: +			this.updateElement();
>, <Line: +			this.updateWidget();
>, <Line: +		},
>, <Line: +		updateElement: function () {
>, <Line: +			this.$element.val(this.getTime()).change();
>, <Line: +		},
>, <Line: +		updateFromElementVal: function () {
>, <Line: +			var val = this.$element.val();
>, <Line: +			if (val) {
>, <Line: +				this.setTime(val);
>, <Line: +			}
>, <Line: +		},
>, <Line: +		updateWidget: function () {
>, <Line: +			if (this.$widget === false) {
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			var hour = this.hour < 10 ? '0' + this.hour : this.hour,
>, <Line: +				minute = this.minute < 10 ? '0' + this.minute : this.minute,
>, <Line: +				second = this.second < 10 ? '0' + this.second : this.second;
>, <Line: +			if (this.showInputs) {
>, <Line: +				this.$widget.find('input.bootstrap-timepicker-hour').val(hour);
>, <Line: +				this.$widget.find('input.bootstrap-timepicker-minute').val(minute);
>, <Line: +				if (this.showSeconds) {
>, <Line: +					this.$widget.find('input.bootstrap-timepicker-second').val(second);
>, <Line: +				}
>, <Line: +				if (this.showMeridian) {
>, <Line: +					this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian);
>, <Line: +				}
>, <Line: +			} else {
>, <Line: +				this.$widget.find('span.bootstrap-timepicker-hour').text(hour);
>, <Line: +				this.$widget.find('span.bootstrap-timepicker-minute').text(minute);
>, <Line: +				if (this.showSeconds) {
>, <Line: +					this.$widget.find('span.bootstrap-timepicker-second').text(second);
>, <Line: +				}
>, <Line: +				if (this.showMeridian) {
>, <Line: +					this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian);
>, <Line: +				}
>, <Line: +			}
>, <Line: +		},
>, <Line: +		updateFromWidgetInputs: function () {
>, <Line: +			if (this.$widget === false) {
>, <Line: +				return;
>, <Line: +			}
>, <Line: +			var time = $('input.bootstrap-timepicker-hour', this.$widget).val() + ':' +
>, <Line: +				$('input.bootstrap-timepicker-minute', this.$widget).val() +
>, <Line: +				(this.showSeconds ? ':' + $('input.bootstrap-timepicker-second', this.$widget).val() : '') +
>, <Line: +				(this.showMeridian ? ' ' + $('input.bootstrap-timepicker-meridian', this.$widget).val() : '');
>, <Line: +			this.setTime(time);
>, <Line: +		},
>, <Line: +		widgetClick: function (e) {
>, <Line: +			e.stopPropagation();
>, <Line: +			e.preventDefault();
>, <Line: +			var action = $(e.target).closest('a').data('action');
>, <Line: +			if (action) {
>, <Line: +				this[action]();
>, <Line: +			}
>, <Line: +		},
>, <Line: +		widgetKeydown: function (e) {
>, <Line: +			var $input = $(e.target).closest('input'),
>, <Line: +				name = $input.attr('name');
>, <Line: +			switch (e.keyCode) {
>, <Line: +				case 9: //tab
>, <Line: +					if (this.showMeridian) {
>, <Line: +						if (name === 'meridian') {
>, <Line: +							return this.hideWidget();
>, <Line: +						}
>, <Line: +					} else {
>, <Line: +						if (this.showSeconds) {
>, <Line: +							if (name === 'second') {
>, <Line: +								return this.hideWidget();
>, <Line: +							}
>, <Line: +						} else {
>, <Line: +							if (name === 'minute') {
>, <Line: +								return this.hideWidget();
>, <Line: +							}
>, <Line: +						}
>, <Line: +					}
>, <Line: +					this.updateFromWidgetInputs();
>, <Line: +					break;
>, <Line: +				case 27: // escape
>, <Line: +					this.hideWidget();
>, <Line: +					break;
>, <Line: +				case 38: // up arrow
>, <Line: +					e.preventDefault();
>, <Line: +					switch (name) {
>, <Line: +						case 'hour':
>, <Line: +							this.incrementHour();
>, <Line: +							break;
>, <Line: +						case 'minute':
>, <Line: +							this.incrementMinute();
>, <Line: +							break;
>, <Line: +						case 'second':
>, <Line: +							this.incrementSecond();
>, <Line: +							break;
>, <Line: +						case 'meridian':
>, <Line: +							this.toggleMeridian();
>, <Line: +							break;
>, <Line: +					}
>, <Line: +					break;
>, <Line: +				case 40: // down arrow
>, <Line: +					e.preventDefault();
>, <Line: +					switch (name) {
>, <Line: +						case 'hour':
>, <Line: +							this.decrementHour();
>, <Line: +							break;
>, <Line: +						case 'minute':
>, <Line: +							this.decrementMinute();
>, <Line: +							break;
>, <Line: +						case 'second':
>, <Line: +							this.decrementSecond();
>, <Line: +							break;
>, <Line: +						case 'meridian':
>, <Line: +							this.toggleMeridian();
>, <Line: +							break;
>, <Line: +					}
>, <Line: +					break;
>, <Line: +			}
>, <Line: +		}
>, <Line: +	};
>, <Line: +	//TIMEPICKER PLUGIN DEFINITION
>, <Line: +	$.fn.timepicker = function (option) {
>, <Line: +		var args = Array.apply(null, arguments);
>, <Line: +		args.shift();
>, <Line: +		return this.each(function () {
>, <Line: +			var $this = $(this),
>, <Line: +				data = $this.data('timepicker'),
>, <Line: +				options = typeof option === 'object' && option;
>, <Line: +			if (!data) {
>, <Line: +				$this.data('timepicker', (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data()))));
>, <Line: +			}
>, <Line: +			if (typeof option === 'string') {
>, <Line: +				data[option].apply(data, args);
>, <Line: +			}
>, <Line: +		});
>, <Line: +	};
>, <Line: +	$.fn.timepicker.defaults = {
>, <Line: +		defaultTime: 'current',
>, <Line: +		disableFocus: false,
>, <Line: +		isOpen: false,
>, <Line: +		minuteStep: 15,
>, <Line: +		modalBackdrop: false,
>, <Line: +		secondStep: 15,
>, <Line: +		showSeconds: false,
>, <Line: +		showInputs: true,
>, <Line: +		showMeridian: true,
>, <Line: +		template: 'dropdown',
>, <Line: +		appendWidgetTo: '.bootstrap-timepicker'
>, <Line: +	};
>, <Line: +	$.fn.timepicker.Constructor = Timepicker;
>]
[<Line: -(function($, window, document, undefined) {
>, <Line: -  'use strict';
>, <Line: -  // TIMEPICKER PUBLIC CLASS DEFINITION
>, <Line: -  var Timepicker = function(element, options) {
>, <Line: -    this.widget = '';
>, <Line: -    this.$element = $(element);
>, <Line: -    this.defaultTime = options.defaultTime;
>, <Line: -    this.disableFocus = options.disableFocus;
>, <Line: -    this.isOpen = options.isOpen;
>, <Line: -    this.minuteStep = options.minuteStep;
>, <Line: -    this.modalBackdrop = options.modalBackdrop;
>, <Line: -    this.secondStep = options.secondStep;
>, <Line: -    this.showInputs = options.showInputs;
>, <Line: -    this.showMeridian = options.showMeridian;
>, <Line: -    this.showSeconds = options.showSeconds;
>, <Line: -    this.template = options.template;
>, <Line: -    this.appendWidgetTo = options.appendWidgetTo;
>, <Line: -    this._init();
>, <Line: -  };
>, <Line: -  Timepicker.prototype = {
>, <Line: -    constructor: Timepicker,
>, <Line: -    _init: function() {
>, <Line: -      var self = this;
>, <Line: -      if (this.$element.parent().hasClass('input-append') || this.$element.parent().hasClass('input-prepend')) {
>, <Line: -        this.$element.parent('.input-append, .input-prepend').find('.add-on').on({
>, <Line: -          'click.timepicker': $.proxy(this.showWidget, this)
>, <Line: -        });
>, <Line: -        this.$element.on({
>, <Line: -          'focus.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: -          'click.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: -          'keydown.timepicker': $.proxy(this.elementKeydown, this),
>, <Line: -          'blur.timepicker': $.proxy(this.blurElement, this)
>, <Line: -        });
>, <Line: -      } else {
>, <Line: -        if (this.template) {
>, <Line: -          this.$element.on({
>, <Line: -            'focus.timepicker': $.proxy(this.showWidget, this),
>, <Line: -            'click.timepicker': $.proxy(this.showWidget, this),
>, <Line: -            'blur.timepicker': $.proxy(this.blurElement, this)
>, <Line: -          });
>, <Line: -        } else {
>, <Line: -          this.$element.on({
>, <Line: -            'focus.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: -            'click.timepicker': $.proxy(this.highlightUnit, this),
>, <Line: -            'keydown.timepicker': $.proxy(this.elementKeydown, this),
>, <Line: -            'blur.timepicker': $.proxy(this.blurElement, this)
>, <Line: -          });
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if (this.template !== false) {
>, <Line: -        this.$widget = $(this.getTemplate()).prependTo(this.$element.parents(this.appendWidgetTo)).on('click', $.proxy(this.widgetClick, this));
>, <Line: -      } else {
>, <Line: -        this.$widget = false;
>, <Line: -      }
>, <Line: -      if (this.showInputs && this.$widget !== false) {
>, <Line: -        this.$widget.find('input').each(function() {
>, <Line: -          $(this).on({
>, <Line: -            'click.timepicker': function() { $(this).select(); },
>, <Line: -            'keydown.timepicker': $.proxy(self.widgetKeydown, self)
>, <Line: -          });
>, <Line: -        });
>, <Line: -      }
>, <Line: -      this.setDefaultTime(this.defaultTime);
>, <Line: -    },
>, <Line: -    blurElement: function() {
>, <Line: -      this.highlightedUnit = undefined;
>, <Line: -      this.updateFromElementVal();
>, <Line: -    },
>, <Line: -    decrementHour: function() {
>, <Line: -      if (this.showMeridian) {
>, <Line: -        if (this.hour === 1) {
>, <Line: -          this.hour = 12;
>, <Line: -        } else if (this.hour === 12) {
>, <Line: -          this.hour--;
>, <Line: -          return this.toggleMeridian();
>, <Line: -        } else if (this.hour === 0) {
>, <Line: -          this.hour = 11;
>, <Line: -          return this.toggleMeridian();
>, <Line: -        } else {
>, <Line: -          this.hour--;
>, <Line: -        }
>, <Line: -      } else {
>, <Line: -        if (this.hour === 0) {
>, <Line: -          this.hour = 23;
>, <Line: -        } else {
>, <Line: -          this.hour--;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    decrementMinute: function(step) {
>, <Line: -      var newVal;
>, <Line: -      if (step) {
>, <Line: -        newVal = this.minute - step;
>, <Line: -      } else {
>, <Line: -        newVal = this.minute - this.minuteStep;
>, <Line: -      }
>, <Line: -      if (newVal < 0) {
>, <Line: -        this.decrementHour();
>, <Line: -        this.minute = newVal + 60;
>, <Line: -      } else {
>, <Line: -        this.minute = newVal;
>, <Line: -      }
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    decrementSecond: function() {
>, <Line: -      var newVal = this.second - this.secondStep;
>, <Line: -      if (newVal < 0) {
>, <Line: -        this.decrementMinute(true);
>, <Line: -        this.second = newVal + 60;
>, <Line: -      } else {
>, <Line: -        this.second = newVal;
>, <Line: -      }
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    elementKeydown: function(e) {
>, <Line: -      switch (e.keyCode) {
>, <Line: -      case 9: //tab
>, <Line: -        this.updateFromElementVal();
>, <Line: -        switch (this.highlightedUnit) {
>, <Line: -        case 'hour':
>, <Line: -          e.preventDefault();
>, <Line: -          this.highlightNextUnit();
>, <Line: -          break;
>, <Line: -        case 'minute':
>, <Line: -          if (this.showMeridian || this.showSeconds) {
>, <Line: -            e.preventDefault();
>, <Line: -            this.highlightNextUnit();
>, <Line: -          }
>, <Line: -          break;
>, <Line: -        case 'second':
>, <Line: -          if (this.showMeridian) {
>, <Line: -            e.preventDefault();
>, <Line: -            this.highlightNextUnit();
>, <Line: -          }
>, <Line: -          break;
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      case 27: // escape
>, <Line: -        this.updateFromElementVal();
>, <Line: -        break;
>, <Line: -      case 37: // left arrow
>, <Line: -        e.preventDefault();
>, <Line: -        this.highlightPrevUnit();
>, <Line: -        this.updateFromElementVal();
>, <Line: -        break;
>, <Line: -      case 38: // up arrow
>, <Line: -        e.preventDefault();
>, <Line: -        switch (this.highlightedUnit) {
>, <Line: -        case 'hour':
>, <Line: -          this.incrementHour();
>, <Line: -          this.highlightHour();
>, <Line: -          break;
>, <Line: -        case 'minute':
>, <Line: -          this.incrementMinute();
>, <Line: -          this.highlightMinute();
>, <Line: -          break;
>, <Line: -        case 'second':
>, <Line: -          this.incrementSecond();
>, <Line: -          this.highlightSecond();
>, <Line: -          break;
>, <Line: -        case 'meridian':
>, <Line: -          this.toggleMeridian();
>, <Line: -          this.highlightMeridian();
>, <Line: -          break;
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      case 39: // right arrow
>, <Line: -        e.preventDefault();
>, <Line: -        this.updateFromElementVal();
>, <Line: -        this.highlightNextUnit();
>, <Line: -        break;
>, <Line: -      case 40: // down arrow
>, <Line: -        e.preventDefault();
>, <Line: -        switch (this.highlightedUnit) {
>, <Line: -        case 'hour':
>, <Line: -          this.decrementHour();
>, <Line: -          this.highlightHour();
>, <Line: -          break;
>, <Line: -        case 'minute':
>, <Line: -          this.decrementMinute();
>, <Line: -          this.highlightMinute();
>, <Line: -          break;
>, <Line: -        case 'second':
>, <Line: -          this.decrementSecond();
>, <Line: -          this.highlightSecond();
>, <Line: -          break;
>, <Line: -        case 'meridian':
>, <Line: -          this.toggleMeridian();
>, <Line: -          this.highlightMeridian();
>, <Line: -          break;
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      }
>, <Line: -    },
>, <Line: -    formatTime: function(hour, minute, second, meridian) {
>, <Line: -      hour = hour < 10 ? '0' + hour : hour;
>, <Line: -      minute = minute < 10 ? '0' + minute : minute;
>, <Line: -      second = second < 10 ? '0' + second : second;
>, <Line: -      return hour + ':' + minute + (this.showSeconds ? ':' + second : '') + (this.showMeridian ? ' ' + meridian : '');
>, <Line: -    },
>, <Line: -    getCursorPosition: function() {
>, <Line: -      var input = this.$element.get(0);
>, <Line: -      if ('selectionStart' in input) {// Standard-compliant browsers
>, <Line: -        return input.selectionStart;
>, <Line: -      } else if (document.selection) {// IE fix
>, <Line: -        input.focus();
>, <Line: -        var sel = document.selection.createRange(),
>, <Line: -          selLen = document.selection.createRange().text.length;
>, <Line: -        sel.moveStart('character', - input.value.length);
>, <Line: -        return sel.text.length - selLen;
>, <Line: -      }
>, <Line: -    },
>, <Line: -    getTemplate: function() {
>, <Line: -      var template,
>, <Line: -        hourTemplate,
>, <Line: -        minuteTemplate,
>, <Line: -        secondTemplate,
>, <Line: -        meridianTemplate,
>, <Line: -        templateContent;
>, <Line: -      if (this.showInputs) {
>, <Line: -        hourTemplate = '<input type="text" name="hour" class="bootstrap-timepicker-hour" maxlength="2"/>';
>, <Line: -        minuteTemplate = '<input type="text" name="minute" class="bootstrap-timepicker-minute" maxlength="2"/>';
>, <Line: -        secondTemplate = '<input type="text" name="second" class="bootstrap-timepicker-second" maxlength="2"/>';
>, <Line: -        meridianTemplate = '<input type="text" name="meridian" class="bootstrap-timepicker-meridian" maxlength="2"/>';
>, <Line: -      } else {
>, <Line: -        hourTemplate = '<span class="bootstrap-timepicker-hour"></span>';
>, <Line: -        minuteTemplate = '<span class="bootstrap-timepicker-minute"></span>';
>, <Line: -        secondTemplate = '<span class="bootstrap-timepicker-second"></span>';
>, <Line: -        meridianTemplate = '<span class="bootstrap-timepicker-meridian"></span>';
>, <Line: -      }
>, <Line: -      templateContent = '<table>'+
>, <Line: -         '<tr>'+
>, <Line: -           '<td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td>'+
>, <Line: -           '<td class="separator">&nbsp;</td>'+
>, <Line: -           '<td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>'+
>, <Line: -           (this.showSeconds ?
>, <Line: -             '<td class="separator">&nbsp;</td>'+
>, <Line: -             '<td><a href="#" data-action="incrementSecond"><i class="icon-chevron-up"></i></a></td>'
>, <Line: -           : '') +
>, <Line: -           (this.showMeridian ?
>, <Line: -             '<td class="separator">&nbsp;</td>'+
>, <Line: -             '<td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>'
>, <Line: -           : '') +
>, <Line: -         '</tr>'+
>, <Line: -         '<tr>'+
>, <Line: -           '<td>'+ hourTemplate +'</td> '+
>, <Line: -           '<td class="separator">:</td>'+
>, <Line: -           '<td>'+ minuteTemplate +'</td> '+
>, <Line: -           (this.showSeconds ?
>, <Line: -            '<td class="separator">:</td>'+
>, <Line: -            '<td>'+ secondTemplate +'</td>'
>, <Line: -           : '') +
>, <Line: -           (this.showMeridian ?
>, <Line: -            '<td class="separator">&nbsp;</td>'+
>, <Line: -            '<td>'+ meridianTemplate +'</td>'
>, <Line: -           : '') +
>, <Line: -         '</tr>'+
>, <Line: -         '<tr>'+
>, <Line: -           '<td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td>'+
>, <Line: -           '<td class="separator"></td>'+
>, <Line: -           '<td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>'+
>, <Line: -           (this.showSeconds ?
>, <Line: -            '<td class="separator">&nbsp;</td>'+
>, <Line: -            '<td><a href="#" data-action="decrementSecond"><i class="icon-chevron-down"></i></a></td>'
>, <Line: -           : '') +
>, <Line: -           (this.showMeridian ?
>, <Line: -            '<td class="separator">&nbsp;</td>'+
>, <Line: -            '<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>'
>, <Line: -           : '') +
>, <Line: -         '</tr>'+
>, <Line: -       '</table>';
>, <Line: -      switch(this.template) {
>, <Line: -      case 'modal':
>, <Line: -        template = '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="'+ (this.modalBackdrop ? 'true' : 'false') +'">'+
>, <Line: -          '<div class="modal-header">'+
>, <Line: -            '<a href="#" class="close" data-dismiss="modal">×</a>'+
>, <Line: -            '<h3>Pick a Time</h3>'+
>, <Line: -          '</div>'+
>, <Line: -          '<div class="modal-content">'+
>, <Line: -            templateContent +
>, <Line: -          '</div>'+
>, <Line: -          '<div class="modal-footer">'+
>, <Line: -            '<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>'+
>, <Line: -          '</div>'+
>, <Line: -        '</div>';
>, <Line: -        break;
>, <Line: -      case 'dropdown':
>, <Line: -        template = '<div class="bootstrap-timepicker-widget dropdown-menu">'+ templateContent +'</div>';
>, <Line: -        break;
>, <Line: -      }
>, <Line: -      return template;
>, <Line: -    },
>, <Line: -    getTime: function() {
>, <Line: -      return this.formatTime(this.hour, this.minute, this.second, this.meridian);
>, <Line: -    },
>, <Line: -    hideWidget: function() {
>, <Line: -      if (this.isOpen === false) {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      if (this.showInputs) {
>, <Line: -        this.updateFromWidgetInputs();
>, <Line: -      }
>, <Line: -      this.$element.trigger({
>, <Line: -        'type': 'hide.timepicker',
>, <Line: -        'time': {
>, <Line: -          'value': this.getTime(),
>, <Line: -          'hours': this.hour,
>, <Line: -          'minutes': this.minute,
>, <Line: -          'seconds': this.second,
>, <Line: -          'meridian': this.meridian
>, <Line: -        }
>, <Line: -      });
>, <Line: -      if (this.template === 'modal') {
>, <Line: -        this.$widget.modal('hide');
>, <Line: -      } else {
>, <Line: -        this.$widget.removeClass('open');
>, <Line: -      }
>, <Line: -      $(document).off('mousedown.timepicker');
>, <Line: -      this.isOpen = false;
>, <Line: -    },
>, <Line: -    highlightUnit: function() {
>, <Line: -      this.position = this.getCursorPosition();
>, <Line: -      if (this.position >= 0 && this.position <= 2) {
>, <Line: -        this.highlightHour();
>, <Line: -      } else if (this.position >= 3 && this.position <= 5) {
>, <Line: -        this.highlightMinute();
>, <Line: -      } else if (this.position >= 6 && this.position <= 8) {
>, <Line: -        if (this.showSeconds) {
>, <Line: -          this.highlightSecond();
>, <Line: -        } else {
>, <Line: -          this.highlightMeridian();
>, <Line: -        }
>, <Line: -      } else if (this.position >= 9 && this.position <= 11) {
>, <Line: -        this.highlightMeridian();
>, <Line: -      }
>, <Line: -    },
>, <Line: -    highlightNextUnit: function() {
>, <Line: -      switch (this.highlightedUnit) {
>, <Line: -      case 'hour':
>, <Line: -        this.highlightMinute();
>, <Line: -        break;
>, <Line: -      case 'minute':
>, <Line: -        if (this.showSeconds) {
>, <Line: -          this.highlightSecond();
>, <Line: -        } else if (this.showMeridian){
>, <Line: -          this.highlightMeridian();
>, <Line: -        } else {
>, <Line: -          this.highlightHour();
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      case 'second':
>, <Line: -        if (this.showMeridian) {
>, <Line: -          this.highlightMeridian();
>, <Line: -        } else {
>, <Line: -          this.highlightHour();
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      case 'meridian':
>, <Line: -        this.highlightHour();
>, <Line: -        break;
>, <Line: -      }
>, <Line: -    },
>, <Line: -    highlightPrevUnit: function() {
>, <Line: -      switch (this.highlightedUnit) {
>, <Line: -      case 'hour':
>, <Line: -        this.highlightMeridian();
>, <Line: -        break;
>, <Line: -      case 'minute':
>, <Line: -        this.highlightHour();
>, <Line: -        break;
>, <Line: -      case 'second':
>, <Line: -        this.highlightMinute();
>, <Line: -        break;
>, <Line: -      case 'meridian':
>, <Line: -        if (this.showSeconds) {
>, <Line: -          this.highlightSecond();
>, <Line: -        } else {
>, <Line: -          this.highlightMinute();
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      }
>, <Line: -    },
>, <Line: -    highlightHour: function() {
>, <Line: -      var $element = this.$element.get(0);
>, <Line: -      this.highlightedUnit = 'hour';
>, <Line: -      if ($element.setSelectionRange) {
>, <Line: -        setTimeout(function() {
>, <Line: -          $element.setSelectionRange(0,2);
>, <Line: -        }, 0);
>, <Line: -      }
>, <Line: -    },
>, <Line: -    highlightMinute: function() {
>, <Line: -      var $element = this.$element.get(0);
>, <Line: -      this.highlightedUnit = 'minute';
>, <Line: -      if ($element.setSelectionRange) {
>, <Line: -        setTimeout(function() {
>, <Line: -          $element.setSelectionRange(3,5);
>, <Line: -        }, 0);
>, <Line: -      }
>, <Line: -    },
>, <Line: -    highlightSecond: function() {
>, <Line: -      var $element = this.$element.get(0);
>, <Line: -      this.highlightedUnit = 'second';
>, <Line: -      if ($element.setSelectionRange) {
>, <Line: -        setTimeout(function() {
>, <Line: -          $element.setSelectionRange(6,8);
>, <Line: -        }, 0);
>, <Line: -      }
>, <Line: -    },
>, <Line: -    highlightMeridian: function() {
>, <Line: -      var $element = this.$element.get(0);
>, <Line: -      this.highlightedUnit = 'meridian';
>, <Line: -      if ($element.setSelectionRange) {
>, <Line: -        if (this.showSeconds) {
>, <Line: -          setTimeout(function() {
>, <Line: -            $element.setSelectionRange(9,11);
>, <Line: -          }, 0);
>, <Line: -        } else {
>, <Line: -          setTimeout(function() {
>, <Line: -            $element.setSelectionRange(6,8);
>, <Line: -          }, 0);
>, <Line: -        }
>, <Line: -      }
>, <Line: -    },
>, <Line: -    incrementHour: function() {
>, <Line: -      if (this.showMeridian) {
>, <Line: -        if (this.hour === 11) {
>, <Line: -          this.hour++;
>, <Line: -          return this.toggleMeridian();
>, <Line: -        } else if (this.hour === 12) {
>, <Line: -          this.hour = 0;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if (this.hour === 23) {
>, <Line: -        this.hour = 0;
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      this.hour++;
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    incrementMinute: function(step) {
>, <Line: -      var newVal;
>, <Line: -      if (step) {
>, <Line: -        newVal = this.minute + step;
>, <Line: -      } else {
>, <Line: -        newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep);
>, <Line: -      }
>, <Line: -      if (newVal > 59) {
>, <Line: -        this.incrementHour();
>, <Line: -        this.minute = newVal - 60;
>, <Line: -      } else {
>, <Line: -        this.minute = newVal;
>, <Line: -      }
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    incrementSecond: function() {
>, <Line: -      var newVal = this.second + this.secondStep - (this.second % this.secondStep);
>, <Line: -      if (newVal > 59) {
>, <Line: -        this.incrementMinute(true);
>, <Line: -        this.second = newVal - 60;
>, <Line: -      } else {
>, <Line: -        this.second = newVal;
>, <Line: -      }
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    remove: function() {
>, <Line: -      $('document').off('.timepicker');
>, <Line: -      if (this.$widget) {
>, <Line: -        this.$widget.remove();
>, <Line: -      }
>, <Line: -      delete this.$element.data().timepicker;
>, <Line: -    },
>, <Line: -    setDefaultTime: function(defaultTime){
>, <Line: -      if (!this.$element.val()) {
>, <Line: -        if (defaultTime === 'current') {
>, <Line: -          var dTime = new Date(),
>, <Line: -            hours = dTime.getHours(),
>, <Line: -            minutes = Math.floor(dTime.getMinutes() / this.minuteStep) * this.minuteStep,
>, <Line: -            seconds = Math.floor(dTime.getSeconds() / this.secondStep) * this.secondStep,
>, <Line: -            meridian = 'AM';
>, <Line: -          if (this.showMeridian) {
>, <Line: -            if (hours === 0) {
>, <Line: -              hours = 12;
>, <Line: -            } else if (hours >= 12) {
>, <Line: -              if (hours > 12) {
>, <Line: -                hours = hours - 12;
>, <Line: -              }
>, <Line: -              meridian = 'PM';
>, <Line: -            } else {
>, <Line: -              meridian = 'AM';
>, <Line: -            }
>, <Line: -          }
>, <Line: -          this.hour = hours;
>, <Line: -          this.minute = minutes;
>, <Line: -          this.second = seconds;
>, <Line: -          this.meridian = meridian;
>, <Line: -          this.update();
>, <Line: -        } else if (defaultTime === false) {
>, <Line: -          this.hour = 0;
>, <Line: -          this.minute = 0;
>, <Line: -          this.second = 0;
>, <Line: -          this.meridian = 'AM';
>, <Line: -        } else {
>, <Line: -          this.setTime(defaultTime);
>, <Line: -        }
>, <Line: -      } else {
>, <Line: -        this.updateFromElementVal();
>, <Line: -      }
>, <Line: -    },
>, <Line: -    setTime: function(time) {
>, <Line: -      var arr,
>, <Line: -        timeArray;
>, <Line: -      if (this.showMeridian) {
>, <Line: -        arr = time.split(' ');
>, <Line: -        timeArray = arr[0].split(':');
>, <Line: -        this.meridian = arr[1];
>, <Line: -      } else {
>, <Line: -        timeArray = time.split(':');
>, <Line: -      }
>, <Line: -      this.hour = parseInt(timeArray[0], 10);
>, <Line: -      this.minute = parseInt(timeArray[1], 10);
>, <Line: -      this.second = parseInt(timeArray[2], 10);
>, <Line: -      if (isNaN(this.hour)) {
>, <Line: -        this.hour = 0;
>, <Line: -      }
>, <Line: -      if (isNaN(this.minute)) {
>, <Line: -        this.minute = 0;
>, <Line: -      }
>, <Line: -      if (this.showMeridian) {
>, <Line: -        if (this.hour > 12) {
>, <Line: -          this.hour = 12;
>, <Line: -        } else if (this.hour < 1) {
>, <Line: -          this.hour = 12;
>, <Line: -        }
>, <Line: -        if (this.meridian === 'am' || this.meridian === 'a') {
>, <Line: -          this.meridian = 'AM';
>, <Line: -        } else if (this.meridian === 'pm' || this.meridian === 'p') {
>, <Line: -          this.meridian = 'PM';
>, <Line: -        }
>, <Line: -        if (this.meridian !== 'AM' && this.meridian !== 'PM') {
>, <Line: -          this.meridian = 'AM';
>, <Line: -        }
>, <Line: -      } else {
>, <Line: -        if (this.hour >= 24) {
>, <Line: -          this.hour = 23;
>, <Line: -        } else if (this.hour < 0) {
>, <Line: -          this.hour = 0;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      if (this.minute < 0) {
>, <Line: -        this.minute = 0;
>, <Line: -      } else if (this.minute >= 60) {
>, <Line: -        this.minute = 59;
>, <Line: -      }
>, <Line: -      if (this.showSeconds) {
>, <Line: -        if (isNaN(this.second)) {
>, <Line: -          this.second = 0;
>, <Line: -        } else if (this.second < 0) {
>, <Line: -          this.second = 0;
>, <Line: -        } else if (this.second >= 60) {
>, <Line: -          this.second = 59;
>, <Line: -        }
>, <Line: -      }
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    showWidget: function() {
>, <Line: -      if (this.isOpen) {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      if (this.$element.is(':disabled')) {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      var self = this;
>, <Line: -      $(document).on('mousedown.timepicker', function (e) {
>, <Line: -        // Clicked outside the timepicker, hide it
>, <Line: -        if ($(e.target).closest('.bootstrap-timepicker-widget').length === 0) {
>, <Line: -          self.hideWidget();
>, <Line: -        }
>, <Line: -      });
>, <Line: -      this.$element.trigger({
>, <Line: -        'type': 'show.timepicker',
>, <Line: -        'time': {
>, <Line: -          'value': this.getTime(),
>, <Line: -          'hours': this.hour,
>, <Line: -          'minutes': this.minute,
>, <Line: -          'seconds': this.second,
>, <Line: -          'meridian': this.meridian
>, <Line: -        }
>, <Line: -      });
>, <Line: -      if (this.disableFocus) {
>, <Line: -        this.$element.blur();
>, <Line: -      }
>, <Line: -      this.updateFromElementVal();
>, <Line: -      if (this.template === 'modal') {
>, <Line: -        this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));
>, <Line: -      } else {
>, <Line: -        if (this.isOpen === false) {
>, <Line: -          this.$widget.addClass('open');
>, <Line: -        }
>, <Line: -      }
>, <Line: -      this.isOpen = true;
>, <Line: -    },
>, <Line: -    toggleMeridian: function() {
>, <Line: -      this.meridian = this.meridian === 'AM' ? 'PM' : 'AM';
>, <Line: -      this.update();
>, <Line: -    },
>, <Line: -    update: function() {
>, <Line: -      this.$element.trigger({
>, <Line: -        'type': 'changeTime.timepicker',
>, <Line: -        'time': {
>, <Line: -          'value': this.getTime(),
>, <Line: -          'hours': this.hour,
>, <Line: -          'minutes': this.minute,
>, <Line: -          'seconds': this.second,
>, <Line: -          'meridian': this.meridian
>, <Line: -        }
>, <Line: -      });
>, <Line: -      this.updateElement();
>, <Line: -      this.updateWidget();
>, <Line: -    },
>, <Line: -    updateElement: function() {
>, <Line: -      this.$element.val(this.getTime()).change();
>, <Line: -    },
>, <Line: -    updateFromElementVal: function() {
>, <Line: -      var val = this.$element.val();
>, <Line: -      if (val) {
>, <Line: -        this.setTime(val);
>, <Line: -      }
>, <Line: -    },
>, <Line: -    updateWidget: function() {
>, <Line: -      if (this.$widget === false) {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      var hour = this.hour < 10 ? '0' + this.hour : this.hour,
>, <Line: -          minute = this.minute < 10 ? '0' + this.minute : this.minute,
>, <Line: -          second = this.second < 10 ? '0' + this.second : this.second;
>, <Line: -      if (this.showInputs) {
>, <Line: -        this.$widget.find('input.bootstrap-timepicker-hour').val(hour);
>, <Line: -        this.$widget.find('input.bootstrap-timepicker-minute').val(minute);
>, <Line: -        if (this.showSeconds) {
>, <Line: -          this.$widget.find('input.bootstrap-timepicker-second').val(second);
>, <Line: -        }
>, <Line: -        if (this.showMeridian) {
>, <Line: -          this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian);
>, <Line: -        }
>, <Line: -      } else {
>, <Line: -        this.$widget.find('span.bootstrap-timepicker-hour').text(hour);
>, <Line: -        this.$widget.find('span.bootstrap-timepicker-minute').text(minute);
>, <Line: -        if (this.showSeconds) {
>, <Line: -          this.$widget.find('span.bootstrap-timepicker-second').text(second);
>, <Line: -        }
>, <Line: -        if (this.showMeridian) {
>, <Line: -          this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian);
>, <Line: -        }
>, <Line: -      }
>, <Line: -    },
>, <Line: -    updateFromWidgetInputs: function() {
>, <Line: -      if (this.$widget === false) {
>, <Line: -        return;
>, <Line: -      }
>, <Line: -      var time = $('input.bootstrap-timepicker-hour', this.$widget).val() + ':' +
>, <Line: -        $('input.bootstrap-timepicker-minute', this.$widget).val() +
>, <Line: -        (this.showSeconds ? ':' + $('input.bootstrap-timepicker-second', this.$widget).val() : '') +
>, <Line: -        (this.showMeridian ? ' ' + $('input.bootstrap-timepicker-meridian', this.$widget).val() : '');
>, <Line: -      this.setTime(time);
>, <Line: -    },
>, <Line: -    widgetClick: function(e) {
>, <Line: -      e.stopPropagation();
>, <Line: -      e.preventDefault();
>, <Line: -      var action = $(e.target).closest('a').data('action');
>, <Line: -      if (action) {
>, <Line: -        this[action]();
>, <Line: -      }
>, <Line: -    },
>, <Line: -    widgetKeydown: function(e) {
>, <Line: -      var $input = $(e.target).closest('input'),
>, <Line: -          name = $input.attr('name');
>, <Line: -      switch (e.keyCode) {
>, <Line: -      case 9: //tab
>, <Line: -        if (this.showMeridian) {
>, <Line: -          if (name === 'meridian') {
>, <Line: -            return this.hideWidget();
>, <Line: -          }
>, <Line: -        } else {
>, <Line: -          if (this.showSeconds) {
>, <Line: -            if (name === 'second') {
>, <Line: -              return this.hideWidget();
>, <Line: -            }
>, <Line: -          } else {
>, <Line: -            if (name === 'minute') {
>, <Line: -              return this.hideWidget();
>, <Line: -            }
>, <Line: -          }
>, <Line: -        }
>, <Line: -        this.updateFromWidgetInputs();
>, <Line: -        break;
>, <Line: -      case 27: // escape
>, <Line: -        this.hideWidget();
>, <Line: -        break;
>, <Line: -      case 38: // up arrow
>, <Line: -        e.preventDefault();
>, <Line: -        switch (name) {
>, <Line: -        case 'hour':
>, <Line: -          this.incrementHour();
>, <Line: -          break;
>, <Line: -        case 'minute':
>, <Line: -          this.incrementMinute();
>, <Line: -          break;
>, <Line: -        case 'second':
>, <Line: -          this.incrementSecond();
>, <Line: -          break;
>, <Line: -        case 'meridian':
>, <Line: -          this.toggleMeridian();
>, <Line: -          break;
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      case 40: // down arrow
>, <Line: -        e.preventDefault();
>, <Line: -        switch (name) {
>, <Line: -        case 'hour':
>, <Line: -          this.decrementHour();
>, <Line: -          break;
>, <Line: -        case 'minute':
>, <Line: -          this.decrementMinute();
>, <Line: -          break;
>, <Line: -        case 'second':
>, <Line: -          this.decrementSecond();
>, <Line: -          break;
>, <Line: -        case 'meridian':
>, <Line: -          this.toggleMeridian();
>, <Line: -          break;
>, <Line: -        }
>, <Line: -        break;
>, <Line: -      }
>, <Line: -    }
>, <Line: -  };
>, <Line: -  //TIMEPICKER PLUGIN DEFINITION
>, <Line: -  $.fn.timepicker = function(option) {
>, <Line: -    var args = Array.apply(null, arguments);
>, <Line: -    args.shift();
>, <Line: -    return this.each(function() {
>, <Line: -      var $this = $(this),
>, <Line: -        data = $this.data('timepicker'),
>, <Line: -        options = typeof option === 'object' && option;
>, <Line: -      if (!data) {
>, <Line: -        $this.data('timepicker', (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data()))));
>, <Line: -      }
>, <Line: -      if (typeof option === 'string') {
>, <Line: -        data[option].apply(data, args);
>, <Line: -      }
>, <Line: -    });
>, <Line: -  };
>, <Line: -  $.fn.timepicker.defaults = {
>, <Line: -    defaultTime: 'current',
>, <Line: -    disableFocus: false,
>, <Line: -    isOpen: false,
>, <Line: -    minuteStep: 15,
>, <Line: -    modalBackdrop: false,
>, <Line: -    secondStep: 15,
>, <Line: -    showSeconds: false,
>, <Line: -    showInputs: true,
>, <Line: -    showMeridian: true,
>, <Line: -    template: 'dropdown',
>, <Line: -    appendWidgetTo: '.bootstrap-timepicker'
>, <Line: -  };
>, <Line: -  $.fn.timepicker.Constructor = Timepicker;
>]