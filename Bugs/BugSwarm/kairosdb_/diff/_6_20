[]
[<Line: -package org.kairosdb.datastore.cassandra;
>, <Line: -import com.datastax.driver.core.PreparedStatement;
>, <Line: -import com.datastax.driver.core.Session;
>, <Line: -import com.google.common.eventbus.EventBus;
>, <Line: -import com.google.inject.name.Named;
>, <Line: -import com.netflix.astyanax.AstyanaxContext;
>, <Line: -import com.netflix.astyanax.Keyspace;
>, <Line: -import com.netflix.astyanax.MutationBatch;
>, <Line: -import com.netflix.astyanax.connectionpool.NodeDiscoveryType;
>, <Line: -import com.netflix.astyanax.connectionpool.exceptions.ConnectionException;
>, <Line: -import com.netflix.astyanax.connectionpool.impl.ConnectionPoolConfigurationImpl;
>, <Line: -import com.netflix.astyanax.connectionpool.impl.CountingConnectionPoolMonitor;
>, <Line: -import com.netflix.astyanax.impl.AstyanaxConfigurationImpl;
>, <Line: -import com.netflix.astyanax.model.ColumnFamily;
>, <Line: -import com.netflix.astyanax.serializers.BytesArraySerializer;
>, <Line: -import com.netflix.astyanax.serializers.IntegerSerializer;
>, <Line: -import com.netflix.astyanax.serializers.StringSerializer;
>, <Line: -import com.netflix.astyanax.thrift.ThriftFamilyFactory;
>, <Line: -import org.kairosdb.core.DataPoint;
>, <Line: -import org.kairosdb.core.queue.EventCompletionCallBack;
>, <Line: -import org.kairosdb.events.DataPointEvent;
>, <Line: -import org.kairosdb.util.KDataOutput;
>, <Line: -import javax.inject.Inject;
>, <Line: -import java.io.IOException;
>, <Line: -import java.util.List;
>, <Line: -import static org.kairosdb.datastore.cassandra.CassandraClientImpl.HOST_LIST_PROPERTY;
>, <Line: -import static org.kairosdb.datastore.cassandra.CassandraDatastore.*;
>, <Line: -/**
>, <Line: - Created by bhawkins on 12/12/16.
>, <Line: - */
>, <Line: -public class AstyanaxClient
>, <Line: -{
>, <Line: -	private ColumnFamily<DataPointsRowKey, Integer> CF_DATA_POINTS =
>, <Line: -			new ColumnFamily<>(CF_DATA_POINTS_NAME,
>, <Line: -					new AstyanaxDataPointsRowKeySerializer(), IntegerSerializer.get(), BytesArraySerializer.get());
>, <Line: -	private ColumnFamily<String, DataPointsRowKey> CF_ROW_KEY_INDEX =
>, <Line: -			new ColumnFamily<>(CF_ROW_KEY_INDEX_NAME,
>, <Line: -					StringSerializer.get(), new AstyanaxDataPointsRowKeySerializer());
>, <Line: -	private ColumnFamily<String, String> CF_STRING_INDEX =
>, <Line: -			new ColumnFamily<>(CF_STRING_INDEX_NAME,
>, <Line: -					StringSerializer.get(), StringSerializer.get());
>, <Line: -	private Keyspace m_keyspace;
>, <Line: -	@Inject
>, <Line: -	public AstyanaxClient(CassandraConfiguration cassandraConfiguration,
>, <Line: -			@Named(HOST_LIST_PROPERTY)String hostList)
>, <Line: -	{
>, <Line: -		AstyanaxContext<Keyspace> context = new AstyanaxContext.Builder()
>, <Line: -				.forCluster("ClusterName")
>, <Line: -				.forKeyspace(cassandraConfiguration.getKeyspaceName())
>, <Line: -				.withAstyanaxConfiguration(new AstyanaxConfigurationImpl()
>, <Line: -						.setDiscoveryType(NodeDiscoveryType.RING_DESCRIBE)
>, <Line: -				)
>, <Line: -				.withConnectionPoolConfiguration(new ConnectionPoolConfigurationImpl("MyConnectionPool")
>, <Line: -						.setPort(9160)
>, <Line: -						.setMaxConnsPerHost(10)
>, <Line: -						.setSeeds(hostList)
>, <Line: -				)
>, <Line: -				.withConnectionPoolMonitor(new CountingConnectionPoolMonitor())
>, <Line: -				.buildKeyspace(ThriftFamilyFactory.getInstance());
>, <Line: -		context.start();
>, <Line: -		m_keyspace = context.getClient();
>, <Line: -	}
>, <Line: -	public BatchHandler getBatchHandler(List<DataPointEvent> events, EventCompletionCallBack callBack,
>, <Line: -			int defaultTtl, DataCache<DataPointsRowKey>
>, <Line: -			rowKeyCache, DataCache<String> metricNameCache, EventBus eventBus,
>, <Line: -			Session session, PreparedStatement psInsertData,
>, <Line: -			PreparedStatement psInsertRowKey, PreparedStatement psInsertString)
>, <Line: -	{
>, <Line: -		return new AstyanaxBatchHandler(events, callBack, defaultTtl,
>, <Line: -				rowKeyCache, metricNameCache, eventBus, session, psInsertData,
>, <Line: -				psInsertRowKey, psInsertString);
>, <Line: -	}
>, <Line: -	private class AstyanaxBatchHandler extends CQLBatchHandler
>, <Line: -	{
>, <Line: -		MutationBatch m_batch;
>, <Line: -		public AstyanaxBatchHandler(List<DataPointEvent> events, EventCompletionCallBack callBack,
>, <Line: -				int defaultTtl, DataCache<DataPointsRowKey>
>, <Line: -				rowKeyCache, DataCache<String> metricNameCache, EventBus eventBus,
>, <Line: -				Session session, PreparedStatement psInsertData,
>, <Line: -				PreparedStatement psInsertRowKey, PreparedStatement psInsertString)
>, <Line: -		{
>, <Line: -			super(events, callBack, defaultTtl, rowKeyCache, metricNameCache, eventBus,
>, <Line: -					session, psInsertData, psInsertRowKey, psInsertString);
>, <Line: -			m_batch = m_keyspace.prepareMutationBatch();
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void addMetricName(String metricName)
>, <Line: -		{
>, <Line: -			m_batch.withRow(CF_STRING_INDEX, ROW_KEY_METRIC_NAMES)
>, <Line: -					.putColumn(metricName, (String)null);
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void addDataPoint(DataPointsRowKey rowKey, int columnTime, DataPoint dataPoint, int ttl) throws IOException
>, <Line: -		{
>, <Line: -			KDataOutput kDataOutput = new KDataOutput();
>, <Line: -			dataPoint.writeValueToBuffer(kDataOutput);
>, <Line: -			m_batch.withRow(CF_DATA_POINTS, rowKey)
>, <Line: -					.putColumn(columnTime, kDataOutput.getBytes(), ttl);
>, <Line: -		}
>, <Line: -		@Override
>, <Line: -		public void submitBatch()
>, <Line: -		{
>, <Line: -			try
>, <Line: -			{
>, <Line: -				super.submitBatch();
>, <Line: -				m_batch.execute();
>, <Line: -			}
>, <Line: -			catch (ConnectionException e)
>, <Line: -			{
>, <Line: -				e.printStackTrace();
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>, <Line: -}
>]