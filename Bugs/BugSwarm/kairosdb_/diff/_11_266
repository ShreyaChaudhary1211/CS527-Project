[<Line: +		'angular',
>, <Line: +		'lodash',
>, <Line: +		'kbn',
>, <Line: +		'store'
>, <Line: +	],
>, <Line: +	function (angular, _, kbn, store) {
>, <Line: +		'use strict';
>, <Line: +		var module = angular.module('grafana.services');
>, <Line: +		module.service('playlistSrv', function ($location, $rootScope) {
>, <Line: +			var timerInstance;
>, <Line: +			var favorites = {dashboards: []};
>, <Line: +			this.init = function () {
>, <Line: +				var existingJson = store.get("grafana-favorites");
>, <Line: +				if (existingJson) {
>, <Line: +					favorites = angular.fromJson(existingJson);
>, <Line: +				}
>, <Line: +			};
>, <Line: +			this._save = function () {
>, <Line: +				store.set('grafana-favorites', angular.toJson(favorites));
>, <Line: +			};
>, <Line: +			this._find = function (title) {
>, <Line: +				return _.findWhere(favorites.dashboards, {title: title});
>, <Line: +			};
>, <Line: +			this._remove = function (existing) {
>, <Line: +				if (existing) {
>, <Line: +					favorites.dashboards = _.without(favorites.dashboards, existing);
>, <Line: +				}
>, <Line: +			};
>, <Line: +			this.isCurrentFavorite = function (dashboard) {
>, <Line: +				return this._find(dashboard.title) ? true : false;
>, <Line: +			};
>, <Line: +			this.markAsFavorite = function (dashboard) {
>, <Line: +				var existing = this._find(dashboard.title);
>, <Line: +				this._remove(existing);
>, <Line: +				favorites.dashboards.push({
>, <Line: +					url: $location.path(),
>, <Line: +					title: dashboard.title
>, <Line: +				});
>, <Line: +				this._save();
>, <Line: +			};
>, <Line: +			this.removeAsFavorite = function (toRemove) {
>, <Line: +				var existing = this._find(toRemove.title);
>, <Line: +				this._remove(existing);
>, <Line: +				this._save();
>, <Line: +			};
>, <Line: +			this.getFavorites = function () {
>, <Line: +				return favorites;
>, <Line: +			};
>, <Line: +			this.start = function (dashboards, timespan) {
>, <Line: +				var interval = kbn.interval_to_ms(timespan);
>, <Line: +				var index = 0;
>, <Line: +				$rootScope.playlist_active = true;
>, <Line: +				timerInstance = setInterval(function () {
>, <Line: +					$rootScope.$apply(function () {
>, <Line: +						angular.element(window).unbind('resize');
>, <Line: +						$location.search({});
>, <Line: +						$location.path(dashboards[index % dashboards.length].url);
>, <Line: +						index++;
>, <Line: +					});
>, <Line: +				}, interval);
>, <Line: +			};
>, <Line: +			this.stop = function () {
>, <Line: +				clearInterval(timerInstance);
>, <Line: +				$rootScope.playlist_active = false;
>, <Line: +			};
>, <Line: +			this.init();
>, <Line: +		});
>, <Line: +	});
>]
[<Line: -  'angular',
>, <Line: -  'lodash',
>, <Line: -  'kbn',
>, <Line: -  'store'
>, <Line: -],
>, <Line: -function (angular, _, kbn, store) {
>, <Line: -  'use strict';
>, <Line: -  var module = angular.module('grafana.services');
>, <Line: -  module.service('playlistSrv', function($location, $rootScope) {
>, <Line: -    var timerInstance;
>, <Line: -    var favorites = { dashboards: [] };
>, <Line: -    this.init = function() {
>, <Line: -      var existingJson = store.get("grafana-favorites");
>, <Line: -      if (existingJson) {
>, <Line: -        favorites = angular.fromJson(existingJson);
>, <Line: -      }
>, <Line: -    };
>, <Line: -    this._save = function() {
>, <Line: -      store.set('grafana-favorites', angular.toJson(favorites));
>, <Line: -    };
>, <Line: -    this._find = function(title) {
>, <Line: -      return _.findWhere(favorites.dashboards, { title: title });
>, <Line: -    };
>, <Line: -    this._remove = function(existing) {
>, <Line: -      if (existing) {
>, <Line: -        favorites.dashboards = _.without(favorites.dashboards, existing);
>, <Line: -      }
>, <Line: -    };
>, <Line: -    this.isCurrentFavorite = function(dashboard) {
>, <Line: -      return this._find(dashboard.title) ? true : false;
>, <Line: -    };
>, <Line: -    this.markAsFavorite = function(dashboard) {
>, <Line: -      var existing = this._find(dashboard.title);
>, <Line: -      this._remove(existing);
>, <Line: -      favorites.dashboards.push({
>, <Line: -        url: $location.path(),
>, <Line: -        title: dashboard.title
>, <Line: -      });
>, <Line: -      this._save();
>, <Line: -    };
>, <Line: -    this.removeAsFavorite = function(toRemove) {
>, <Line: -      var existing = this._find(toRemove.title);
>, <Line: -      this._remove(existing);
>, <Line: -      this._save();
>, <Line: -    };
>, <Line: -    this.getFavorites = function() {
>, <Line: -      return favorites;
>, <Line: -    };
>, <Line: -    this.start = function(dashboards, timespan) {
>, <Line: -      var interval = kbn.interval_to_ms(timespan);
>, <Line: -      var index = 0;
>, <Line: -      $rootScope.playlist_active = true;
>, <Line: -      timerInstance = setInterval(function() {
>, <Line: -        $rootScope.$apply(function() {
>, <Line: -          angular.element(window).unbind('resize');
>, <Line: -          $location.search({});
>, <Line: -          $location.path(dashboards[index % dashboards.length].url);
>, <Line: -          index++;
>, <Line: -        });
>, <Line: -      }, interval);
>, <Line: -    };
>, <Line: -    this.stop = function() {
>, <Line: -      clearInterval(timerInstance);
>, <Line: -      $rootScope.playlist_active = false;
>, <Line: -    };
>, <Line: -    this.init();
>, <Line: -  });
>, <Line: -});
>]