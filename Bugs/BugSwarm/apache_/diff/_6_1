[<Line: +     *            determines if a lookup in the entire inheritance hierarchy of the given class should be performed
>, <Line: +     *            determines if non public methods should be considered
>, <Line: +     *            determines if a lookup in the entire inheritance hierarchy of the given class should be performed
>, <Line: +     *            determines if non public methods should be considered
>, <Line: +     * <p>Gets the annotation object with the given annotation type that is present on the given method
>, <Line: +     * or optionally on any equivalent method in super classes and interfaces. Returns null if the annotation
>, <Line: +     * type was not present.</p>
>, <Line: +     * found. Additional annotations of the specified type will be silently ignored.</p>
>, <Line: +     *            determines if a lookup in the entire inheritance hierarchy of the given class is performed
>, <Line: +     *            if the annotation was not directly present
>, <Line: +        if (!ignoreAccess && !MemberUtils.isAccessible(method)) {
>, <Line: +        if (annotation == null && searchSupers) {
>, <Line: +                    // if not found, just keep searching
>, <Line: +        final List<Class<?>> allSuperClassesAndInterfaces = new ArrayList<>();
>, <Line: +        int superClassIndex = 0;
>, <Line: +        int interfaceIndex = 0;
>, <Line: +        while (interfaceIndex < allInterfaces.size() ||
>, <Line: +                superClassIndex < allSuperclasses.size()) {
>, <Line: +            if (interfaceIndex >= allInterfaces.size()) {
>, <Line: +                acls = allSuperclasses.get(superClassIndex++);
>, <Line: +            } else if (superClassIndex >= allSuperclasses.size()) {
>, <Line: +                acls = allInterfaces.get(interfaceIndex++);
>, <Line: +            } else if (interfaceIndex < superClassIndex) {
>, <Line: +                acls = allInterfaces.get(interfaceIndex++);
>, <Line: +            } else if (superClassIndex < interfaceIndex) {
>, <Line: +                acls = allSuperclasses.get(superClassIndex++);
>, <Line: +                acls = allInterfaces.get(interfaceIndex++);
>, <Line: +            allSuperClassesAndInterfaces.add(acls);
>, <Line: +        return allSuperClassesAndInterfaces;
>]
[<Line: -     *            determines if also a lookup in the entire inheritance hierarchy of the given class should be performed
>, <Line: -     *            determines if also non public methods should be considered
>, <Line: -     *            determines if also a lookup in the entire inheritance hierarchy of the given class should be performed
>, <Line: -     *            determines if also non public methods should be considered
>, <Line: -     * <p>Gets the annotation object that is present on the given method or any equivalent method in
>, <Line: -     * super classes and interfaces, with the given annotation type. Returns null if the annotation
>, <Line: -     * type was not present on any of them.</p>
>, <Line: -     * found. i.e, additional annotations of the specified type will be silently ignored.</p>
>, <Line: -     *            determines if lookup in the entire inheritance hierarchy of the given class if was not directly present
>, <Line: -        if(!ignoreAccess && !MemberUtils.isAccessible(method)) {
>, <Line: -        if(annotation == null && searchSupers) {
>, <Line: -                    // If not found, just keep on search
>, <Line: -     * @since 3.6
>, <Line: -        final List<Class<?>> classes = new ArrayList<>();
>, <Line: -        int sci = 0;
>, <Line: -        int ifi = 0;
>, <Line: -        while (ifi < allInterfaces.size() ||
>, <Line: -                sci < allSuperclasses.size()) {
>, <Line: -            if (ifi >= allInterfaces.size()) {
>, <Line: -                acls = allSuperclasses.get(sci++);
>, <Line: -            } else if (sci >= allSuperclasses.size()) {
>, <Line: -                acls = allInterfaces.get(ifi++);
>, <Line: -            } else if (ifi < sci) {
>, <Line: -                acls = allInterfaces.get(ifi++);
>, <Line: -            } else if (sci < ifi) {
>, <Line: -                acls = allSuperclasses.get(sci++);
>, <Line: -                acls = allInterfaces.get(ifi++);
>, <Line: -            classes.add(acls);
>, <Line: -        return classes;
>]