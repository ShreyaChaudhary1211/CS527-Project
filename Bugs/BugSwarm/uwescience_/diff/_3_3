[<Line: +/**
>, <Line: + *
>, <Line: + */
>, <Line: +package edu.washington.escience.myria.operator;
>, <Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import edu.washington.escience.myria.Schema;
>, <Line: +import edu.washington.escience.myria.Type;
>, <Line: +import edu.washington.escience.myria.parallel.CacheController;
>, <Line: +import edu.washington.escience.myria.storage.TupleBatch;
>, <Line: +/**
>, <Line: + * 
>, <Line: + */
>, <Line: +public class CacheLeaf extends LeafOperator {
>, <Line: +  /** The schema for the relation stored in the cache. */
>, <Line: +  private final Schema schema;
>, <Line: +  /**
>, <Line: +   * The constructor for the cache leaf operator.
>, <Line: +   * */
>, <Line: +  public CacheLeaf() {
>, <Line: +    // problem, the leaf requires a schema before it is opened/initialized
>, <Line: +    // can't check the cacheController at each worker since this operator does not yet know which worker it will be
>, <Line: +    // running in
>, <Line: +    // work-around: create schema manually for now
>, <Line: +    final Schema schema =
>, <Line: +        new Schema(ImmutableList.of(Type.LONG_TYPE, Type.LONG_TYPE), ImmutableList.of("col1", "col2"));
>, <Line: +    this.schema = schema;
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  protected TupleBatch fetchNextReady() throws Exception {
>, <Line: +    CacheController workerCacheController = getWorker().getCacheController();
>, <Line: +    /* will check if there is anything in the cache before returning a batch */
>, <Line: +    getWorker().LOGGER.info("from leaf: " + workerCacheController.cacheIteratorHasNext());
>, <Line: +    if (workerCacheController.cacheIteratorHasNext()) {
>, <Line: +      return workerCacheController.readTupleBatch();
>, <Line: +    }
>, <Line: +    return null;
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  protected Schema generateSchema() {
>, <Line: +    /* assumption for now is that all the tuples in the cache have the same schema */
>, <Line: +    return schema;
>, <Line: +  }
>, <Line: +}
>]
[]