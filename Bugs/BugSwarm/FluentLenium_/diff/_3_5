[<Line: +import static org.mockito.Matchers.any;
>, <Line: +import static org.mockito.Matchers.eq;
>, <Line: +import static org.mockito.Mockito.doThrow;
>, <Line: +import static org.mockito.Mockito.never;
>, <Line: +import static org.mockito.Mockito.reset;
>, <Line: +import static org.mockito.Mockito.spy;
>, <Line: +import static org.mockito.Mockito.verify;
>, <Line: +import org.junit.runner.RunWith;
>, <Line: +import org.mockito.junit.MockitoJUnitRunner;
>, <Line: +@RunWith(MockitoJUnitRunner.class)
>, <Line: +        doThrow(RuntimeException.class).when(testRule).starting(description);
>, <Line: +        Assertions.assertThatThrownBy(() -> testRule.apply(base, description).evaluate())
>, <Line: +                .isExactlyInstanceOf(RuntimeException.class);
>, <Line: +        verify(testRule).failed(any(RuntimeException.class), eq(description));
>]
[<Line: -import org.assertj.core.api.ThrowableAssert;
>, <Line: -import static org.mockito.Matchers.any;
>, <Line: -import static org.mockito.Matchers.eq;
>, <Line: -import static org.mockito.Mockito.doThrow;
>, <Line: -import static org.mockito.Mockito.never;
>, <Line: -import static org.mockito.Mockito.reset;
>, <Line: -import static org.mockito.Mockito.spy;
>, <Line: -import static org.mockito.Mockito.verify;
>, <Line: -    private static class TestException extends Exception {
>, <Line: -    }
>, <Line: -        doThrow(TestException.class).when(testRule).starting(description);
>, <Line: -        Assertions.assertThatThrownBy(new ThrowableAssert.ThrowingCallable() {
>, <Line: -            @Override
>, <Line: -            public void call() throws Throwable {
>, <Line: -                testRule.apply(base, description).evaluate();
>, <Line: -            }
>, <Line: -        }).isExactlyInstanceOf(TestException.class);
>, <Line: -        verify(testRule).failed(any(TestException.class), eq(description));
>]