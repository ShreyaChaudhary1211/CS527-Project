[<Line: +from sklearn.base import ChangedBehaviorWarning
>, <Line: +from sklearn.cross_validation import train_test_split
>, <Line: +from sklearn.datasets import make_classification, make_blobs
>, <Line: +    clf = svm.SVC(kernel='linear', C=0.1,
>, <Line: +                  decision_function_shape='ovo').fit(iris.data, iris.target)
>, <Line: +    clf = svm.SVC(kernel='rbf', gamma=1, decision_function_shape='ovo')
>, <Line: +def test_decision_function_shape():
>, <Line: +    # check that decision_function_shape='ovr' gives
>, <Line: +    # correct shape and is consistent with predict
>, <Line: +    clf = svm.SVC(kernel='linear', C=0.1,
>, <Line: +                  decision_function_shape='ovr').fit(iris.data, iris.target)
>, <Line: +    dec = clf.decision_function(iris.data)
>, <Line: +    assert_equal(dec.shape, (len(iris.data), 3))
>, <Line: +    assert_array_equal(clf.predict(iris.data), np.argmax(dec, axis=1))
>, <Line: +    # with five classes:
>, <Line: +    X, y = make_blobs(n_samples=80, centers=5, random_state=0)
>, <Line: +    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)
>, <Line: +    clf = svm.SVC(kernel='linear', C=0.1,
>, <Line: +                  decision_function_shape='ovr').fit(X_train, y_train)
>, <Line: +    dec = clf.decision_function(X_test)
>, <Line: +    assert_equal(dec.shape, (len(X_test), 5))
>, <Line: +    assert_array_equal(clf.predict(X_test), np.argmax(dec, axis=1))
>, <Line: +    # check shape of ovo_decition_function=True
>, <Line: +    clf = svm.SVC(kernel='linear', C=0.1,
>, <Line: +                  decision_function_shape='ovo').fit(X_train, y_train)
>, <Line: +    dec = clf.decision_function(X_train)
>, <Line: +    assert_equal(dec.shape, (len(X_train), 10))
>, <Line: +    # check deprecation warning
>, <Line: +    clf.decision_function_shape = None
>, <Line: +    msg = "change the shape of the decision function"
>, <Line: +    dec = assert_warns_message(ChangedBehaviorWarning, msg,
>, <Line: +                               clf.decision_function, X_train)
>, <Line: +    assert_equal(dec.shape, (len(X_train), 10))
>, <Line: +                           probability=True, random_state=0,
>, <Line: +                           decision_function_shape='ovr')
>, <Line: +    svm_builtin = svm.SVC(kernel='linear', probability=True, random_state=0,
>, <Line: +                          decision_function_shape='ovr')
>]
[<Line: -from sklearn.datasets.samples_generator import make_classification
>, <Line: -    clf = svm.SVC(kernel='linear', C=0.1).fit(iris.data, iris.target)
>, <Line: -    clf = svm.SVC(kernel='rbf', gamma=1)
>, <Line: -def test_inheritance():
>, <Line: -    # check that SVC classes can do inheritance
>, <Line: -    class ChildSVC(svm.SVC):
>, <Line: -        def __init__(self, foo=0):
>, <Line: -            self.foo = foo
>, <Line: -            svm.SVC.__init__(self)
>, <Line: -    clf = ChildSVC()
>, <Line: -    clf.fit(iris.data, iris.target)
>, <Line: -    clf.predict(iris.data[-1])
>, <Line: -    clf.decision_function(iris.data[-1])
>, <Line: -                           probability=True, random_state=0)
>, <Line: -    svm_builtin = svm.SVC(kernel='linear', probability=True, random_state=0)
>]