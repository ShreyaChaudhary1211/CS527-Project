[<Line: +from ..utils import as_float_array, check_array, check_X_y, deprecated
>, <Line: +from ..utils import check_random_state, column_or_1d
>, <Line: +from ..utils.seq_dataset import ArrayDataset, CSRDataset
>, <Line: +SPARSE_INTERCEPT_DECAY = 0.01
>, <Line: +# For sparse data intercept updates are scaled by this decay factor to avoid
>, <Line: +# intercept oscillation.
>, <Line: +def make_dataset(X, y, sample_weight, random_state=None):
>, <Line: +    """Create ``Dataset`` abstraction for sparse and dense inputs.
>, <Line: +    This also returns the ``intercept_decay`` which is different
>, <Line: +    for sparse datasets.
>, <Line: +    """
>, <Line: +    rng = check_random_state(random_state)
>, <Line: +    # seed should never be 0 in SequentialDataset
>, <Line: +    seed = rng.randint(1, np.iinfo(np.int32).max)
>, <Line: +    if sp.issparse(X):
>, <Line: +        dataset = CSRDataset(X.data, X.indptr, X.indices,
>, <Line: +                             y, sample_weight, seed=seed)
>, <Line: +        intercept_decay = SPARSE_INTERCEPT_DECAY
>, <Line: +    else:
>, <Line: +        dataset = ArrayDataset(X, y, sample_weight, seed=seed)
>, <Line: +        intercept_decay = 1.0
>, <Line: +    return dataset, intercept_decay
>]
[<Line: -from ..utils import as_float_array, check_array, check_X_y, deprecated, column_or_1d
>]