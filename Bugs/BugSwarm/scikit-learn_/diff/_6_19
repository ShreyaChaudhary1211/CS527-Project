[<Line: +from .base import make_dataset
>, <Line: +# Default value of ``epsilon`` parameter.
>, <Line: +    dataset, intercept_decay = make_dataset(X, y_i, sample_weight)
>, <Line: +        dataset, intercept_decay = make_dataset(X, y, sample_weight)
>]
[<Line: -from ..utils.seq_dataset import ArrayDataset, CSRDataset
>, <Line: -SPARSE_INTERCEPT_DECAY = 0.01
>, <Line: -"""For sparse data intercept updates are scaled by this decay factor to avoid
>, <Line: -intercept oscillation."""
>, <Line: -"""Default value of ``epsilon`` parameter. """
>, <Line: -def _make_dataset(X, y_i, sample_weight):
>, <Line: -    """Create ``Dataset`` abstraction for sparse and dense inputs.
>, <Line: -    This also returns the ``intercept_decay`` which is different
>, <Line: -    for sparse datasets.
>, <Line: -    """
>, <Line: -    if sp.issparse(X):
>, <Line: -        dataset = CSRDataset(X.data, X.indptr, X.indices, y_i, sample_weight)
>, <Line: -        intercept_decay = SPARSE_INTERCEPT_DECAY
>, <Line: -    else:
>, <Line: -        dataset = ArrayDataset(X, y_i, sample_weight)
>, <Line: -        intercept_decay = 1.0
>, <Line: -    return dataset, intercept_decay
>, <Line: -    dataset, intercept_decay = _make_dataset(X, y_i, sample_weight)
>, <Line: -        dataset, intercept_decay = _make_dataset(X, y, sample_weight)
>]