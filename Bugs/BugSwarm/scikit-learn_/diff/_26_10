[<Line: +        as it is consistent, it is seldom used in practice as it rarely leads
>, <Line: +        to better accuracy and is more expensive to compute.
>, <Line: +    decision_function_shape : 'ovo', 'ovr' or None, default=None
>, <Line: +        Whether to return a one-vs-rest ('ovr') ecision function of shape
>, <Line: +        (n_samples, n_classes) as all other classifiers, or the original
>, <Line: +        one-vs-one ('ovo') decision function of libsvm which has shape
>, <Line: +        (n_samples, n_classes * (n_classes - 1) / 2).
>, <Line: +        The default of None will currently behave as 'ovo' for backward
>, <Line: +        compatibility and raise a deprecation warning, but will change 'ovr'
>, <Line: +        in 0.18.
>, <Line: +    SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,
>, <Line: +        decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',
>, <Line: +        max_iter=-1, probability=False, random_state=None, shrinking=True,
>, <Line: +        tol=0.001, verbose=False)
>, <Line: +                 verbose=False, max_iter=-1, decision_function_shape=None,
>, <Line: +                 random_state=None):
>, <Line: +            impl='c_svc', kernel=kernel, degree=degree, gamma=gamma,
>, <Line: +            coef0=coef0, tol=tol, C=C, nu=0., shrinking=shrinking,
>, <Line: +            probability=probability, cache_size=cache_size,
>, <Line: +            class_weight=class_weight, verbose=verbose, max_iter=max_iter,
>, <Line: +            decision_function_shape=decision_function_shape,
>, <Line: +            random_state=random_state)
>, <Line: +    class_weight : {dict, 'auto'}, optional
>, <Line: +        Set the parameter C of class i to class_weight[i]*C for
>, <Line: +        SVC. If not given, all classes are supposed to have
>, <Line: +        weight one. The 'auto' mode uses the values of y to
>, <Line: +        automatically adjust weights inversely proportional to
>, <Line: +        class frequencies.
>, <Line: +    decision_function_shape : 'ovo', 'ovr' or None, default=None
>, <Line: +        Whether to return a one-vs-rest ('ovr') ecision function of shape
>, <Line: +        (n_samples, n_classes) as all other classifiers, or the original
>, <Line: +        one-vs-one ('ovo') decision function of libsvm which has shape
>, <Line: +        (n_samples, n_classes * (n_classes - 1) / 2).
>, <Line: +        The default of None will currently behave as 'ovo' for backward
>, <Line: +        compatibility and raise a deprecation warning, but will change 'ovr'
>, <Line: +        in 0.18.
>, <Line: +        Number of support vectors for each class.
>, <Line: +    NuSVC(cache_size=200, class_weight=None, coef0=0.0,
>, <Line: +          decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',
>, <Line: +                 tol=1e-3, cache_size=200, class_weight=None, verbose=False,
>, <Line: +                 max_iter=-1, decision_function_shape=None, random_state=None):
>, <Line: +            impl='nu_svc', kernel=kernel, degree=degree, gamma=gamma,
>, <Line: +            coef0=coef0, tol=tol, C=0., nu=nu, shrinking=shrinking,
>, <Line: +            probability=probability, cache_size=cache_size,
>, <Line: +            class_weight=class_weight, verbose=verbose, max_iter=max_iter,
>, <Line: +            decision_function_shape=decision_function_shape,
>, <Line: +            random_state=random_state)
>, <Line: +    def decision_function(self, X):
>, <Line: +        """Distance of the samples X to the separating hyperplane.
>, <Line: +        Parameters
>, <Line: +        ----------
>, <Line: +        X : array-like, shape (n_samples, n_features)
>, <Line: +        Returns
>, <Line: +        -------
>, <Line: +        X : array-like, shape (n_samples,)
>, <Line: +            Returns the decision function of the samples.
>, <Line: +        """
>, <Line: +        dec = self._decision_function(X)
>, <Line: +        return dec
>]
[<Line: -        as it is consistent, it is seldom used in practice as it rarely leads to
>, <Line: -        better accuracy and is more expensive to compute.
>, <Line: -    SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, degree=3,
>, <Line: -        gamma='auto', kernel='rbf', max_iter=-1, probability=False,
>, <Line: -        random_state=None, shrinking=True, tol=0.001, verbose=False)
>, <Line: -                 verbose=False, max_iter=-1, random_state=None):
>, <Line: -            'c_svc', kernel, degree, gamma, coef0, tol, C, 0., 0., shrinking,
>, <Line: -            probability, cache_size, class_weight, verbose, max_iter,
>, <Line: -            random_state)
>, <Line: -        Number of support vector for each class.
>, <Line: -    NuSVC(cache_size=200, coef0=0.0, degree=3, gamma='auto', kernel='rbf',
>, <Line: -                 tol=1e-3, cache_size=200, verbose=False, max_iter=-1,
>, <Line: -                 random_state=None):
>, <Line: -            'nu_svc', kernel, degree, gamma, coef0, tol, 0., nu, 0., shrinking,
>, <Line: -            probability, cache_size, None, verbose, max_iter, random_state)
>]