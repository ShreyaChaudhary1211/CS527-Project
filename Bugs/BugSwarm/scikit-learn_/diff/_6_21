[<Line: +    for solver in ("svd", "sparse_cg", "cholesky", "lsqr", "sag"):
>, <Line: +        if solver in ("cholesky", "sag"):
>, <Line: +            # Currently the only solvers to support sample_weight.
>, <Line: +        if solver in ("cholesky", "sag"):
>, <Line: +            # Currently the only solvers to support sample_weight.
>, <Line: +        Ridge(alpha=penalties, solver=solver, tol=1e-8).fit(X, y).coef_
>, <Line: +        for solver in ['svd', 'sparse_cg', 'lsqr', 'cholesky', 'sag']]
>, <Line: +    ridge = Ridge(alpha=penalties[:-1])
>, <Line: +@ignore_warnings
>, <Line: +def test_n_iter():
>, <Line: +    # Test that self.n_iter_ is correct.
>, <Line: +    n_targets = 2
>, <Line: +    X, y = X_diabetes, y_diabetes
>, <Line: +    y_n = np.tile(y, (n_targets, 1)).T
>, <Line: +    for max_iter in range(1, 4):
>, <Line: +        for solver in ('sag', 'lsqr'):
>, <Line: +            reg = Ridge(solver=solver, max_iter=max_iter, tol=1e-12)
>, <Line: +            reg.fit(X, y_n)
>, <Line: +            assert_array_equal(reg.n_iter_, np.tile(max_iter, n_targets))
>, <Line: +    for solver in ('sparse_cg', 'svd', 'cholesky'):
>, <Line: +        reg = Ridge(solver=solver, max_iter=1, tol=1e-1)
>, <Line: +        reg.fit(X, y_n)
>, <Line: +        assert_equal(reg.n_iter_, None)
>]
[<Line: -    for solver in ("svd", "sparse_cg", "cholesky", "lsqr"):
>, <Line: -        if solver == "cholesky":
>, <Line: -            # Currently the only solver to support sample_weight.
>, <Line: -        if solver == "cholesky":
>, <Line: -            # Currently the only solver to support sample_weight.
>, <Line: -        Ridge(alpha=penalties, solver=solver, tol=1e-6).fit(X, y).coef_
>, <Line: -        for solver in ['svd', 'sparse_cg', 'lsqr', 'cholesky']]
>, <Line: -    ridge = Ridge(alpha=penalties[:3])
>]