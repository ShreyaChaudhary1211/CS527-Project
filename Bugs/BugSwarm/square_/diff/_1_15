[<Line: +    URL url = server.url("/").url();
>, <Line: +    HttpURLConnection urlConnection = client.open(server.url("/").url());
>, <Line: +    urlConnection = client.open(server.url("/").url()); // cached!
>, <Line: +    HttpsURLConnection c1 = (HttpsURLConnection) client.open(server.url("/").url());
>, <Line: +    HttpsURLConnection c2 = (HttpsURLConnection) client.open(server.url("/").url()); // cached!
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    connection = client.open(server.url("/").url()); // cached!
>, <Line: +    assertEquals("ABC", readAscii(client.open(server.url("/foo").url())));
>, <Line: +    assertEquals("ABC", readAscii(client.open(server.url("/bar").url())));
>, <Line: +    assertEquals("DEF", readAscii(client.open(server.url("/baz").url())));
>, <Line: +    HttpsURLConnection connection1 = (HttpsURLConnection) client.open(server.url("/").url());
>, <Line: +    HttpsURLConnection connection2 = (HttpsURLConnection) client.open(server.url("/").url());
>, <Line: +        .addHeader("Location: " + server2.url("/").url()));
>, <Line: +    HttpURLConnection connection1 = client.open(server.url("/").url());
>, <Line: +    HttpURLConnection connection2 = client.open(server.url("/").url());
>, <Line: +        new InputStreamReader(client.open(server.url("/").url()).getInputStream()));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    connection = client.open(server.url("/").url());
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    URL url = server.url("/?foo=bar").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("DEFDEFDEF", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("ABCABCABC", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/foo").url())));
>, <Line: +    assertEquals("B", readAscii(client.open(server.url("/bar").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("B", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/a").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/a").url())));
>, <Line: +    assertEquals("B", readAscii(client.open(server.url("/b").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("B", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("C", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection fooConnection = client.open(server.url("/").url());
>, <Line: +    URLConnection fooConnection = client.open(server.url("/").url());
>, <Line: +    assertEquals("B", readAscii(client.open(server.url("/").url())));
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    assertEquals("B", readAscii(client.open(server.url("/").url())));
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URLConnection connection1 = client.open(server.url("/").url());
>, <Line: +    URLConnection connection2 = client.open(server.url("/").url());
>, <Line: +    URLConnection connection1 = client.open(server.url("/").url());
>, <Line: +    URLConnection connection2 = client.open(server.url("/").url());
>, <Line: +    URLConnection connection1 = client.open(server.url("/").url());
>, <Line: +    URLConnection connection2 = client.open(server.url("/").url());
>, <Line: +    URLConnection connection1 = client.open(server.url("/").url());
>, <Line: +    URLConnection connection2 = client.open(server.url("/").url());
>, <Line: +    HttpURLConnection connection1 = client.open(server.url("/a").url());
>, <Line: +    HttpURLConnection connection2 = client.open(server.url("/a").url());
>, <Line: +    HttpURLConnection connection3 = client.open(server.url("/a").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    assertEquals("A", readAscii(client.open(server.url("/").url())));
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    URLConnection connection = client.open(server.url("/").url());
>, <Line: +    HttpURLConnection connection = client.open(server.url("/").url());
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL url = server.url("/").url();
>, <Line: +    URL valid = server.url("/valid").url();
>, <Line: +    URL invalid = server.url("/invalid").url();
>, <Line: +    URL url = server.url("/").url();
>]
[<Line: -    URL url = server.getUrl("/");
>, <Line: -    HttpURLConnection urlConnection = client.open(server.getUrl("/"));
>, <Line: -    urlConnection = client.open(server.getUrl("/")); // cached!
>, <Line: -    HttpsURLConnection c1 = (HttpsURLConnection) client.open(server.getUrl("/"));
>, <Line: -    HttpsURLConnection c2 = (HttpsURLConnection) client.open(server.getUrl("/")); // cached!
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    connection = client.open(server.getUrl("/")); // cached!
>, <Line: -    assertEquals("ABC", readAscii(client.open(server.getUrl("/foo"))));
>, <Line: -    assertEquals("ABC", readAscii(client.open(server.getUrl("/bar"))));
>, <Line: -    assertEquals("DEF", readAscii(client.open(server.getUrl("/baz"))));
>, <Line: -    HttpsURLConnection connection1 = (HttpsURLConnection) client.open(server.getUrl("/"));
>, <Line: -    HttpsURLConnection connection2 = (HttpsURLConnection) client.open(server.getUrl("/"));
>, <Line: -        .addHeader("Location: " + server2.getUrl("/")));
>, <Line: -    HttpURLConnection connection1 = client.open(server.getUrl("/"));
>, <Line: -    HttpURLConnection connection2 = client.open(server.getUrl("/"));
>, <Line: -        new InputStreamReader(client.open(server.getUrl("/")).getInputStream()));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    connection = client.open(server.getUrl("/"));
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    URL url = server.getUrl("/?foo=bar");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("DEFDEFDEF", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("ABCABCABC", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/foo"))));
>, <Line: -    assertEquals("B", readAscii(client.open(server.getUrl("/bar"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/a"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/a"))));
>, <Line: -    assertEquals("B", readAscii(client.open(server.getUrl("/b"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("C", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection fooConnection = client.open(server.getUrl("/"));
>, <Line: -    URLConnection fooConnection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    assertEquals("B", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URLConnection connection1 = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection2 = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection1 = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection2 = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection1 = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection2 = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection1 = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection2 = client.open(server.getUrl("/"));
>, <Line: -    HttpURLConnection connection1 = client.open(server.getUrl("/a"));
>, <Line: -    HttpURLConnection connection2 = client.open(server.getUrl("/a"));
>, <Line: -    HttpURLConnection connection3 = client.open(server.getUrl("/a"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    assertEquals("A", readAscii(client.open(server.getUrl("/"))));
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    URLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    HttpURLConnection connection = client.open(server.getUrl("/"));
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL url = server.getUrl("/");
>, <Line: -    URL valid = server.getUrl("/valid");
>, <Line: -    URL invalid = server.getUrl("/invalid");
>, <Line: -    URL url = server.getUrl("/");
>]