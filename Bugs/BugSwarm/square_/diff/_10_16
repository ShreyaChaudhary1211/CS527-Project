[<Line: +import java.io.ObjectInputStream;
>, <Line: +import java.io.ObjectOutputStream;
>, <Line: +import java.io.Serializable;
>, <Line: +import static org.junit.Assert.assertFalse;
>, <Line: +import static org.junit.Assert.assertTrue;
>, <Line: +  public static void assertEquivalent(ByteString b1, ByteString b2) {
>, <Line: +    // Equals.
>, <Line: +    assertTrue(b1.equals(b2));
>, <Line: +    assertTrue(b1.equals(b1));
>, <Line: +    assertTrue(b2.equals(b1));
>, <Line: +    // Hash code.
>, <Line: +    assertEquals(b1.hashCode(), b2.hashCode());
>, <Line: +    assertEquals(b1.hashCode(), b1.hashCode());
>, <Line: +    assertEquals(b1.toString(), b2.toString());
>, <Line: +    // Content.
>, <Line: +    assertEquals(b1.size(), b2.size());
>, <Line: +    byte[] b2Bytes = b2.toByteArray();
>, <Line: +    for (int i = 0; i < b2Bytes.length; i++) {
>, <Line: +      byte b = b2Bytes[i];
>, <Line: +      assertEquals(b, b1.getByte(i));
>, <Line: +    }
>, <Line: +    assertByteArraysEquals(b1.toByteArray(), b2Bytes);
>, <Line: +    // Doesn't equal a different byte string.
>, <Line: +    assertFalse(b1.equals(null));
>, <Line: +    assertFalse(b1.equals(new Object()));
>, <Line: +    if (b2Bytes.length > 0) {
>, <Line: +      byte[] b3Bytes = b2Bytes.clone();
>, <Line: +      b3Bytes[b3Bytes.length - 1]++;
>, <Line: +      ByteString b3 = new ByteString(b3Bytes);
>, <Line: +      assertFalse(b1.equals(b3));
>, <Line: +      assertFalse(b1.hashCode() == b3.hashCode());
>, <Line: +    } else {
>, <Line: +      ByteString b3 = ByteString.encodeUtf8("a");
>, <Line: +      assertFalse(b1.equals(b3));
>, <Line: +      assertFalse(b1.hashCode() == b3.hashCode());
>, <Line: +    }
>, <Line: +  }
>, <Line: +  public static void assertEquivalent(Buffer b1, Buffer b2) {
>, <Line: +    // Equals.
>, <Line: +    assertTrue(b1.equals(b2));
>, <Line: +    assertTrue(b1.equals(b1));
>, <Line: +    assertTrue(b2.equals(b1));
>, <Line: +    // Hash code.
>, <Line: +    assertEquals(b1.hashCode(), b2.hashCode());
>, <Line: +    assertEquals(b1.hashCode(), b1.hashCode());
>, <Line: +    assertEquals(b1.toString(), b2.toString());
>, <Line: +    // Content.
>, <Line: +    assertEquals(b1.size(), b2.size());
>, <Line: +    Buffer buffer = new Buffer();
>, <Line: +    b2.copyTo(buffer, 0, b2.size);
>, <Line: +    byte[] b2Bytes = b2.readByteArray();
>, <Line: +    for (int i = 0; i < b2Bytes.length; i++) {
>, <Line: +      byte b = b2Bytes[i];
>, <Line: +      assertEquals(b, b1.getByte(i));
>, <Line: +    }
>, <Line: +    // Doesn't equal a different buffer.
>, <Line: +    assertFalse(b1.equals(null));
>, <Line: +    assertFalse(b1.equals(new Object()));
>, <Line: +    if (b2Bytes.length > 0) {
>, <Line: +      byte[] b3Bytes = b2Bytes.clone();
>, <Line: +      b3Bytes[b3Bytes.length - 1]++;
>, <Line: +      Buffer b3 = new Buffer().write(b3Bytes);
>, <Line: +      assertFalse(b1.equals(b3));
>, <Line: +      assertFalse(b1.hashCode() == b3.hashCode());
>, <Line: +    } else {
>, <Line: +      Buffer b3 = new Buffer().writeUtf8("a");
>, <Line: +      assertFalse(b1.equals(b3));
>, <Line: +      assertFalse(b1.hashCode() == b3.hashCode());
>, <Line: +    }
>, <Line: +  }
>, <Line: +  /** Serializes original to bytes, then deserializes those bytes and returns the result. */
>, <Line: +  @SuppressWarnings("unchecked") // Assume serialization doesn't change types.
>, <Line: +  public static <T extends Serializable> T reserialize(T original) throws Exception {
>, <Line: +    Buffer buffer = new Buffer();
>, <Line: +    ObjectOutputStream out = new ObjectOutputStream(buffer.outputStream());
>, <Line: +    out.writeObject(original);
>, <Line: +    ObjectInputStream in = new ObjectInputStream(buffer.inputStream());
>, <Line: +    return (T) in.readObject();
>, <Line: +  }
>]
[]