[<Line: +public final class  TestingUtil {
>]
[<Line: -import java.lang.reflect.Constructor;
>, <Line: -import java.lang.reflect.InvocationTargetException;
>, <Line: -public class TestingUtil {
>, <Line: -    public static <T> void instantiateUsingPrivateConstructor(Class<T> cls) {
>, <Line: -        try {
>, <Line: -            Constructor<T> constructor = cls.getDeclaredConstructor(new Class[0]);
>, <Line: -            constructor.setAccessible(true);
>, <Line: -            constructor.newInstance(new Object[0]);
>, <Line: -        } catch (InstantiationException e) {
>, <Line: -            throw new RuntimeException(e);
>, <Line: -        } catch (IllegalAccessException e) {
>, <Line: -            throw new RuntimeException(e);
>, <Line: -        } catch (IllegalArgumentException e) {
>, <Line: -            throw new RuntimeException(e);
>, <Line: -        } catch (InvocationTargetException e) {
>, <Line: -            throw new RuntimeException(e);
>, <Line: -        } catch (NoSuchMethodException e) {
>, <Line: -            throw new RuntimeException(e);
>, <Line: -        } catch (SecurityException e) {
>, <Line: -            throw new RuntimeException(e);
>, <Line: -        }
>, <Line: -    }
>]