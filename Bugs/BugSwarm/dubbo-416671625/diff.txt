diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/.git/logs/HEAD b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Patched-Version/.git/logs/HEAD
index 6d0debbe..25f9d308 100644
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/.git/logs/HEAD
+++ b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Patched-Version/.git/logs/HEAD
@@ -1 +1 @@
-0000000000000000000000000000000000000000 ea8cdc65247d0119234d371595cc385d66ccd696 Saahil Hiranandani <suc2@illinois.edu> 1709660715 -0600	clone: from https://github.com/apache/dubbo.git
+0000000000000000000000000000000000000000 ea8cdc65247d0119234d371595cc385d66ccd696 Saahil Hiranandani <suc2@illinois.edu> 1709660721 -0600	clone: from https://github.com/apache/dubbo.git
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/.git/logs/refs/heads/3.2 b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Patched-Version/.git/logs/refs/heads/3.2
index 6d0debbe..25f9d308 100644
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/.git/logs/refs/heads/3.2
+++ b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Patched-Version/.git/logs/refs/heads/3.2
@@ -1 +1 @@
-0000000000000000000000000000000000000000 ea8cdc65247d0119234d371595cc385d66ccd696 Saahil Hiranandani <suc2@illinois.edu> 1709660715 -0600	clone: from https://github.com/apache/dubbo.git
+0000000000000000000000000000000000000000 ea8cdc65247d0119234d371595cc385d66ccd696 Saahil Hiranandani <suc2@illinois.edu> 1709660721 -0600	clone: from https://github.com/apache/dubbo.git
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/.git/logs/refs/remotes/origin/HEAD b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Patched-Version/.git/logs/refs/remotes/origin/HEAD
index 6d0debbe..25f9d308 100644
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/.git/logs/refs/remotes/origin/HEAD
+++ b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Patched-Version/.git/logs/refs/remotes/origin/HEAD
@@ -1 +1 @@
-0000000000000000000000000000000000000000 ea8cdc65247d0119234d371595cc385d66ccd696 Saahil Hiranandani <suc2@illinois.edu> 1709660715 -0600	clone: from https://github.com/apache/dubbo.git
+0000000000000000000000000000000000000000 ea8cdc65247d0119234d371595cc385d66ccd696 Saahil Hiranandani <suc2@illinois.edu> 1709660721 -0600	clone: from https://github.com/apache/dubbo.git
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/DubboObservationAutoConfiguration.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/DubboObservationAutoConfiguration.java
deleted file mode 100644
index 9eea34b3..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/DubboObservationAutoConfiguration.java
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.spring.boot.observability.autoconfigure;
-
-import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.qos.protocol.QosProtocolWrapper;
-import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.spring.boot.observability.autoconfigure.annotation.ConditionalOnDubboTracingEnable;
-
-import java.util.Arrays;
-
-import io.micrometer.core.instrument.MeterRegistry;
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.BeanFactory;
-import org.springframework.beans.factory.BeanFactoryAware;
-import org.springframework.beans.factory.NoSuchBeanDefinitionException;
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.SmartInitializingSingleton;
-import org.springframework.boot.autoconfigure.AutoConfiguration;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-
-import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
-
-/**
- * Register observationRegistry to ApplicationModel.
- * Create observationRegistry when you are using Boot <3.0 or you are not using spring-boot-starter-actuator
- */
-@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
-@AutoConfiguration(
-        after = DubboMicrometerTracingAutoConfiguration.class,
-        afterName = "org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration")
-@ConditionalOnDubboTracingEnable
-@ConditionalOnClass(name = {"io.micrometer.observation.Observation", "io.micrometer.tracing.Tracer"})
-public class DubboObservationAutoConfiguration implements BeanFactoryAware, SmartInitializingSingleton {
-    private final ErrorTypeAwareLogger logger = LoggerFactory.getErrorTypeAwareLogger(QosProtocolWrapper.class);
-
-    public DubboObservationAutoConfiguration(ApplicationModel applicationModel) {
-        this.applicationModel = applicationModel;
-    }
-
-    private final ApplicationModel applicationModel;
-
-    private BeanFactory beanFactory;
-
-    @Bean
-    @ConditionalOnMissingBean
-    @ConditionalOnClass(name = "io.micrometer.observation.ObservationRegistry")
-    io.micrometer.observation.ObservationRegistry observationRegistry() {
-        return io.micrometer.observation.ObservationRegistry.create();
-    }
-
-    @Bean
-    @ConditionalOnMissingBean(
-            type = "org.springframework.boot.actuate.autoconfigure.observation.ObservationRegistryPostProcessor")
-    @ConditionalOnClass(name = "io.micrometer.observation.ObservationHandler")
-    public ObservationRegistryPostProcessor dubboObservationRegistryPostProcessor(
-            ObjectProvider<ObservationHandlerGrouping> observationHandlerGrouping,
-            ObjectProvider<io.micrometer.observation.ObservationHandler<?>> observationHandlers) {
-        return new ObservationRegistryPostProcessor(observationHandlerGrouping, observationHandlers);
-    }
-
-    @Override
-    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
-        this.beanFactory = beanFactory;
-    }
-
-    @Override
-    public void afterSingletonsInstantiated() {
-        try {
-            applicationModel
-                    .getBeanFactory()
-                    .registerBean(beanFactory.getBean(io.micrometer.observation.ObservationRegistry.class));
-            io.micrometer.tracing.Tracer bean = beanFactory.getBean(io.micrometer.tracing.Tracer.class);
-            applicationModel.getBeanFactory().registerBean(bean);
-        } catch (NoSuchBeanDefinitionException e) {
-            logger.info("Please use a version of micrometer higher than 1.10.0 ï¼š{}" + e.getMessage());
-        }
-    }
-
-    @Configuration(proxyBeanMethods = false)
-    @ConditionalOnClass(MeterRegistry.class)
-    @ConditionalOnMissingClass("io.micrometer.tracing.Tracer")
-    @ConditionalOnMissingBean(
-            type = "org.springframework.boot.actuate.autoconfigure.observation.ObservationRegistryPostProcessor")
-    static class OnlyMetricsConfiguration {
-
-        @Bean
-        @ConditionalOnClass(name = "io.micrometer.core.instrument.observation.MeterObservationHandler")
-        ObservationHandlerGrouping metricsObservationHandlerGrouping() {
-            return new ObservationHandlerGrouping(
-                    io.micrometer.core.instrument.observation.MeterObservationHandler.class);
-        }
-    }
-
-    @Configuration(proxyBeanMethods = false)
-    @ConditionalOnClass(io.micrometer.tracing.Tracer.class)
-    @ConditionalOnMissingClass("io.micrometer.core.instrument.MeterRegistry")
-    @ConditionalOnMissingBean(
-            type = "org.springframework.boot.actuate.autoconfigure.observation.ObservationRegistryPostProcessor")
-    static class OnlyTracingConfiguration {
-
-        @Bean
-        @ConditionalOnClass(name = "io.micrometer.tracing.handler.TracingObservationHandler")
-        ObservationHandlerGrouping tracingObservationHandlerGrouping() {
-            return new ObservationHandlerGrouping(io.micrometer.tracing.handler.TracingObservationHandler.class);
-        }
-    }
-
-    @Configuration(proxyBeanMethods = false)
-    @ConditionalOnClass({MeterRegistry.class, io.micrometer.tracing.Tracer.class})
-    @ConditionalOnMissingBean(
-            type = "org.springframework.boot.actuate.autoconfigure.observation.ObservationRegistryPostProcessor")
-    static class MetricsWithTracingConfiguration {
-
-        @Bean
-        @ConditionalOnClass(
-                name = {
-                    "io.micrometer.tracing.handler.TracingObservationHandler",
-                    "io.micrometer.core.instrument.observation.MeterObservationHandler"
-                })
-        ObservationHandlerGrouping metricsAndTracingObservationHandlerGrouping() {
-            return new ObservationHandlerGrouping(Arrays.asList(
-                    io.micrometer.tracing.handler.TracingObservationHandler.class,
-                    io.micrometer.core.instrument.observation.MeterObservationHandler.class));
-        }
-    }
-
-    @Configuration(proxyBeanMethods = false)
-    @ConditionalOnBean(MeterRegistry.class)
-    @ConditionalOnMissingBean(io.micrometer.core.instrument.observation.MeterObservationHandler.class)
-    static class MeterObservationHandlerConfiguration {
-
-        @ConditionalOnMissingBean(type = "io.micrometer.tracing.Tracer")
-        @Configuration(proxyBeanMethods = false)
-        static class OnlyMetricsMeterObservationHandlerConfiguration {
-
-            @Bean
-            @ConditionalOnClass(name = {"io.micrometer.core.instrument.observation.DefaultMeterObservationHandler"})
-            io.micrometer.core.instrument.observation.DefaultMeterObservationHandler defaultMeterObservationHandler(
-                    MeterRegistry meterRegistry) {
-                return new io.micrometer.core.instrument.observation.DefaultMeterObservationHandler(meterRegistry);
-            }
-        }
-
-        @ConditionalOnBean(io.micrometer.tracing.Tracer.class)
-        @Configuration(proxyBeanMethods = false)
-        static class TracingAndMetricsObservationHandlerConfiguration {
-
-            @Bean
-            @ConditionalOnClass(
-                    name = {
-                        "io.micrometer.tracing.handler.TracingAwareMeterObservationHandler",
-                        "io.micrometer.tracing.Tracer"
-                    })
-            io.micrometer.tracing.handler.TracingAwareMeterObservationHandler<
-                            io.micrometer.observation.Observation.Context>
-                    tracingAwareMeterObservationHandler(
-                            MeterRegistry meterRegistry, io.micrometer.tracing.Tracer tracer) {
-                io.micrometer.core.instrument.observation.DefaultMeterObservationHandler delegate =
-                        new io.micrometer.core.instrument.observation.DefaultMeterObservationHandler(meterRegistry);
-                return new io.micrometer.tracing.handler.TracingAwareMeterObservationHandler<>(delegate, tracer);
-            }
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/ObservationRegistryPostProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/ObservationRegistryPostProcessor.java
deleted file mode 100644
index 13308276..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/ObservationRegistryPostProcessor.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.spring.boot.observability.autoconfigure;
-
-import java.util.List;
-import java.util.stream.Collectors;
-
-import io.micrometer.observation.ObservationHandler;
-import io.micrometer.observation.ObservationRegistry;
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.ObjectProvider;
-import org.springframework.beans.factory.config.BeanPostProcessor;
-
-/**
- * registry observationHandlers to observationConfig
- */
-public class ObservationRegistryPostProcessor implements BeanPostProcessor {
-    private final ObjectProvider<ObservationHandlerGrouping> observationHandlerGrouping;
-    private final ObjectProvider<ObservationHandler<?>> observationHandlers;
-
-    public ObservationRegistryPostProcessor(
-            ObjectProvider<ObservationHandlerGrouping> observationHandlerGrouping,
-            ObjectProvider<ObservationHandler<?>> observationHandlers) {
-        this.observationHandlerGrouping = observationHandlerGrouping;
-        this.observationHandlers = observationHandlers;
-    }
-
-    @Override
-    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
-        if (bean instanceof ObservationRegistry) {
-            ObservationRegistry observationRegistry = (ObservationRegistry) bean;
-            List<ObservationHandler<?>> observationHandlerList =
-                    observationHandlers.orderedStream().collect(Collectors.toList());
-            observationHandlerGrouping.ifAvailable(grouping -> {
-                grouping.apply(observationHandlerList, observationRegistry.observationConfig());
-            });
-        }
-        return bean;
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports
deleted file mode 100644
index 7020e6b0..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports
+++ /dev/null
@@ -1,6 +0,0 @@
-org.apache.dubbo.spring.boot.observability.autoconfigure.otel.OpenTelemetryAutoConfiguration
-org.apache.dubbo.spring.boot.observability.autoconfigure.DubboMicrometerTracingAutoConfiguration
-org.apache.dubbo.spring.boot.observability.autoconfigure.DubboObservationAutoConfiguration
-org.apache.dubbo.spring.boot.observability.autoconfigure.brave.BraveAutoConfiguration
-org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.zipkin.ZipkinAutoConfiguration
-org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.otlp.OtlpAutoConfiguration
\ No newline at end of file
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/resources/META-INF/spring.factories b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/resources/META-INF/spring.factories
deleted file mode 100644
index 3f492d62..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/resources/META-INF/spring.factories
+++ /dev/null
@@ -1,8 +0,0 @@
-org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
-org.apache.dubbo.spring.boot.observability.autoconfigure.otel.OpenTelemetryAutoConfiguration,\
-org.apache.dubbo.spring.boot.observability.autoconfigure.DubboMicrometerTracingAutoConfiguration,\
-org.apache.dubbo.spring.boot.observability.autoconfigure.DubboObservationAutoConfiguration,\
-org.apache.dubbo.spring.boot.observability.autoconfigure.brave.BraveAutoConfiguration,\
-org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.zipkin.ZipkinAutoConfiguration,\
-org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.otlp.OtlpAutoConfiguration
-
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-observability-starter/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-observability-starter/pom.xml
deleted file mode 100644
index 0aeb99ac..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-observability-starter/pom.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-spring-boot-observability-starters</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-spring-boot-observability-starter</artifactId>
-  <packaging>jar</packaging>
-  <description>Apache Dubbo Spring Boot Observability Starter</description>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-observability-autoconfigure</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-actuator</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-brave-zipkin-starter/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-brave-zipkin-starter/pom.xml
deleted file mode 100644
index 6959ce15..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-brave-zipkin-starter/pom.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-spring-boot-observability-starters</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-spring-boot-tracing-brave-zipkin-starter</artifactId>
-  <packaging>jar</packaging>
-  <description>Apache Dubbo Spring Boot Tracing Brave Zipkin Starter</description>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-observability-autoconfigure</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>io.micrometer</groupId>
-      <artifactId>micrometer-tracing-bridge-brave</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>io.zipkin.reporter2</groupId>
-      <artifactId>zipkin-reporter-brave</artifactId>
-    </dependency>
-  </dependencies>
-
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-otel-otlp-starter/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-otel-otlp-starter/pom.xml
deleted file mode 100644
index 89f84cfe..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-otel-otlp-starter/pom.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-spring-boot-observability-starters</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>
-  <packaging>jar</packaging>
-  <description>Apache Dubbo Spring Boot Tracing Otel OTLP Starter</description>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-observability-autoconfigure</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>io.micrometer</groupId>
-      <artifactId>micrometer-tracing-bridge-otel</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>io.opentelemetry</groupId>
-      <artifactId>opentelemetry-exporter-otlp</artifactId>
-    </dependency>
-  </dependencies>
-
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-otel-zipkin-starter/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-otel-zipkin-starter/pom.xml
deleted file mode 100644
index 5d8bd5bb..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/dubbo-spring-boot-tracing-otel-zipkin-starter/pom.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-spring-boot-observability-starters</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-spring-boot-tracing-otel-zipkin-starter</artifactId>
-  <packaging>jar</packaging>
-  <description>Apache Dubbo Spring Boot Tracing Otel Zipkin Starter</description>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-observability-autoconfigure</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>io.micrometer</groupId>
-      <artifactId>micrometer-tracing-bridge-otel</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>io.opentelemetry</groupId>
-      <artifactId>opentelemetry-exporter-zipkin</artifactId>
-    </dependency>
-  </dependencies>
-
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/pom.xml
deleted file mode 100644
index 2e8e4d0b..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/pom.xml
+++ /dev/null
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-spring-boot-starters</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-spring-boot-observability-starters</artifactId>
-  <packaging>pom</packaging>
-
-  <modules>
-    <module>autoconfigure</module>
-    <module>dubbo-spring-boot-tracing-otel-zipkin-starter</module>
-    <module>dubbo-spring-boot-tracing-brave-zipkin-starter</module>
-    <module>dubbo-spring-boot-observability-starter</module>
-    <module>dubbo-spring-boot-tracing-otel-otlp-starter</module>
-  </modules>
-
-  <properties>
-    <micrometer.version>1.12.3</micrometer.version>
-    <micrometer-tracing.version>1.2.3</micrometer-tracing.version>
-    <opentelemetry.version>1.34.1</opentelemetry.version>
-    <zipkin-reporter.version>2.17.2</zipkin-reporter.version>
-    <prometheus-client.version>0.16.0</prometheus-client.version>
-  </properties>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>io.micrometer</groupId>
-        <artifactId>micrometer-bom</artifactId>
-        <version>${micrometer.version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-      <dependency>
-        <groupId>io.micrometer</groupId>
-        <artifactId>micrometer-tracing-bom</artifactId>
-        <version>${micrometer-tracing.version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-      <dependency>
-        <groupId>io.opentelemetry</groupId>
-        <artifactId>opentelemetry-bom</artifactId>
-        <version>${opentelemetry.version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-      <dependency>
-        <groupId>io.zipkin.reporter2</groupId>
-        <artifactId>zipkin-reporter-bom</artifactId>
-        <version>${zipkin-reporter.version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-      <dependency>
-        <groupId>io.prometheus</groupId>
-        <artifactId>simpleclient_bom</artifactId>
-        <version>${prometheus-client.version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/pom.xml
deleted file mode 100644
index 1d921ebd..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/pom.xml
+++ /dev/null
@@ -1,39 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  ~ Licensed to the Apache Software Foundation (ASF) under one or more
-  ~ contributor license agreements.  See the NOTICE file distributed with
-  ~ this work for additional information regarding copyright ownership.
-  ~ The ASF licenses this file to You under the Apache License, Version 2.0
-  ~ (the "License"); you may not use this file except in compliance with
-  ~ the License.  You may obtain a copy of the License at
-  ~
-  ~     http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-spring-boot</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-spring-boot-starters</artifactId>
-  <packaging>pom</packaging>
-  <description>Apache Dubbo Spring Boot Starters</description>
-
-  <modules>
-    <module>observability</module>
-    <module>dubbo-nacos-spring-boot-starter</module>
-    <module>dubbo-zookeeper-spring-boot-starter</module>
-    <module>dubbo-zookeeper-curator5-spring-boot-starter</module>
-  </modules>
-
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/pom.xml
deleted file mode 100644
index 3dbe3891..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-spring-boot/pom.xml
+++ /dev/null
@@ -1,183 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-parent</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-spring-boot</artifactId>
-
-  <packaging>pom</packaging>
-  <description>Apache Dubbo Spring Boot Parent</description>
-
-  <modules>
-    <module>dubbo-spring-boot-actuator</module>
-    <module>dubbo-spring-boot-autoconfigure</module>
-    <module>dubbo-spring-boot-compatible</module>
-    <module>dubbo-spring-boot-starter</module>
-    <module>dubbo-spring-boot-starters</module>
-  </modules>
-
-  <properties>
-    <spring-boot.version>2.7.18</spring-boot.version>
-    <dubbo.version>${revision}</dubbo.version>
-    <!-- Fix the bug of log4j refer:https://github.com/apache/logging-log4j2/pull/608 -->
-    <log4j2_version>2.23.0</log4j2_version>
-    <!-- Spring boot buddy is lower than the delivery dependency package version and can only show the defined dependency version -->
-    <byte-buddy.version>1.14.12</byte-buddy.version>
-  </properties>
-
-  <dependencyManagement>
-    <dependencies>
-      <!-- Spring Boot -->
-      <dependency>
-        <groupId>org.springframework.boot</groupId>
-        <artifactId>spring-boot-dependencies</artifactId>
-        <version>${spring-boot.version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <dependencies>
-    <!--JUnit Jupiter Engine to depend on the JUnit5 engine and JUnit 5 API -->
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-engine</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-params</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <!--JUnit Jupiter Engine to depend on the JUnit4 engine and JUnit 4 API  -->
-    <dependency>
-      <groupId>org.junit.vintage</groupId>
-      <artifactId>junit-vintage-engine</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>net.bytebuddy</groupId>
-      <artifactId>byte-buddy</artifactId>
-      <version>${byte-buddy.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>net.bytebuddy</groupId>
-      <artifactId>byte-buddy-agent</artifactId>
-      <version>${byte-buddy.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-check</artifactId>
-      <version>${project.parent.version}</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <!-- Used for packaging NOTICE & LICENSE to each sub-module jar-->
-    <resources>
-      <resource>
-        <filtering>false</filtering>
-        <directory>src/main/resources/</directory>
-      </resource>
-      <resource>
-        <targetPath>META-INF/</targetPath>
-        <filtering>false</filtering>
-        <directory>../</directory>
-        <includes>
-          <include>NOTICE</include>
-          <include>LICENSE</include>
-        </includes>
-      </resource>
-    </resources>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <version>${maven_jar_version}</version>
-        <configuration>
-          <archive>
-            <addMavenDescriptor>true</addMavenDescriptor>
-            <index>true</index>
-            <manifest>
-              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
-              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
-            </manifest>
-            <manifestEntries>
-              <Specification-Version>${project.version}</Specification-Version>
-              <Implementation-Version>${project.version}</Implementation-Version>
-            </manifestEntries>
-          </archive>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>${maven_compiler_version}</version>
-        <configuration>
-          <compilerArgs>
-            <compilerArg>-parameters</compilerArg>
-          </compilerArgs>
-          <fork>true</fork>
-          <source>${java_source_version}</source>
-          <target>${java_target_version}</target>
-          <encoding>${file_encoding}</encoding>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-
-  <profiles>
-    <profile>
-      <!-- Spring Boot 2.0 -->
-      <id>spring-boot-2.0</id>
-      <properties>
-        <spring-boot.version>2.0.9.RELEASE</spring-boot.version>
-      </properties>
-    </profile>
-
-    <profile>
-      <!-- Spring Boot 2.1 -->
-      <id>spring-boot-2.1</id>
-      <properties>
-        <spring-boot.version>2.1.15.RELEASE</spring-boot.version>
-      </properties>
-    </profile>
-
-    <profile>
-      <!-- Spring Boot 2.2 -->
-      <id>spring-boot-2.2</id>
-      <properties>
-        <spring-boot.version>2.2.8.RELEASE</spring-boot.version>
-      </properties>
-    </profile>
-  </profiles>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-dependencies-all/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-dependencies-all/pom.xml
deleted file mode 100644
index b0632440..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-dependencies-all/pom.xml
+++ /dev/null
@@ -1,468 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-dependencies-all</artifactId>
-  <description>Aggregate jacoco report</description>
-
-  <properties>
-    <skip_maven_deploy>true</skip_maven_deploy>
-  </properties>
-
-  <dependencies>
-    <!-- cluster -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-cluster</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- common -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-common</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- compatible -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-compatible</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- compiler -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-compiler</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- config -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-config-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-config-spring</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- config-center -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-configcenter-zookeeper</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-configcenter-apollo</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-configcenter-nacos</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- container -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-container-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-container-spring</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- distribution -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- filter -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-filter-cache</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-filter-validation</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- metadata -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-report-zookeeper</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-report-nacos</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-report-redis</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-processor</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-definition-protobuf</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- metrics -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metrics-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metrics-default</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metrics-registry</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metrics-metadata</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metrics-config-center</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metrics-prometheus</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- monitor -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-monitor-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-monitor-default</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- native -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-native</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- native-plugin -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-native-plugin</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-maven-plugin</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- plugin -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-auth</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-security</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-qos-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-qos</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-security</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-reactive</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- registry -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-multicast</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-multiple</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-nacos</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-zookeeper</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- remoting -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-remoting-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-remoting-http</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-remoting-netty</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-remoting-netty4</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-remoting-zookeeper</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-remoting-zookeeper-curator5</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- rpc -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-dubbo</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-injvm</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-rest</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-triple</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- serialization -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-serialization-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-serialization-hessian2</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-serialization-fastjson2</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-serialization-jdk</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- spring-boot -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-actuator</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-autoconfigure</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-actuator-compatible</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-autoconfigure-compatible</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-observability-autoconfigure</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-tracing-otel-zipkin-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-tracing-otel-otlp-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-tracing-brave-zipkin-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-spring-boot-observability-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-nacos-spring-boot-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-zookeeper-spring-boot-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-zookeeper-curator5-spring-boot-starter</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- test -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-check</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-common</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-modules</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-spring</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-spring3.2</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-spring4.1</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-spring4.2</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-  </dependencies>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/pom.xml
deleted file mode 100644
index 2d0866fe..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/pom.xml
+++ /dev/null
@@ -1,100 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-test-check</artifactId>
-
-  <properties>
-    <maven.compiler.source>8</maven.compiler.source>
-    <maven.compiler.target>8</maven.compiler.target>
-    <skip_maven_deploy>true</skip_maven_deploy>
-    <curator.test.version>4.2.0</curator.test.version>
-    <zookeeper.version>3.7.2</zookeeper.version>
-    <curator5.version>4.2.0</curator5.version>
-    <commons.compress.version>1.26.0</commons.compress.version>
-    <junit.platform.launcher.version>1.9.3</junit.platform.launcher.version>
-    <commons.exec.version>1.4.0</commons.exec.version>
-    <async.http.client.version>2.12.3</async.http.client.version>
-  </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-common</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.junit.platform</groupId>
-      <artifactId>junit-platform-launcher</artifactId>
-      <version>${junit.platform.launcher.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-lang3</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.zookeeper</groupId>
-      <artifactId>zookeeper</artifactId>
-      <version>${zookeeper.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-framework</artifactId>
-      <version>${curator5.version}</version>
-    </dependency>
-    <!-- tar.gz -->
-    <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-compress</artifactId>
-      <version>${commons.compress.version}</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.commons</groupId>
-      <artifactId>commons-exec</artifactId>
-      <version>${commons.exec.version}</version>
-    </dependency>
-    <!-- async-http-client -->
-    <dependency>
-      <groupId>org.asynchttpclient</groupId>
-      <artifactId>async-http-client</artifactId>
-      <version>${async.http.client.version}</version>
-    </dependency>
-  </dependencies>
-
-  <profiles>
-    <profile>
-      <id>curator5</id>
-      <activation>
-        <jdk>[17,</jdk>
-      </activation>
-      <properties>
-        <curator.test.version>5.1.0</curator.test.version>
-        <zookeeper.version>3.6.0</zookeeper.version>
-        <curator5.version>5.1.0</curator5.version>
-      </properties>
-    </profile>
-  </profiles>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/AbstractRegistryCenterTestExecutionListener.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/AbstractRegistryCenterTestExecutionListener.java
deleted file mode 100644
index 6c29169e..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/AbstractRegistryCenterTestExecutionListener.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import org.junit.platform.engine.TestSource;
-import org.junit.platform.engine.support.descriptor.ClassSource;
-import org.junit.platform.launcher.TestExecutionListener;
-import org.junit.platform.launcher.TestIdentifier;
-import org.junit.platform.launcher.TestPlan;
-
-/**
- * The abstract implementation provides the basic methods. <p></p>
- * {@link #needRegistryCenter(TestPlan)}: checks if current {@link TestPlan} need registry center.
- */
-public abstract class AbstractRegistryCenterTestExecutionListener implements TestExecutionListener {
-
-    /**
-     * The JVM arguments to set if it can use embedded zookeeper, the default value is {@code true}.
-     */
-    private static final String CONFIG_ENABLE_EMBEDDED_ZOOKEEPER = "enableEmbeddedZookeeper";
-
-    /**
-     * The registry center should start
-     * if we want to run the test cases in the given package.
-     */
-    private static final Set<String> PACKAGE_NAME = new HashSet<>();
-
-    /**
-     * Use embedded zookeeper or not.
-     */
-    private static boolean enableEmbeddedZookeeper;
-
-    static {
-        // dubbo-config module
-        PACKAGE_NAME.add("org.apache.dubbo.config");
-        // dubbo-test module
-        PACKAGE_NAME.add("org.apache.dubbo.test");
-        // dubbo-registry
-        PACKAGE_NAME.add("org.apache.dubbo.registry");
-        // dubbo-remoting-zookeeper
-        PACKAGE_NAME.add("org.apache.dubbo.remoting.zookeeper");
-        // dubbo-metadata-report-zookeeper
-        PACKAGE_NAME.add("org.apache.dubbo.metadata.store.zookeeper");
-
-        enableEmbeddedZookeeper = Boolean.valueOf(System.getProperty(CONFIG_ENABLE_EMBEDDED_ZOOKEEPER, "true"));
-    }
-
-    /**
-     * Checks if current {@link TestPlan} need registry center.
-     */
-    public boolean needRegistryCenter(TestPlan testPlan) {
-        return testPlan.getRoots().stream()
-                        .flatMap(testIdentifier -> testPlan.getChildren(testIdentifier).stream())
-                        .filter(testIdentifier -> testIdentifier.getSource().isPresent())
-                        .filter(testIdentifier -> supportEmbeddedZookeeper(testIdentifier))
-                        .count()
-                > 0;
-    }
-
-    /**
-     * Checks if current {@link TestIdentifier} need registry center.
-     */
-    public boolean needRegistryCenter(TestIdentifier testIdentifier) {
-        return supportEmbeddedZookeeper(testIdentifier);
-    }
-
-    /**
-     * Checks if the current {@link TestIdentifier} need embedded zookeeper.
-     */
-    private boolean supportEmbeddedZookeeper(TestIdentifier testIdentifier) {
-        if (!enableEmbeddedZookeeper) {
-            return false;
-        }
-        TestSource testSource = testIdentifier.getSource().orElse(null);
-        if (testSource instanceof ClassSource) {
-            String packageName =
-                    ((ClassSource) testSource).getJavaClass().getPackage().getName();
-            for (String pkgName : PACKAGE_NAME) {
-                if (packageName.contains(pkgName)) {
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/DubboTestChecker.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/DubboTestChecker.java
deleted file mode 100644
index 6eb150ae..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/DubboTestChecker.java
+++ /dev/null
@@ -1,320 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.rpc.model.FrameworkModel;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.Comparator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.stream.Collectors;
-
-import org.apache.commons.lang3.StringUtils;
-import org.junit.platform.engine.TestExecutionResult;
-import org.junit.platform.engine.TestSource;
-import org.junit.platform.engine.support.descriptor.ClassSource;
-import org.junit.platform.engine.support.descriptor.MethodSource;
-import org.junit.platform.launcher.TestExecutionListener;
-import org.junit.platform.launcher.TestIdentifier;
-import org.junit.platform.launcher.TestPlan;
-
-/**
- * A test listener to check unclosed threads of test.
- *
- * <pre>
- * Usages:
- *  # enable thread checking
- *  mvn test -DcheckThreads=true
- *
- *  # change thread dump wait time (ms)
- *  mvn test -DcheckThreads=true -DthreadDumpWaitTime=5000
- *
- *  # print test reports of all sub modules to single file
- *  mvn test -DcheckThreads=true -DthreadDumpWaitTime=5000 -DreportFile=/path/test-check-report.txt
- * </pre>
- */
-public class DubboTestChecker implements TestExecutionListener {
-
-    private static final String CONFIG_CHECK_MODE = "checkMode";
-    private static final String CONFIG_CHECK_THREADS = "checkThreads";
-    private static final String CONFIG_THREAD_DUMP_WAIT_TIME = "threadDumpWaitTime";
-    private static final String CONFIG_FORCE_DESTROY = "forceDestroy";
-    private static final String CONFIG_REPORT_FILE = "reportFile";
-    private static final String MODE_CLASS = "class";
-    private static final String MODE_METHOD = "method";
-
-    private static final Logger logger = LoggerFactory.getLogger(DubboTestChecker.class);
-
-    /**
-     * check mode:
-     * class - check after class execution finished
-     * method - check after method execution finished
-     */
-    private String checkMode;
-    /**
-     * whether check unclosed threads
-     */
-    private boolean checkThreads;
-    /**
-     * sleep time before dump threads
-     */
-    private long threadDumpWaitTimeMs;
-    /**
-     * whether force destroy dubbo engine, default value is true.
-     */
-    private boolean forceDestroyDubboAfterClass;
-
-    /**
-     * Check report file
-     */
-    private File reportFile;
-
-    /**
-     * thread -> stacktrace
-     */
-    private Map<Thread, StackTraceElement[]> unclosedThreadMap = new ConcurrentHashMap<>();
-    // test class name -> thread list
-    private Map<String, List<Thread>> unclosedThreadsOfTestMap = new ConcurrentHashMap<>();
-    private String identifier;
-    private PrintWriter reportWriter;
-    private String projectDir;
-    private FileOutputStream reportFileOut;
-
-    @Override
-    public void testPlanExecutionStarted(TestPlan testPlan) {
-        try {
-            init(System.getProperties());
-        } catch (IOException e) {
-            throw new IllegalStateException("Test checker init failed", e);
-        }
-    }
-
-    public void init(Properties properties) throws IOException {
-        if (properties == null) {
-            properties = new Properties();
-        }
-        // log prefix
-        identifier = "[" + this.getClass().getSimpleName() + "] ";
-
-        // checkMode: class/method
-        checkMode = StringUtils.lowerCase(properties.getProperty(CONFIG_CHECK_MODE, MODE_CLASS));
-        // checkThreads: true/false
-        checkThreads = Boolean.parseBoolean(properties.getProperty(CONFIG_CHECK_THREADS, "false"));
-        // threadDumpWaitTime
-        threadDumpWaitTimeMs = Long.parseLong(properties.getProperty(CONFIG_THREAD_DUMP_WAIT_TIME, "5000"));
-        // force destroy dubbo
-        forceDestroyDubboAfterClass = Boolean.parseBoolean(properties.getProperty(CONFIG_FORCE_DESTROY, "true"));
-
-        // project dir
-        projectDir = new File(".").getCanonicalPath();
-
-        // report file
-        String reportFileCanonicalPath = "";
-        String defaultReportDir = "target/";
-        String defaultReportFileName = "test-check-report.txt";
-        if (checkThreads) {
-            String reportFilePath =
-                    properties.getProperty(CONFIG_REPORT_FILE, defaultReportDir + defaultReportFileName);
-            this.reportFile = new File(reportFilePath);
-            if (reportFile.isDirectory()) {
-                reportFile.mkdirs();
-                reportFile = new File(reportFile, defaultReportFileName);
-            }
-            reportFileOut = new FileOutputStream(this.reportFile);
-            reportWriter = new PrintWriter(reportFileOut);
-            reportFileCanonicalPath = reportFile.getCanonicalPath();
-        }
-
-        log("Project dir: " + projectDir);
-        log(String.format(
-                "Dubbo test checker configs: checkMode=%s, checkThreads=%s, threadDumpWaitTimeMs=%s, forceDestroy=%s, reportFile=%s",
-                checkMode, checkThreads, threadDumpWaitTimeMs, forceDestroyDubboAfterClass, reportFileCanonicalPath));
-        flushReportFile();
-    }
-
-    @Override
-    public void testPlanExecutionFinished(TestPlan testPlan) {
-
-        // print all unclosed threads
-        if (checkThreads) {
-            printThreadCheckingSummaryReport();
-        } else {
-            log("Thread checking is disabled, use -DcheckThreads=true to check unclosed threads.");
-        }
-        if (reportWriter != null) {
-            reportWriter.close();
-        }
-    }
-
-    private void printThreadCheckingSummaryReport() {
-        log("===== Thread Checking Summary Report ======");
-        log("Project dir: " + projectDir);
-        log("Total found " + unclosedThreadMap.size() + " unclosed threads in " + unclosedThreadsOfTestMap.size()
-                + " tests.");
-        log("");
-        unclosedThreadsOfTestMap.forEach((testClassName, threads) -> {
-            printUnclosedThreads(threads, testClassName);
-        });
-        flushReportFile();
-    }
-
-    private void flushReportFile() {
-        try {
-            if (reportWriter != null) {
-                reportWriter.flush();
-            }
-            if (reportFileOut != null) {
-                reportFileOut.getFD().sync();
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-    }
-
-    public Map<Thread, StackTraceElement[]> getUnclosedThreadMap() {
-        return unclosedThreadMap;
-    }
-
-    @Override
-    public void executionStarted(TestIdentifier testIdentifier) {
-        TestSource testSource = testIdentifier.getSource().orElse(null);
-        if (testSource instanceof ClassSource) {
-            //            ClassSource source = (ClassSource) testSource;
-            //            log("Run test class: " + source.getClassName());
-        } else if (testSource instanceof MethodSource) {
-            MethodSource source = (MethodSource) testSource;
-            log("Run test method: " + source.getClassName() + "#" + source.getMethodName());
-        }
-    }
-
-    @Override
-    public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
-
-        TestSource testSource = testIdentifier.getSource().orElse(null);
-        String testClassName;
-        if (testSource instanceof MethodSource) {
-            if (!StringUtils.contains(checkMode, MODE_METHOD)) {
-                return;
-            }
-            MethodSource methodSource = (MethodSource) testSource;
-            testClassName = methodSource.getClassName();
-            // log("Finish test method: " + methodSource.getClassName() + "#" + methodSource.getMethodName());
-        } else if (testSource instanceof ClassSource) {
-            if (forceDestroyDubboAfterClass) {
-                // make sure destroy dubbo engine
-                FrameworkModel.destroyAll();
-            }
-
-            if (!StringUtils.contains(checkMode, MODE_CLASS)) {
-                return;
-            }
-
-            ClassSource source = (ClassSource) testSource;
-            testClassName = source.getClassName();
-            // log("Finish test class: " + source.getClassName());
-        } else {
-            return;
-        }
-
-        if (checkThreads) {
-            checkUnclosedThreads(testClassName, threadDumpWaitTimeMs);
-        }
-    }
-
-    public Map<Thread, StackTraceElement[]> checkUnclosedThreads(String testClassName, long waitMs) {
-        // wait for shutdown
-        log("Wait " + waitMs + "ms to check threads of " + testClassName + " ...");
-        try {
-            Thread.sleep(waitMs);
-        } catch (InterruptedException e) {
-        }
-
-        Map<Thread, StackTraceElement[]> threadStacks = Thread.getAllStackTraces();
-        List<Thread> unclosedThreads = threadStacks.keySet().stream()
-                .filter(thread -> !StringUtils.startsWithAny(
-                        thread.getName(),
-                        "Reference Handler",
-                        "Finalizer",
-                        "Signal Dispatcher",
-                        "Attach Listener",
-                        "process reaper",
-                        "main" // jvm
-                        ,
-                        "surefire-forkedjvm-" // surefire plugin
-                        ))
-                .filter(thread -> !unclosedThreadMap.containsKey(thread))
-                .collect(Collectors.toList());
-        unclosedThreads.sort(Comparator.comparing(Thread::getName));
-        if (unclosedThreads.size() > 0) {
-            for (Thread thread : unclosedThreads) {
-                unclosedThreadMap.put(thread, threadStacks.get(thread));
-            }
-            unclosedThreadsOfTestMap.put(testClassName, unclosedThreads);
-            printUnclosedThreads(unclosedThreads, testClassName);
-        }
-
-        // return new unclosed thread map
-        Map<Thread, StackTraceElement[]> unclosedThreadMap = new LinkedHashMap<>();
-        for (Thread thread : unclosedThreads) {
-            unclosedThreadMap.put(thread, threadStacks.get(thread));
-        }
-        return unclosedThreadMap;
-    }
-
-    private void printUnclosedThreads(List<Thread> threads, String testClassName) {
-        if (threads.size() > 0) {
-            log("Found " + threads.size() + " unclosed threads in test: " + testClassName);
-            for (Thread thread : threads) {
-                StackTraceElement[] stackTrace = unclosedThreadMap.get(thread);
-                log(getFullStacktrace(thread, stackTrace));
-            }
-            flushReportFile();
-        }
-    }
-
-    private void log(String msg) {
-        // logger.info(identifier + msg);
-        String s = identifier + msg;
-        System.out.println(s);
-        if (reportWriter != null) {
-            reportWriter.println(s);
-        }
-    }
-
-    public static String getFullStacktrace(Thread thread, StackTraceElement[] stackTrace) {
-        StringBuilder sb = new StringBuilder("Thread: \"" + thread.getName() + "\"" + " Id=" + thread.getId());
-        sb.append(' ').append(thread.getState());
-        sb.append('\n');
-        if (stackTrace == null) {
-            stackTrace = thread.getStackTrace();
-        }
-        for (StackTraceElement ste : stackTrace) {
-            sb.append("    at ").append(ste.toString());
-            sb.append('\n');
-        }
-        return sb.toString();
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/RegistryCenterFinished.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/RegistryCenterFinished.java
deleted file mode 100644
index 35d15179..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/RegistryCenterFinished.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check;
-
-import org.apache.dubbo.test.check.registrycenter.GlobalRegistryCenter;
-
-import org.junit.platform.launcher.TestPlan;
-
-/**
- * The entrance to terminate the mocked registry center.
- */
-public class RegistryCenterFinished extends AbstractRegistryCenterTestExecutionListener {
-
-    @Override
-    public void testPlanExecutionFinished(TestPlan testPlan) {
-        super.testPlanExecutionFinished(testPlan);
-        try {
-            if (needRegistryCenter(testPlan)) {
-                GlobalRegistryCenter.shutdown();
-            }
-        } catch (Throwable cause) {
-            throw new IllegalStateException("Failed to terminate zookeeper instance in unit test", cause);
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/RegistryCenterStarted.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/RegistryCenterStarted.java
deleted file mode 100644
index ca0e4b3a..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/RegistryCenterStarted.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check;
-
-import org.apache.dubbo.test.check.registrycenter.GlobalRegistryCenter;
-
-import org.junit.platform.engine.TestExecutionResult;
-import org.junit.platform.launcher.TestIdentifier;
-import org.junit.platform.launcher.TestPlan;
-
-/**
- * The entrance to start the mocked registry center.
- */
-public class RegistryCenterStarted extends AbstractRegistryCenterTestExecutionListener {
-
-    @Override
-    public void testPlanExecutionStarted(TestPlan testPlan) {
-        try {
-            if (needRegistryCenter(testPlan)) {
-                GlobalRegistryCenter.startup();
-            }
-        } catch (Throwable cause) {
-            throw new IllegalStateException("Failed to start zookeeper instance in unit test", cause);
-        }
-    }
-
-    @Override
-    public void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {
-        try {
-            if (needRegistryCenter(testIdentifier)) {
-                GlobalRegistryCenter.reset();
-            }
-        } catch (Throwable cause) {
-            // ignore the exception
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/exception/DubboTestException.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/exception/DubboTestException.java
deleted file mode 100644
index 87ca7345..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/exception/DubboTestException.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.exception;
-/**
- * Define a specified exception when test.
- */
-public class DubboTestException extends RuntimeException {
-
-    /**
-     * Constructs a new {@link DubboTestException} with the specified detail message.
-     *
-     * @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
-     */
-    public DubboTestException(String message) {
-        super(message);
-    }
-
-    /**
-     * Constructs a new {@link DubboTestException} with the specified detail message and cause.
-     *
-     * @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
-     * @param cause   the cause (which is saved for later retrieval by the {@link #getCause()} method).
-     *                (A null value is permitted, and indicates that the cause is nonexistent or unknown.)
-     */
-    public DubboTestException(String message, Throwable cause) {
-        super(message, cause);
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Config.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Config.java
deleted file mode 100644
index 814acf2c..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Config.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter;
-
-/**
- * Define the config to obtain the
- */
-public interface Config {
-
-    /**
-     * Returns the default connection address in single registry center.
-     */
-    default String getConnectionAddress() {
-        return getConnectionAddress1();
-    }
-
-    /**
-     * Returns the first connection address in multiple registry center.
-     */
-    String getConnectionAddress1();
-
-    /**
-     * Returns the second connection address in multiple registry center.
-     */
-    String getConnectionAddress2();
-
-    /**
-     * Returns the default connection address key in single registry center.
-     * <h3>How to use</h3>
-     * <pre>
-     * System.getProperty({@link #getConnectionAddressKey()})
-     * </pre>
-     */
-    String getConnectionAddressKey();
-
-    /**
-     * Returns the first connection address key in multiple registry center.
-     * <h3>How to use</h3>
-     * <pre>
-     * System.getProperty({@link #getConnectionAddressKey1()})
-     * </pre>
-     */
-    String getConnectionAddressKey1();
-
-    /**
-     * Returns the second connection address key in multiple registry center.
-     * <h3>How to use</h3>
-     * <pre>
-     * System.getProperty({@link #getConnectionAddressKey2()})
-     * </pre>
-     */
-    String getConnectionAddressKey2();
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Context.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Context.java
deleted file mode 100644
index b6fb6169..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Context.java
+++ /dev/null
@@ -1,22 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter;
-
-/**
- * The global context to store all initialized variables.
- */
-public interface Context {}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/GlobalRegistryCenter.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/GlobalRegistryCenter.java
deleted file mode 100644
index 9fadc1e9..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/GlobalRegistryCenter.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter;
-
-/**
- * The global registry center.
- */
-public class GlobalRegistryCenter {
-
-    /**
-     * The default static registry center instance.
-     */
-    private static final RegistryCenter INSTANCE = new ZookeeperRegistryCenter();
-
-    /**
-     * Start the registry center.
-     *
-     * @throws Exception when an exception occurred
-     */
-    public static void startup() throws Exception {
-        INSTANCE.startup();
-    }
-
-    /**
-     * Reset the registry center.
-     *
-     * @throws Exception when an exception occurred
-     */
-    public static void reset() throws Exception {
-        INSTANCE.reset();
-    }
-
-    /**
-     * Stop the registry center.
-     *
-     * @throws Exception when an exception occurred
-     */
-    public static void shutdown() throws Exception {
-        INSTANCE.shutdown();
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Initializer.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Initializer.java
deleted file mode 100644
index 73155652..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Initializer.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter;
-
-import org.apache.dubbo.test.check.exception.DubboTestException;
-
-/**
- * The purpose of this class is to do initialization when we build {@link RegistryCenter}.
- */
-public interface Initializer {
-
-    /**
-     * Initialize the global context.
-     * @param context the global context to be initialized.
-     * @throws DubboTestException when any exception occurred.
-     */
-    void initialize(Context context) throws DubboTestException;
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Processor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Processor.java
deleted file mode 100644
index 3df6c6ad..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/Processor.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter;
-
-import org.apache.dubbo.test.check.exception.DubboTestException;
-
-/**
- * Define the processor to execute {@link Process} with the {@link org.apache.dubbo.test.check.registrycenter.Initializer.Context}
- */
-public interface Processor {
-
-    /**
-     * Process the command with the global context.
-     *
-     * @param context the global context.
-     * @throws DubboTestException when any exception occurred.
-     */
-    void process(Context context) throws DubboTestException;
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/RegistryCenter.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/RegistryCenter.java
deleted file mode 100644
index e28f65ee..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/RegistryCenter.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter;
-
-import org.apache.dubbo.test.check.exception.DubboTestException;
-
-/**
- * The registry center.
- */
-public interface RegistryCenter {
-
-    /**
-     * Start the registry center.
-     *
-     * @throws DubboTestException when an exception occurred
-     */
-    void startup() throws DubboTestException;
-
-    /**
-     * Reset the registry center after ut exited.
-     * @throws DubboTestException when an exception occurred
-     */
-    void reset() throws DubboTestException;
-
-    /**
-     * Stop the registry center.
-     *
-     * @throws DubboTestException when an exception occurred
-     */
-    void shutdown() throws DubboTestException;
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/ZookeeperRegistryCenter.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/ZookeeperRegistryCenter.java
deleted file mode 100644
index e9aa0459..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/ZookeeperRegistryCenter.java
+++ /dev/null
@@ -1,262 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.utils.Assert;
-import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperWindowsContext;
-import org.apache.dubbo.test.check.registrycenter.initializer.ConfigZookeeperInitializer;
-import org.apache.dubbo.test.check.registrycenter.initializer.DownloadZookeeperInitializer;
-import org.apache.dubbo.test.check.registrycenter.initializer.UnpackZookeeperInitializer;
-import org.apache.dubbo.test.check.registrycenter.initializer.ZookeeperInitializer;
-import org.apache.dubbo.test.check.registrycenter.processor.ResetZookeeperProcessor;
-import org.apache.dubbo.test.check.registrycenter.processor.StartZookeeperUnixProcessor;
-import org.apache.dubbo.test.check.registrycenter.processor.StartZookeeperWindowsProcessor;
-import org.apache.dubbo.test.check.registrycenter.processor.StopZookeeperUnixProcessor;
-import org.apache.dubbo.test.check.registrycenter.processor.StopZookeeperWindowsProcessor;
-
-import java.io.File;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * Build the registry center with embedded zookeeper, which is run by a new process.
- */
-class ZookeeperRegistryCenter implements RegistryCenter {
-
-    public ZookeeperRegistryCenter() {
-        this.initializers = new ArrayList<>();
-        this.initializers.add(new DownloadZookeeperInitializer());
-        this.initializers.add(new UnpackZookeeperInitializer());
-        this.initializers.add(new ConfigZookeeperInitializer());
-        // start processor
-        this.put(OS.Unix, Command.Start, new StartZookeeperUnixProcessor());
-        this.put(OS.Windows, Command.Start, new StartZookeeperWindowsProcessor());
-
-        // reset processor
-        Processor resetProcessor = new ResetZookeeperProcessor();
-        this.put(OS.Unix, Command.Reset, resetProcessor);
-        this.put(OS.Windows, Command.Reset, resetProcessor);
-
-        // stop processor
-        this.put(OS.Unix, Command.Stop, new StopZookeeperUnixProcessor());
-        this.put(OS.Windows, Command.Stop, new StopZookeeperWindowsProcessor());
-
-        // initialize the global context
-        if (OS.Unix.equals(os)) {
-            this.context = new ZookeeperContext();
-        } else {
-            this.context = new ZookeeperWindowsContext();
-        }
-
-        // initialize the context
-        this.context.setUnpackedDirectory(UNPACKED_DIRECTORY);
-        this.context.setSourceFile(TARGET_FILE_PATH);
-    }
-
-    private static final Logger logger = LoggerFactory.getLogger(ZookeeperRegistryCenter.class);
-
-    /**
-     * The JVM arguments to set the embedded zookeeper directory.
-     */
-    private static final String CONFIG_EMBEDDED_ZOOKEEPER_DIRECTORY = "embeddedZookeeperPath";
-
-    /**
-     * The OS type.
-     */
-    private static OS os = getOS();
-
-    /**
-     * All of {@link ZookeeperInitializer} instances.
-     */
-    private List<Initializer> initializers;
-
-    /**
-     * The global context of zookeeper.
-     */
-    private ZookeeperContext context;
-
-    /**
-     * To store all processor instances.
-     */
-    private Map<OS, Map<Command, Processor>> processors = new HashMap<>();
-
-    /**
-     * The default unpacked directory.
-     */
-    private static final String UNPACKED_DIRECTORY = "apache-zookeeper-bin";
-
-    /**
-     * The target name of zookeeper binary file.
-     */
-    private static final String TARGET_ZOOKEEPER_FILE_NAME = UNPACKED_DIRECTORY + ".tar.gz";
-
-    /**
-     * The path of target zookeeper binary file.
-     */
-    private static final Path TARGET_FILE_PATH = getTargetFilePath();
-
-    /**
-     * The {@link #INITIALIZED} for flagging the {@link #startup()} method is called or not.
-     */
-    private static final AtomicBoolean INITIALIZED = new AtomicBoolean(false);
-
-    /**
-     * Returns the directory to store zookeeper binary archive.
-     * <p>The priorities to obtain the directory are as follows:</p>
-     * <p>1. Use System.getProperty({@link #CONFIG_EMBEDDED_ZOOKEEPER_DIRECTORY}) if not null or empty</p>
-     * <p>2. Use System.getProperty(user.home) if not null or empty</p>
-     * <p>3. Use System.getProperty(java.io.tmpdir)</p>
-     */
-    private static String getEmbeddedZookeeperDirectory() {
-        String directory;
-        // Use System.getProperty({@link #CONFIG_EMBEDDED_ZOOKEEPER_DIRECTORY})
-        directory = System.getProperty(CONFIG_EMBEDDED_ZOOKEEPER_DIRECTORY);
-        logger.info(String.format("The customized directory is %s to store zookeeper binary archive.", directory));
-        if (StringUtils.isNotEmpty(directory)) {
-            return directory;
-        }
-        // Use System.getProperty(user.home)
-        logger.info(String.format("The user home is %s to store zookeeper binary archive.", directory));
-        directory = System.getProperty("user.home");
-        logger.info(String.format("user.home is %s", directory));
-        if (StringUtils.isEmpty(directory)) {
-            // Use default temporary directory
-            directory = System.getProperty("java.io.tmpdir");
-            logger.info(String.format("The temporary directory is %s to store zookeeper binary archive.", directory));
-        }
-        Assert.notEmptyString(directory, "The directory to store zookeeper binary archive cannot be null or empty.");
-        return directory + File.separator + ".tmp" + File.separator + "zookeeper";
-    }
-
-    /**
-     * Returns the target file path.
-     */
-    private static Path getTargetFilePath() {
-        String zookeeperDirectory = getEmbeddedZookeeperDirectory();
-        Path targetFilePath = Paths.get(zookeeperDirectory, TARGET_ZOOKEEPER_FILE_NAME);
-        logger.info("Target file's absolute directory: " + targetFilePath);
-        return targetFilePath;
-    }
-
-    /**
-     * Returns the Operating System.
-     */
-    private static OS getOS() {
-        String osName = System.getProperty("os.name").toLowerCase();
-        OS os = OS.Unix;
-        if (osName.contains("windows")) {
-            os = OS.Windows;
-        }
-        return os;
-    }
-
-    /**
-     * Store all initialized processor instances.
-     *
-     * @param os        the {@link OS} type.
-     * @param command   the {@link Command} to execute.
-     * @param processor the {@link Processor} to run.
-     */
-    private void put(OS os, Command command, Processor processor) {
-        Map<Command, Processor> commandProcessorMap = this.processors.get(os);
-        if (commandProcessorMap == null) {
-            commandProcessorMap = new HashMap<>();
-            this.processors.put(os, commandProcessorMap);
-        }
-        commandProcessorMap.put(command, processor);
-    }
-
-    /**
-     * Gets the {@link Processor} with the given {@link OS} type and {@link Command}.
-     *
-     * @param os      the {@link OS} type.
-     * @param command the {@link Command} to execute.
-     * @return the {@link Processor} to run.
-     */
-    private Processor get(OS os, Command command) {
-        Map<Command, Processor> commandProcessorMap = this.processors.get(os);
-        Objects.requireNonNull(commandProcessorMap, "The command with the OS cannot be null");
-        Processor processor = commandProcessorMap.get(command);
-        Objects.requireNonNull(processor, "The processor cannot be null");
-        return processor;
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void startup() throws DubboTestException {
-        if (!INITIALIZED.get()) {
-            // global look, make sure only one thread can initialize the zookeeper instances.
-            synchronized (ZookeeperRegistryCenter.class) {
-                if (!INITIALIZED.get()) {
-                    for (Initializer initializer : this.initializers) {
-                        initializer.initialize(this.context);
-                    }
-                    // add shutdown hook
-                    Runtime.getRuntime().addShutdownHook(new Thread(() -> shutdown()));
-                    INITIALIZED.set(true);
-                }
-            }
-        }
-        this.get(os, Command.Start).process(this.context);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void reset() throws DubboTestException {
-        this.get(os, Command.Reset).process(this.context);
-    }
-
-    /**
-     * {@inheritDoc}
-     */
-    @Override
-    public void shutdown() throws DubboTestException {
-        this.get(os, Command.Stop).process(this.context);
-    }
-
-    /**
-     * The type of OS.
-     */
-    enum OS {
-        Windows,
-        Unix
-    }
-
-    /**
-     * The commands to support the zookeeper.
-     */
-    enum Command {
-        Start,
-        Reset,
-        Stop
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/config/ZookeeperConfig.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/config/ZookeeperConfig.java
deleted file mode 100644
index 487da08c..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/config/ZookeeperConfig.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.config;
-
-import org.apache.dubbo.test.check.registrycenter.Config;
-
-/**
- * The zookeeper config in registry center.
- */
-public class ZookeeperConfig implements Config {
-
-    /**
-     * The system properties config key with zookeeper port.
-     */
-    private static final String ZOOKEEPER_PORT_KEY = "zookeeper.port";
-
-    /**
-     * The system properties config key with first zookeeper port.
-     */
-    private static final String ZOOKEEPER_PORT_1_KEY = "zookeeper.port.1";
-
-    /**
-     * The system properties config key with second zookeeper port.
-     */
-    private static final String ZOOKEEPER_PORT_2_KEY = "zookeeper.port.2";
-
-    /**
-     * The system properties config key with zookeeper connection address.
-     */
-    private static final String ZOOKEEPER_CONNECTION_ADDRESS_KEY = "zookeeper.connection.address";
-
-    /**
-     * The system properties config key with first zookeeper connection address.
-     */
-    private static final String ZOOKEEPER_CONNECTION_ADDRESS_1_KEY = "zookeeper.connection.address.1";
-
-    /**
-     * The system properties config key with second zookeeper connection address.
-     */
-    private static final String ZOOKEEPER_CONNECTION_ADDRESS_2_KEY = "zookeeper.connection.address.2";
-
-    /**
-     * The default first client port of zookeeper.
-     */
-    public static final int DEFAULT_CLIENT_PORT_1 = 2181;
-
-    /**
-     * The default second client port of zookeeper.
-     */
-    public static final int DEFAULT_CLIENT_PORT_2 = 2182;
-
-    /**
-     * The default client ports of zookeeper.
-     */
-    private static final int[] CLIENT_PORTS = new int[2];
-
-    /**
-     * The default admin server ports of zookeeper.
-     */
-    private static final int[] DEFAULT_ADMIN_SERVER_PORTS = new int[] {18081, 18082};
-
-    /**
-     * The default version of zookeeper.
-     */
-    private static final String DEFAULT_ZOOKEEPER_VERSION = "3.6.0";
-
-    /**
-     * The format for zookeeper connection address.
-     */
-    private static final String CONNECTION_ADDRESS_FORMAT = "zookeeper://127.0.0.1:%d";
-
-    // initialize the client ports of zookeeper.
-    static {
-        // There are two client ports
-
-        // The priority of the one is that get it from system properties config
-        // with the key of {@link #ZOOKEEPER_PORT_1_KEY} first, and then {@link #ZOOKEEPER_PORT_KEY},
-        // finally use {@link #DEFAULT_CLIENT_PORT_1} as default port
-
-        // The priority of the other is that get it from system properties config with the key of {@link
-        // #ZOOKEEPER_PORT_2_KEY} first,
-        // and then use {@link #DEFAULT_CLIENT_PORT_2} as default port
-
-        int port1 = DEFAULT_CLIENT_PORT_1;
-        int port2 = DEFAULT_CLIENT_PORT_2;
-        String portConfig1 = System.getProperty(ZOOKEEPER_PORT_1_KEY, System.getProperty(ZOOKEEPER_PORT_KEY));
-        if (portConfig1 != null) {
-            try {
-                port1 = Integer.parseInt(portConfig1);
-            } catch (NumberFormatException e) {
-                port1 = DEFAULT_CLIENT_PORT_1;
-            }
-        }
-
-        String portConfig2 = System.getProperty(ZOOKEEPER_PORT_2_KEY);
-        if (portConfig2 != null) {
-            try {
-                port2 = Integer.parseInt(portConfig2);
-            } catch (NumberFormatException e) {
-                port2 = DEFAULT_CLIENT_PORT_2;
-            }
-        }
-
-        if (port1 == port2) {
-            throw new IllegalArgumentException(
-                    String.format("The client ports %d and %d of zookeeper cannot be same!", port1, port2));
-        }
-
-        CLIENT_PORTS[0] = port1;
-        CLIENT_PORTS[1] = port2;
-
-        // set system properties config
-        System.setProperty(ZOOKEEPER_CONNECTION_ADDRESS_KEY, String.format(CONNECTION_ADDRESS_FORMAT, CLIENT_PORTS[0]));
-        System.setProperty(
-                ZOOKEEPER_CONNECTION_ADDRESS_1_KEY, String.format(CONNECTION_ADDRESS_FORMAT, CLIENT_PORTS[0]));
-        System.setProperty(
-                ZOOKEEPER_CONNECTION_ADDRESS_2_KEY, String.format(CONNECTION_ADDRESS_FORMAT, CLIENT_PORTS[1]));
-    }
-
-    @Override
-    public String getConnectionAddress1() {
-        return String.format(CONNECTION_ADDRESS_FORMAT, CLIENT_PORTS[0]);
-    }
-
-    @Override
-    public String getConnectionAddress2() {
-        return String.format(CONNECTION_ADDRESS_FORMAT, CLIENT_PORTS[1]);
-    }
-
-    @Override
-    public String getConnectionAddressKey() {
-        return ZOOKEEPER_CONNECTION_ADDRESS_KEY;
-    }
-
-    @Override
-    public String getConnectionAddressKey1() {
-        return ZOOKEEPER_CONNECTION_ADDRESS_1_KEY;
-    }
-
-    @Override
-    public String getConnectionAddressKey2() {
-        return ZOOKEEPER_CONNECTION_ADDRESS_2_KEY;
-    }
-
-    /**
-     * Returns the zookeeper's version.
-     */
-    public String getVersion() {
-        return DEFAULT_ZOOKEEPER_VERSION;
-    }
-
-    /**
-     * Returns the client ports of zookeeper.
-     */
-    public int[] getClientPorts() {
-        return CLIENT_PORTS;
-    }
-
-    /**
-     * Returns the admin server ports of zookeeper.
-     */
-    public int[] getAdminServerPorts() {
-        return DEFAULT_ADMIN_SERVER_PORTS;
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/config/ZookeeperRegistryCenterConfig.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/config/ZookeeperRegistryCenterConfig.java
deleted file mode 100644
index 86080835..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/config/ZookeeperRegistryCenterConfig.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.config;
-
-import org.apache.dubbo.test.check.registrycenter.Config;
-
-/**
- * Define the zookeeper global config for registry center.
- */
-public class ZookeeperRegistryCenterConfig {
-
-    /**
-     * Define the {@link Config} instance.
-     */
-    private static final Config CONFIG = new ZookeeperConfig();
-
-    /**
-     * Returns the connection address in single registry center.
-     */
-    public static String getConnectionAddress() {
-        return CONFIG.getConnectionAddress();
-    }
-
-    /**
-     * Returns the first connection address in multiple registry centers.
-     */
-    public static String getConnectionAddress1() {
-        return CONFIG.getConnectionAddress1();
-    }
-
-    /**
-     * Returns the second connection address in multiple registry centers.
-     */
-    public static String getConnectionAddress2() {
-        return CONFIG.getConnectionAddress2();
-    }
-
-    /**
-     * Returns the default connection address key in single registry center.
-     * <h3>How to use</h3>
-     * <pre>
-     * System.getProperty({@link ZookeeperRegistryCenterConfig#getConnectionAddressKey()})
-     * </pre>
-     */
-    public static String getConnectionAddressKey() {
-        return CONFIG.getConnectionAddressKey();
-    }
-
-    /**
-     * Returns the first connection address key in multiple registry center.
-     * <h3>How to use</h3>
-     * <pre>
-     * System.getProperty({@link ZookeeperRegistryCenterConfig#getConnectionAddressKey1()})
-     * </pre>
-     */
-    public static String getConnectionAddressKey1() {
-        return CONFIG.getConnectionAddressKey1();
-    }
-
-    /**
-     * Returns the second connection address key in multiple registry center.
-     * <h3>How to use</h3>
-     * <pre>
-     * System.getProperty({@link ZookeeperRegistryCenterConfig#getConnectionAddressKey2()})
-     * </pre>
-     */
-    public static String getConnectionAddressKey2() {
-        return CONFIG.getConnectionAddressKey2();
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/context/ZookeeperContext.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/context/ZookeeperContext.java
deleted file mode 100644
index 8cd3802d..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/context/ZookeeperContext.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.context;
-
-import org.apache.dubbo.test.check.registrycenter.Context;
-import org.apache.dubbo.test.check.registrycenter.config.ZookeeperConfig;
-
-import java.nio.file.Path;
-
-/**
- * The global context for zookeeper.
- */
-public class ZookeeperContext implements Context {
-
-    /**
-     * The config of zookeeper.
-     */
-    private ZookeeperConfig config = new ZookeeperConfig();
-
-    /**
-     * The the source file path of downloaded zookeeper binary archive.
-     */
-    private Path sourceFile;
-
-    /**
-     * The directory after unpacked zookeeper archive binary file.
-     */
-    private String unpackedDirectory;
-
-    /**
-     * Sets the source file path of downloaded zookeeper binary archive.
-     */
-    public void setSourceFile(Path sourceFile) {
-        this.sourceFile = sourceFile;
-    }
-
-    /**
-     * Returns the source file path of downloaded zookeeper binary archive.
-     */
-    public Path getSourceFile() {
-        return this.sourceFile;
-    }
-
-    /**
-     * Returns the directory after unpacked zookeeper archive binary file.
-     */
-    public String getUnpackedDirectory() {
-        return unpackedDirectory;
-    }
-
-    /**
-     * Sets the directory after unpacked zookeeper archive binary file.
-     */
-    public void setUnpackedDirectory(String unpackedDirectory) {
-        this.unpackedDirectory = unpackedDirectory;
-    }
-
-    /**
-     * Returns the zookeeper's version.
-     */
-    public String getVersion() {
-        return config.getVersion();
-    }
-
-    /**
-     * Returns the client ports of zookeeper.
-     */
-    public int[] getClientPorts() {
-        return config.getClientPorts();
-    }
-
-    /**
-     * Returns the admin server ports of zookeeper.
-     */
-    public int[] getAdminServerPorts() {
-        return config.getAdminServerPorts();
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/context/ZookeeperWindowsContext.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/context/ZookeeperWindowsContext.java
deleted file mode 100644
index 7277ec1d..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/context/ZookeeperWindowsContext.java
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.context;
-
-import org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.SynchronousQueue;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-import org.apache.commons.exec.ExecuteWatchdog;
-
-/**
- * The global context for zookeeper on Windows OS.
- */
-public class ZookeeperWindowsContext extends ZookeeperContext {
-
-    /**
-     * The default executor service to manage the lifecycle of zookeeper.
-     */
-    private final ExecutorService DEFAULT_EXECUTOR_SERVICE = new ThreadPoolExecutor(
-            2,
-            2,
-            0,
-            TimeUnit.MILLISECONDS,
-            new SynchronousQueue<>(),
-            new NamedInternalThreadFactory("mocked-zookeeper", true),
-            new ThreadPoolExecutor.AbortPolicy());
-
-    /**
-     * Define the default {@link ExecuteWatchdog} for terminating all registered zookeeper processes.
-     */
-    private final ExecuteWatchdog WATCHDOG = new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT);
-
-    /**
-     * The map to store the pair of clientPort and PID.
-     */
-    private Map<Integer, Integer> processIds = new HashMap<>();
-
-    /**
-     * Register the process id of zookeeper.
-     *
-     * @param clientPort the client port of zookeeper.
-     * @param pid        the process id of zookeeper instance.
-     */
-    public void register(int clientPort, int pid) {
-        this.processIds.put(clientPort, pid);
-    }
-
-    /**
-     * Returns the pid of zookeeper instance with the given client port.
-     *
-     * @param clientPort the client port of zookeeper instance.
-     * @return the pid of zookeeper instance.
-     */
-    public Integer getPid(int clientPort) {
-        return this.processIds.get(clientPort);
-    }
-
-    /**
-     * Remove the registered pid with the given client port.
-     * @param clientPort the client port of zookeeper instance.
-     */
-    public void removePid(int clientPort) {
-        this.processIds.remove(clientPort);
-    }
-
-    /**
-     * Returns the default executor service to manage the lifecycle of zookeeper.
-     */
-    public ExecutorService getExecutorService() {
-        return DEFAULT_EXECUTOR_SERVICE;
-    }
-
-    /**
-     * Returns the {@link ExecuteWatchdog}.
-     */
-    public ExecuteWatchdog getWatchdog() {
-        return WATCHDOG;
-    }
-
-    /**
-     * Destroy all registered resources.
-     */
-    public void destroy() {
-        this.processIds.clear();
-        this.WATCHDOG.destroyProcess();
-        try {
-            DEFAULT_EXECUTOR_SERVICE.shutdownNow();
-        } catch (SecurityException | NullPointerException ex) {
-            return;
-        }
-        try {
-            DEFAULT_EXECUTOR_SERVICE.awaitTermination(5, TimeUnit.SECONDS);
-        } catch (InterruptedException ex) {
-            Thread.currentThread().interrupt();
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/ConfigZookeeperInitializer.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/ConfigZookeeperInitializer.java
deleted file mode 100644
index 67b4f98f..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/ConfigZookeeperInitializer.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.initializer;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.utils.NetUtils;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.Properties;
-
-/**
- * Update the config file of zookeeper.
- */
-public class ConfigZookeeperInitializer extends ZookeeperInitializer {
-
-    private static final Logger logger = LoggerFactory.getLogger(ConfigZookeeperInitializer.class);
-
-    /**
-     * Update the config file with the given client port and admin server port.
-     *
-     * @param clientPort      the client port
-     * @param adminServerPort the admin server port
-     * @throws DubboTestException when an exception occurred
-     */
-    private void updateConfig(ZookeeperContext context, int clientPort, int adminServerPort) throws DubboTestException {
-        Path zookeeperConf = Paths.get(
-                context.getSourceFile().getParent().toString(),
-                String.valueOf(clientPort),
-                context.getUnpackedDirectory(),
-                "conf");
-        File zooSample = Paths.get(zookeeperConf.toString(), "zoo_sample.cfg").toFile();
-        int availableAdminServerPort = NetUtils.getAvailablePort(adminServerPort);
-        Properties properties = new Properties();
-        try {
-            // use Files.newInputStream instead of new FileInputStream
-            properties.load(Files.newInputStream(zooSample.toPath()));
-            properties.setProperty("clientPort", String.valueOf(clientPort));
-            properties.setProperty("admin.serverPort", String.valueOf(availableAdminServerPort));
-            Path dataDir = Paths.get(zookeeperConf.getParent().toString(), "data");
-            if (!Files.exists(dataDir)) {
-                try {
-                    logger.info("It is creating the data directory...");
-                    Files.createDirectories(dataDir);
-                } catch (IOException e) {
-                    throw new RuntimeException(
-                            String.format(
-                                    "Failed to create the data directory to save zookeeper binary file, file path:%s",
-                                    context.getSourceFile()),
-                            e);
-                }
-            }
-            properties.setProperty("dataDir", dataDir.toString());
-            FileOutputStream oFile = null;
-            try {
-                oFile = new FileOutputStream(
-                        Paths.get(zookeeperConf.toString(), "zoo.cfg").toFile());
-                properties.store(oFile, "");
-            } finally {
-                try {
-                    oFile.close();
-                } catch (IOException e) {
-                    throw new DubboTestException("Failed to close file", e);
-                }
-            }
-            logger.info("The configuration information of zoo.cfg are as below,\n" + "which located in "
-                    + zooSample.getAbsolutePath() + "\n" + propertiesToString(properties));
-        } catch (IOException e) {
-            throw new DubboTestException(String.format("Failed to update %s file", zooSample), e);
-        }
-
-        File log4j = Paths.get(zookeeperConf.toString(), "log4j.properties").toFile();
-        try {
-            // use Files.newInputStream instead of new FileInputStream
-            properties.load(Files.newInputStream(log4j.toPath()));
-            Path logDir = Paths.get(zookeeperConf.getParent().toString(), "logs");
-            if (!Files.exists(logDir)) {
-                try {
-                    logger.info("It is creating the log directory...");
-                    Files.createDirectories(logDir);
-                } catch (IOException e) {
-                    throw new RuntimeException(
-                            String.format(
-                                    "Failed to create the log directory to save zookeeper binary file, file path:%s",
-                                    context.getSourceFile()),
-                            e);
-                }
-            }
-            properties.setProperty("zookeeper.log.dir", logDir.toString());
-            FileOutputStream oFile = null;
-            try {
-                oFile = new FileOutputStream(
-                        Paths.get(zookeeperConf.toString(), "log4j.properties").toFile());
-                properties.store(oFile, "");
-            } finally {
-                try {
-                    oFile.close();
-                } catch (IOException e) {
-                    throw new DubboTestException("Failed to close file", e);
-                }
-            }
-            logger.info("The configuration information of log4j.properties are as below,\n" + "which located in "
-                    + log4j.getAbsolutePath() + "\n" + propertiesToString(properties));
-        } catch (IOException e) {
-            throw new DubboTestException(String.format("Failed to update %s file", zooSample), e);
-        }
-    }
-
-    /**
-     * Convert the {@link Properties} instance to {@link String}.
-     *
-     * @param properties the properties to convert.
-     * @return the string converted from {@link Properties} instance.
-     */
-    private String propertiesToString(Properties properties) {
-        StringBuilder builder = new StringBuilder();
-        for (Object key : properties.keySet()) {
-            builder.append(key);
-            builder.append(": ");
-            builder.append(properties.get(key));
-            builder.append("\n");
-        }
-        return builder.toString();
-    }
-
-    @Override
-    protected void doInitialize(ZookeeperContext context) throws DubboTestException {
-        for (int i = 0; i < context.getClientPorts().length; i++) {
-            this.updateConfig(context, context.getClientPorts()[i], context.getAdminServerPorts()[i]);
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/DownloadZookeeperInitializer.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/DownloadZookeeperInitializer.java
deleted file mode 100644
index fa53136f..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/DownloadZookeeperInitializer.java
+++ /dev/null
@@ -1,209 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.initializer;
-
-import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.nio.file.StandardCopyOption;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.asynchttpclient.AsyncCompletionHandler;
-import org.asynchttpclient.AsyncHttpClient;
-import org.asynchttpclient.DefaultAsyncHttpClient;
-import org.asynchttpclient.DefaultAsyncHttpClientConfig;
-import org.asynchttpclient.Response;
-
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TESTING_REGISTRY_FAILED_TO_DOWNLOAD_ZK_FILE;
-
-/**
- * Download zookeeper binary archive.
- */
-public class DownloadZookeeperInitializer extends ZookeeperInitializer {
-
-    private static final ErrorTypeAwareLogger logger =
-            LoggerFactory.getErrorTypeAwareLogger(DownloadZookeeperInitializer.class);
-
-    /**
-     * The zookeeper binary file name format.
-     */
-    private static final String ZOOKEEPER_FILE_NAME_FORMAT = "apache-zookeeper-%s-bin.tar.gz";
-
-    /**
-     * The url format for zookeeper binary file.
-     */
-    private static final String ZOOKEEPER_BINARY_URL_FORMAT =
-            "https://archive.apache.org/dist/zookeeper/zookeeper-%s/" + ZOOKEEPER_FILE_NAME_FORMAT;
-
-    /**
-     * The temporary directory.
-     */
-    private static final String TEMPORARY_DIRECTORY = "zookeeper";
-
-    /**
-     * The timeout when download zookeeper binary archive file.
-     */
-    private static final int REQUEST_TIMEOUT = 30 * 1000;
-
-    /**
-     * The timeout when connect the download url.
-     */
-    private static final int CONNECT_TIMEOUT = 10 * 1000;
-
-    /**
-     * Returns {@code true} if the file exists with the given file path, otherwise {@code false}.
-     *
-     * @param filePath the file path to check.
-     */
-    private boolean checkFile(Path filePath) {
-        return Files.exists(filePath) && filePath.toFile().isFile();
-    }
-
-    @Override
-    protected void doInitialize(ZookeeperContext context) throws DubboTestException {
-        // checks the zookeeper binary file exists or not
-        if (checkFile(context.getSourceFile())) {
-            return;
-        }
-        String zookeeperFileName = String.format(ZOOKEEPER_FILE_NAME_FORMAT, context.getVersion());
-        Path temporaryFilePath;
-        try {
-            temporaryFilePath = Paths.get(
-                    Files.createTempDirectory("").getParent().toString(), TEMPORARY_DIRECTORY, zookeeperFileName);
-        } catch (IOException e) {
-            throw new RuntimeException(
-                    String.format("Cannot create the temporary directory, file path: %s", TEMPORARY_DIRECTORY), e);
-        }
-
-        // create the temporary directory path.
-        try {
-            Files.createDirectories(temporaryFilePath.getParent());
-        } catch (IOException e) {
-            throw new RuntimeException(
-                    String.format(
-                            "Failed to create the temporary directory to save zookeeper binary file, file path:%s",
-                            temporaryFilePath.getParent()),
-                    e);
-        }
-
-        // download zookeeper binary file in temporary directory.
-        String zookeeperBinaryUrl =
-                String.format(ZOOKEEPER_BINARY_URL_FORMAT, context.getVersion(), context.getVersion());
-        try {
-            logger.info("It is beginning to download the zookeeper binary archive, it will take several minutes..."
-                    + "\nThe zookeeper binary archive file will be download from "
-                    + zookeeperBinaryUrl + "," + "\nwhich will be saved in "
-                    + temporaryFilePath.toString() + ","
-                    + "\nalso it will be renamed to 'apache-zookeeper-bin.tar.gz' and moved into "
-                    + context.getSourceFile() + ".\n");
-            this.download(zookeeperBinaryUrl, temporaryFilePath);
-        } catch (Exception e) {
-            throw new RuntimeException(
-                    String.format(
-                            "Download zookeeper binary archive failed, download url:%s, file path:%s."
-                                    + "\nOr you can do something to avoid this problem as below:"
-                                    + "\n1. Download zookeeper binary archive manually regardless of the version"
-                                    + "\n2. Rename the downloaded file named 'apache-zookeeper-{version}-bin.tar.gz' to 'apache-zookeeper-bin.tar.gz'"
-                                    + "\n3. Put the renamed file in %s, you maybe need to create the directory if necessary.\n",
-                            zookeeperBinaryUrl, temporaryFilePath, context.getSourceFile()),
-                    e);
-        }
-
-        // check downloaded zookeeper binary file in temporary directory.
-        if (!checkFile(temporaryFilePath)) {
-            throw new IllegalArgumentException(String.format(
-                    "There are some unknown problem occurred when downloaded the zookeeper binary archive file, file path:%s",
-                    temporaryFilePath));
-        }
-
-        // create target directory if necessary
-        if (!Files.exists(context.getSourceFile())) {
-            try {
-                Files.createDirectories(context.getSourceFile().getParent());
-            } catch (IOException e) {
-                throw new IllegalArgumentException(
-                        String.format(
-                                "Failed to create target directory, the directory path: %s",
-                                context.getSourceFile().getParent()),
-                        e);
-            }
-        }
-
-        // copy the downloaded zookeeper binary file into the target file path
-        try {
-            Files.copy(temporaryFilePath, context.getSourceFile(), StandardCopyOption.REPLACE_EXISTING);
-        } catch (IOException e) {
-            throw new IllegalArgumentException(
-                    String.format(
-                            "Failed to copy file, the source file path: %s, the target file path: %s",
-                            temporaryFilePath, context.getSourceFile()),
-                    e);
-        }
-
-        // checks the zookeeper binary file exists or not again
-        if (!checkFile(context.getSourceFile())) {
-            throw new IllegalArgumentException(String.format(
-                    "The zookeeper binary archive file doesn't exist, file path:%s", context.getSourceFile()));
-        }
-    }
-
-    /**
-     * Download the file with the given url.
-     *
-     * @param url        the url to download.
-     * @param targetPath the target path to save the downloaded file.
-     */
-    private void download(String url, Path targetPath)
-            throws ExecutionException, InterruptedException, IOException, TimeoutException {
-        AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient(new DefaultAsyncHttpClientConfig.Builder()
-                .setConnectTimeout(CONNECT_TIMEOUT)
-                .setRequestTimeout(REQUEST_TIMEOUT)
-                .setMaxRequestRetry(1)
-                .build());
-        Future<Response> responseFuture = asyncHttpClient
-                .prepareGet(url)
-                .execute(new AsyncCompletionHandler<Response>() {
-                    @Override
-                    public Response onCompleted(Response response) {
-                        logger.info("Download zookeeper binary archive file successfully! download url: " + url);
-                        return response;
-                    }
-
-                    @Override
-                    public void onThrowable(Throwable t) {
-                        logger.warn(
-                                TESTING_REGISTRY_FAILED_TO_DOWNLOAD_ZK_FILE,
-                                "",
-                                "",
-                                "Failed to download the file, download url: " + url);
-                        super.onThrowable(t);
-                    }
-                });
-        // Future timeout should 2 times as equal as REQUEST_TIMEOUT, because it will retry 1 time.
-        Response response = responseFuture.get(REQUEST_TIMEOUT * 2, TimeUnit.MILLISECONDS);
-        Files.copy(response.getResponseBodyAsStream(), targetPath, StandardCopyOption.REPLACE_EXISTING);
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/UnpackZookeeperInitializer.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/UnpackZookeeperInitializer.java
deleted file mode 100644
index 209d0593..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/UnpackZookeeperInitializer.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.initializer;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
-import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
-import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
-import org.apache.commons.compress.utils.IOUtils;
-
-/**
- * Unpack the downloaded zookeeper binary archive.
- */
-public class UnpackZookeeperInitializer extends ZookeeperInitializer {
-
-    private static final Logger logger = LoggerFactory.getLogger(UnpackZookeeperInitializer.class);
-
-    /**
-     * Unpack the zookeeper binary file.
-     *
-     * @param context    the global context of zookeeper.
-     * @param clientPort the client port
-     * @throws DubboTestException when an exception occurred
-     */
-    private void unpack(ZookeeperContext context, int clientPort) throws DubboTestException {
-        File sourceFile = context.getSourceFile().toFile();
-        Path targetPath = Paths.get(context.getSourceFile().getParent().toString(), String.valueOf(clientPort));
-        // check if it's unpacked.
-        if (targetPath.toFile() != null && targetPath.toFile().isDirectory()) {
-            logger.info(String.format("The file has been unpacked, target path:%s", targetPath.toString()));
-            return;
-        }
-        try (FileInputStream fileInputStream = new FileInputStream(sourceFile);
-                GzipCompressorInputStream gzipCompressorInputStream = new GzipCompressorInputStream(fileInputStream);
-                TarArchiveInputStream tarArchiveInputStream =
-                        new TarArchiveInputStream(gzipCompressorInputStream, "UTF-8")) {
-            File targetFile = targetPath.toFile();
-            TarArchiveEntry entry;
-            while ((entry = tarArchiveInputStream.getNextTarEntry()) != null) {
-                if (entry.isDirectory()) {
-                    continue;
-                }
-                File curFile = new File(targetFile, entry.getName());
-                File parent = curFile.getParentFile();
-                if (!parent.exists()) {
-                    parent.mkdirs();
-                }
-                try (FileOutputStream outputStream = new FileOutputStream(curFile)) {
-                    IOUtils.copy(tarArchiveInputStream, outputStream);
-                }
-            }
-        } catch (IOException e) {
-            throw new DubboTestException(String.format("Failed to unpack the zookeeper binary file"), e);
-        }
-    }
-
-    @Override
-    protected void doInitialize(ZookeeperContext context) throws DubboTestException {
-        for (int clientPort : context.getClientPorts()) {
-            this.unpack(context, clientPort);
-            // get the file name, just like apache-zookeeper-{version}-bin
-            // the version we maybe unknown if the zookeeper archive binary file is copied by user self.
-            Path parentPath = Paths.get(context.getSourceFile().getParent().toString(), String.valueOf(clientPort));
-            if (!Files.exists(parentPath)
-                    || !parentPath.toFile().isDirectory()
-                    || parentPath.toFile().listFiles().length != 1) {
-                throw new IllegalStateException("There is something wrong in unpacked file!");
-            }
-            // rename directory
-            File sourceFile = parentPath.toFile().listFiles()[0];
-            File targetFile = Paths.get(parentPath.toString(), context.getUnpackedDirectory())
-                    .toFile();
-            sourceFile.renameTo(targetFile);
-            if (!Files.exists(targetFile.toPath()) || !targetFile.isDirectory()) {
-                throw new IllegalStateException(String.format(
-                        "Failed to rename the directory. source directory: %s, target directory: %s",
-                        sourceFile.toPath().toString(), targetFile.toPath().toString()));
-            }
-            // get the bin path
-            Path zookeeperBin = Paths.get(targetFile.toString(), "bin");
-            // update file permission
-            for (File file : zookeeperBin.toFile().listFiles()) {
-                file.setExecutable(true, false);
-                file.setReadable(true, false);
-                file.setWritable(false, false);
-            }
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/ZookeeperInitializer.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/ZookeeperInitializer.java
deleted file mode 100644
index c67fc8fe..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/initializer/ZookeeperInitializer.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.initializer;
-
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.Context;
-import org.apache.dubbo.test.check.registrycenter.Initializer;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * The implementation of {@link Initializer} to initialize zookeeper.
- */
-public abstract class ZookeeperInitializer implements Initializer {
-
-    /**
-     * The {@link #INITIALIZED} for checking the {@link #initialize(Context)} method is called or not.
-     */
-    private final AtomicBoolean INITIALIZED = new AtomicBoolean(false);
-
-    @Override
-    public void initialize(Context context) throws DubboTestException {
-        if (!this.INITIALIZED.compareAndSet(false, true)) {
-            return;
-        }
-        this.doInitialize((ZookeeperContext) context);
-    }
-
-    /**
-     * Initialize the global context for zookeeper.
-     *
-     * @param context the global context for zookeeper.
-     * @throws DubboTestException when any exception occurred.
-     */
-    protected abstract void doInitialize(ZookeeperContext context) throws DubboTestException;
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/FindPidWindowsProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/FindPidWindowsProcessor.java
deleted file mode 100644
index e672bef4..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/FindPidWindowsProcessor.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.utils.StringUtils;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperWindowsContext;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
-import java.util.stream.Collectors;
-
-import org.apache.commons.exec.CommandLine;
-import org.apache.commons.exec.DefaultExecutor;
-import org.apache.commons.exec.Executor;
-import org.apache.commons.exec.PumpStreamHandler;
-
-/**
- * Create a {@link org.apache.dubbo.test.check.registrycenter.Processor} to find pid on Windows OS.
- */
-public class FindPidWindowsProcessor extends ZookeeperWindowsProcessor {
-
-    private static final Logger logger = LoggerFactory.getLogger(FindPidWindowsProcessor.class);
-
-    @Override
-    protected void doProcess(ZookeeperWindowsContext context) throws DubboTestException {
-        for (int clientPort : context.getClientPorts()) {
-            this.findPid(context, clientPort);
-        }
-    }
-
-    /**
-     * Find the pid of zookeeper instance.
-     *
-     * @param context    the global context.
-     * @param clientPort the client port of zookeeper instance.
-     */
-    private void findPid(ZookeeperWindowsContext context, int clientPort) {
-        logger.info(String.format("Find the pid of the zookeeper with port %d", clientPort));
-        Executor executor = new DefaultExecutor();
-        executor.setExitValues(null);
-        ByteArrayOutputStream out = new ByteArrayOutputStream();
-        ByteArrayOutputStream ins = new ByteArrayOutputStream();
-        ByteArrayInputStream in = new ByteArrayInputStream(ins.toByteArray());
-        executor.setStreamHandler(new PumpStreamHandler(out, null, in));
-        CommandLine cmdLine = new CommandLine("cmd.exe");
-        cmdLine.addArgument("/c");
-        cmdLine.addArgument("netstat -ano | findstr " + clientPort);
-        try {
-            executor.execute(cmdLine);
-            String result = out.toString();
-            logger.info(String.format("Find result: %s", result));
-            if (StringUtils.isNotEmpty(result)) {
-                String[] values = result.split("\\r\\n");
-                // values sample:
-                // Protocol Local address          Foreign address        Status          PID
-                //   TCP    127.0.0.1:2182         127.0.0.1:56672        ESTABLISHED     4020
-                //   TCP    127.0.0.1:56672        127.0.0.1:2182         ESTABLISHED     1980
-                //   TCP    127.0.0.1:56692        127.0.0.1:2182         ESTABLISHED     1980
-                //   TCP    127.0.0.1:56723        127.0.0.1:2182         ESTABLISHED     1980
-                //   TCP    [::]:2182              [::]:0                 LISTENING       4020
-                if (values != null && values.length > 0) {
-                    for (int i = 0; i < values.length; i++) {
-                        List<String> segments = Arrays.stream(values[i].trim().split(" "))
-                                .filter(str -> !"".equals(str))
-                                .collect(Collectors.toList());
-                        // segments sample:
-                        // TCP
-                        // 127.0.0.1:2182
-                        // 127.0.0.1:56672
-                        // ESTABLISHED
-                        // 4020
-                        if (segments != null && segments.size() == 5) {
-                            if (this.check(segments.get(1), clientPort)) {
-                                int pid = Integer.valueOf(
-                                        segments.get(segments.size() - 1).trim());
-                                context.register(clientPort, pid);
-                                return;
-                            }
-                        }
-                    }
-                }
-            }
-        } catch (IOException e) {
-            throw new DubboTestException(
-                    String.format("Failed to find the PID of zookeeper with port %d", clientPort), e);
-        }
-    }
-
-    /**
-     * Checks if segment is valid ip and port pair.
-     *
-     * @param segment    the segment to check
-     * @param clientPort the client port of zookeeper instance
-     * @return {@code true} if segment is valid pair of ip and port, otherwise {@code false}
-     */
-    private boolean check(String segment, int clientPort) {
-        return ("[::]:" + clientPort).equalsIgnoreCase(segment)
-                || ("0.0.0.0:" + clientPort).equalsIgnoreCase(segment)
-                || ("127.0.0.1:" + clientPort).equalsIgnoreCase(segment);
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/KillProcessWindowsProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/KillProcessWindowsProcessor.java
deleted file mode 100644
index 96e0e07b..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/KillProcessWindowsProcessor.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperWindowsContext;
-
-import java.io.IOException;
-
-import org.apache.commons.exec.CommandLine;
-import org.apache.commons.exec.DefaultExecutor;
-import org.apache.commons.exec.Executor;
-import org.apache.commons.exec.PumpStreamHandler;
-
-/**
- * Create a {@link org.apache.dubbo.test.check.registrycenter.Processor} to kill pid on Windows OS.
- */
-public class KillProcessWindowsProcessor extends ZookeeperWindowsProcessor {
-
-    private static final Logger logger = LoggerFactory.getLogger(KillProcessWindowsProcessor.class);
-
-    @Override
-    protected void doProcess(ZookeeperWindowsContext context) throws DubboTestException {
-        for (int clientPort : context.getClientPorts()) {
-            Integer pid = context.getPid(clientPort);
-            if (pid == null) {
-                logger.info("There is no PID of zookeeper instance with the port " + clientPort);
-                continue;
-            }
-            logger.info(String.format("Kill the pid %d of the zookeeper with port %d", pid, clientPort));
-            Executor executor = new DefaultExecutor();
-            executor.setExitValues(null);
-            executor.setStreamHandler(new PumpStreamHandler(null, null, null));
-            CommandLine cmdLine = new CommandLine("cmd.exe");
-            cmdLine.addArgument("/c");
-            cmdLine.addArgument("taskkill /PID " + pid + " -t -f");
-            try {
-                executor.execute(cmdLine);
-                // clear pid
-                context.removePid(clientPort);
-            } catch (IOException e) {
-                throw new DubboTestException(
-                        String.format("Failed to kill the pid %d of zookeeper with port %d", pid, clientPort), e);
-            }
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ResetZookeeperProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ResetZookeeperProcessor.java
deleted file mode 100644
index 012954e1..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ResetZookeeperProcessor.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.Context;
-import org.apache.dubbo.test.check.registrycenter.Processor;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.util.concurrent.TimeUnit;
-
-import org.apache.curator.framework.CuratorFramework;
-import org.apache.curator.framework.CuratorFrameworkFactory;
-import org.apache.curator.retry.RetryNTimes;
-
-/**
- * Create {@link Process} to reset zookeeper.
- */
-public class ResetZookeeperProcessor implements Processor {
-
-    @Override
-    public void process(Context context) throws DubboTestException {
-        ZookeeperContext zookeeperContext = (ZookeeperContext) context;
-        for (int clientPort : zookeeperContext.getClientPorts()) {
-            CuratorFramework client;
-            try {
-                CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()
-                        .connectString("127.0.0.1:" + clientPort)
-                        .retryPolicy(new RetryNTimes(1, 1000));
-                client = builder.build();
-                client.start();
-                boolean connected = client.blockUntilConnected(1000, TimeUnit.MILLISECONDS);
-                if (!connected) {
-                    throw new IllegalStateException("zookeeper not connected");
-                }
-                client.delete().deletingChildrenIfNeeded().forPath("/dubbo");
-            } catch (Exception e) {
-                throw new DubboTestException(e.getMessage(), e);
-            }
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperUnixProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperUnixProcessor.java
deleted file mode 100644
index ec65a964..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperUnixProcessor.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.io.IOException;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.regex.Pattern;
-
-/**
- * Create {@link Process} to start zookeeper on Unix OS.
- */
-public class StartZookeeperUnixProcessor extends ZookeeperUnixProcessor {
-
-    private static final Logger logger = LoggerFactory.getLogger(StartZookeeperUnixProcessor.class);
-    /**
-     * The pattern for checking if zookeeper instances started.
-     */
-    private static final Pattern PATTERN_STARTED = Pattern.compile(".*STARTED.*");
-
-    @Override
-    protected Process doProcess(ZookeeperContext context, int clientPort) throws DubboTestException {
-        logger.info(String.format("The zookeeper-%d is starting...", clientPort));
-        List<String> commands = new ArrayList<>();
-        Path zookeeperBin = Paths.get(
-                context.getSourceFile().getParent().toString(),
-                String.valueOf(clientPort),
-                context.getUnpackedDirectory(),
-                "bin");
-        commands.add(Paths.get(zookeeperBin.toString(), "zkServer.sh")
-                .toAbsolutePath()
-                .toString());
-        commands.add("start");
-        commands.add(Paths.get(zookeeperBin.getParent().toString(), "conf", "zoo.cfg")
-                .toAbsolutePath()
-                .toString());
-        try {
-            return new ProcessBuilder()
-                    .directory(zookeeperBin.getParent().toFile())
-                    .command(commands)
-                    .inheritIO()
-                    .redirectOutput(ProcessBuilder.Redirect.PIPE)
-                    .start();
-        } catch (IOException e) {
-            throw new DubboTestException(String.format("Failed to start zookeeper-%d", clientPort), e);
-        }
-    }
-
-    @Override
-    protected Pattern getPattern() {
-        return PATTERN_STARTED;
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperWindowsProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperWindowsProcessor.java
deleted file mode 100644
index f384ede4..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StartZookeeperWindowsProcessor.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.Processor;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperWindowsContext;
-
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.concurrent.TimeUnit;
-
-import org.apache.commons.exec.CommandLine;
-import org.apache.commons.exec.DefaultExecutor;
-import org.apache.commons.exec.Executor;
-
-/**
- * Create {@link Process} to start zookeeper on Windows OS.
- */
-public class StartZookeeperWindowsProcessor extends ZookeeperWindowsProcessor {
-
-    private static final Logger logger = LoggerFactory.getLogger(StartZookeeperWindowsProcessor.class);
-
-    /**
-     * The {@link Processor} to find the pid of zookeeper instance.
-     */
-    private final Processor findPidProcessor = new FindPidWindowsProcessor();
-
-    /**
-     * The {@link Processor} to kill the pid of zookeeper instance.
-     */
-    private final Processor killPidProcessor = new KillProcessWindowsProcessor();
-
-    @Override
-    protected void doProcess(ZookeeperWindowsContext context) throws DubboTestException {
-        // find pid and save into global context.
-        this.findPidProcessor.process(context);
-        // kill pid of zookeeper instance if exists
-        this.killPidProcessor.process(context);
-        for (int clientPort : context.getClientPorts()) {
-            logger.info(String.format("The zookeeper-%d is starting...", clientPort));
-            Path zookeeperBin = Paths.get(
-                    context.getSourceFile().getParent().toString(),
-                    String.valueOf(clientPort),
-                    context.getUnpackedDirectory(),
-                    "bin");
-            Executor executor = new DefaultExecutor();
-            executor.setExitValues(null);
-            executor.setWatchdog(context.getWatchdog());
-            CommandLine cmdLine = new CommandLine("cmd.exe");
-            cmdLine.addArgument("/c");
-            cmdLine.addArgument(Paths.get(zookeeperBin.toString(), "zkServer.cmd")
-                    .toAbsolutePath()
-                    .toString());
-            context.getExecutorService().submit(() -> executor.execute(cmdLine));
-        }
-        try {
-            // TODO: Help me to optimize the ugly sleep.
-            // sleep to wait all of zookeeper instances are started successfully.
-            // The best way is to check the output log with the specified keywords,
-            // however, there maybe keep waiting for check when any exception occurred,
-            // because the output stream will be blocked to wait for continuous data without any break
-            TimeUnit.SECONDS.sleep(3);
-        } catch (InterruptedException e) {
-            // ignored
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StopZookeeperUnixProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StopZookeeperUnixProcessor.java
deleted file mode 100644
index f7a2f0ae..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StopZookeeperUnixProcessor.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.io.IOException;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.regex.Pattern;
-
-/**
- * Create {@link Process} to stop zookeeper on Unix OS.
- */
-public class StopZookeeperUnixProcessor extends ZookeeperUnixProcessor {
-
-    private static final Logger logger = LoggerFactory.getLogger(StopZookeeperUnixProcessor.class);
-
-    /**
-     * The pattern for checking if the zookeeper instance stopped.
-     */
-    private static final Pattern PATTERN_STOPPED = Pattern.compile(".*STOPPED.*");
-
-    @Override
-    protected Process doProcess(ZookeeperContext context, int clientPort) throws DubboTestException {
-        logger.info(String.format("The zookeeper-%d is stopping...", clientPort));
-        List<String> commands = new ArrayList<>();
-        Path zookeeperBin = Paths.get(
-                context.getSourceFile().getParent().toString(),
-                String.valueOf(clientPort),
-                context.getUnpackedDirectory(),
-                "bin");
-        commands.add(Paths.get(zookeeperBin.toString(), "zkServer.sh")
-                .toAbsolutePath()
-                .toString());
-        commands.add("stop");
-        try {
-            return new ProcessBuilder()
-                    .directory(zookeeperBin.getParent().toFile())
-                    .command(commands)
-                    .inheritIO()
-                    .redirectOutput(ProcessBuilder.Redirect.PIPE)
-                    .start();
-        } catch (IOException e) {
-            throw new DubboTestException(String.format("Failed to stop zookeeper-%d", clientPort), e);
-        }
-    }
-
-    @Override
-    protected Pattern getPattern() {
-        return PATTERN_STOPPED;
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StopZookeeperWindowsProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StopZookeeperWindowsProcessor.java
deleted file mode 100644
index a671e682..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/StopZookeeperWindowsProcessor.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.common.logger.Logger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.Processor;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperWindowsContext;
-
-/**
- * Create {@link Process} to stop zookeeper on Windows OS.
- */
-public class StopZookeeperWindowsProcessor extends ZookeeperWindowsProcessor {
-
-    private static final Logger logger = LoggerFactory.getLogger(StopZookeeperWindowsProcessor.class);
-
-    /**
-     * The {@link Processor} to find the pid of zookeeper instance.
-     */
-    private final Processor findPidProcessor = new FindPidWindowsProcessor();
-
-    /**
-     * The {@link Processor} to kill the pid of zookeeper instance.
-     */
-    private final Processor killPidProcessor = new KillProcessWindowsProcessor();
-
-    @Override
-    protected void doProcess(ZookeeperWindowsContext context) throws DubboTestException {
-        logger.info("All of zookeeper instances are stopping...");
-        // find pid and save into global context.
-        this.findPidProcessor.process(context);
-        // kill pid of zookeeper instance if exists
-        this.killPidProcessor.process(context);
-        // destroy all resources
-        context.destroy();
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ZookeeperUnixProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ZookeeperUnixProcessor.java
deleted file mode 100644
index 100f00b5..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ZookeeperUnixProcessor.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.common.logger.ErrorTypeAwareLogger;
-import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.Context;
-import org.apache.dubbo.test.check.registrycenter.Processor;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperContext;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.regex.Pattern;
-
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TESTING_REGISTRY_FAILED_TO_START_ZOOKEEPER;
-import static org.apache.dubbo.common.constants.LoggerCodeConstants.TESTING_REGISTRY_FAILED_TO_STOP_ZOOKEEPER;
-
-/**
- * The abstract implementation of {@link Processor} is to provide some common methods on Unix OS.
- */
-public abstract class ZookeeperUnixProcessor implements Processor {
-
-    private static final ErrorTypeAwareLogger logger =
-            LoggerFactory.getErrorTypeAwareLogger(ZookeeperUnixProcessor.class);
-
-    @Override
-    public void process(Context context) throws DubboTestException {
-        ZookeeperContext zookeeperContext = (ZookeeperContext) context;
-        for (int clientPort : zookeeperContext.getClientPorts()) {
-            Process process = this.doProcess(zookeeperContext, clientPort);
-            this.logErrorStream(process.getErrorStream());
-            this.awaitProcessReady(process.getInputStream());
-            // kill the process
-            try {
-                process.destroy();
-            } catch (Throwable cause) {
-                logger.warn(
-                        TESTING_REGISTRY_FAILED_TO_STOP_ZOOKEEPER,
-                        "",
-                        "",
-                        String.format("Failed to kill the process, with client port %s !", clientPort),
-                        cause);
-            }
-        }
-    }
-
-    /**
-     * Prints the error log after run {@link Process}.
-     *
-     * @param errorStream the error stream.
-     */
-    private void logErrorStream(final InputStream errorStream) {
-        try (final BufferedReader reader = new BufferedReader(new InputStreamReader(errorStream))) {
-            String line;
-            while ((line = reader.readLine()) != null) {
-                logger.error(TESTING_REGISTRY_FAILED_TO_START_ZOOKEEPER, "", "", line);
-            }
-        } catch (IOException e) {
-            /* eat quietly */
-        }
-    }
-
-    /**
-     * Wait until the server is started successfully.
-     *
-     * @param inputStream the log after run {@link Process}.
-     * @throws DubboTestException if cannot match the given pattern.
-     */
-    private void awaitProcessReady(final InputStream inputStream) throws DubboTestException {
-        final StringBuilder log = new StringBuilder();
-        try (final BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
-            String line;
-            while ((line = reader.readLine()) != null) {
-                if (this.getPattern().matcher(line).matches()) {
-                    return;
-                }
-                log.append('\n').append(line);
-            }
-        } catch (IOException e) {
-            throw new DubboTestException("Failed to read the log after executed process.", e);
-        }
-        throw new DubboTestException("Ready pattern not found in log, log: " + log);
-    }
-
-    /**
-     * Use {@link Process} to handle the command.
-     *
-     * @param context    the global zookeeper context.
-     * @param clientPort the client port of zookeeper.
-     * @return the instance of {@link Process}.
-     * @throws DubboTestException when any exception occurred.
-     */
-    protected abstract Process doProcess(ZookeeperContext context, int clientPort) throws DubboTestException;
-
-    /**
-     * Gets the pattern to check the server is ready or not.
-     *
-     * @return the pattern for checking.
-     */
-    protected abstract Pattern getPattern();
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ZookeeperWindowsProcessor.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ZookeeperWindowsProcessor.java
deleted file mode 100644
index 340b3441..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/java/org/apache/dubbo/test/check/registrycenter/processor/ZookeeperWindowsProcessor.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.check.registrycenter.processor;
-
-import org.apache.dubbo.test.check.exception.DubboTestException;
-import org.apache.dubbo.test.check.registrycenter.Context;
-import org.apache.dubbo.test.check.registrycenter.Processor;
-import org.apache.dubbo.test.check.registrycenter.context.ZookeeperWindowsContext;
-
-/**
- * The abstract implementation of {@link Processor} is to provide some common methods on Windows OS.
- */
-public abstract class ZookeeperWindowsProcessor implements Processor {
-
-    @Override
-    public void process(Context context) throws DubboTestException {
-        ZookeeperWindowsContext zookeeperWindowsContext = (ZookeeperWindowsContext) context;
-        this.doProcess(zookeeperWindowsContext);
-    }
-
-    /**
-     * Use {@link Process} to handle the command.
-     *
-     * @param context    the global zookeeper context.
-     * @throws DubboTestException when any exception occurred.
-     */
-    protected abstract void doProcess(ZookeeperWindowsContext context) throws DubboTestException;
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener
deleted file mode 100644
index 1eb8e5b9..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-check/src/main/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener
+++ /dev/null
@@ -1,5 +0,0 @@
-# DubboRegistryCenterStarted should be the first one because of the startup of zookeeper
-org.apache.dubbo.test.check.RegistryCenterStarted
-org.apache.dubbo.test.check.DubboTestChecker
-# DubboRegistryCenterFinished should be the last one because of the shutdown of zookeeper
-org.apache.dubbo.test.check.RegistryCenterFinished
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/pom.xml
deleted file mode 100644
index a4acc9b7..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/pom.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-test-common</artifactId>
-
-  <properties>
-    <maven.compiler.source>8</maven.compiler.source>
-    <maven.compiler.target>8</maven.compiler.target>
-    <skip_maven_deploy>true</skip_maven_deploy>
-  </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.zookeeper</groupId>
-      <artifactId>zookeeper</artifactId>
-      <exclusions>
-        <exclusion>
-          <groupId>org.slf4j</groupId>
-          <artifactId>slf4j-log4j12</artifactId>
-        </exclusion>
-      </exclusions>
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-common</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-api</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-rest</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-check</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/ErrorHandler.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/ErrorHandler.java
deleted file mode 100644
index ba8e9656..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/ErrorHandler.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common;
-
-@FunctionalInterface
-public interface ErrorHandler {
-
-    /**
-     * Handle the given error, possibly rethrowing it as a fatal exception.
-     */
-    void handleError(Throwable t);
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/SysProps.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/SysProps.java
deleted file mode 100644
index dcfafc37..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/SysProps.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common;
-
-import java.util.LinkedHashMap;
-import java.util.Map;
-
-/**
- * Use to set and clear System property
- */
-public class SysProps {
-
-    private static Map<String, String> map = new LinkedHashMap<String, String>();
-
-    public static void reset() {
-        map.clear();
-    }
-
-    public static void setProperty(String key, String value) {
-        map.put(key, value);
-        System.setProperty(key, value);
-    }
-
-    public static void clear() {
-        for (String key : map.keySet()) {
-            System.clearProperty(key);
-        }
-        reset();
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/DemoService.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/DemoService.java
deleted file mode 100644
index f90031bd..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/DemoService.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common.api;
-
-import java.util.concurrent.CompletableFuture;
-
-public interface DemoService {
-
-    String sayHello(String name);
-
-    CompletableFuture<String> sayHelloAsync(String name);
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/GreetingService.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/GreetingService.java
deleted file mode 100644
index 16df570e..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/GreetingService.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common.api;
-
-/**
- *
- */
-public interface GreetingService {
-    String hello();
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/RestDemoService.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/RestDemoService.java
deleted file mode 100644
index 07b06674..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/api/RestDemoService.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common.api;
-
-import javax.ws.rs.Consumes;
-import javax.ws.rs.GET;
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
-import javax.ws.rs.QueryParam;
-import javax.ws.rs.core.MediaType;
-
-@Path("/demoService")
-public interface RestDemoService {
-    @GET
-    @Path("/hello")
-    Integer hello(@QueryParam("a") Integer a, @QueryParam("b") Integer b);
-
-    @GET
-    @Path("/error")
-    String error();
-
-    @POST
-    @Path("/say")
-    @Consumes({MediaType.TEXT_PLAIN})
-    String sayHello(String name);
-
-    @GET
-    @Path("/getRemoteApplicationName")
-    String getRemoteApplicationName();
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/DemoServiceImpl.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/DemoServiceImpl.java
deleted file mode 100644
index 0ab09bdc..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/DemoServiceImpl.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common.impl;
-
-import org.apache.dubbo.config.annotation.DubboService;
-import org.apache.dubbo.test.common.api.DemoService;
-
-import java.util.concurrent.CompletableFuture;
-
-@DubboService
-public class DemoServiceImpl implements DemoService {
-    @Override
-    public String sayHello(String name) {
-        return "Hello " + name;
-    }
-
-    @Override
-    public CompletableFuture<String> sayHelloAsync(String name) {
-        CompletableFuture<String> cf = CompletableFuture.supplyAsync(() -> {
-            //            try {
-            //                Thread.sleep(1000);
-            //            } catch (InterruptedException e) {
-            //                e.printStackTrace();
-            //            }
-            return "async result:" + name;
-        });
-        return cf;
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/GreetingServiceImpl.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/GreetingServiceImpl.java
deleted file mode 100644
index cd205bcc..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/GreetingServiceImpl.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common.impl;
-
-import org.apache.dubbo.test.common.api.GreetingService;
-
-/**
- *
- */
-public class GreetingServiceImpl implements GreetingService {
-    @Override
-    public String hello() {
-        return "Greetings!";
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/RestDemoServiceImpl.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/RestDemoServiceImpl.java
deleted file mode 100644
index a2fd54ed..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/impl/RestDemoServiceImpl.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common.impl;
-
-import org.apache.dubbo.rpc.RpcContext;
-import org.apache.dubbo.test.common.api.RestDemoService;
-
-import java.util.Map;
-
-public class RestDemoServiceImpl implements RestDemoService {
-    private static Map<String, Object> context;
-    private boolean called;
-
-    public String sayHello(String name) {
-        called = true;
-        return "Hello, " + name;
-    }
-
-    public boolean isCalled() {
-        return called;
-    }
-
-    @Override
-    public Integer hello(Integer a, Integer b) {
-        context = RpcContext.getServerAttachment().getObjectAttachments();
-        return a + b;
-    }
-
-    @Override
-    public String error() {
-        throw new RuntimeException();
-    }
-
-    public static Map<String, Object> getAttachments() {
-        return context;
-    }
-
-    @Override
-    public String getRemoteApplicationName() {
-        return RpcContext.getServiceContext().getRemoteApplicationName();
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/utils/TestSocketUtils.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/utils/TestSocketUtils.java
deleted file mode 100644
index e46c83a2..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-common/src/main/java/org/apache/dubbo/test/common/utils/TestSocketUtils.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Copyright 2002-2022 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.common.utils;
-
-import java.net.InetAddress;
-import java.net.ServerSocket;
-import java.security.SecureRandom;
-
-import javax.net.ServerSocketFactory;
-
-import org.apache.dubbo.common.utils.Assert;
-
-/**
- * Simple utility for finding available TCP ports on {@code localhost} for use in
- * integration testing scenarios.
- *
- * <p>{@code TestSocketUtils} can be used in integration tests which start an
- * external server on an available random port. However, these utilities make no
- * guarantee about the subsequent availability of a given port and are therefore
- * unreliable. Instead of using {@code TestSocketUtils} to find an available local
- * port for a server, it is recommended that you rely on a server's ability to
- * start on a random <em>ephemeral</em> port that it selects or is assigned by the
- * operating system. To interact with that server, you should query the server
- * for the port it is currently using.
- *
- * @since 3.2
- */
-public class TestSocketUtils {
-
-    /**
-     * The minimum value for port ranges used when finding an available TCP port.
-     */
-    static final int PORT_RANGE_MIN = 1024;
-
-    /**
-     * The maximum value for port ranges used when finding an available TCP port.
-     */
-    static final int PORT_RANGE_MAX = 65535;
-
-    private static final int PORT_RANGE_PLUS_ONE = PORT_RANGE_MAX - PORT_RANGE_MIN + 1;
-
-    private static final int MAX_ATTEMPTS = 1_000;
-
-    private static final SecureRandom random = new SecureRandom();
-
-    private static final TestSocketUtils INSTANCE = new TestSocketUtils();
-
-    private TestSocketUtils() {
-    }
-
-    /**
-     * Find an available TCP port randomly selected from the range [1024, 65535].
-     * @return an available TCP port number
-     * @throws IllegalStateException if no available port could be found
-     */
-    public static int findAvailableTcpPort() {
-        return INSTANCE.findAvailableTcpPortInternal();
-    }
-
-
-    /**
-     * Internal implementation of {@link #findAvailableTcpPort()}.
-     * <p>Package-private solely for testing purposes.
-     */
-    int findAvailableTcpPortInternal() {
-        int candidatePort;
-        int searchCounter = 0;
-        do {
-            Assert.assertTrue(++searchCounter <= MAX_ATTEMPTS, String.format(
-                "Could not find an available TCP port in the range [%d, %d] after %d attempts",
-                PORT_RANGE_MIN, PORT_RANGE_MAX, MAX_ATTEMPTS));
-            candidatePort = PORT_RANGE_MIN + random.nextInt(PORT_RANGE_PLUS_ONE);
-        }
-        while (!isPortAvailable(candidatePort));
-
-        return candidatePort;
-    }
-
-    /**
-     * Determine if the specified TCP port is currently available on {@code localhost}.
-     * <p>Package-private solely for testing purposes.
-     */
-    boolean isPortAvailable(int port) {
-        try {
-            ServerSocket serverSocket = ServerSocketFactory.getDefault()
-                .createServerSocket(port, 1, InetAddress.getByName("localhost"));
-            serverSocket.close();
-            return true;
-        }
-        catch (Exception ex) {
-            return false;
-        }
-    }
-
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-modules/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-modules/pom.xml
deleted file mode 100644
index f2ade3d0..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-modules/pom.xml
+++ /dev/null
@@ -1,48 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-test-modules</artifactId>
-  <description>Check if dependencies configured properly</description>
-
-  <properties>
-    <skip_maven_deploy>true</skip_maven_deploy>
-    <dom4j_version>2.1.4</dom4j_version>
-  </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.dom4j</groupId>
-      <artifactId>dom4j</artifactId>
-      <version>${dom4j_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-common</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
deleted file mode 100644
index 209a25ff..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-modules/src/test/java/org/apache/dubbo/dependency/FileTest.java
+++ /dev/null
@@ -1,613 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.dependency;
-
-import java.io.File;
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.stream.Collectors;
-
-import org.apache.commons.io.FileUtils;
-import org.apache.commons.io.IOUtils;
-import org.dom4j.Document;
-import org.dom4j.DocumentException;
-import org.dom4j.Element;
-import org.dom4j.io.SAXReader;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
-
-class FileTest {
-    private static final List<Pattern> ignoredModules = new LinkedList<>();
-    private static final List<Pattern> ignoredArtifacts = new LinkedList<>();
-    private static final List<Pattern> ignoredModulesInDubboAll = new LinkedList<>();
-
-    static {
-        ignoredModules.add(Pattern.compile("dubbo-apache-release"));
-        ignoredModules.add(Pattern.compile("dubbo-build-tools"));
-        ignoredModules.add(Pattern.compile("dubbo-dependencies-all"));
-        ignoredModules.add(Pattern.compile("dubbo-parent"));
-        ignoredModules.add(Pattern.compile("dubbo-core-spi"));
-        ignoredModules.add(Pattern.compile("dubbo-demo.*"));
-
-        ignoredArtifacts.add(Pattern.compile("dubbo-demo.*"));
-        ignoredArtifacts.add(Pattern.compile("dubbo-test.*"));
-
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-bom"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-compiler"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-dependencies.*"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-distribution"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-metadata-processor"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-native.*"));
-        ignoredModulesInDubboAll.add(Pattern.compile(".*spring-boot.*"));
-        ignoredModulesInDubboAll.add(Pattern.compile("dubbo-maven-plugin"));
-    }
-
-    @Test
-    void checkDubboBom() throws DocumentException {
-        File baseFile = getBaseFile();
-
-        List<File> poms = new LinkedList<>();
-        readPoms(baseFile, poms);
-
-        SAXReader reader = new SAXReader();
-
-        List<String> artifactIds = poms.stream()
-                .map(f -> {
-                    try {
-                        return reader.read(f);
-                    } catch (DocumentException e) {
-                        throw new RuntimeException(e);
-                    }
-                })
-                .map(Document::getRootElement)
-                .map(doc -> doc.elementText("artifactId"))
-                .sorted()
-                .collect(Collectors.toList());
-
-        String dubboBomPath = "dubbo-distribution" + File.separator + "dubbo-bom" + File.separator + "pom.xml";
-        Document dubboBom = reader.read(new File(getBaseFile(), dubboBomPath));
-        List<String> artifactIdsInDubboBom = dubboBom
-                .getRootElement()
-                .element("dependencyManagement")
-                .element("dependencies")
-                .elements("dependency")
-                .stream()
-                .map(ele -> ele.elementText("artifactId"))
-                .collect(Collectors.toList());
-
-        List<String> expectedArtifactIds = new LinkedList<>(artifactIds);
-        expectedArtifactIds.removeAll(artifactIdsInDubboBom);
-        expectedArtifactIds.removeIf(artifactId -> ignoredModules.stream()
-                .anyMatch(pattern -> pattern.matcher(artifactId).matches()));
-
-        Assertions.assertTrue(
-                expectedArtifactIds.isEmpty(),
-                "Newly created modules must be added to dubbo-bom. Found modules: " + expectedArtifactIds);
-    }
-
-    @Test
-    void checkArtifacts() throws DocumentException, IOException {
-        File baseFile = getBaseFile();
-
-        List<File> poms = new LinkedList<>();
-        readPoms(baseFile, poms);
-
-        SAXReader reader = new SAXReader();
-
-        List<String> artifactIds = poms.stream()
-                .map(f -> {
-                    try {
-                        return reader.read(f);
-                    } catch (DocumentException e) {
-                        throw new RuntimeException(e);
-                    }
-                })
-                .map(Document::getRootElement)
-                .map(doc -> doc.elementText("artifactId"))
-                .sorted()
-                .collect(Collectors.toList());
-
-        List<String> artifactIdsInRoot = IOUtils.readLines(
-                this.getClass()
-                        .getClassLoader()
-                        .getResource("META-INF/versions/.artifacts")
-                        .openStream(),
-                StandardCharsets.UTF_8);
-        artifactIdsInRoot.removeIf(s -> s.startsWith("#"));
-
-        List<String> expectedArtifactIds = new LinkedList<>(artifactIds);
-        expectedArtifactIds.removeAll(artifactIdsInRoot);
-        expectedArtifactIds.removeIf(artifactId -> ignoredArtifacts.stream()
-                .anyMatch(pattern -> pattern.matcher(artifactId).matches()));
-
-        Assertions.assertTrue(
-                expectedArtifactIds.isEmpty(),
-                "Newly created modules must be added to .artifacts (in project root). Found modules: "
-                        + expectedArtifactIds);
-    }
-
-    @Test
-    void checkDubboDependenciesAll() throws DocumentException {
-        File baseFile = getBaseFile();
-
-        List<File> poms = new LinkedList<>();
-        readPoms(baseFile, poms);
-
-        SAXReader reader = new SAXReader();
-
-        List<String> artifactIds = poms.stream()
-                .map(f -> {
-                    try {
-                        return reader.read(f);
-                    } catch (DocumentException e) {
-                        throw new RuntimeException(e);
-                    }
-                })
-                .map(Document::getRootElement)
-                .filter(doc -> !Objects.equals("pom", doc.elementText("packaging")))
-                .map(doc -> doc.elementText("artifactId"))
-                .sorted()
-                .collect(Collectors.toList());
-
-        String dubboDependenciesAllPath =
-                "dubbo-test" + File.separator + "dubbo-dependencies-all" + File.separator + "pom.xml";
-        Document dubboDependenciesAll = reader.read(new File(getBaseFile(), dubboDependenciesAllPath));
-        List<String> artifactIdsInDubboDependenciesAll =
-                dubboDependenciesAll.getRootElement().element("dependencies").elements("dependency").stream()
-                        .map(ele -> ele.elementText("artifactId"))
-                        .collect(Collectors.toList());
-
-        List<String> expectedArtifactIds = new LinkedList<>(artifactIds);
-        expectedArtifactIds.removeAll(artifactIdsInDubboDependenciesAll);
-        expectedArtifactIds.removeIf(artifactId -> ignoredModules.stream()
-                .anyMatch(pattern -> pattern.matcher(artifactId).matches()));
-
-        Assertions.assertTrue(
-                expectedArtifactIds.isEmpty(),
-                "Newly created modules must be added to dubbo-dependencies-all. Found modules: " + expectedArtifactIds);
-    }
-
-    @Test
-    void checkDubboAllDependencies() throws DocumentException {
-        File baseFile = getBaseFile();
-
-        List<File> poms = new LinkedList<>();
-        readPoms(baseFile, poms);
-
-        SAXReader reader = new SAXReader();
-
-        List<String> artifactIds = poms.stream()
-                .map(f -> {
-                    try {
-                        return reader.read(f);
-                    } catch (DocumentException e) {
-                        throw new RuntimeException(e);
-                    }
-                })
-                .map(Document::getRootElement)
-                .map(doc -> doc.elementText("artifactId"))
-                .sorted()
-                .collect(Collectors.toList());
-
-        Assertions.assertEquals(poms.size(), artifactIds.size());
-
-        List<String> deployedArtifactIds = poms.stream()
-                .map(f -> {
-                    try {
-                        return reader.read(f);
-                    } catch (DocumentException e) {
-                        throw new RuntimeException(e);
-                    }
-                })
-                .map(Document::getRootElement)
-                .filter(doc -> !Objects.equals("pom", doc.elementText("packaging")))
-                .filter(doc -> Objects.isNull(doc.element("properties"))
-                        || (!Objects.equals("true", doc.element("properties").elementText("skip_maven_deploy"))
-                                && !Objects.equals(
-                                        "true", doc.element("properties").elementText("maven.deploy.skip"))))
-                .map(doc -> doc.elementText("artifactId"))
-                .sorted()
-                .collect(Collectors.toList());
-
-        String dubboAllPath = "dubbo-distribution" + File.separator + "dubbo-all" + File.separator + "pom.xml";
-        Document dubboAll = reader.read(new File(getBaseFile(), dubboAllPath));
-        List<String> artifactIdsInDubboAll =
-                dubboAll.getRootElement().element("dependencies").elements("dependency").stream()
-                        .map(ele -> ele.elementText("artifactId"))
-                        .collect(Collectors.toList());
-
-        List<String> expectedArtifactIds = new LinkedList<>(deployedArtifactIds);
-        expectedArtifactIds.removeAll(artifactIdsInDubboAll);
-        expectedArtifactIds.removeIf(artifactId -> ignoredModules.stream()
-                .anyMatch(pattern -> pattern.matcher(artifactId).matches()));
-        expectedArtifactIds.removeIf(artifactId -> ignoredModulesInDubboAll.stream()
-                .anyMatch(pattern -> pattern.matcher(artifactId).matches()));
-
-        Assertions.assertTrue(
-                expectedArtifactIds.isEmpty(),
-                "Newly created modules must be added to dubbo-all(dubbo-distribution" + File.separator + "dubbo-all"
-                        + File.separator + "pom.xml). Found modules: " + expectedArtifactIds);
-
-        List<String> unexpectedArtifactIds = new LinkedList<>(artifactIdsInDubboAll);
-        unexpectedArtifactIds.removeIf(artifactId -> !artifactIds.contains(artifactId));
-        unexpectedArtifactIds.removeAll(deployedArtifactIds);
-        Assertions.assertTrue(
-                unexpectedArtifactIds.isEmpty(),
-                "Undeploy dependencies should not be added to dubbo-all(dubbo-distribution" + File.separator
-                        + "dubbo-all" + File.separator + "pom.xml). Found modules: " + unexpectedArtifactIds);
-
-        unexpectedArtifactIds = new LinkedList<>();
-        for (String artifactId : artifactIdsInDubboAll) {
-            if (!artifactIds.contains(artifactId)) {
-                continue;
-            }
-            if (ignoredModules.stream()
-                    .anyMatch(pattern -> pattern.matcher(artifactId).matches())) {
-                unexpectedArtifactIds.add(artifactId);
-            }
-            if (ignoredModulesInDubboAll.stream()
-                    .anyMatch(pattern -> pattern.matcher(artifactId).matches())) {
-                unexpectedArtifactIds.add(artifactId);
-            }
-        }
-        Assertions.assertTrue(
-                unexpectedArtifactIds.isEmpty(),
-                "Unexpected dependencies should not be added to dubbo-all(dubbo-distribution" + File.separator
-                        + "dubbo-all" + File.separator + "pom.xml). Found modules: " + unexpectedArtifactIds);
-    }
-
-    @Test
-    void checkDubboAllShade() throws DocumentException {
-        File baseFile = getBaseFile();
-
-        List<File> poms = new LinkedList<>();
-        readPoms(baseFile, poms);
-
-        SAXReader reader = new SAXReader();
-
-        List<String> artifactIds = poms.stream()
-                .map(f -> {
-                    try {
-                        return reader.read(f);
-                    } catch (DocumentException e) {
-                        throw new RuntimeException(e);
-                    }
-                })
-                .map(Document::getRootElement)
-                .map(doc -> doc.elementText("artifactId"))
-                .sorted()
-                .collect(Collectors.toList());
-
-        Assertions.assertEquals(poms.size(), artifactIds.size());
-
-        List<String> deployedArtifactIds = poms.stream()
-                .map(f -> {
-                    try {
-                        return reader.read(f);
-                    } catch (DocumentException e) {
-                        throw new RuntimeException(e);
-                    }
-                })
-                .map(Document::getRootElement)
-                .filter(doc -> Objects.isNull(doc.element("properties"))
-                        || (!Objects.equals("true", doc.element("properties").elementText("skip_maven_deploy"))
-                                && !Objects.equals(
-                                        "true", doc.element("properties").elementText("maven.deploy.skip"))))
-                .filter(doc -> !Objects.equals("pom", doc.elementText("packaging")))
-                .map(doc -> doc.elementText("artifactId"))
-                .sorted()
-                .collect(Collectors.toList());
-
-        String dubboAllPath = "dubbo-distribution" + File.separator + "dubbo-all" + File.separator + "pom.xml";
-        Document dubboAll = reader.read(new File(getBaseFile(), dubboAllPath));
-        List<String> artifactIdsInDubboAll =
-                dubboAll.getRootElement().element("build").element("plugins").elements("plugin").stream()
-                        .filter(ele -> ele.elementText("artifactId").equals("maven-shade-plugin"))
-                        .map(ele -> ele.element("executions"))
-                        .map(ele -> ele.elements("execution"))
-                        .flatMap(Collection::stream)
-                        .filter(ele -> ele.elementText("phase").equals("package"))
-                        .map(ele -> ele.element("configuration"))
-                        .map(ele -> ele.element("artifactSet"))
-                        .map(ele -> ele.element("includes"))
-                        .map(ele -> ele.elements("include"))
-                        .flatMap(Collection::stream)
-                        .map(Element::getText)
-                        .filter(artifactId -> artifactId.startsWith("org.apache.dubbo:"))
-                        .map(artifactId -> artifactId.substring("org.apache.dubbo:".length()))
-                        .collect(Collectors.toList());
-
-        List<String> expectedArtifactIds = new LinkedList<>(deployedArtifactIds);
-        expectedArtifactIds.removeAll(artifactIdsInDubboAll);
-        expectedArtifactIds.removeIf(artifactId -> ignoredModules.stream()
-                .anyMatch(pattern -> pattern.matcher(artifactId).matches()));
-        expectedArtifactIds.removeIf(artifactId -> ignoredModulesInDubboAll.stream()
-                .anyMatch(pattern -> pattern.matcher(artifactId).matches()));
-
-        Assertions.assertTrue(
-                expectedArtifactIds.isEmpty(),
-                "Newly created modules must be added to dubbo-all (dubbo-distribution" + File.separator + "dubbo-all"
-                        + File.separator + "pom.xml in shade plugin). Found modules: " + expectedArtifactIds);
-
-        List<String> unexpectedArtifactIds = new LinkedList<>(artifactIdsInDubboAll);
-        unexpectedArtifactIds.removeIf(artifactId -> !artifactIds.contains(artifactId));
-        unexpectedArtifactIds.removeAll(deployedArtifactIds);
-        Assertions.assertTrue(
-                unexpectedArtifactIds.isEmpty(),
-                "Undeploy dependencies should not be added to dubbo-all (dubbo-distribution" + File.separator
-                        + "dubbo-all" + File.separator + "pom.xml in shade plugin). Found modules: "
-                        + unexpectedArtifactIds);
-
-        unexpectedArtifactIds = new LinkedList<>();
-        for (String artifactId : artifactIdsInDubboAll) {
-            if (!artifactIds.contains(artifactId)) {
-                continue;
-            }
-            if (ignoredModules.stream()
-                    .anyMatch(pattern -> pattern.matcher(artifactId).matches())) {
-                unexpectedArtifactIds.add(artifactId);
-            }
-            if (ignoredModulesInDubboAll.stream()
-                    .anyMatch(pattern -> pattern.matcher(artifactId).matches())) {
-                unexpectedArtifactIds.add(artifactId);
-            }
-        }
-        Assertions.assertTrue(
-                unexpectedArtifactIds.isEmpty(),
-                "Unexpected dependencies should not be added to dubbo-all (dubbo-distribution" + File.separator
-                        + "dubbo-all" + File.separator + "pom.xml in shade plugin). Found modules: "
-                        + unexpectedArtifactIds);
-    }
-
-    @Test
-    void checkDubboAllTransform() throws DocumentException {
-        File baseFile = getBaseFile();
-        List<String> spis = new LinkedList<>();
-        readSPI(baseFile, spis);
-
-        String dubboAllPath = "dubbo-distribution" + File.separator + "dubbo-all" + File.separator + "pom.xml";
-
-        SAXReader reader = new SAXReader();
-        Document dubboAll = reader.read(new File(baseFile, dubboAllPath));
-
-        List<String> transformsInDubboAll =
-                dubboAll.getRootElement().element("build").element("plugins").elements("plugin").stream()
-                        .filter(ele -> ele.elementText("artifactId").equals("maven-shade-plugin"))
-                        .map(ele -> ele.element("executions"))
-                        .map(ele -> ele.elements("execution"))
-                        .flatMap(Collection::stream)
-                        .filter(ele -> ele.elementText("phase").equals("package"))
-                        .map(ele -> ele.element("configuration"))
-                        .map(ele -> ele.element("transformers"))
-                        .map(ele -> ele.elements("transformer"))
-                        .flatMap(Collection::stream)
-                        .map(ele -> ele.elementText("resource"))
-                        .map(String::trim)
-                        .map(resource -> resource.substring(resource.lastIndexOf("/") + 1))
-                        .collect(Collectors.toList());
-
-        List<String> expectedSpis = new LinkedList<>(spis);
-        expectedSpis.removeAll(transformsInDubboAll);
-        Assertions.assertTrue(
-                expectedSpis.isEmpty(),
-                "Newly created SPI interface must be added to dubbo-all(dubbo-distribution" + File.separator
-                        + "dubbo-all" + File.separator + "pom.xml in shade plugin) to being transformed. Found spis: "
-                        + expectedSpis);
-
-        List<String> unexpectedSpis = new LinkedList<>(transformsInDubboAll);
-        unexpectedSpis.removeAll(spis);
-        Assertions.assertTrue(
-                unexpectedSpis.isEmpty(),
-                "Class without `@SPI` declaration should not be added to dubbo-all(dubbo-distribution" + File.separator
-                        + "dubbo-all" + File.separator + "pom.xml in shade plugin) to being transformed. Found spis: "
-                        + unexpectedSpis);
-    }
-
-    @Test
-    void checkSpiFiles() {
-        File baseFile = getBaseFile();
-        List<String> spis = new LinkedList<>();
-        readSPI(baseFile, spis);
-
-        Map<File, String> spiResources = new HashMap<>();
-        readSPIResource(baseFile, spiResources);
-        Map<File, String> copyOfSpis = new HashMap<>(spiResources);
-        copyOfSpis.entrySet().removeIf(entry -> spis.contains(entry.getValue()));
-        Assertions.assertTrue(
-                copyOfSpis.isEmpty(),
-                "Newly created spi profiles must have a valid class declared with `@SPI`. Found spi profiles: "
-                        + copyOfSpis.keySet());
-
-        List<File> unexpectedSpis = new LinkedList<>();
-        readSPIUnexpectedResource(baseFile, unexpectedSpis);
-        unexpectedSpis.removeIf(file -> file.getAbsolutePath()
-                .contains("dubbo-common" + File.separator + "src" + File.separator + "main" + File.separator
-                        + "resources" + File.separator + "META-INF" + File.separator + "services" + File.separator
-                        + "org.apache.dubbo.common.extension.LoadingStrategy"));
-        Assertions.assertTrue(
-                unexpectedSpis.isEmpty(),
-                "Dubbo native provided spi profiles must filed in `META-INF" + File.separator + "dubbo" + File.separator
-                        + "internal`. Please move to proper folder . Found spis: " + unexpectedSpis);
-    }
-
-    private static File getBaseFile() {
-        File baseFile = new File(new File("").getAbsolutePath());
-        while (baseFile != null) {
-            if (new File(baseFile, ".asf.yaml").exists()) {
-                break;
-            }
-            baseFile = baseFile.getParentFile();
-        }
-        Assertions.assertNotNull(baseFile, "Can not find base dir");
-
-        System.out.println("Found Project Base Path: " + baseFile.getAbsolutePath());
-        return baseFile;
-    }
-
-    public void readPoms(File path, List<File> poms) {
-        if (path.isDirectory()) {
-            File[] files = path.listFiles();
-            if (files != null) {
-                for (File file : files) {
-                    readPoms(file, poms);
-                }
-            }
-        } else if (path.isFile()) {
-            if (path.getAbsolutePath().contains("target")) {
-                return;
-            }
-            if (path.getName().equals("pom.xml")) {
-                poms.add(path);
-            }
-        }
-    }
-
-    public void readSPI(File path, List<String> spis) {
-        if (path.isDirectory()) {
-            File[] files = path.listFiles();
-            if (files != null) {
-                for (File file : files) {
-                    readSPI(file, spis);
-                }
-            }
-        } else if (path.isFile()) {
-            if (path.getAbsolutePath().contains("target")) {
-                return;
-            }
-            if (path.getAbsolutePath().contains("src" + File.separator + "main" + File.separator + "java")) {
-                String content;
-                try {
-                    content = FileUtils.readFileToString(path, StandardCharsets.UTF_8);
-                } catch (IOException e) {
-                    throw new RuntimeException(e);
-                }
-                if (content != null && content.contains("@SPI")) {
-                    String absolutePath = path.getAbsolutePath();
-                    absolutePath = absolutePath.substring(absolutePath.lastIndexOf(
-                                    "src" + File.separator + "main" + File.separator + "java" + File.separator)
-                            + ("src" + File.separator + "main" + File.separator + "java" + File.separator).length());
-                    absolutePath = absolutePath.substring(0, absolutePath.lastIndexOf(".java"));
-                    absolutePath = absolutePath.replaceAll(Matcher.quoteReplacement(File.separator), ".");
-                    spis.add(absolutePath);
-                }
-            }
-        }
-    }
-
-    public void readSPIResource(File path, Map<File, String> spis) {
-        if (path.isDirectory()) {
-            File[] files = path.listFiles();
-            if (files != null) {
-                for (File file : files) {
-                    readSPIResource(file, spis);
-                }
-            }
-        } else if (path.isFile()) {
-            if (path.getAbsolutePath().contains("target")) {
-                return;
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF" + File.separator + "dubbo" + File.separator + "internal" + File.separator)) {
-                String absolutePath = path.getAbsolutePath();
-                absolutePath = absolutePath.substring(absolutePath.lastIndexOf("src" + File.separator + "main"
-                                + File.separator + "resources" + File.separator + "META-INF" + File.separator + "dubbo"
-                                + File.separator + "internal" + File.separator)
-                        + ("src" + File.separator + "main" + File.separator + "resources" + File.separator + "META-INF"
-                                        + File.separator + "dubbo" + File.separator + "internal" + File.separator)
-                                .length());
-                absolutePath = absolutePath.replaceAll(Matcher.quoteReplacement(File.separator), ".");
-                spis.put(path, absolutePath);
-            }
-        }
-    }
-
-    public void readSPIUnexpectedResource(File path, List<File> spis) {
-        if (path.isDirectory()) {
-            File[] files = path.listFiles();
-            if (files != null) {
-                for (File file : files) {
-                    readSPIUnexpectedResource(file, spis);
-                }
-            }
-        } else if (path.isFile()) {
-            if (path.getAbsolutePath().contains("target")) {
-                return;
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF" + File.separator + "dubbo" + File.separator + "org.apache.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF" + File.separator + "dubbo" + File.separator + "com.alibaba.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF" + File.separator + "services" + File.separator + "org.apache.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF" + File.separator + "services" + File.separator + "com.alibaba.dubbo")) {
-                spis.add(path);
-            }
-
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF.dubbo" + File.separator + "org.apache.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF.dubbo" + File.separator + "com.alibaba.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF.services" + File.separator + "org.apache.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF.services" + File.separator + "com.alibaba.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF.dubbo.internal" + File.separator + "org.apache.dubbo")) {
-                spis.add(path);
-            }
-            if (path.getAbsolutePath()
-                    .contains("src" + File.separator + "main" + File.separator + "resources" + File.separator
-                            + "META-INF.dubbo.internal" + File.separator + "com.alibaba.dubbo")) {
-                spis.add(path);
-            }
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/pom.xml
deleted file mode 100644
index 6a4eb474..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/pom.xml
+++ /dev/null
@@ -1,208 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-test-spring</artifactId>
-
-  <properties>
-    <skip_maven_deploy>true</skip_maven_deploy>
-    <slf4j-log4j12.version>1.7.33</slf4j-log4j12.version>
-    <spring_version>3.2.18.RELEASE</spring_version>
-    <!--<spring_version>4.0.9.RELEASE</spring_version>-->
-    <!--<spring_version>4.1.9.RELEASE</spring_version>-->
-    <!--<spring_version>4.2.4.RELEASE</spring_version>-->
-  </properties>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>org.springframework</groupId>
-        <artifactId>spring-framework-bom</artifactId>
-        <version>${spring_version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <dependencies>
-    <!-- test common -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-common</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <!-- Dubbo -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-multicast</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-zookeeper</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-registry-nacos</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.alibaba.nacos</groupId>
-      <artifactId>nacos-client</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-configcenter-zookeeper</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-configcenter-nacos</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-report-zookeeper</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-metadata-report-nacos</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-dubbo</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-rpc-rest</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-config-spring</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-remoting-netty4</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-serialization-hessian2</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-serialization-fastjson2</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-serialization-jdk</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.slf4j</groupId>
-      <artifactId>slf4j-api</artifactId>
-    </dependency>
-    <dependency>
-      <groupId>org.slf4j</groupId>
-      <artifactId>slf4j-log4j12</artifactId>
-      <version>${slf4j-log4j12.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>log4j</groupId>
-      <artifactId>log4j</artifactId>
-    </dependency>
-
-    <!--JUnit Jupiter Engine to depend on the JUnit5 engine and JUnit 5 API -->
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-engine</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <!--<scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-params</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <!--<scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.hamcrest</groupId>
-      <artifactId>hamcrest</artifactId>
-      <version>${hamcrest_version}</version>
-      <!--<scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-api</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <version>${mockito_version}</version>
-      <!--<scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-inline</artifactId>
-      <version>${mockito_version}</version>
-      <!--<scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>cglib</groupId>
-      <artifactId>cglib-nodep</artifactId>
-      <version>${cglib_version}</version>
-      <!--<scope>test</scope>-->
-    </dependency>
-
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-framework</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-recipes</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.zookeeper</groupId>
-      <artifactId>zookeeper</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-  </dependencies>
-
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringAnnotationBeanTest.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringAnnotationBeanTest.java
deleted file mode 100644
index b8e14461..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringAnnotationBeanTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.spring;
-
-import org.apache.dubbo.config.annotation.DubboReference;
-import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
-import org.apache.dubbo.test.common.api.DemoService;
-import org.apache.dubbo.test.spring.context.MockSpringInitCustomizer;
-
-import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.PropertySource;
-
-public class SpringAnnotationBeanTest {
-
-    @BeforeAll
-    public static void beforeAll() {
-        DubboBootstrap.reset();
-    }
-
-    @AfterAll
-    public static void afterAll() {
-        DubboBootstrap.reset();
-    }
-
-    @Test
-    public void test() {
-        AnnotationConfigApplicationContext applicationContext =
-                new AnnotationConfigApplicationContext(TestConfiguration.class);
-        TestService testService = applicationContext.getBean(TestService.class);
-        testService.test();
-
-        // check initialization customizer
-        MockSpringInitCustomizer.checkCustomizer(applicationContext);
-    }
-
-    @EnableDubbo(scanBasePackages = "org.apache.dubbo.test.common.impl")
-    @Configuration
-    @PropertySource("/demo-app.properties")
-    static class TestConfiguration {
-
-        @Bean
-        public TestService testService() {
-            return new TestService();
-        }
-    }
-
-    static class TestService {
-
-        @DubboReference
-        private DemoService demoService;
-
-        public void test() {
-            String result = demoService.sayHello("dubbo");
-            Assertions.assertEquals("Hello dubbo", result);
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringJavaConfigBeanTest.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringJavaConfigBeanTest.java
deleted file mode 100644
index 8f4bb91e..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringJavaConfigBeanTest.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.spring;
-
-import org.apache.dubbo.config.ApplicationConfig;
-import org.apache.dubbo.config.ConsumerConfig;
-import org.apache.dubbo.config.ProtocolConfig;
-import org.apache.dubbo.config.ReferenceConfig;
-import org.apache.dubbo.config.RegistryConfig;
-import org.apache.dubbo.config.annotation.DubboReference;
-import org.apache.dubbo.config.annotation.DubboService;
-import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.config.context.ConfigManager;
-import org.apache.dubbo.config.context.ModuleConfigManager;
-import org.apache.dubbo.config.spring.ReferenceBean;
-import org.apache.dubbo.config.spring.context.annotation.EnableDubbo;
-import org.apache.dubbo.rpc.Constants;
-import org.apache.dubbo.rpc.model.ApplicationModel;
-import org.apache.dubbo.test.check.registrycenter.config.ZookeeperRegistryCenterConfig;
-import org.apache.dubbo.test.common.SysProps;
-import org.apache.dubbo.test.common.api.DemoService;
-import org.apache.dubbo.test.common.impl.DemoServiceImpl;
-import org.apache.dubbo.test.spring.context.MockSpringInitCustomizer;
-
-import java.util.Collection;
-import java.util.Map;
-
-import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.AfterEach;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-
-public class SpringJavaConfigBeanTest {
-
-    private static final String MY_PROTOCOL_ID = "myProtocol";
-    private static final String MY_REGISTRY_ID = "my-registry";
-
-    @BeforeAll
-    public static void beforeAll() {
-        DubboBootstrap.reset();
-    }
-
-    @AfterAll
-    public static void afterAll() {
-        DubboBootstrap.reset();
-    }
-
-    @BeforeEach
-    public void beforeEach() {
-        DubboBootstrap.reset();
-    }
-
-    @AfterEach
-    public void afterEach() {
-        SysProps.clear();
-    }
-
-    @Test
-    public void testBean() {
-
-        SysProps.setProperty("dubbo.application.owner", "Tom");
-        SysProps.setProperty("dubbo.application.qos-enable", "false");
-        SysProps.setProperty("dubbo.protocol.name", "dubbo");
-        SysProps.setProperty("dubbo.protocol.port", "2346");
-        String registryAddress = ZookeeperRegistryCenterConfig.getConnectionAddress();
-        SysProps.setProperty("dubbo.registry.address", registryAddress);
-        SysProps.setProperty("dubbo.provider.group", "test");
-
-        AnnotationConfigApplicationContext consumerContext = new AnnotationConfigApplicationContext(
-                TestConfiguration.class, ConsumerConfiguration.class, ProviderConfiguration.class);
-        try {
-            consumerContext.start();
-
-            ApplicationModel applicationModel = consumerContext.getBean(ApplicationModel.class);
-            ConfigManager configManager = consumerContext.getBean(ConfigManager.class);
-            ApplicationConfig application = configManager.getApplication().get();
-            Assertions.assertEquals(false, application.getQosEnable());
-            Assertions.assertEquals("Tom", application.getOwner());
-
-            RegistryConfig registry = configManager.getRegistry(MY_REGISTRY_ID).get();
-            Assertions.assertEquals(registryAddress, registry.getAddress());
-
-            Collection<ProtocolConfig> protocols = configManager.getProtocols();
-            Assertions.assertEquals(1, protocols.size());
-            ProtocolConfig protocolConfig = protocols.iterator().next();
-            Assertions.assertEquals("dubbo", protocolConfig.getName());
-            Assertions.assertEquals(2346, protocolConfig.getPort());
-            Assertions.assertEquals(MY_PROTOCOL_ID, protocolConfig.getId());
-
-            ModuleConfigManager moduleConfigManager =
-                    applicationModel.getDefaultModule().getConfigManager();
-            ConsumerConfig consumerConfig =
-                    moduleConfigManager.getDefaultConsumer().get();
-            Assertions.assertEquals(1000, consumerConfig.getTimeout());
-            Assertions.assertEquals("demo", consumerConfig.getGroup());
-            Assertions.assertEquals(false, consumerConfig.isCheck());
-            Assertions.assertEquals(2, consumerConfig.getRetries());
-
-            Map<String, ReferenceBean> referenceBeanMap = consumerContext.getBeansOfType(ReferenceBean.class);
-            Assertions.assertEquals(1, referenceBeanMap.size());
-            ReferenceBean referenceBean = referenceBeanMap.get("&demoService");
-            Assertions.assertNotNull(referenceBean);
-            ReferenceConfig referenceConfig = referenceBean.getReferenceConfig();
-            // use consumer's attributes as default value
-            Assertions.assertEquals(consumerConfig.getTimeout(), referenceConfig.getTimeout());
-            Assertions.assertEquals(consumerConfig.getGroup(), referenceConfig.getGroup());
-            // consumer cannot override reference's attribute
-            Assertions.assertEquals(5, referenceConfig.getRetries());
-
-            DemoService referProxy = (DemoService) referenceConfig.get();
-            Assertions.assertTrue(referProxy instanceof DemoService);
-            String result = referProxy.sayHello("dubbo");
-            Assertions.assertEquals("Hello dubbo", result);
-
-            // check initialization customizer
-            MockSpringInitCustomizer.checkCustomizer(consumerContext);
-        } finally {
-            consumerContext.close();
-        }
-    }
-
-    @EnableDubbo(scanBasePackages = "")
-    @Configuration
-    static class TestConfiguration {
-
-        @Bean(name = "dubbo-demo-application")
-        public ApplicationConfig applicationConfig() {
-            ApplicationConfig applicationConfig = new ApplicationConfig();
-            applicationConfig.setName("dubbo-demo-application");
-            return applicationConfig;
-        }
-
-        @Bean(name = MY_PROTOCOL_ID)
-        public ProtocolConfig protocolConfig() {
-            ProtocolConfig protocolConfig = new ProtocolConfig();
-            protocolConfig.setName("rest");
-            protocolConfig.setPort(1234);
-            return protocolConfig;
-        }
-
-        @Bean(name = MY_REGISTRY_ID)
-        public RegistryConfig registryConfig() {
-            RegistryConfig registryConfig = new RegistryConfig();
-            registryConfig.setAddress("N/A");
-            return registryConfig;
-        }
-
-        @Bean
-        public ConsumerConfig consumerConfig() {
-            ConsumerConfig consumer = new ConsumerConfig();
-            consumer.setTimeout(1000);
-            consumer.setGroup("demo");
-            consumer.setCheck(false);
-            consumer.setRetries(2);
-            return consumer;
-        }
-    }
-
-    @Configuration
-    static class ConsumerConfiguration {
-
-        @Bean
-        @DubboReference(scope = Constants.SCOPE_LOCAL, retries = 5)
-        public ReferenceBean<DemoService> demoService() {
-            return new ReferenceBean<>();
-        }
-    }
-
-    @Configuration
-    static class ProviderConfiguration {
-
-        @Bean
-        @DubboService(group = "demo")
-        public DemoService demoServiceImpl() {
-            return new DemoServiceImpl();
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringXmlConfigTest.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringXmlConfigTest.java
deleted file mode 100644
index d3a75091..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/SpringXmlConfigTest.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.spring;
-
-import org.apache.dubbo.config.bootstrap.DubboBootstrap;
-import org.apache.dubbo.test.common.SysProps;
-import org.apache.dubbo.test.common.api.DemoService;
-import org.apache.dubbo.test.common.api.GreetingService;
-import org.apache.dubbo.test.common.api.RestDemoService;
-import org.apache.dubbo.test.spring.context.MockSpringInitCustomizer;
-
-import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.condition.DisabledForJreRange;
-import org.junit.jupiter.api.condition.JRE;
-import org.springframework.context.support.ClassPathXmlApplicationContext;
-
-import static org.apache.dubbo.common.constants.CommonConstants.SHUTDOWN_WAIT_KEY;
-
-@DisabledForJreRange(min = JRE.JAVA_16)
-public class SpringXmlConfigTest {
-
-    private static ClassPathXmlApplicationContext providerContext;
-
-    @BeforeAll
-    public static void beforeAll() {
-        DubboBootstrap.reset();
-    }
-
-    @AfterAll
-    public static void afterAll() {
-        DubboBootstrap.reset();
-        providerContext.close();
-    }
-
-    private void startProvider() {
-        providerContext = new ClassPathXmlApplicationContext("/spring/dubbo-demo-provider.xml");
-    }
-
-    @Test
-    public void test() {
-        SysProps.setProperty(SHUTDOWN_WAIT_KEY, "2000");
-        // start provider context
-        startProvider();
-        // start consumer context
-        ClassPathXmlApplicationContext applicationContext = null;
-        try {
-            applicationContext = new ClassPathXmlApplicationContext("/spring/dubbo-demo.xml");
-
-            GreetingService greetingService = applicationContext.getBean("greetingService", GreetingService.class);
-            String greeting = greetingService.hello();
-            Assertions.assertEquals(greeting, "Greetings!");
-
-            DemoService demoService = applicationContext.getBean("demoService", DemoService.class);
-            String sayHelloResult = demoService.sayHello("dubbo");
-            Assertions.assertTrue(sayHelloResult.startsWith("Hello dubbo"), sayHelloResult);
-
-            RestDemoService restDemoService = applicationContext.getBean("restDemoService", RestDemoService.class);
-            String resetHelloResult = restDemoService.sayHello("dubbo");
-            Assertions.assertEquals("Hello, dubbo", resetHelloResult);
-
-            // check initialization customizer
-            MockSpringInitCustomizer.checkCustomizer(applicationContext);
-        } finally {
-            SysProps.clear();
-            if (applicationContext != null) {
-                applicationContext.close();
-            }
-        }
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/context/MockSpringInitCustomizer.java b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/context/MockSpringInitCustomizer.java
deleted file mode 100644
index c794fcf9..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/java/org/apache/dubbo/test/spring/context/MockSpringInitCustomizer.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.test.spring.context;
-
-import org.apache.dubbo.config.spring.context.DubboSpringInitContext;
-import org.apache.dubbo.config.spring.context.DubboSpringInitCustomizer;
-import org.apache.dubbo.rpc.model.FrameworkModel;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Set;
-
-import org.junit.jupiter.api.Assertions;
-import org.springframework.beans.BeansException;
-import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
-import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
-import org.springframework.beans.factory.support.AbstractBeanDefinition;
-import org.springframework.beans.factory.support.BeanDefinitionBuilder;
-import org.springframework.context.ConfigurableApplicationContext;
-
-public class MockSpringInitCustomizer implements DubboSpringInitCustomizer {
-
-    private List<DubboSpringInitContext> contexts = new ArrayList<>();
-
-    @Override
-    public void customize(DubboSpringInitContext context) {
-        this.contexts.add(context);
-
-        // register post-processor bean, expecting the bean is loaded and invoked by spring container
-        AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(
-                        CustomBeanFactoryPostProcessor.class)
-                .getBeanDefinition();
-        context.getRegistry().registerBeanDefinition(CustomBeanFactoryPostProcessor.class.getName(), beanDefinition);
-    }
-
-    public List<DubboSpringInitContext> getContexts() {
-        return contexts;
-    }
-
-    private static class CustomBeanFactoryPostProcessor implements BeanFactoryPostProcessor {
-        private ConfigurableListableBeanFactory beanFactory;
-
-        @Override
-        public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
-            this.beanFactory = beanFactory;
-        }
-    }
-
-    public static void checkCustomizer(ConfigurableApplicationContext applicationContext) {
-        Set<DubboSpringInitCustomizer> customizers = FrameworkModel.defaultModel()
-                .getExtensionLoader(DubboSpringInitCustomizer.class)
-                .getSupportedExtensionInstances();
-
-        MockSpringInitCustomizer mockCustomizer = null;
-        for (DubboSpringInitCustomizer customizer : customizers) {
-            if (customizer instanceof MockSpringInitCustomizer) {
-                mockCustomizer = (MockSpringInitCustomizer) customizer;
-                break;
-            }
-        }
-        Assertions.assertNotNull(mockCustomizer);
-
-        // check applicationContext
-        boolean foundInitContext = false;
-        List<DubboSpringInitContext> contexts = mockCustomizer.getContexts();
-        for (DubboSpringInitContext initializationContext : contexts) {
-            if (initializationContext.getRegistry() == applicationContext.getBeanFactory()) {
-                foundInitContext = true;
-                break;
-            }
-        }
-        Assertions.assertEquals(true, foundInitContext);
-
-        // expect CustomBeanFactoryPostProcessor is loaded and invoked
-        CustomBeanFactoryPostProcessor customBeanFactoryPostProcessor =
-                applicationContext.getBean(CustomBeanFactoryPostProcessor.class);
-        Assertions.assertEquals(applicationContext.getBeanFactory(), customBeanFactoryPostProcessor.beanFactory);
-    }
-}
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/META-INF/dubbo/internal/org.apache.dubbo.config.spring.context.DubboSpringInitCustomizer b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/META-INF/dubbo/internal/org.apache.dubbo.config.spring.context.DubboSpringInitCustomizer
deleted file mode 100644
index b2dd06c4..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/META-INF/dubbo/internal/org.apache.dubbo.config.spring.context.DubboSpringInitCustomizer
+++ /dev/null
@@ -1 +0,0 @@
-mock=org.apache.dubbo.test.spring.context.MockSpringInitCustomizer
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/demo-app.properties b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/demo-app.properties
deleted file mode 100644
index d486b165..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/demo-app.properties
+++ /dev/null
@@ -1,11 +0,0 @@
-
-dubbo.application.name=demo-app
-
-dubbo.registry.address=${zookeeper.connection.address}?registry-type=service
-
-dubbo.config-center.address=${zookeeper.connection.address}
-
-dubbo.metadata-report.address=${zookeeper.connection.address}
-
-dubbo.protocols.dubbo.port=-1
-
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/log4j.properties b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/log4j.properties
deleted file mode 100644
index 8de4c4fd..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/log4j.properties
+++ /dev/null
@@ -1,7 +0,0 @@
-###set log levels###
-log4j.rootLogger=info, stdout
-###output to the console###
-log4j.appender.stdout=org.apache.log4j.ConsoleAppender
-log4j.appender.stdout.Target=System.out
-log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
-log4j.appender.stdout.layout.ConversionPattern=[%d{dd/MM/yy HH:mm:ss:SSS z}] %t %5p %c{2}: %m%n
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/spring/dubbo-demo-provider.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/spring/dubbo-demo-provider.xml
deleted file mode 100644
index 0520c33a..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/spring/dubbo-demo-provider.xml
+++ /dev/null
@@ -1,42 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
-       xmlns="http://www.springframework.org/schema/beans"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
-       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
-
-    <dubbo:application name="demo-app" />
-
-    <dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
-    <dubbo:metadata-report address="zookeeper://127.0.0.1:2181"/>
-    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>
-
-    <dubbo:protocol name="dubbo" port="-1"/>
-    <dubbo:protocol name="rest" port="-1"/>
-
-    <bean id="demoServiceImpl" class="org.apache.dubbo.test.common.impl.DemoServiceImpl"/>
-    <bean id="greetingServiceImpl" class="org.apache.dubbo.test.common.impl.GreetingServiceImpl"/>
-    <bean id="restDemoServiceImpl" class="org.apache.dubbo.test.common.impl.RestDemoServiceImpl"/>
-
-    <dubbo:service interface="org.apache.dubbo.test.common.api.DemoService" timeout="3000" ref="demoServiceImpl" protocol="dubbo"/>
-    <dubbo:service version="1.0.0" group="greeting" timeout="5000" interface="org.apache.dubbo.test.common.api.GreetingService"
-                   ref="greetingServiceImpl" protocol="dubbo"/>
-    <dubbo:service version="1.0.0" timeout="5000" interface="org.apache.dubbo.test.common.api.RestDemoService"
-                   ref="restDemoServiceImpl" protocol="rest"/>
-</beans>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/spring/dubbo-demo.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/spring/dubbo-demo.xml
deleted file mode 100644
index 4175665f..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring/src/main/resources/spring/dubbo-demo.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
-       xmlns="http://www.springframework.org/schema/beans"
-       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
-       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
-
-    <dubbo:application name="demo-app" />
-
-    <dubbo:config-center address="${zookeeper.connection.address}"/>
-    <dubbo:metadata-report address="${zookeeper.connection.address}"/>
-    <dubbo:registry address="${zookeeper.connection.address}?registry-type=service"/>
-
-    <dubbo:protocol name="dubbo" port="-1"/>
-    <dubbo:protocol name="rest" port="-1"/>
-
-    <!-- references -->
-    <dubbo:consumer check="false" scope="remote" />
-    <dubbo:reference id="demoService" scope="local"
-                     interface="org.apache.dubbo.test.common.api.DemoService"/>
-
-    <dubbo:reference  id="greetingService" version="1.0.0" group="greeting"
-                     interface="org.apache.dubbo.test.common.api.GreetingService"/>
-
-    <dubbo:reference  id="restDemoService" version="1.0.0" protocol="rest"
-                      interface="org.apache.dubbo.test.common.api.RestDemoService"/>
-</beans>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring3.2/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring3.2/pom.xml
deleted file mode 100644
index ca027c3d..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring3.2/pom.xml
+++ /dev/null
@@ -1,115 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-test-spring3.2</artifactId>
-
-  <properties>
-    <skip_maven_deploy>true</skip_maven_deploy>
-    <spring_version>3.2.18.RELEASE</spring_version>
-  </properties>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>org.springframework</groupId>
-        <artifactId>spring-framework-bom</artifactId>
-        <version>${spring_version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <dependencies>
-    <!-- spring test -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-spring</artifactId>
-      <version>${project.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-framework</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-recipes</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.zookeeper</groupId>
-      <artifactId>zookeeper</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-          <dependenciesToScan>
-            <dependency>org.apache.dubbo:dubbo-test-spring</dependency>
-          </dependenciesToScan>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-
-  <profiles>
-    <profile>
-      <id>jdk15ge-simple</id>
-      <activation>
-        <jdk>[15,</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-surefire-plugin</artifactId>
-            <configuration>
-              <useSystemClassLoader>true</useSystemClassLoader>
-              <forkMode>once</forkMode>
-              <argLine>${argline} ${jacocoArgLine}
-                                --add-opens java.base/java.lang=ALL-UNNAMED
-                                --add-opens java.base/java.math=ALL-UNNAMED
-                                --add-opens java.base/java.util=ALL-UNNAMED</argLine>
-              <systemProperties>
-                <!-- common shared -->
-              </systemProperties>
-              <!-- Activate the use of TCP to transmit events to the plugin to fix Corrupted STDOUT issue -->
-              <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory" />
-            </configuration>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring4.1/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring4.1/pom.xml
deleted file mode 100644
index f7a82c8e..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring4.1/pom.xml
+++ /dev/null
@@ -1,115 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-test-spring4.1</artifactId>
-
-  <properties>
-    <skip_maven_deploy>true</skip_maven_deploy>
-    <spring_version>4.1.9.RELEASE</spring_version>
-  </properties>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>org.springframework</groupId>
-        <artifactId>spring-framework-bom</artifactId>
-        <version>${spring_version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <dependencies>
-    <!-- spring test -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-spring</artifactId>
-      <version>${project.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-framework</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-recipes</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.zookeeper</groupId>
-      <artifactId>zookeeper</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-          <dependenciesToScan>
-            <dependency>org.apache.dubbo:dubbo-test-spring</dependency>
-          </dependenciesToScan>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-
-  <profiles>
-    <profile>
-      <id>jdk15ge-simple</id>
-      <activation>
-        <jdk>[15,</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-surefire-plugin</artifactId>
-            <configuration>
-              <useSystemClassLoader>true</useSystemClassLoader>
-              <forkMode>once</forkMode>
-              <argLine>${argline} ${jacocoArgLine}
-                                --add-opens java.base/java.lang=ALL-UNNAMED
-                                --add-opens java.base/java.math=ALL-UNNAMED
-                                --add-opens java.base/java.util=ALL-UNNAMED</argLine>
-              <systemProperties>
-                <!-- common shared -->
-              </systemProperties>
-              <!-- Activate the use of TCP to transmit events to the plugin to fix Corrupted STDOUT issue -->
-              <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory" />
-            </configuration>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring4.2/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring4.2/pom.xml
deleted file mode 100644
index 7c9aa640..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/dubbo-test-spring4.2/pom.xml
+++ /dev/null
@@ -1,115 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-test</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>dubbo-test-spring4.2</artifactId>
-
-  <properties>
-    <skip_maven_deploy>true</skip_maven_deploy>
-    <spring_version>4.2.4.RELEASE</spring_version>
-  </properties>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>org.springframework</groupId>
-        <artifactId>spring-framework-bom</artifactId>
-        <version>${spring_version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <dependencies>
-    <!-- spring test -->
-    <dependency>
-      <groupId>org.apache.dubbo</groupId>
-      <artifactId>dubbo-test-spring</artifactId>
-      <version>${project.version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-framework</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.curator</groupId>
-      <artifactId>curator-recipes</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-    <dependency>
-      <groupId>org.apache.zookeeper</groupId>
-      <artifactId>zookeeper</artifactId>
-      <!--            <scope>test</scope>-->
-    </dependency>
-
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-          <dependenciesToScan>
-            <dependency>org.apache.dubbo:dubbo-test-spring</dependency>
-          </dependenciesToScan>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-
-  <profiles>
-    <profile>
-      <id>jdk15ge-simple</id>
-      <activation>
-        <jdk>[15,</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-surefire-plugin</artifactId>
-            <configuration>
-              <useSystemClassLoader>true</useSystemClassLoader>
-              <forkMode>once</forkMode>
-              <argLine>${argline} ${jacocoArgLine}
-                                --add-opens java.base/java.lang=ALL-UNNAMED
-                                --add-opens java.base/java.math=ALL-UNNAMED
-                                --add-opens java.base/java.util=ALL-UNNAMED</argLine>
-              <systemProperties>
-                <!-- common shared -->
-              </systemProperties>
-              <!-- Activate the use of TCP to transmit events to the plugin to fix Corrupted STDOUT issue -->
-              <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory" />
-            </configuration>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/pom.xml
deleted file mode 100644
index f0028b9c..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/dubbo-test/pom.xml
+++ /dev/null
@@ -1,46 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.apache.dubbo</groupId>
-    <artifactId>dubbo-parent</artifactId>
-    <version>${revision}</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-  <artifactId>dubbo-test</artifactId>
-  <packaging>pom</packaging>
-
-  <modules>
-    <module>dubbo-test-check</module>
-    <module>dubbo-test-common</module>
-    <module>dubbo-test-spring</module>
-    <module>dubbo-test-spring3.2</module>
-    <module>dubbo-test-spring4.1</module>
-    <module>dubbo-test-spring4.2</module>
-    <module>dubbo-dependencies-all</module>
-    <module>dubbo-test-modules</module>
-  </modules>
-
-  <properties>
-    <maven.compiler.source>8</maven.compiler.source>
-    <maven.compiler.target>8</maven.compiler.target>
-    <skip_maven_deploy>true</skip_maven_deploy>
-  </properties>
-
-</project>
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/licenseCheck.sh b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/licenseCheck.sh
deleted file mode 100644
index bc2d70de..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/licenseCheck.sh
+++ /dev/null
@@ -1,126 +0,0 @@
-#!/bin/bash
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-APPEND_ARG=""
-FOLDER="./"
-LINE_FLAG="=============================================="
-TARGET_FILE="./license-list"
-
-red=`tput setaf 1`
-green=`tput setaf 2`
-reset=`tput sgr0`
-
-
-if [ -n "$1" ]; then
-    echo "checking module $1"
-    APPEND_ARG="-f $1"
-    FOLDER="$1"
-else
-    echo "checking whole project"
-fi
-
-echo "Running command: mvn clean package -DskipTests=true -PlicenseCheck $APPEND_ARG"
-
-mvn clean package -DskipTests=true -PlicenseCheck $APPEND_ARG
-
-status=$?
-if [ $status -eq 0 ]; then
-  echo "mvn command exec success"
-else
-  echo "${red}mvn command exec fail${reset}"
-  exit 1
-fi
-
-
-#contact and generate license file
-rm -rf $TARGET_FILE
-LICENSE_FILES=`find $FOLDER -type f -name "THIRD-PARTY.txt"|grep generated-sources`
-
-echo "Find license files:"
-echo "$LICENSE_FILES"
-
-for i in $LICENSE_FILES
-    do
-        echo "$LINE_FLAG" >> $TARGET_FILE
-        echo $i >> $TARGET_FILE
-        cat $i >> $TARGET_FILE
-    done
-
-echo "license files generated at $TARGET_FILE"
-
-#fix missing license dependencies
-missingLicense=(
-    "(Unknown license) jsr173_api:(Apache License, Version 2.0) jsr173_api"
-    "(Unknown license) \"Java Concurrency in Practice\" book annotations:(BEA licensed) \"Java Concurrency in Practice\" book annotations"
-    "(Unknown license) Java Portlet Specification V2.0:(Apache License, Version 2.0) Java Portlet Specification V2.0"
-)
-
-for i in "${missingLicense[@]}"; do
-    search=`echo $i |awk -F: '{print $1}'`
-    replace=`echo $i |awk -F: '{print $2}'`
-    sed -i.bak 's/'"$search"'/'"$replace"'/g' $TARGET_FILE
-done
-
-if [ -f $TARGET_FILE.bak ]; then
-  rm -rf $TARGET_FILE.bak
-fi
-
-check_unknown_license=`cat $TARGET_FILE | grep "Unknown license"`
-
-#checking unknown license
-if grep -q "Unknown license" $TARGET_FILE
-then
-    echo "${red}Find unknown license${reset}"
-    echo "$check_unknown_license"
-    exit 1
-fi
-
-allowLicense=(
-    "CDDL"
-    "Apache"
-    "Common Development and Distribution License"
-    "Eclipse Public License"
-    "MIT"
-    "The 3-Clause BSD License"
-    "Public domain"
-    "JSR.*107"
-    "Common Public License Version 1.0"
-    "org.scijava:native-lib-loader"
-    "org.codehaus.woodstox:stax2-api"
-    "wsdl4j:wsdl4j"
-    "net.jcip:jcip-annotations"
-)
-
-#filter allow license
-license_need_check=`cat $TARGET_FILE | grep -v "generated-sources/license/THIRD-PARTY.txt" | grep -v "third-party dependencies" | grep -v "The project has no dependencies." | grep -v $LINE_FLAG`
-
-for i in "${allowLicense[@]}"; do
-    license_need_check=`echo "$license_need_check"|grep -vi "$i"`
-done
-
-# remove empty lines
-echo $license_need_check | sed '/^[[:space:]]*$/d' > license-need-check
-
-if [ ! -s license-need-check ]; then
-    echo "${green}All dependencies license looks good${reset}"
-else
-    echo "${red}Please check below license${reset}"
-    cat license-need-check
-fi
-
-rm -f license-list license-need-check
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/mvnw b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/mvnw
deleted file mode 100644
index b7f06462..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/mvnw
+++ /dev/null
@@ -1,287 +0,0 @@
-#!/bin/sh
-# ----------------------------------------------------------------------------
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-# ----------------------------------------------------------------------------
-
-# ----------------------------------------------------------------------------
-# Apache Maven Wrapper startup batch script, version 3.1.1
-#
-# Required ENV vars:
-# ------------------
-#   JAVA_HOME - location of a JDK home dir
-#
-# Optional ENV vars
-# -----------------
-#   MAVEN_OPTS - parameters passed to the Java VM when running Maven
-#     e.g. to debug Maven itself, use
-#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
-#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files
-# ----------------------------------------------------------------------------
-
-if [ -z "$MAVEN_SKIP_RC" ] ; then
-
-  if [ -f /usr/local/etc/mavenrc ] ; then
-    . /usr/local/etc/mavenrc
-  fi
-
-  if [ -f /etc/mavenrc ] ; then
-    . /etc/mavenrc
-  fi
-
-  if [ -f "$HOME/.mavenrc" ] ; then
-    . "$HOME/.mavenrc"
-  fi
-
-fi
-
-# OS specific support.  $var _must_ be set to either true or false.
-cygwin=false;
-darwin=false;
-mingw=false
-case "`uname`" in
-  CYGWIN*) cygwin=true ;;
-  MINGW*) mingw=true;;
-  Darwin*) darwin=true
-    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
-    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
-    if [ -z "$JAVA_HOME" ]; then
-      if [ -x "/usr/libexec/java_home" ]; then
-        JAVA_HOME="`/usr/libexec/java_home`"; export JAVA_HOME
-      else
-        JAVA_HOME="/Library/Java/Home"; export JAVA_HOME
-      fi
-    fi
-    ;;
-esac
-
-if [ -z "$JAVA_HOME" ] ; then
-  if [ -r /etc/gentoo-release ] ; then
-    JAVA_HOME=`java-config --jre-home`
-  fi
-fi
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched
-if $cygwin ; then
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-  [ -n "$CLASSPATH" ] &&
-    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
-fi
-
-# For Mingw, ensure paths are in UNIX format before anything is touched
-if $mingw ; then
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
-fi
-
-if [ -z "$JAVA_HOME" ]; then
-  javaExecutable="`which javac`"
-  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
-    # readlink(1) is not available as standard on Solaris 10.
-    readLink=`which readlink`
-    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
-      if $darwin ; then
-        javaHome="`dirname \"$javaExecutable\"`"
-        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
-      else
-        javaExecutable="`readlink -f \"$javaExecutable\"`"
-      fi
-      javaHome="`dirname \"$javaExecutable\"`"
-      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
-      JAVA_HOME="$javaHome"
-      export JAVA_HOME
-    fi
-  fi
-fi
-
-if [ -z "$JAVACMD" ] ; then
-  if [ -n "$JAVA_HOME"  ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-      # IBM's JDK on AIX uses strange locations for the executables
-      JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-      JAVACMD="$JAVA_HOME/bin/java"
-    fi
-  else
-    JAVACMD="`\\unset -f command; \\command -v java`"
-  fi
-fi
-
-if [ ! -x "$JAVACMD" ] ; then
-  echo "Error: JAVA_HOME is not defined correctly." >&2
-  echo "  We cannot execute $JAVACMD" >&2
-  exit 1
-fi
-
-if [ -z "$JAVA_HOME" ] ; then
-  echo "Warning: JAVA_HOME environment variable is not set."
-fi
-
-# traverses directory structure from process work directory to filesystem root
-# first directory with .mvn subdirectory is considered project base directory
-find_maven_basedir() {
-  if [ -z "$1" ]
-  then
-    echo "Path not specified to find_maven_basedir"
-    return 1
-  fi
-
-  basedir="$1"
-  wdir="$1"
-  while [ "$wdir" != '/' ] ; do
-    if [ -d "$wdir"/.mvn ] ; then
-      basedir=$wdir
-      break
-    fi
-    # workaround for JBEAP-8937 (on Solaris 10/Sparc)
-    if [ -d "${wdir}" ]; then
-      wdir=`cd "$wdir/.."; pwd`
-    fi
-    # end of workaround
-  done
-  printf '%s' "$(cd "$basedir"; pwd)"
-}
-
-# concatenates all lines of a file
-concat_lines() {
-  if [ -f "$1" ]; then
-    echo "$(tr -s '\n' ' ' < "$1")"
-  fi
-}
-
-BASE_DIR=$(find_maven_basedir "$(dirname $0)")
-if [ -z "$BASE_DIR" ]; then
-  exit 1;
-fi
-
-MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}; export MAVEN_PROJECTBASEDIR
-if [ "$MVNW_VERBOSE" = true ]; then
-  echo $MAVEN_PROJECTBASEDIR
-fi
-
-##########################################################################################
-# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
-# This allows using the maven wrapper in projects that prohibit checking in binary data.
-##########################################################################################
-if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
-    if [ "$MVNW_VERBOSE" = true ]; then
-      echo "Found .mvn/wrapper/maven-wrapper.jar"
-    fi
-else
-    if [ "$MVNW_VERBOSE" = true ]; then
-      echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
-    fi
-    if [ -n "$MVNW_REPOURL" ]; then
-      wrapperUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.1/maven-wrapper-3.1.1.jar"
-    else
-      wrapperUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.1/maven-wrapper-3.1.1.jar"
-    fi
-    while IFS="=" read key value; do
-      case "$key" in (wrapperUrl) wrapperUrl="$value"; break ;;
-      esac
-    done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
-    if [ "$MVNW_VERBOSE" = true ]; then
-      echo "Downloading from: $wrapperUrl"
-    fi
-    wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
-    if $cygwin; then
-      wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
-    fi
-
-    if command -v wget > /dev/null; then
-        QUIET="--quiet"
-        if [ "$MVNW_VERBOSE" = true ]; then
-          echo "Found wget ... using wget"
-          QUIET=""
-        fi
-        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
-            wget $QUIET "$wrapperUrl" -O "$wrapperJarPath"
-        else
-            wget $QUIET --http-user="$MVNW_USERNAME" --http-password="$MVNW_PASSWORD" "$wrapperUrl" -O "$wrapperJarPath"
-        fi
-        [ $? -eq 0 ] || rm -f "$wrapperJarPath"
-    elif command -v curl > /dev/null; then
-        QUIET="--silent"
-        if [ "$MVNW_VERBOSE" = true ]; then
-          echo "Found curl ... using curl"
-          QUIET=""
-        fi
-        if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
-            curl $QUIET -o "$wrapperJarPath" "$wrapperUrl" -f -L
-        else
-            curl $QUIET --user "$MVNW_USERNAME:$MVNW_PASSWORD" -o "$wrapperJarPath" "$wrapperUrl" -f -L
-        fi
-        [ $? -eq 0 ] || rm -f "$wrapperJarPath"
-    else
-        if [ "$MVNW_VERBOSE" = true ]; then
-          echo "Falling back to using Java to download"
-        fi
-        javaSource="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
-        javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class"
-        # For Cygwin, switch paths to Windows format before running javac
-        if $cygwin; then
-          javaSource=`cygpath --path --windows "$javaSource"`
-          javaClass=`cygpath --path --windows "$javaClass"`
-        fi
-        if [ -e "$javaSource" ]; then
-            if [ ! -e "$javaClass" ]; then
-                if [ "$MVNW_VERBOSE" = true ]; then
-                  echo " - Compiling MavenWrapperDownloader.java ..."
-                fi
-                # Compiling the Java class
-                ("$JAVA_HOME/bin/javac" "$javaSource")
-            fi
-            if [ -e "$javaClass" ]; then
-                # Running the downloader
-                if [ "$MVNW_VERBOSE" = true ]; then
-                  echo " - Running MavenWrapperDownloader.java ..."
-                fi
-                ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
-            fi
-        fi
-    fi
-fi
-##########################################################################################
-# End of extension
-##########################################################################################
-
-MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin; then
-  [ -n "$JAVA_HOME" ] &&
-    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
-  [ -n "$CLASSPATH" ] &&
-    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
-  [ -n "$MAVEN_PROJECTBASEDIR" ] &&
-    MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
-fi
-
-# Provide a "standardized" way to retrieve the CLI args that will
-# work with both Windows and non-Windows executions.
-MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
-export MAVEN_CMD_LINE_ARGS
-
-WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
-
-exec "$JAVACMD" \
-  $MAVEN_OPTS \
-  $MAVEN_DEBUG_OPTS \
-  -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
-  "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
-  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/mvnw.cmd b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/mvnw.cmd
deleted file mode 100644
index 474c9d6b..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/mvnw.cmd
+++ /dev/null
@@ -1,187 +0,0 @@
-@REM ----------------------------------------------------------------------------
-@REM Licensed to the Apache Software Foundation (ASF) under one
-@REM or more contributor license agreements.  See the NOTICE file
-@REM distributed with this work for additional information
-@REM regarding copyright ownership.  The ASF licenses this file
-@REM to you under the Apache License, Version 2.0 (the
-@REM "License"); you may not use this file except in compliance
-@REM with the License.  You may obtain a copy of the License at
-@REM
-@REM    http://www.apache.org/licenses/LICENSE-2.0
-@REM
-@REM Unless required by applicable law or agreed to in writing,
-@REM software distributed under the License is distributed on an
-@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-@REM KIND, either express or implied.  See the License for the
-@REM specific language governing permissions and limitations
-@REM under the License.
-@REM ----------------------------------------------------------------------------
-
-@REM ----------------------------------------------------------------------------
-@REM Apache Maven Wrapper startup batch script, version 3.1.1
-@REM
-@REM Required ENV vars:
-@REM JAVA_HOME - location of a JDK home dir
-@REM
-@REM Optional ENV vars
-@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
-@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
-@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
-@REM     e.g. to debug Maven itself, use
-@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
-@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
-@REM ----------------------------------------------------------------------------
-
-@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
-@echo off
-@REM set title of command window
-title %0
-@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
-@if "%MAVEN_BATCH_ECHO%" == "on"  echo %MAVEN_BATCH_ECHO%
-
-@REM set %HOME% to equivalent of $HOME
-if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")
-
-@REM Execute a user defined script before this one
-if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
-@REM check for pre script, once with legacy .bat ending and once with .cmd ending
-if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
-if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
-:skipRcPre
-
-@setlocal
-
-set ERROR_CODE=0
-
-@REM To isolate internal variables from possible post scripts, we use another setlocal
-@setlocal
-
-@REM ==== START VALIDATION ====
-if not "%JAVA_HOME%" == "" goto OkJHome
-
-echo.
-echo Error: JAVA_HOME not found in your environment. >&2
-echo Please set the JAVA_HOME variable in your environment to match the >&2
-echo location of your Java installation. >&2
-echo.
-goto error
-
-:OkJHome
-if exist "%JAVA_HOME%\bin\java.exe" goto init
-
-echo.
-echo Error: JAVA_HOME is set to an invalid directory. >&2
-echo JAVA_HOME = "%JAVA_HOME%" >&2
-echo Please set the JAVA_HOME variable in your environment to match the >&2
-echo location of your Java installation. >&2
-echo.
-goto error
-
-@REM ==== END VALIDATION ====
-
-:init
-
-@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
-@REM Fallback to current working directory if not found.
-
-set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
-IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir
-
-set EXEC_DIR=%CD%
-set WDIR=%EXEC_DIR%
-:findBaseDir
-IF EXIST "%WDIR%"\.mvn goto baseDirFound
-cd ..
-IF "%WDIR%"=="%CD%" goto baseDirNotFound
-set WDIR=%CD%
-goto findBaseDir
-
-:baseDirFound
-set MAVEN_PROJECTBASEDIR=%WDIR%
-cd "%EXEC_DIR%"
-goto endDetectBaseDir
-
-:baseDirNotFound
-set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
-cd "%EXEC_DIR%"
-
-:endDetectBaseDir
-
-IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig
-
-@setlocal EnableExtensions EnableDelayedExpansion
-for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
-@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%
-
-:endReadAdditionalConfig
-
-SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
-set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
-set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain
-
-set WRAPPER_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.1/maven-wrapper-3.1.1.jar"
-
-FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
-    IF "%%A"=="wrapperUrl" SET WRAPPER_URL=%%B
-)
-
-@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
-@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
-if exist %WRAPPER_JAR% (
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Found %WRAPPER_JAR%
-    )
-) else (
-    if not "%MVNW_REPOURL%" == "" (
-        SET WRAPPER_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.1/maven-wrapper-3.1.1.jar"
-    )
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Couldn't find %WRAPPER_JAR%, downloading it ...
-        echo Downloading from: %WRAPPER_URL%
-    )
-
-    powershell -Command "&{"^
-		"$webclient = new-object System.Net.WebClient;"^
-		"if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
-		"$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
-		"}"^
-		"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%WRAPPER_URL%', '%WRAPPER_JAR%')"^
-		"}"
-    if "%MVNW_VERBOSE%" == "true" (
-        echo Finished downloading %WRAPPER_JAR%
-    )
-)
-@REM End of extension
-
-@REM Provide a "standardized" way to retrieve the CLI args that will
-@REM work with both Windows and non-Windows executions.
-set MAVEN_CMD_LINE_ARGS=%*
-
-%MAVEN_JAVA_EXE% ^
-  %JVM_CONFIG_MAVEN_PROPS% ^
-  %MAVEN_OPTS% ^
-  %MAVEN_DEBUG_OPTS% ^
-  -classpath %WRAPPER_JAR% ^
-  "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
-  %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
-if ERRORLEVEL 1 goto error
-goto end
-
-:error
-set ERROR_CODE=1
-
-:end
-@endlocal & set ERROR_CODE=%ERROR_CODE%
-
-if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
-@REM check for post script, once with legacy .bat ending and once with .cmd ending
-if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
-if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
-:skipRcPost
-
-@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
-if "%MAVEN_BATCH_PAUSE%"=="on" pause
-
-if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%
-
-cmd /C exit /B %ERROR_CODE%
diff --git a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/pom.xml b/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/pom.xml
deleted file mode 100644
index d6e6c485..00000000
--- a/D:/Projects/Shreya/CS527-Project/Bugs/BugSwarm/dubbo-416671625/Buggy-version/pom.xml
+++ /dev/null
@@ -1,939 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
-  -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.apache</groupId>
-    <artifactId>apache</artifactId>
-    <version>31</version>
-  </parent>
-
-  <groupId>org.apache.dubbo</groupId>
-  <artifactId>dubbo-parent</artifactId>
-  <version>${revision}</version>
-  <packaging>pom</packaging>
-
-  <name>${project.artifactId}</name>
-  <description>The parent project of dubbo</description>
-  <url>https://github.com/apache/dubbo</url>
-  <inceptionYear>2011</inceptionYear>
-
-  <organization>
-    <name>The Apache Software Foundation</name>
-    <url>http://www.apache.org/</url>
-  </organization>
-  <licenses>
-    <license>
-      <name>Apache License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-  <developers>
-    <developer>
-      <id>dubbo.io</id>
-      <name>The Dubbo Project Contributors</name>
-      <email>dev-subscribe@dubbo.apache.org</email>
-      <url>http://dubbo.apache.org/</url>
-    </developer>
-  </developers>
-  <mailingLists>
-    <mailingList>
-      <name>Development List</name>
-      <subscribe>dev-subscribe@dubbo.apache.org</subscribe>
-      <unsubscribe>dev-unsubscribe@dubbo.apache.org</unsubscribe>
-      <post>dev@dubbo.apache.org</post>
-    </mailingList>
-    <mailingList>
-      <name>Commits List</name>
-      <subscribe>commits-subscribe@dubbo.apache.org</subscribe>
-      <unsubscribe>commits-unsubscribe@dubbo.apache.org</unsubscribe>
-      <post>commits@dubbo.apache.org</post>
-    </mailingList>
-    <mailingList>
-      <name>Issues List</name>
-      <subscribe>issues-subscribe@dubbo.apache.org</subscribe>
-      <unsubscribe>issues-unsubscribe@dubbo.apache.org</unsubscribe>
-      <post>issues@dubbo.apache.org</post>
-    </mailingList>
-  </mailingLists>
-
-  <modules>
-    <module>dubbo-common</module>
-    <module>dubbo-container</module>
-    <module>dubbo-compiler</module>
-    <module>dubbo-remoting</module>
-    <module>dubbo-rpc</module>
-    <module>dubbo-cluster</module>
-    <module>dubbo-registry</module>
-    <module>dubbo-monitor</module>
-    <module>dubbo-config</module>
-    <module>dubbo-filter</module>
-    <module>dubbo-demo</module>
-    <module>dubbo-plugin</module>
-    <module>dubbo-serialization</module>
-    <module>dubbo-compatible</module>
-    <module>dubbo-dependencies-bom</module>
-    <module>dubbo-distribution</module>
-    <module>dubbo-configcenter</module>
-    <module>dubbo-dependencies</module>
-    <module>dubbo-metadata</module>
-    <module>dubbo-metrics</module>
-    <module>dubbo-build-tools</module>
-    <module>dubbo-spring-boot</module>
-    <module>dubbo-native</module>
-    <module>dubbo-test</module>
-    <module>dubbo-native-plugin</module>
-    <module>dubbo-maven-plugin</module>
-  </modules>
-
-  <scm>
-    <connection>scm:git:https://github.com/apache/dubbo.git</connection>
-    <developerConnection>scm:git:https://github.com/apache/dubbo.git</developerConnection>
-    <tag>HEAD</tag>
-    <url>https://github.com/apache/dubbo</url>
-  </scm>
-
-  <issueManagement>
-    <system>Github Issues</system>
-    <url>https://github.com/apache/dubbo/issues</url>
-  </issueManagement>
-
-  <properties>
-    <!-- Test libs -->
-    <junit_jupiter_version>5.9.3</junit_jupiter_version>
-    <awaitility_version>4.2.0</awaitility_version>
-    <hazelcast_version>3.12.13</hazelcast_version>
-    <hamcrest_version>2.2</hamcrest_version>
-    <hibernate_validator_version>5.2.4.Final</hibernate_validator_version>
-    <el_api_version>2.2.5</el_api_version>
-    <jaxb_api_version>2.2.7</jaxb_api_version>
-    <cglib_version>2.2.2</cglib_version>
-    <mockito_version>4.11.0</mockito_version>
-    <!-- Build args -->
-    <argline>-server -Xms256m -Xmx512m -Dfile.encoding=UTF-8
-            -Djava.net.preferIPv4Stack=true -XX:MetaspaceSize=64m -XX:MaxMetaspaceSize=128m</argline>
-    <skip_maven_deploy>false</skip_maven_deploy>
-    <updateReleaseInfo>true</updateReleaseInfo>
-    <project.build.sourceEncoding>${file_encoding}</project.build.sourceEncoding>
-    <project.build.outputTimestamp>2020-04-01T08:04:00Z</project.build.outputTimestamp>
-
-    <profile.name>oss</profile.name>
-    <!-- for maven compiler plugin -->
-    <java_source_version>1.8</java_source_version>
-    <java_target_version>1.8</java_target_version>
-    <file_encoding>UTF-8</file_encoding>
-    <!-- Maven plugins -->
-    <maven_jar_version>3.3.0</maven_jar_version>
-    <maven_surefire_version>3.2.5</maven_surefire_version>
-    <maven_failsafe_version>3.2.5</maven_failsafe_version>
-    <maven_deploy_version>2.8.2</maven_deploy_version>
-    <maven_compiler_version>3.12.1</maven_compiler_version>
-    <maven_source_version>3.3.0</maven_source_version>
-    <maven_javadoc_version>3.6.3</maven_javadoc_version>
-    <maven_jetty_version>9.4.54.v20240208</maven_jetty_version>
-    <maven_checkstyle_version>3.3.1</maven_checkstyle_version>
-    <maven_jacoco_version>0.8.11</maven_jacoco_version>
-    <maven_flatten_version>1.6.0</maven_flatten_version>
-    <maven_enforce_version>3.4.1</maven_enforce_version>
-    <maven_antrun_version>3.1.0</maven_antrun_version>
-    <maven_os_plugin_version>1.7.1</maven_os_plugin_version>
-    <maven_protobuf_plugin_version>0.6.1</maven_protobuf_plugin_version>
-    <arguments />
-    <checkstyle.skip>true</checkstyle.skip>
-    <checkstyle_unix.skip>true</checkstyle_unix.skip>
-    <rat.skip>true</rat.skip>
-    <jacoco.skip>true</jacoco.skip>
-
-    <jprotoc_version>1.2.2</jprotoc_version>
-    <protobuf-java_version>3.22.3</protobuf-java_version>
-    <grpc_version>1.54.0</grpc_version>
-    <spotless-maven-plugin.version>2.43.0</spotless-maven-plugin.version>
-    <spotless.action>check</spotless.action>
-    <dubbo-shared-resources.version>1.0.0</dubbo-shared-resources.version>
-    <palantirJavaFormat.version>2.38.0</palantirJavaFormat.version>
-    <revision>3.2.12-SNAPSHOT</revision>
-  </properties>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>org.apache.dubbo</groupId>
-        <artifactId>dubbo-dependencies-bom</artifactId>
-        <version>${project.version}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <dependencies>
-    <!--JUnit Jupiter Engine to depend on the JUnit5 engine and JUnit 5 API -->
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-engine</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-api</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.junit.jupiter</groupId>
-      <artifactId>junit-jupiter-params</artifactId>
-      <version>${junit_jupiter_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.awaitility</groupId>
-      <artifactId>awaitility</artifactId>
-      <version>${awaitility_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.hamcrest</groupId>
-      <artifactId>hamcrest</artifactId>
-      <version>${hamcrest_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <version>${mockito_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-inline</artifactId>
-      <version>${mockito_version}</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>cglib</groupId>
-      <artifactId>cglib-nodep</artifactId>
-      <version>${cglib_version}</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <!-- Used for packaging NOTICE & LICENSE to each sub-module jar-->
-    <resources>
-      <resource>
-        <filtering>false</filtering>
-        <directory>src/main/resources</directory>
-      </resource>
-      <resource>
-        <targetPath>META-INF/</targetPath>
-        <filtering>false</filtering>
-        <directory>${maven.multiModuleProjectDirectory}</directory>
-        <includes>
-          <include>NOTICE</include>
-          <include>LICENSE</include>
-        </includes>
-      </resource>
-      <resource>
-        <targetPath>META-INF/versions</targetPath>
-        <filtering>false</filtering>
-        <directory>${maven.multiModuleProjectDirectory}</directory>
-        <includes>
-          <include>.artifacts</include>
-        </includes>
-      </resource>
-    </resources>
-
-    <pluginManagement>
-      <plugins>
-        <!-- keep surefire and failsafe in sync -->
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-surefire-plugin</artifactId>
-          <version>${maven_surefire_version}</version>
-          <configuration>
-            <!-- Activate the use of TCP to transmit events to the plugin to fix Corrupted STDOUT issue -->
-            <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory" />
-          </configuration>
-        </plugin>
-        <!-- keep surefire and failsafe in sync -->
-        <plugin>
-          <artifactId>maven-failsafe-plugin</artifactId>
-          <version>${maven_failsafe_version}</version>
-        </plugin>
-        <plugin>
-          <artifactId>maven-clean-plugin</artifactId>
-          <version>3.3.2</version>
-        </plugin>
-        <plugin>
-          <groupId>org.ops4j.pax.exam</groupId>
-          <artifactId>maven-paxexam-plugin</artifactId>
-          <version>1.2.4</version>
-        </plugin>
-        <plugin>
-          <artifactId>maven-dependency-plugin</artifactId>
-          <version>3.6.1</version>
-        </plugin>
-        <plugin>
-          <!-- Do NOT upgrade -->
-          <artifactId>maven-jxr-plugin</artifactId>
-          <version>2.5</version>
-        </plugin>
-        <plugin>
-          <groupId>org.codehaus.mojo</groupId>
-          <artifactId>build-helper-maven-plugin</artifactId>
-          <version>3.5.0</version>
-        </plugin>
-        <plugin>
-          <groupId>org.fusesource.hawtjni</groupId>
-          <artifactId>maven-hawtjni-plugin</artifactId>
-          <version>1.15</version>
-        </plugin>
-        <plugin>
-          <groupId>kr.motd.maven</groupId>
-          <artifactId>exec-maven-plugin</artifactId>
-          <version>1.0.0.Final</version>
-        </plugin>
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-shade-plugin</artifactId>
-          <version>3.5.2</version>
-          <configuration>
-            <createDependencyReducedPom>false</createDependencyReducedPom>
-          </configuration>
-        </plugin>
-        <plugin>
-          <groupId>org.eclipse.jetty</groupId>
-          <artifactId>jetty-maven-plugin</artifactId>
-          <version>${maven_jetty_version}</version>
-        </plugin>
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-antrun-plugin</artifactId>
-          <version>${maven_antrun_version}</version>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-    <plugins>
-      <plugin>
-        <artifactId>maven-jar-plugin</artifactId>
-        <version>${maven_jar_version}</version>
-        <configuration>
-          <archive>
-            <addMavenDescriptor>true</addMavenDescriptor>
-            <index>true</index>
-            <manifest>
-              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
-              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
-            </manifest>
-            <manifestEntries>
-              <Specification-Version>${project.version}</Specification-Version>
-              <Implementation-Version>${project.version}</Implementation-Version>
-            </manifestEntries>
-          </archive>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.jacoco</groupId>
-        <artifactId>jacoco-maven-plugin</artifactId>
-        <version>${maven_jacoco_version}</version>
-        <executions>
-          <execution>
-            <id>jacoco-initialize</id>
-            <goals>
-              <goal>prepare-agent</goal>
-            </goals>
-            <configuration>
-              <propertyName>jacocoArgLine</propertyName>
-            </configuration>
-          </execution>
-          <execution>
-            <id>report-aggregate</id>
-            <goals>
-              <goal>report</goal>
-              <goal>report-aggregate</goal>
-            </goals>
-            <phase>verify</phase>
-            <configuration>
-              <includes>
-                <include>target/classes/**/*</include>
-                <include>target/classes/**</include>
-                <include>**/*</include>
-              </includes>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-          <useSystemClassLoader>true</useSystemClassLoader>
-          <forkMode>once</forkMode>
-          <argLine>${argline} ${jacocoArgLine}</argLine>
-          <systemProperties>
-            <!-- common shared -->
-          </systemProperties>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-deploy-plugin</artifactId>
-        <version>${maven_deploy_version}</version>
-        <configuration>
-          <skip>${skip_maven_deploy}</skip>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>${maven_compiler_version}</version>
-        <configuration>
-          <compilerArgs>
-            <compilerArg>-proc:none</compilerArg>
-            <compilerArg>-parameters</compilerArg>
-          </compilerArgs>
-          <fork>true</fork>
-          <source>${java_source_version}</source>
-          <target>${java_target_version}</target>
-          <encoding>${file_encoding}</encoding>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-antrun-plugin</artifactId>
-        <executions>
-          <execution>
-            <id>get-version-infos</id>
-            <goals>
-              <goal>run</goal>
-            </goals>
-            <phase>compile</phase>
-            <configuration>
-              <failOnError>true</failOnError>
-              <target>
-                <property name="version_file" value="${project.build.outputDirectory}/META-INF/versions/${project.artifactId}" />
-                <!-- get the current version of dubbo -->
-                <echo file="${version_file}" message="revision=${revision}${line.separator}" />
-                <!-- attach the artifact id -->
-                <echo append="true" file="${version_file}" message="artifact.id=${project.artifactId}${line.separator}" />
-                <echo append="true" file="${version_file}" message="git.commit.id=" />
-                <!-- get the latest commit id -->
-                <exec append="true" error=".git.exec.error" executable="git" failifexecutionfails="false" output="${version_file}" timeout="3000">
-                  <arg line="rev-parse HEAD" />
-                </exec>
-              </target>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>3.0.1</version>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-          <useReleaseProfile>false</useReleaseProfile>
-          <releaseProfiles>release</releaseProfiles>
-          <goals>deploy</goals>
-          <arguments>${arguments}</arguments>
-        </configuration>
-      </plugin>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>flatten-maven-plugin</artifactId>
-        <version>${maven_flatten_version}</version>
-        <configuration>
-          <updatePomFile>true</updatePomFile>
-          <flattenMode>oss</flattenMode>
-        </configuration>
-        <executions>
-          <execution>
-            <id>flatten</id>
-            <goals>
-              <goal>flatten</goal>
-            </goals>
-            <phase>process-resources</phase>
-          </execution>
-          <execution>
-            <id>flatten.clean</id>
-            <goals>
-              <goal>clean</goal>
-            </goals>
-            <phase>clean</phase>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-
-  <profiles>
-    <profile>
-      <id>snapshot-ci-deploy</id>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-enforcer-plugin</artifactId>
-            <version>${maven_enforce_version}</version>
-            <executions>
-              <execution>
-                <id>enforce-no-releases</id>
-                <goals>
-                  <goal>enforce</goal>
-                </goals>
-                <configuration>
-                  <rules>
-                    <requireSnapshotVersion>
-                      <message>No Releases Allowed!</message>
-                      <failWhenParentIsRelease>false</failWhenParentIsRelease>
-                    </requireSnapshotVersion>
-                  </rules>
-                  <fail>true</fail>
-                </configuration>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-    <profile>
-      <id>javadoc-lint</id>
-      <activation>
-        <jdk>[1.8,)</jdk>
-      </activation>
-      <properties>
-        <doclint>none</doclint>
-      </properties>
-    </profile>
-    <!-- jacoco: mvn validate -Pjacoco  -->
-    <profile>
-      <id>jacoco</id>
-      <properties>
-        <jacoco.skip>false</jacoco.skip>
-      </properties>
-    </profile>
-
-    <!-- check code style: mvn validate -Pcheckstyle  -->
-    <profile>
-      <id>checkstyle</id>
-      <properties>
-        <checkstyle.skip>false</checkstyle.skip>
-        <checkstyle_unix.skip>false</checkstyle_unix.skip>
-      </properties>
-    </profile>
-    <profile>
-      <id>checkstyle_def</id>
-      <activation>
-        <jdk>[1.8,)</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-checkstyle-plugin</artifactId>
-            <version>${maven_checkstyle_version}</version>
-            <dependencies>
-              <dependency>
-                <groupId>com.puppycrawl.tools</groupId>
-                <artifactId>checkstyle</artifactId>
-                <version>8.45.1</version>
-              </dependency>
-              <dependency>
-                <groupId>org.apache.dubbo</groupId>
-                <artifactId>dubbo-build-tools</artifactId>
-                <version>1.0.0</version>
-              </dependency>
-            </dependencies>
-            <executions>
-              <execution>
-                <id>checkstyle-validation</id>
-                <goals>
-                  <goal>check</goal>
-                </goals>
-                <phase>validate</phase>
-                <configuration>
-                  <configLocation>codestyle/checkstyle.xml</configLocation>
-                  <suppressionsLocation>codestyle/checkstyle-suppressions.xml</suppressionsLocation>
-                  <encoding>UTF-8</encoding>
-                  <consoleOutput>true</consoleOutput>
-                  <failOnViolation>true</failOnViolation>
-                  <skip>${checkstyle.skip}</skip>
-                  <excludes>**/JSONWriter.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/AbstractAotMojo.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/AbstractDependencyFilterMojo.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/CommandLineBuilder.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/DependencyFilter.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/Exclude.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/ExcludeFilter.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/FilterableDependency.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/Include.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/IncludeFilter.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/JavaCompilerPluginConfiguration.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/JavaExecutable.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/JavaProcessExecutor.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/MatchingGroupIdFilter.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/RunArguments.java,
-                                        **/org/apache/dubbo/maven/plugin/aot/RunProcess.java,
-                                        **/org/apache/dubbo/aot/generate/BasicJsonWriter.java,
-                                        **/org/apache/dubbo/aot/generate/ExecutableMode.java,
-                                        **/org/apache/dubbo/aot/generate/MemberCategory.java,
-                                        **/org/apache/dubbo/common/threadpool/serial/SerializingExecutor.java,
-                                        **/org/apache/dubbo/common/threadlocal/InternalThreadLocal.java,
-                                        **/org/apache/dubbo/common/threadlocal/InternalThreadLocalMap.java,
-                                        **/org/apache/dubbo/common/timer/TimerTask.java,
-                                        **/org/apache/dubbo/common/timer/Timer.java,
-                                        **/org/apache/dubbo/common/timer/Timeout.java,
-                                        **/org/apache/dubbo/common/timer/HashedWheelTimer.java,
-                                        **/org/apache/dubbo/common/utils/CIDRUtils.java,
-                                        **/org/apache/dubbo/common/utils/Utf8Utils.java,
-                                        **/org/apache/dubbo/common/serialize/protobuf/support/wrapper/MapValue.java,
-                                        **/org/apache/dubbo/common/serialize/protobuf/support/wrapper/ThrowablePB.java,
-                                        **/org/apache/dubbo/test/common/utils/TestSocketUtils.java,
-                                        **/org/apache/dubbo/triple/TripleWrapper.java,
-                                        **/org/apache/dubbo/rpc/protocol/tri/TriHttp2RemoteFlowController.java,
-                                        **/org/apache/dubbo/metrics/aggregate/DubboMergingDigest.java,
-                                        **/org/apache/dubbo/metrics/aggregate/DubboAbstractTDigest.java,
-                                        **/istio/v1/auth/**/*,
-                                        **/com/google/rpc/*,
-                                        **/generated/**/*,
-                                        **/generated-sources/**/*,
-                                        **/grpc/health/**/*,
-                                        **/grpc/reflection/**/*,
-                                        **/target/**/*,
-                                        **/*.json</excludes>
-                </configuration>
-              </execution>
-              <execution>
-                <id>checkstyle-unix-validation</id>
-                <goals>
-                  <goal>check</goal>
-                </goals>
-                <phase>validate</phase>
-                <configuration>
-                  <configLocation>codestyle/checkstyle_unix.xml</configLocation>
-                  <encoding>UTF-8</encoding>
-                  <consoleOutput>true</consoleOutput>
-                  <failOnViolation>true</failOnViolation>
-                  <skip>${checkstyle_unix.skip}</skip>
-                  <resourceExcludes>**/target/**/*</resourceExcludes>
-                  <resourceExcludes>**/generated/**/*
-                                        **/generated-sources/**/*</resourceExcludes>
-                </configuration>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-    <profile>
-      <id>sources</id>
-      <build>
-        <plugins>
-          <plugin>
-            <artifactId>maven-source-plugin</artifactId>
-            <version>${maven_source_version}</version>
-            <executions>
-              <execution>
-                <id>attach-sources</id>
-                <goals>
-                  <goal>jar</goal>
-                </goals>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-    <profile>
-      <id>release</id>
-      <properties>
-        <log4j2_version>2.17.2</log4j2_version>
-        <jacoco.skip>false</jacoco.skip>
-      </properties>
-      <build>
-        <plugins>
-          <plugin>
-            <artifactId>maven-source-plugin</artifactId>
-            <version>${maven_source_version}</version>
-            <executions>
-              <execution>
-                <id>attach-sources</id>
-                <goals>
-                  <goal>jar</goal>
-                </goals>
-              </execution>
-            </executions>
-          </plugin>
-          <plugin>
-            <artifactId>maven-javadoc-plugin</artifactId>
-            <version>${maven_javadoc_version}</version>
-            <configuration>
-              <show>public</show>
-              <charset>UTF-8</charset>
-              <encoding>UTF-8</encoding>
-              <docencoding>UTF-8</docencoding>
-              <source>${maven_source_version}</source>
-              <links>
-                <link>http://docs.oracle.com/javase/8/docs/api</link>
-              </links>
-              <doclint>none</doclint>
-              <excludePackageNames>org.apache.dubbo.demo,org.apache.dubbo.demo.*</excludePackageNames>
-              <doctitle>Apache Dubbo ${project.version} API</doctitle>
-              <windowtitle>Apache Dubbo ${project.version} API</windowtitle>
-            </configuration>
-            <executions>
-              <execution>
-                <id>attach-javadoc</id>
-                <goals>
-                  <goal>jar</goal>
-                  <goal>aggregate</goal>
-                </goals>
-                <configuration>
-                  <additionalDependencies>
-                    <additionalDependency>
-                      <groupId>org.apache.logging.log4j</groupId>
-                      <artifactId>log4j-api</artifactId>
-                      <version>${log4j2_version}</version>
-                    </additionalDependency>
-                    <additionalDependency>
-                      <groupId>org.apache.logging.log4j</groupId>
-                      <artifactId>log4j-core</artifactId>
-                      <version>${log4j2_version}</version>
-                    </additionalDependency>
-                  </additionalDependencies>
-                </configuration>
-              </execution>
-            </executions>
-          </plugin>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-gpg-plugin</artifactId>
-            <executions>
-              <execution>
-                <goals>
-                  <goal>sign</goal>
-                </goals>
-                <phase>verify</phase>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-    <profile>
-      <id>licenseCheck</id>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.codehaus.mojo</groupId>
-            <artifactId>license-maven-plugin</artifactId>
-            <version>2.4.0</version>
-            <executions>
-              <execution>
-                <id>license-check</id>
-                <goals>
-                  <goal>add-third-party</goal>
-                </goals>
-                <phase>generate-sources</phase>
-                <configuration>
-                  <includeOptional>false</includeOptional>
-                  <useMissingFile>false</useMissingFile>
-                  <failOnMissing>false</failOnMissing>
-                  <licenseMerges>
-                    <licenseMerge>Apache License, Version 2.0|The Apache Software License, Version
-                                            2.0|ASF 2.0|Apache 2|Apache-2.0|Apache 2.0 License|Apache 2.0|Apache License v2.0|Apache License 2.0|The Apache License, Version 2.0|The Apache Software License, Version 2.0</licenseMerge>
-                    <licenseMerge>The MIT License|MIT License</licenseMerge>
-                    <licenseMerge>The 3-Clause BSD License|New BSD License|3-Clause BSD
-                                            License|BSD|3-Clause BSD License|The New BSD License</licenseMerge>
-                  </licenseMerges>
-                </configuration>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-    <profile>
-      <id>jdk15ge-add-open</id>
-      <activation>
-        <jdk>[15,</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-surefire-plugin</artifactId>
-            <configuration>
-              <useSystemClassLoader>true</useSystemClassLoader>
-              <forkMode>once</forkMode>
-              <argLine>${argline} ${jacocoArgLine}
-                                --add-opens java.base/java.lang=ALL-UNNAMED
-                                --add-opens java.base/java.math=ALL-UNNAMED
-                                --add-opens java.base/java.util=ALL-UNNAMED</argLine>
-              <systemProperties>
-                <!-- common shared -->
-              </systemProperties>
-              <!-- Activate the use of TCP to transmit events to the plugin to fix Corrupted STDOUT issue -->
-              <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory" />
-            </configuration>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-    <profile>
-      <id>jdk15ge-simple</id>
-      <build>
-        <plugins>
-          <plugin>
-            <groupId>org.apache.maven.plugins</groupId>
-            <artifactId>maven-surefire-plugin</artifactId>
-            <configuration>
-              <useSystemClassLoader>true</useSystemClassLoader>
-              <forkMode>once</forkMode>
-              <argLine>${argline} ${jacocoArgLine}</argLine>
-              <systemProperties>
-                <!-- common shared -->
-              </systemProperties>
-              <!-- Activate the use of TCP to transmit events to the plugin to fix Corrupted STDOUT issue -->
-              <forkNode implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory" />
-            </configuration>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-
-    <profile>
-      <id>jdk9-compile</id>
-      <activation>
-        <jdk>[1.9,)</jdk>
-      </activation>
-      <build>
-        <plugins>
-          <plugin>
-            <artifactId>maven-compiler-plugin</artifactId>
-            <configuration>
-              <release>8</release>
-            </configuration>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-
-    <profile>
-      <id>jacoco089</id>
-      <properties>
-        <maven_jacoco_version>0.8.9</maven_jacoco_version>
-      </properties>
-    </profile>
-
-    <profile>
-      <id>java11+</id>
-      <activation>
-        <jdk>[11,)</jdk>
-      </activation>
-      <build>
-        <!--- newer versions of plugins requires JDK 11 -->
-        <plugins>
-          <plugin>
-            <groupId>com.diffplug.spotless</groupId>
-            <artifactId>spotless-maven-plugin</artifactId>
-            <version>${spotless-maven-plugin.version}</version>
-            <configuration>
-              <java>
-                <excludes>
-                  <exclude>src/main/java/org/apache/dubbo/common/threadlocal/InternalThreadLocal.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/threadlocal/InternalThreadLocalMap.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/timer/HashedWheelTimer.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/timer/Timeout.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/timer/Timer.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/timer/TimerTask.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/utils/CIDRUtils.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/utils/Utf8Utils.java</exclude>
-                  <exclude>src/test/java/org/apache/dubbo/config/spring/EmbeddedZooKeeper.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/test/common/utils/TestSocketUtils.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/rpc/protocol/tri/TriHttp2RemoteFlowController.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/common/threadpool/serial/SerializingExecutor.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/AbstractAotMojo.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/AbstractDependencyFilterMojo.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/CommandLineBuilder.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/DependencyFilter.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/Exclude.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/ExcludeFilter.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/FilterableDependency.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/Include.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/IncludeFilter.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/JavaCompilerPluginConfiguration.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/JavaExecutable.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/JavaProcessExecutor.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/MatchingGroupIdFilter.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/RunArguments.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/maven/plugin/aot/RunProcess.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/aot/generate/BasicJsonWriter.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/aot/generate/ExecutableMode.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/aot/generate/MemberCategory.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/metrics/aggregate/DubboMergingDigest.java</exclude>
-                  <exclude>src/main/java/org/apache/dubbo/metrics/aggregate/DubboAbstractTDigest.java</exclude>
-                  <exclude>**/generated-sources/**</exclude>
-                </excludes>
-                <palantirJavaFormat>
-                  <version>${palantirJavaFormat.version}</version>
-                </palantirJavaFormat>
-                <removeUnusedImports />
-                <importOrder>
-                  <file>dubbo-importorder.txt</file>
-                </importOrder>
-                <licenseHeader>
-                  <file>checkstyle-header.txt</file>
-                </licenseHeader>
-              </java>
-              <pom>
-                <sortPom>
-                  <expandEmptyElements>false</expandEmptyElements>
-                  <spaceBeforeCloseEmptyElement>true</spaceBeforeCloseEmptyElement>
-                </sortPom>
-              </pom>
-              <upToDateChecking>
-                <enabled>true</enabled>
-              </upToDateChecking>
-            </configuration>
-            <dependencies>
-              <dependency>
-                <groupId>com.alibaba</groupId>
-                <artifactId>dubbo-shared-resources</artifactId>
-                <version>${dubbo-shared-resources.version}</version>
-              </dependency>
-            </dependencies>
-            <executions>
-              <execution>
-                <goals>
-                  <goal>${spotless.action}</goal>
-                </goals>
-                <phase>process-sources</phase>
-              </execution>
-            </executions>
-          </plugin>
-        </plugins>
-      </build>
-    </profile>
-  </profiles>
-
-</project>
