diff --git "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/.git/logs/HEAD" "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Patched-Version/.git/logs/HEAD"
index 570ad0e..f9861d5 100644
--- "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/.git/logs/HEAD"
+++ "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Patched-Version/.git/logs/HEAD"
@@ -1 +1 @@
-0000000000000000000000000000000000000000 860ad02e1ed2cbe5842a611adfc7f1138c4862e0 Saahil Hiranandani <hiran@Batcomputer.(none)> 1709536638 -0600	clone: from https://github.com/apache/dubbo.git
+0000000000000000000000000000000000000000 860ad02e1ed2cbe5842a611adfc7f1138c4862e0 Saahil Hiranandani <hiran@Batcomputer.(none)> 1709536646 -0600	clone: from https://github.com/apache/dubbo.git
diff --git "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/.git/logs/refs/heads/3.2" "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Patched-Version/.git/logs/refs/heads/3.2"
index 570ad0e..f9861d5 100644
--- "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/.git/logs/refs/heads/3.2"
+++ "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Patched-Version/.git/logs/refs/heads/3.2"
@@ -1 +1 @@
-0000000000000000000000000000000000000000 860ad02e1ed2cbe5842a611adfc7f1138c4862e0 Saahil Hiranandani <hiran@Batcomputer.(none)> 1709536638 -0600	clone: from https://github.com/apache/dubbo.git
+0000000000000000000000000000000000000000 860ad02e1ed2cbe5842a611adfc7f1138c4862e0 Saahil Hiranandani <hiran@Batcomputer.(none)> 1709536646 -0600	clone: from https://github.com/apache/dubbo.git
diff --git "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/.git/logs/refs/remotes/origin/HEAD" "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Patched-Version/.git/logs/refs/remotes/origin/HEAD"
index 570ad0e..f9861d5 100644
--- "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/.git/logs/refs/remotes/origin/HEAD"
+++ "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Patched-Version/.git/logs/refs/remotes/origin/HEAD"
@@ -1 +1 @@
-0000000000000000000000000000000000000000 860ad02e1ed2cbe5842a611adfc7f1138c4862e0 Saahil Hiranandani <hiran@Batcomputer.(none)> 1709536638 -0600	clone: from https://github.com/apache/dubbo.git
+0000000000000000000000000000000000000000 860ad02e1ed2cbe5842a611adfc7f1138c4862e0 Saahil Hiranandani <hiran@Batcomputer.(none)> 1709536646 -0600	clone: from https://github.com/apache/dubbo.git
diff --git "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryRegistryServiceListener.java" "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryRegistryServiceListener.java"
deleted file mode 100644
index 2cd8e64..0000000
--- "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/integration/multiple/servicediscoveryregistry/MultipleRegistryCenterServiceDiscoveryRegistryRegistryServiceListener.java"
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.config.integration.multiple.servicediscoveryregistry;
-
-import org.apache.dubbo.common.URL;
-import org.apache.dubbo.common.extension.Activate;
-import org.apache.dubbo.registry.Registry;
-import org.apache.dubbo.registry.RegistryServiceListener;
-import org.apache.dubbo.registry.client.ServiceDiscoveryRegistry;
-
-import static org.apache.dubbo.config.integration.Constants.MULTIPLE_CONFIG_CENTER_SERVICE_DISCOVERY_REGISTRY;
-
-@Activate(value = MULTIPLE_CONFIG_CENTER_SERVICE_DISCOVERY_REGISTRY)
-public class MultipleRegistryCenterServiceDiscoveryRegistryRegistryServiceListener implements RegistryServiceListener {
-
-    private ServiceDiscoveryRegistryStorage storage = new ServiceDiscoveryRegistryStorage();
-
-    /**
-     * Create an {@link ServiceDiscoveryRegistryInfoWrapper} instance.
-     */
-    private ServiceDiscoveryRegistryInfoWrapper createServiceDiscoveryRegistryInfoWrapper(
-            ServiceDiscoveryRegistry serviceDiscoveryRegistry) {
-        URL url = serviceDiscoveryRegistry.getUrl();
-        String host = url.getHost();
-        int port = url.getPort();
-        ServiceDiscoveryRegistryInfoWrapper serviceDiscoveryRegistryInfoWrapper =
-                new ServiceDiscoveryRegistryInfoWrapper();
-        serviceDiscoveryRegistryInfoWrapper.setHost(host);
-        serviceDiscoveryRegistryInfoWrapper.setPort(port);
-        serviceDiscoveryRegistryInfoWrapper.setServiceDiscoveryRegistry(serviceDiscoveryRegistry);
-        serviceDiscoveryRegistryInfoWrapper.setRegistered(true);
-        return serviceDiscoveryRegistryInfoWrapper;
-    }
-
-    /**
-     * Checks if the registry is checked application
-     */
-    private boolean isCheckedApplication(Registry registry) {
-        return registry.getUrl()
-                .getApplication()
-                .equals(MultipleRegistryCenterServiceDiscoveryRegistryIntegrationTest.PROVIDER_APPLICATION_NAME);
-    }
-
-    public void onRegister(URL url, Registry registry) {
-        if (registry instanceof ServiceDiscoveryRegistry && isCheckedApplication(registry)) {
-            ServiceDiscoveryRegistry serviceDiscoveryRegistry = (ServiceDiscoveryRegistry) registry;
-            String host = serviceDiscoveryRegistry.getUrl().getHost();
-            int port = serviceDiscoveryRegistry.getUrl().getPort();
-            if (!storage.contains(host, port)) {
-                storage.put(host, port, createServiceDiscoveryRegistryInfoWrapper(serviceDiscoveryRegistry));
-            }
-            storage.get(host, port).setRegistered(true);
-        }
-    }
-
-    public void onUnregister(URL url, Registry registry) {
-        if (registry instanceof ServiceDiscoveryRegistry && isCheckedApplication(registry)) {
-            String host = registry.getUrl().getHost();
-            int port = registry.getUrl().getPort();
-            storage.get(host, port).setRegistered(false);
-        }
-    }
-
-    public void onSubscribe(URL url, Registry registry) {
-        if (registry instanceof ServiceDiscoveryRegistry && isCheckedApplication(registry)) {
-            ServiceDiscoveryRegistry serviceDiscoveryRegistry = (ServiceDiscoveryRegistry) registry;
-            String host = serviceDiscoveryRegistry.getUrl().getHost();
-            int port = serviceDiscoveryRegistry.getUrl().getPort();
-            if (!storage.contains(host, port)) {
-                storage.put(host, port, createServiceDiscoveryRegistryInfoWrapper(serviceDiscoveryRegistry));
-            }
-            storage.get(host, port).setSubscribed(true);
-        }
-    }
-
-    public void onUnsubscribe(URL url, Registry registry) {
-        if (registry instanceof ServiceDiscoveryRegistry && isCheckedApplication(registry)) {
-            String host = registry.getUrl().getHost();
-            int port = registry.getUrl().getPort();
-            storage.get(host, port).setSubscribed(false);
-        }
-    }
-
-    /**
-     * Return the stored {@link ServiceDiscoveryRegistryInfoWrapper} instances.
-     */
-    public ServiceDiscoveryRegistryStorage getStorage() {
-        return storage;
-    }
-}
diff --git "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/DubboMicrometerTracingAutoConfiguration.java" "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/DubboMicrometerTracingAutoConfiguration.java"
deleted file mode 100644
index 691dea9..0000000
--- "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/DubboMicrometerTracingAutoConfiguration.java"
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.spring.boot.observability.autoconfigure;
-
-import org.apache.dubbo.spring.boot.observability.autoconfigure.annotation.ConditionalOnDubboTracingEnable;
-
-import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.context.annotation.Bean;
-import org.springframework.core.annotation.Order;
-
-import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
-
-/**
- * copy from {@link org.springframework.boot.actuate.autoconfigure.tracing.MicrometerTracingAutoConfiguration}
- * this class is available starting from Boot 3.0. It's not available if you're using Boot < 3.0
- */
-@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
-@ConditionalOnDubboTracingEnable
-@ConditionalOnClass(
-        name = {
-            "io.micrometer.observation.Observation",
-            "io.micrometer.tracing.Tracer",
-            "io.micrometer.tracing.propagation.Propagator"
-        })
-@AutoConfigureAfter(name = "org.springframework.boot.actuate.autoconfigure.tracing.MicrometerTracingAutoConfiguration")
-public class DubboMicrometerTracingAutoConfiguration {
-
-    /**
-     * {@code @Order} value of
-     * {@link #propagatingReceiverTracingObservationHandler(io.micrometer.tracing.Tracer, io.micrometer.tracing.propagation.Propagator)}.
-     */
-    public static final int RECEIVER_TRACING_OBSERVATION_HANDLER_ORDER = 1000;
-
-    /**
-     * {@code @Order} value of
-     * {@link #propagatingSenderTracingObservationHandler(io.micrometer.tracing.Tracer, io.micrometer.tracing.propagation.Propagator)}.
-     */
-    public static final int SENDER_TRACING_OBSERVATION_HANDLER_ORDER = 2000;
-
-    @Bean
-    @ConditionalOnMissingBean
-    @ConditionalOnBean(io.micrometer.tracing.Tracer.class)
-    public io.micrometer.tracing.handler.DefaultTracingObservationHandler defaultTracingObservationHandler(
-            io.micrometer.tracing.Tracer tracer) {
-        return new io.micrometer.tracing.handler.DefaultTracingObservationHandler(tracer);
-    }
-
-    @Bean
-    @ConditionalOnMissingBean
-    @ConditionalOnBean({io.micrometer.tracing.Tracer.class, io.micrometer.tracing.propagation.Propagator.class})
-    @Order(SENDER_TRACING_OBSERVATION_HANDLER_ORDER)
-    public io.micrometer.tracing.handler.PropagatingSenderTracingObservationHandler<?>
-            propagatingSenderTracingObservationHandler(
-                    io.micrometer.tracing.Tracer tracer, io.micrometer.tracing.propagation.Propagator propagator) {
-        return new io.micrometer.tracing.handler.PropagatingSenderTracingObservationHandler<>(tracer, propagator);
-    }
-
-    @Bean
-    @ConditionalOnMissingBean
-    @ConditionalOnBean({io.micrometer.tracing.Tracer.class, io.micrometer.tracing.propagation.Propagator.class})
-    @Order(RECEIVER_TRACING_OBSERVATION_HANDLER_ORDER)
-    public io.micrometer.tracing.handler.PropagatingReceiverTracingObservationHandler<?>
-            propagatingReceiverTracingObservationHandler(
-                    io.micrometer.tracing.Tracer tracer, io.micrometer.tracing.propagation.Propagator propagator) {
-        return new io.micrometer.tracing.handler.PropagatingReceiverTracingObservationHandler<>(tracer, propagator);
-    }
-}
diff --git "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinAutoConfiguration.java" "b/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinAutoConfiguration.java"
deleted file mode 100644
index d4dfdf5..0000000
--- "a/C:\\Users\\hiran\\OneDrive\\Desktop\\bugswarm\\dubbo-416671625\\Buggy-version/dubbo-spring-boot/dubbo-spring-boot-starters/observability/autoconfigure/src/main/java/org/apache/dubbo/spring/boot/observability/autoconfigure/exporter/zipkin/ZipkinAutoConfiguration.java"
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.zipkin;
-
-import org.apache.dubbo.spring.boot.observability.autoconfigure.annotation.ConditionalOnDubboTracingEnable;
-import org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.zipkin.ZipkinConfigurations.BraveConfiguration;
-import org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.zipkin.ZipkinConfigurations.OpenTelemetryConfiguration;
-import org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.zipkin.ZipkinConfigurations.ReporterConfiguration;
-import org.apache.dubbo.spring.boot.observability.autoconfigure.exporter.zipkin.ZipkinConfigurations.SenderConfiguration;
-
-import org.springframework.boot.autoconfigure.AutoConfiguration;
-import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
-import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Import;
-import zipkin2.Span;
-import zipkin2.codec.BytesEncoder;
-import zipkin2.codec.SpanBytesEncoder;
-import zipkin2.reporter.Sender;
-
-import static org.apache.dubbo.spring.boot.observability.autoconfigure.ObservabilityUtils.DUBBO_TRACING_ZIPKIN_CONFIG_PREFIX;
-import static org.apache.dubbo.spring.boot.util.DubboUtils.DUBBO_PREFIX;
-
-/**
- * {@link EnableAutoConfiguration Auto-configuration} for Zipkin.
- * <p>
- * It uses imports on {@link ZipkinConfigurations} to guarantee the correct configuration ordering.
- * Create Zipkin sender and exporter when you are using Boot < 3.0 or you are not using spring-boot-starter-actuator.
- * When you use SpringBoot 3.*, priority should be given to loading S3 related configurations. Dubbo related zipkin configurations are invalid.
- *
- * @since 3.2.1
- */
-@ConditionalOnProperty(prefix = DUBBO_PREFIX, name = "enabled", matchIfMissing = true)
-@AutoConfiguration(
-        after = RestTemplateAutoConfiguration.class,
-        afterName = "org.springframework.boot.actuate.autoconfigure.tracing.zipkin")
-@ConditionalOnClass(Sender.class)
-@Import({
-    SenderConfiguration.class,
-    ReporterConfiguration.class,
-    BraveConfiguration.class,
-    OpenTelemetryConfiguration.class
-})
-@ConditionalOnDubboTracingEnable
-public class ZipkinAutoConfiguration {
-
-    @Bean
-    @ConditionalOnProperty(prefix = DUBBO_TRACING_ZIPKIN_CONFIG_PREFIX, name = "endpoint")
-    @ConditionalOnMissingBean
-    public BytesEncoder<Span> spanBytesEncoder() {
-        return SpanBytesEncoder.JSON_V2;
-    }
-}
