[<Line: +    @classmethod
>, <Line: +    def _compute(cls, file, *args, **kwargs):
>, <Line: +        file._compute(*args, **kwargs)
>, <Line: +    def load(cls, file, *args, **kwargs):
>, <Line: +        if not file.file_name: return
>, <Line: +        if file.data and not force: return
>, <Line: +        path_f = os.path.join(path, file.file_name)
>, <Line: +        file.file.save(path_f)
>, <Line: +        handle = open(path_f, "rb")
>, <Line: +        try: file.data = handle.read()
>, <Line: +        finally: handle.close()
>, <Line: +        cls._compute()
>, <Line: +        cls._compute(file)
>, <Line: +        finally:
>, <Line: +            is_final = True if not size or not data else False
>, <Line: +            is_final and cls._cleanup(file)
>, <Line: +    @classmethod
>, <Line: +    def _compute(cls, file):
>, <Line: +        file_path = cls._file_path(file, ensure = False)
>, <Line: +        size = os.path.getsize(file_path)
>, <Line: +        mtime = os.path.getmtime(file_path)
>, <Line: +        file.hash = str(mtime)
>, <Line: +        file.size = size
>, <Line: +        file.etag = str(mtime)
>]
[<Line: -    def load(self, file, *args, **kwargs):
>, <Line: -        if not self.file_name: return
>, <Line: -        if self.data and not force: return
>, <Line: -        path_f = os.path.join(path, self.file_name)
>, <Line: -        self.file.save(path_f)
>, <Line: -        file = open(path_f, "rb")
>, <Line: -        try: self.data = file.read()
>, <Line: -        finally: file.close()
>, <Line: -        self._compute()
>, <Line: -        file._compute()
>, <Line: -        finally: not data and cls._cleanup(file)
>]