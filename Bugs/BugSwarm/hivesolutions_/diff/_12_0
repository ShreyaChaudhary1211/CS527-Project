[<Line: +        if eager: model = cls._eager(model, eager)
>, <Line: +    def _eager(cls, model, names):
>, <Line: +        if is_list: return [cls._eager(_model, names) for _model in model]
>, <Line: +                if is_sequence: _model = [cls._res(value, part) for value in _model]
>, <Line: +                else: _model = cls._res(_model, part)
>, <Line: +    def _res(cls, model, part):
>, <Line: +        if is_reference: model[part] = value.resolve()
>]
[<Line: -        if eager: model = cls._eager(model, eager, map = map)
>, <Line: -    def _eager(cls, model, names, map = False):
>, <Line: -        if is_list: return [cls._eager(_model, names, map = map) for _model in model]
>, <Line: -                if is_sequence: _model = [cls._res(value, part, map = map) for value in _model]
>, <Line: -                else: _model = cls._res(_model, part, map = map)
>, <Line: -    def _res(cls, model, part, map = False):
>, <Line: -        if is_reference: model[part] = value.resolve(map = map)
>]