[]
[<Line: -		} else if (bytecode instanceof Codes.ListOperator) {
>, <Line: -			return execute((Codes.ListOperator) bytecode, frame, context);
>, <Line: -	/**
>, <Line: -	 * Execute the list append bytecode instruction at a given point in the
>, <Line: -	 * function or method body. This simply assigns the appended list to the
>, <Line: -	 * target register.
>, <Line: -	 *
>, <Line: -	 * @param bytecode
>, <Line: -	 *            --- The bytecode to execute
>, <Line: -	 * @param frame
>, <Line: -	 *            --- The current stack frame
>, <Line: -	 * @param context
>, <Line: -	 *            --- Context in which bytecodes are executed
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	private Object execute(Codes.ListOperator bytecode, Constant[] frame,
>, <Line: -			Context context) {
>, <Line: -		Constant lhs = frame[bytecode.operand(0)];
>, <Line: -		Constant rhs = frame[bytecode.operand(1)];
>, <Line: -		// Check that we have a function reference
>, <Line: -		checkType(lhs, context, Constant.List.class);
>, <Line: -		checkType(rhs, context, Constant.List.class);
>, <Line: -		// Now, perform the append
>, <Line: -		Constant.List l1 = (Constant.List) lhs;
>, <Line: -		Constant.List l2 = (Constant.List) rhs;
>, <Line: -		ArrayList<Constant> values = new ArrayList<Constant>();
>, <Line: -		values.addAll(l1.values);
>, <Line: -		values.addAll(l2.values);
>, <Line: -		frame[bytecode.target()] = Constant.V_LIST(values);
>, <Line: -		return context.pc.next();
>, <Line: -	}
>]