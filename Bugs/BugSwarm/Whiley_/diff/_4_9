[<Line: +		assign(code.target(0), result, environment, index);
>, <Line: +		invalidate(code.target(0),environment);
>, <Line: +		assign(code.target(0),result,environment,index);
>, <Line: +	public void infer(CodeBlock.Index index, Codes.Lambda code, Env environment) {
>, <Line: +		assign(code.target(0), null, environment, index);
>, <Line: +		assign(code.target(0), result, environment, index);
>, <Line: +	public void infer(CodeBlock.Index index, Codes.IndexOf code, Env environment) {
>, <Line: +				if (BigRational.valueOf(i).equals(num.value) && i >= 0 && i < list.values.size()) {
>, <Line: +		assign(code.target(0), result, environment, index);
>, <Line: +		assign(code.target(0),result,environment,index);
>, <Line: +	public void infer(CodeBlock.Index index, Codes.Update code, Env environment) {
>, <Line: +		invalidate(code.target(0), environment);
>, <Line: +	public void infer(CodeBlock.Index index, Codes.NewRecord code, Env environment) {
>, <Line: +		ArrayList<String> keys = new ArrayList<String>(code.type(0).keys());
>, <Line: +		for (int i = 0; i != code_operands.length; ++i) {
>, <Line: +		assign(code.target(0), result, environment, index);
>, <Line: +	public void infer(CodeBlock.Index index, Codes.NewArray code, Env environment) {
>, <Line: +		assign(code.target(0), result, environment, index);
>, <Line: +		assign(code.target(0), result, environment, index);
>, <Line: +		assign(code.target(0), result, environment, index);
>, <Line: +		invalidate(code.target(0), environment);
>, <Line: +		invalidate(code.target(0), environment);
>]
[<Line: -		assign(code.target(), result, environment, index);
>, <Line: -		invalidate(code.target(),environment);
>, <Line: -		assign(code.target(),result,environment,index);
>, <Line: -	public void infer(CodeBlock.Index index, Codes.Lambda code,
>, <Line: -			Env environment) {
>, <Line: -		assign(code.target(),null,environment,index);
>, <Line: -		assign(code.target(), result, environment, index);
>, <Line: -	public void infer(CodeBlock.Index index, Codes.IndexOf code,
>, <Line: -			Env environment) {
>, <Line: -				if (BigRational.valueOf(i).equals(num.value) && i >= 0
>, <Line: -						&& i < list.values.size()) {
>, <Line: -		assign(code.target(),result,environment,index);
>, <Line: -		assign(code.target(),result,environment,index);
>, <Line: -	public void infer(CodeBlock.Index index, Codes.Update code,
>, <Line: -			Env environment) {
>, <Line: -		invalidate(code.target(),environment);
>, <Line: -	public void infer(CodeBlock.Index index, Codes.NewRecord code,
>, <Line: -			Env environment) {
>, <Line: -		ArrayList<String> keys = new ArrayList<String>(code.type().keys());
>, <Line: -		for (int i=0;i!=code_operands.length;++i) {
>, <Line: -		assign(code.target(), result, environment, index);
>, <Line: -	public void infer(CodeBlock.Index index, Codes.NewArray code,
>, <Line: -			Env environment) {
>, <Line: -		assign(code.target(),result,environment,index);
>, <Line: -		assign(code.target(), result, environment, index);
>, <Line: -		assign(code.target(), result, environment, index);
>, <Line: -		invalidate(code.target(), environment);
>, <Line: -		invalidate(code.target(), environment);
>]