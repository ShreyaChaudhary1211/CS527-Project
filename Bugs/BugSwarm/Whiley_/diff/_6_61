[<Line: +import wyil.lang.Bytecode.Expr;
>, <Line: +import wyil.lang.Bytecode.Operator;
>, <Line: +import wyil.lang.SyntaxTree;
>, <Line: +import wyil.lang.SyntaxTree.Location;
>, <Line: +		standardFunctions[Bytecode.OPCODE_logicalnot] = new LogicalNot();
>, <Line: +		standardFunctions[Bytecode.OPCODE_bitwiseinvert] = new BitwiseInvert();
>, <Line: +		standardFunctions[Bytecode.OPCODE_shl] = new LeftShift();
>, <Line: +		standardFunctions[Bytecode.OPCODE_shr] = new RightShift();
>, <Line: +		standardFunctions[Bytecode.OPCODE_arraygen] = new ArrayGenerator();
>, <Line: +		standardFunctions[Bytecode.OPCODE_arraylength] = new ArrayLength();
>, <Line: +		standardFunctions[Bytecode.OPCODE_dereference] = new Dereference();		
>, <Line: +		standardFunctions[Bytecode.OPCODE_is] = new Is();
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +	// Logical
>, <Line: +	private static final class LogicalNot implements InternalFunction {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +			for (Constant c : operands) {
>, <Line: +				values.add(c);
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +			Type.EffectiveRecord type = (Type.EffectiveRecord) context.getType();
>, <Line: +			ArrayList<String> fields = new ArrayList<String>(type.fields().keySet());
>, <Line: +	// ====================================================================================
>, <Line: +	// Other
>, <Line: +	// ====================================================================================
>, <Line: +	private static final class Is implements InternalFunction {
>, <Line: +		@Override
>, <Line: +		public Constant apply(Constant[] operands, Interpreter enclosing, Location<Operator> context) {
>, <Line: +			Constant.Type ct = checkType(operands[1], context, Constant.Type.class);			
>, <Line: +			boolean r = enclosing.isMemberOfType(operands[0], ct.value(), context);			
>, <Line: +			return Constant.Bool(r);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	private static Constant.Bool lessThan(Constant lhs, Constant rhs, boolean isStrict, Location<Operator> context) {
>]
[<Line: -import wyil.util.interpreter.Interpreter.Context;
>, <Line: -		standardFunctions[Bytecode.OPCODE_assign] = new Assign();
>, <Line: -		standardFunctions[Bytecode.OPCODE_not] = new Not();
>, <Line: -		standardFunctions[Bytecode.OPCODE_arrayinvert] = new BitwiseInvert();	
>, <Line: -		standardFunctions[Bytecode.OPCODE_dereference] = new Dereference();
>, <Line: -		standardFunctions[Bytecode.OPCODE_arraylength] = new ArrayLength();	
>, <Line: -		standardFunctions[Bytecode.OPCODE_lshr] = new LeftShift();
>, <Line: -		standardFunctions[Bytecode.OPCODE_rshr] = new RightShift();
>, <Line: -		standardFunctions[Bytecode.OPCODE_arrygen] = new ArrayGenerator();
>, <Line: -	// ====================================================================================
>, <Line: -	// General
>, <Line: -	// ====================================================================================
>, <Line: -	private static final class Assign implements InternalFunction {
>, <Line: -		@Override
>, <Line: -		public Constant apply(Constant[] operands, Context context) {			
>, <Line: -			return operands[0];
>, <Line: -		}		
>, <Line: -	}
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -	// Boolean
>, <Line: -	private static final class Not implements InternalFunction {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -			for (Constant operand : operands) {
>, <Line: -				values.add(operand);
>, <Line: -		public Constant apply(Constant[] operands, Context context) {
>, <Line: -			Bytecode.Operator bytecode = (Bytecode.Operator) context.getBytecode();
>, <Line: -			Type.EffectiveRecord rType = (Type.EffectiveRecord) bytecode.type(0); 
>, <Line: -			ArrayList<String> fields = new ArrayList<String>(rType.fields().keySet());
>, <Line: -	private static Constant.Bool lessThan(Constant lhs, Constant rhs, boolean isStrict, Context context) {
>]