[<Line: +import wycc.util.Triple;
>, <Line: +		List<Triple<String, Expr, Expr>> srcs = new ArrayList<Triple<String, Expr, Expr>>();
>, <Line: +			Expr lhs = parseAdditiveExpression(wf, environment, terminated);
>, <Line: +			match(DotDot);
>, <Line: +			Expr rhs = parseAdditiveExpression(wf, environment, terminated);			
>, <Line: +			srcs.add(new Triple<String, Expr, Expr>(id.text, lhs, rhs));
>, <Line: +	 * Parse a range expression, which has the form:
>, <Line: +	 * RangeExpr ::= ShiftExpr [ ".." ShiftExpr ]
>, <Line: +	private Expr parseRangeExpression(WhileyFile wf,
>, <Line: +		Expr lhs = parseShiftExpression(wf, environment, terminated);
>, <Line: +		if (tryAndMatch(terminated, DotDot) != null) {
>, <Line: +			Expr rhs = parseAdditiveExpression(wf, environment, terminated);
>, <Line: +			return new Expr.BinOp(Expr.BOp.RANGE, lhs, rhs, sourceAttr(start,
>, <Line: +					index - 1));
>, <Line: +	 * Parse an append expression, which has the form:
>, <Line: +	 * AppendExpr ::= RangeExpr ( "++" RangeExpr)*
>, <Line: +	private Expr parseAppendExpression(WhileyFile wf,
>, <Line: +		while (tryAndMatch(terminated, PlusPlus) != null) {
>, <Line: +			Expr rhs = parseShiftExpression(wf, environment, terminated);
>, <Line: +			lhs = new Expr.BinOp(Expr.BOp.LISTAPPEND, lhs, rhs, sourceAttr(
>, <Line: +					start, index - 1));
>]
[<Line: -		List<Pair<String, Expr>> srcs = new ArrayList<Pair<String, Expr>>();
>, <Line: -			// We have to parse an Append Expression here, which is the most
>, <Line: -			// general form of expression that can generate a collection of some
>, <Line: -			// kind. All expressions higher up (e.g. logical expressions) cannot
>, <Line: -			// generate collections. Furthermore, the bitwise or expression
>, <Line: -			// could lead to ambiguity and, hence, we bypass that an consider
>, <Line: -			// append expressions only.
>, <Line: -			Expr src = parseAppendExpression(wf, environment, terminated);
>, <Line: -			srcs.add(new Pair<String, Expr>(id.text, src));
>, <Line: -	 * Parse an append expression, which has the form:
>, <Line: -	 * AppendExpr ::= RangeExpr ( "++" RangeExpr)*
>, <Line: -	private Expr parseAppendExpression(WhileyFile wf,
>, <Line: -		Expr lhs = parseRangeExpression(wf, environment, terminated);
>, <Line: -		while (tryAndMatch(terminated, PlusPlus) != null) {
>, <Line: -			Expr rhs = parseRangeExpression(wf, environment, terminated);
>, <Line: -			lhs = new Expr.BinOp(Expr.BOp.LISTAPPEND, lhs, rhs, sourceAttr(
>, <Line: -					start, index - 1));
>, <Line: -	 * Parse a range expression, which has the form:
>, <Line: -	 * RangeExpr ::= ShiftExpr [ ".." ShiftExpr ]
>, <Line: -	private Expr parseRangeExpression(WhileyFile wf,
>, <Line: -		if (tryAndMatch(terminated, DotDot) != null) {
>, <Line: -			Expr rhs = parseAdditiveExpression(wf, environment, terminated);
>, <Line: -			return new Expr.BinOp(Expr.BOp.RANGE, lhs, rhs, sourceAttr(start,
>, <Line: -					index - 1));
>]