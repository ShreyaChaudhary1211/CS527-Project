[<Line: +		switch (expr.op) {
>, <Line: +		case IS:
>, <Line: +		case AND:
>, <Line: +		case OR:
>, <Line: +		case XOR:
>, <Line: +			return propagateCondition(expr, true, environment, context)
>, <Line: +					.first();
>, <Line: +		case BITWISEAND:
>, <Line: +		case BITWISEOR:
>, <Line: +		case BITWISEXOR:
>, <Line: +			checkIsSubtype(Type.T_BYTE, lhs, context);
>, <Line: +			checkIsSubtype(Type.T_BYTE, rhs, context);
>, <Line: +			srcType = Type.T_BYTE;
>, <Line: +			break;
>, <Line: +		case LEFTSHIFT:
>, <Line: +		case RIGHTSHIFT:
>, <Line: +			checkIsSubtype(Type.T_BYTE, lhs, context);
>, <Line: +			checkIsSubtype(Type.T_INT, rhs, context);
>, <Line: +			srcType = Type.T_BYTE;
>, <Line: +			break;
>, <Line: +		case RANGE:
>, <Line: +			checkIsSubtype(Type.T_INT, lhs, context);
>, <Line: +			checkIsSubtype(Type.T_INT, rhs, context);
>, <Line: +			srcType = Type.List(Type.T_INT, false);
>, <Line: +			break;
>, <Line: +		case REM:
>, <Line: +			checkIsSubtype(Type.T_INT, lhs, context);
>, <Line: +			checkIsSubtype(Type.T_INT, rhs, context);
>, <Line: +			srcType = Type.T_INT;
>, <Line: +			break;
>, <Line: +		default:
>, <Line: +			// all other operations go through here
>, <Line: +			checkSuptypes(lhs, context, Nominal.T_INT, Nominal.T_REAL);
>, <Line: +			checkSuptypes(rhs, context, Nominal.T_INT, Nominal.T_REAL);
>, <Line: +			//
>, <Line: +			if (!lhsRawType.equals(rhsRawType)) {
>, <Line: +				syntaxError(
>, <Line: +						errorMessage(INCOMPARABLE_OPERANDS, lhsRawType,
>, <Line: +								rhsRawType), filename, expr);
>, <Line: +				return null;
>, <Line: +			} else {
>, <Line: +				srcType = lhsRawType;
>]
[<Line: -		boolean lhs_list = Type.isSubtype(Type.T_LIST_ANY, lhsRawType);
>, <Line: -		boolean rhs_list = Type.isSubtype(Type.T_LIST_ANY, rhsRawType);
>, <Line: -		if (lhs_list || rhs_list) {
>, <Line: -			checkIsSubtype(Type.T_LIST_ANY, lhs, context);
>, <Line: -			checkIsSubtype(Type.T_LIST_ANY, rhs, context);
>, <Line: -			Type.EffectiveList lel = (Type.EffectiveList) lhsRawType;
>, <Line: -			Type.EffectiveList rel = (Type.EffectiveList) rhsRawType;
>, <Line: -			switch (expr.op) {
>, <Line: -			case LISTAPPEND:
>, <Line: -				srcType = Type.List(Type.Union(lel.element(), rel.element()),
>, <Line: -						false);
>, <Line: -				break;
>, <Line: -			default:
>, <Line: -				syntaxError("invalid list operation: " + expr.op, context, expr);
>, <Line: -				return null; // dead-code
>, <Line: -			}
>, <Line: -		} else {
>, <Line: -			switch (expr.op) {
>, <Line: -			case IS:
>, <Line: -			case AND:
>, <Line: -			case OR:
>, <Line: -			case XOR:
>, <Line: -				return propagateCondition(expr, true, environment, context)
>, <Line: -						.first();
>, <Line: -			case BITWISEAND:
>, <Line: -			case BITWISEOR:
>, <Line: -			case BITWISEXOR:
>, <Line: -				checkIsSubtype(Type.T_BYTE, lhs, context);
>, <Line: -				checkIsSubtype(Type.T_BYTE, rhs, context);
>, <Line: -				srcType = Type.T_BYTE;
>, <Line: -				break;
>, <Line: -			case LEFTSHIFT:
>, <Line: -			case RIGHTSHIFT:
>, <Line: -				checkIsSubtype(Type.T_BYTE, lhs, context);
>, <Line: -				checkIsSubtype(Type.T_INT, rhs, context);
>, <Line: -				srcType = Type.T_BYTE;
>, <Line: -				break;
>, <Line: -			case RANGE:
>, <Line: -				checkIsSubtype(Type.T_INT, lhs, context);
>, <Line: -				checkIsSubtype(Type.T_INT, rhs, context);
>, <Line: -				srcType = Type.List(Type.T_INT, false);
>, <Line: -				break;
>, <Line: -			case REM:
>, <Line: -				checkIsSubtype(Type.T_INT, lhs, context);
>, <Line: -				checkIsSubtype(Type.T_INT, rhs, context);
>, <Line: -				srcType = Type.T_INT;
>, <Line: -				break;
>, <Line: -			default:
>, <Line: -				// all other operations go through here
>, <Line: -				checkSuptypes(lhs, context, Nominal.T_INT, Nominal.T_REAL);
>, <Line: -				checkSuptypes(rhs, context, Nominal.T_INT, Nominal.T_REAL);
>, <Line: -				//
>, <Line: -				if (!lhsRawType.equals(rhsRawType)) {
>, <Line: -					syntaxError(
>, <Line: -							errorMessage(INCOMPARABLE_OPERANDS, lhsRawType,
>, <Line: -									rhsRawType), filename, expr);
>, <Line: -					return null;
>, <Line: -				} else {
>, <Line: -					srcType = lhsRawType;
>, <Line: -				}
>]