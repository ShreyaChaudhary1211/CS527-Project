[<Line: +			Type[] types = a.types();
>, <Line: +			if(code instanceof Codes.Lambda) {
>, <Line: +				// FIXME: This is something of a hack, but the reason is that
>, <Line: +				// lambda operands can be NULL_REG.
>, <Line: +				for(int i=0;i!=operands.length;++i) {
>, <Line: +					operands[i] ++;
>, <Line: +				}
>, <Line: +			}
>, <Line: +			writeBase(wide,types.length,output);
>, <Line: +			for(int i=0;i!=types.length;++i) {
>, <Line: +				writeBase(wide,typeCache.get(types[i]),output);
>, <Line: +			}
>, <Line: +			Type[] types = a.types();
>, <Line: +			for(int i=0;i!=types.length;++i) {
>, <Line: +				maxBase = Math.max(maxBase,typeCache.get(types[i]));
>, <Line: +			}
>, <Line: +			for(Type type : a.types()) {
>, <Line: +				addTypeItem(type);
>, <Line: +			}
>]
[<Line: -		} else if(code instanceof Code.AbstractUnaryAssignable) {
>, <Line: -			Code.AbstractUnaryAssignable<Type> a = (Code.AbstractUnaryAssignable) code;
>, <Line: -			writeBase(wide,a.target(),output);
>, <Line: -			writeBase(wide,a.operand(0),output);
>, <Line: -		} else if(code instanceof Code.AbstractBinaryAssignable) {
>, <Line: -			Code.AbstractBinaryAssignable<Type> a = (Code.AbstractBinaryAssignable) code;
>, <Line: -			writeBase(wide, a.target(),output);
>, <Line: -			writeBase(wide, a.operand(0),output);
>, <Line: -			writeBase(wide, a.operand(1),output);
>, <Line: -		} else if(code instanceof Code.AbstractNaryAssignable) {
>, <Line: -			Code.AbstractNaryAssignable<Type> a = (Code.AbstractNaryAssignable) code;
>, <Line: -			int[] targets = a.targets();
>, <Line: -			int[] operands = a.operands();
>, <Line: -			writeBase(wide,targets.length,output);
>, <Line: -			writeBase(wide,operands.length,output);
>, <Line: -			for(int i=0;i!=targets.length;++i) {
>, <Line: -				writeBase(wide,targets[i],output);
>, <Line: -			}			
>, <Line: -			for(int i=0;i!=operands.length;++i) {
>, <Line: -				writeBase(wide,operands[i],output);
>, <Line: -			}
>, <Line: -		} else if(code instanceof Code.AbstractUnaryAssignable) {
>, <Line: -			Code.AbstractUnaryAssignable<Type> a = (Code.AbstractUnaryAssignable) code;
>, <Line: -			writeRest(wide,typeCache.get(a.type()),output);
>, <Line: -		} else if(code instanceof Code.AbstractBinaryAssignable) {
>, <Line: -			Code.AbstractBinaryAssignable<Type> a = (Code.AbstractBinaryAssignable) code;
>, <Line: -			writeRest(wide,typeCache.get(a.type()),output);
>, <Line: -		} else if(code instanceof Code.AbstractNaryAssignable) {
>, <Line: -			Code.AbstractNaryAssignable<Type> a = (Code.AbstractNaryAssignable) code;
>, <Line: -			writeRest(wide,typeCache.get(a.type()),output);
>, <Line: -		} else if(code instanceof Code.AbstractMultiNaryAssignable) {
>, <Line: -			Code.AbstractMultiNaryAssignable<Type> a = (Code.AbstractMultiNaryAssignable) code;
>, <Line: -			writeRest(wide,typeCache.get(a.type()),output);
>, <Line: -		} else if(code instanceof Code.AbstractUnaryAssignable) {
>, <Line: -			Code.AbstractUnaryAssignable<Type> a = (Code.AbstractUnaryAssignable) code;
>, <Line: -			maxBase = Math.max(a.target(),a.operand(0));
>, <Line: -			maxRest = typeCache.get(a.type());
>, <Line: -		} else if(code instanceof Code.AbstractBinaryAssignable) {
>, <Line: -			Code.AbstractBinaryAssignable<Type> a = (Code.AbstractBinaryAssignable) code;
>, <Line: -			maxBase = Math.max(a.operand(0),a.operand(1));
>, <Line: -			maxBase = Math.max(a.target(),maxBase);
>, <Line: -			maxRest = typeCache.get(a.type());
>, <Line: -		} else if(code instanceof Code.AbstractNaryAssignable) {
>, <Line: -			Code.AbstractNaryAssignable<Type> a = (Code.AbstractNaryAssignable) code;
>, <Line: -			int[] targets = a.targets();
>, <Line: -			int[] operands = a.operands();			
>, <Line: -			for(int i=0;i!=targets.length;++i) {
>, <Line: -				maxBase = Math.max(maxBase,targets[i]);
>, <Line: -			}						
>, <Line: -			for(int i=0;i!=operands.length;++i) {
>, <Line: -				maxBase = Math.max(maxBase,operands[i]);
>, <Line: -			}
>, <Line: -			maxRest = typeCache.get(a.type());
>, <Line: -			maxRest = typeCache.get(a.type());
>, <Line: -			addTypeItem(c.type());
>, <Line: -		} else if(code instanceof Code.AbstractUnaryAssignable) {
>, <Line: -			Code.AbstractUnaryAssignable<Type> a = (Code.AbstractUnaryAssignable) code;
>, <Line: -			addTypeItem(a.type());
>, <Line: -		} else if(code instanceof Code.AbstractBinaryAssignable) {
>, <Line: -			Code.AbstractBinaryAssignable<Type> a = (Code.AbstractBinaryAssignable) code;
>, <Line: -			addTypeItem(a.type());
>, <Line: -		} else if(code instanceof Code.AbstractNaryAssignable) {
>, <Line: -			Code.AbstractNaryAssignable<Type> a = (Code.AbstractNaryAssignable) code;
>, <Line: -			addTypeItem(a.type());
>, <Line: -			addTypeItem(a.type());
>]