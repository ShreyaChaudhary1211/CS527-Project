[<Line: +			case Code.OPCODE_listgen:
>, <Line: +				return listGeneratorChecks((Codes.ListGenerator) code, branch);
>, <Line: +	/**
>, <Line: +	 * Generate preconditions necessary to protect against a negative array
>, <Line: +	 * size.
>, <Line: +	 * 
>, <Line: +	 * @param code
>, <Line: +	 *            --- The list generator bytecode
>, <Line: +	 * @param branch
>, <Line: +	 *            --- The branch the bytecode is on.
>, <Line: +	 * @return
>, <Line: +	 */
>, <Line: +	public Pair<String,Expr>[] listGeneratorChecks(Codes.ListGenerator code, VcBranch branch) {				
>, <Line: +		Expr idx = branch.read(code.operand(1));
>, <Line: +		Expr zero = new Expr.Constant(Value.Integer(BigInteger.ZERO),
>, <Line: +				idx.attributes());
>, <Line: +		return new Pair[] {
>, <Line: +				new Pair("index out of bounds (negative)", new Expr.Binary(
>, <Line: +						Expr.Binary.Op.GTEQ, idx, zero, idx.attributes()))
>, <Line: +		};
>, <Line: +	}
>, <Line: +				transformNary(Expr.Nary.Op.ARRAY, (Codes.NewList) code, branch,
>]
[<Line: -				transformNary(Expr.Nary.Op.LIST, (Codes.NewList) code, branch,
>]