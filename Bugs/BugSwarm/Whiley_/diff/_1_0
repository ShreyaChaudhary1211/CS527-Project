[<Line: +		Environment environment = new Environment();		
>, <Line: +		ArrayList<VariableDeclarations.Declaration> declarations = new ArrayList<VariableDeclarations.Declaration>(); 				
>, <Line: +		addDeclaredParameters(fd.parameters,fd.resolvedType().params(), environment, declarations);
>, <Line: +		addDeclaredParameter(fd.returnType,fd.resolvedType().ret(), environment, declarations);		
>, <Line: +		// This indicates one or more explicit ensures clauses are given.
>, <Line: +		// Therefore, we must translate each of these into Wyil bytecodes.
>, <Line: +		for (Expr condition : fd.ensures) {
>, <Line: +			AttributedCodeBlock postcondition = new AttributedCodeBlock(new SourceLocationMap());				
>, <Line: +			String endLab = CodeUtils.freshLabel();
>, <Line: +			// Clone the environment at this stage to avoid updates to the
>, <Line: +			// environment within the condition affecting the external
>, <Line: +			// environment.
>, <Line: +			generateCondition(endLab, condition, new Environment(environment),
>, <Line: +					postcondition, fd);
>, <Line: +			postcondition.add(Codes.Fail(), attributes(condition));
>, <Line: +			postcondition.add(Codes.Label(endLab));
>, <Line: +			postcondition.add(Codes.Return());
>, <Line: +			ensures.add(postcondition);
>, <Line: +	private void addDeclaredParameters(List<WhileyFile.Parameter> parameters,
>, <Line: +			List<Nominal> types, Environment environment, List<VariableDeclarations.Declaration> declarations) {
>, <Line: +			// allocate parameter to register in the current block
>, <Line: +			environment.allocate(types.get(i).raw(), parameter.name);
>, <Line: +	private void addDeclaredParameter(WhileyFile.Parameter parameter, Nominal type,
>, <Line: +			Environment environment, List<VariableDeclarations.Declaration> declarations) {
>, <Line: +			// allocate parameter to register in the current block
>, <Line: +			environment.allocate(type.raw(), parameter.name);
>, <Line: +		int root = environment.get(s.parameter.name);		
>]
[<Line: -		// The environment maintains the mapping from source-level variables to
>, <Line: -		// the registers in WyIL block(s).
>, <Line: -		Environment environment = addDeclaredParameters(fd.parameters,fd.resolvedType().params(),new Environment());
>, <Line: -		List<VariableDeclarations.Declaration> declarations = new ArrayList<VariableDeclarations.Declaration>(); 				
>, <Line: -		addDeclaredParameters(fd.parameters,fd.resolvedType().params(), declarations);
>, <Line: -		addDeclaredParameter(fd.returnType,fd.resolvedType().ret(), declarations);
>, <Line: -		if (fd.ensures.size() > 0) {
>, <Line: -			// This indicates one or more explicit ensures clauses are given.
>, <Line: -			// Therefore, we must translate each of these into Wyil bytecodes.
>, <Line: -			// First, update the environment to include the declared return
>, <Line: -			// variables.
>, <Line: -			Environment postEnvironment = addDeclaredParameter(fd.returnType,fd.resolvedType().ret(),environment);
>, <Line: -			for (Expr condition : fd.ensures) {
>, <Line: -				AttributedCodeBlock postcondition = new AttributedCodeBlock(new SourceLocationMap());				
>, <Line: -				String endLab = CodeUtils.freshLabel();
>, <Line: -				// Clone the environment at this stage to avoid updates to the
>, <Line: -				// environment within the condition affecting the external
>, <Line: -				// environment.
>, <Line: -				generateCondition(endLab, condition, new Environment(postEnvironment),
>, <Line: -						postcondition, fd);
>, <Line: -				postcondition.add(Codes.Fail(), attributes(condition));
>, <Line: -				postcondition.add(Codes.Label(endLab));
>, <Line: -				postcondition.add(Codes.Return());
>, <Line: -				ensures.add(postcondition);
>, <Line: -			}
>, <Line: -	/**
>, <Line: -	 * Add a list of parameter declarations to a given environment
>, <Line: -	 * 
>, <Line: -	 * @param parameters --- List of parameters to add
>, <Line: -	 * @param types --- List of parameter types
>, <Line: -	 * @param environment --- environment to add parameters to
>, <Line: -	 */
>, <Line: -	private Environment addDeclaredParameters(List<WhileyFile.Parameter> parameters, List<Nominal> types,
>, <Line: -			Environment environment) {
>, <Line: -		for (int i = 0; i != parameters.size(); ++i) {
>, <Line: -			WhileyFile.Parameter parameter = parameters.get(i);
>, <Line: -			// allocate parameter to register in the current block
>, <Line: -			environment.allocate(types.get(i).raw(), parameter.name);
>, <Line: -		}
>, <Line: -		return environment;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Add a list of parameter declarations to a given environment
>, <Line: -	 * 
>, <Line: -	 * @param parameters --- List of parameters to add
>, <Line: -	 * @param types --- List of parameter types
>, <Line: -	 * @param environment --- environment to add parameters to
>, <Line: -	 */
>, <Line: -	private Environment addDeclaredParameter(WhileyFile.Parameter parameter, Nominal type,
>, <Line: -			Environment environment) {
>, <Line: -		// allocate parameter to register in the current block
>, <Line: -		environment.allocate(type.raw(), parameter.name);
>, <Line: -		return environment;
>, <Line: -	}
>, <Line: -	private List<VariableDeclarations.Declaration> addDeclaredParameters(List<WhileyFile.Parameter> parameters,
>, <Line: -			List<Nominal> types, List<VariableDeclarations.Declaration> declarations) {
>, <Line: -		return declarations;
>, <Line: -	private List<VariableDeclarations.Declaration> addDeclaredParameter(WhileyFile.Parameter parameter, Nominal type,
>, <Line: -			List<VariableDeclarations.Declaration> declarations) {
>, <Line: -		return declarations;
>, <Line: -		int root = environment.allocate(s.type.raw(),s.parameter.name);
>]