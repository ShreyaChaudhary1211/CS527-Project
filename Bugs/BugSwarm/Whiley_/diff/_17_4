[<Line: +		Expr lhs = parseShiftExpression(wf, environment, terminated);
>, <Line: +			Expr rhs = parseShiftExpression(wf, environment, terminated);
>, <Line: +		Expr e = parseShiftExpression(wf, environment, true);
>]
[<Line: -		Expr lhs = parseAppendExpression(wf, environment, terminated);
>, <Line: -			Expr rhs = parseAppendExpression(wf, environment, terminated);
>, <Line: -	/**
>, <Line: -	 * Parse an append expression, which has the form:
>, <Line: -	 *
>, <Line: -	 * <pre>
>, <Line: -	 * AppendExpr ::= RangeExpr ( "++" RangeExpr)*
>, <Line: -	 * </pre>
>, <Line: -	 *
>, <Line: -	 * @param wf
>, <Line: -	 *            The enclosing WhileyFile being constructed. This is necessary
>, <Line: -	 *            to construct some nested declarations (e.g. parameters for
>, <Line: -	 *            lambdas)
>, <Line: -	 * @param environment
>, <Line: -	 *            The set of declared variables visible in the enclosing scope.
>, <Line: -	 *            This is necessary to identify local variables within this
>, <Line: -	 *            expression.
>, <Line: -	 * @param terminated
>, <Line: -	 *            This indicates that the expression is known to be terminated
>, <Line: -	 *            (or not). An expression that's known to be terminated is one
>, <Line: -	 *            which is guaranteed to be followed by something. This is
>, <Line: -	 *            important because it means that we can ignore any newline
>, <Line: -	 *            characters encountered in parsing this expression, and that
>, <Line: -	 *            we'll never overrun the end of the expression (i.e. because
>, <Line: -	 *            there's guaranteed to be something which terminates this
>, <Line: -	 *            expression). A classic situation where terminated is true is
>, <Line: -	 *            when parsing an expression surrounded in braces. In such case,
>, <Line: -	 *            we know the right-brace will always terminate this expression.
>, <Line: -	 *
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	private Expr parseAppendExpression(WhileyFile wf,
>, <Line: -			HashSet<String> environment, boolean terminated) {
>, <Line: -		int start = index;
>, <Line: -		Expr lhs = parseShiftExpression(wf, environment, terminated);
>, <Line: -		while (tryAndMatch(terminated, PlusPlus) != null) {
>, <Line: -			Expr rhs = parseShiftExpression(wf, environment, terminated);
>, <Line: -			lhs = new Expr.BinOp(Expr.BOp.LISTAPPEND, lhs, rhs, sourceAttr(
>, <Line: -					start, index - 1));
>, <Line: -		}
>, <Line: -		return lhs;
>, <Line: -	}
>, <Line: -		Expr e = parseAppendExpression(wf, environment, true);
>]