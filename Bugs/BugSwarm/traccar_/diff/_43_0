[<Line: + * Copyright 2014 - 2017 Anton Tananaev (anton@traccar.org)
>, <Line: +import org.traccar.helper.UnitsConverter;
>, <Line: +    private long filterFuture;
>, <Line: +    private int filterMaxSpeed;
>, <Line: +    public void setFilterFuture(long filterFuture) {
>, <Line: +        this.filterFuture = filterFuture;
>, <Line: +    }
>, <Line: +    public void setFilterMaxSpeed(int filterMaxSpeed) {
>, <Line: +        this.filterMaxSpeed = filterMaxSpeed;
>, <Line: +    public void setFilterLimit(long filterLimit) {
>, <Line: +        this.filterLimit = filterLimit;
>, <Line: +            filterFuture = config.getLong("filter.future") * 1000;
>, <Line: +            filterMaxSpeed = config.getInteger("filter.maxSpeed");
>, <Line: +    private boolean filterDuplicate(Position position, Position last) {
>, <Line: +        return filterDuplicate && last != null && position.getFixTime().equals(last.getFixTime());
>, <Line: +    private boolean filterDistance(Position position, Position last) {
>, <Line: +        if (filterDistance != 0 && last != null) {
>, <Line: +            double distance = DistanceCalculator.distance(
>, <Line: +                    position.getLatitude(), position.getLongitude(),
>, <Line: +                    last.getLatitude(), last.getLongitude());
>, <Line: +            return distance < filterDistance;
>, <Line: +        }
>, <Line: +        return false;
>, <Line: +    }
>, <Line: +    private boolean filterMaxSpeed(Position position, Position last) {
>, <Line: +        if (filterMaxSpeed != 0 && last != null) {
>, <Line: +            double distance = DistanceCalculator.distance(
>, <Line: +                    position.getLatitude(), position.getLongitude(),
>, <Line: +                    last.getLatitude(), last.getLongitude());
>, <Line: +            long time = position.getFixTime().getTime() - last.getFixTime().getTime();
>, <Line: +            return UnitsConverter.knotsFromMps(distance / time) > filterMaxSpeed;
>, <Line: +        return false;
>, <Line: +    private boolean filterLimit(Position position, Position last) {
>, <Line: +        Position last = null;
>, <Line: +        if (Context.getIdentityManager() != null) {
>, <Line: +            last = Context.getIdentityManager().getLastPosition(position.getDeviceId());
>, <Line: +        }
>, <Line: +        if (filterDuplicate(position, last)) {
>, <Line: +        if (filterDistance(position, last)) {
>, <Line: +        if (filterMaxSpeed(position, last)) {
>, <Line: +            filterType.append("MaxSpeed ");
>, <Line: +        }
>, <Line: +        if (filterType.length() > 0 && !filterLimit(position, last)) {
>]
[<Line: - * Copyright 2014 - 2016 Anton Tananaev (anton@traccar.org)
>, <Line: -    private long filterFuture;
>, <Line: -    public void setFilterLimit(long filterLimit) {
>, <Line: -        this.filterLimit = filterLimit;
>, <Line: -    public void setFilterFuture(long filterFuture) {
>, <Line: -        this.filterFuture = filterFuture;
>, <Line: -            filterFuture = config.getLong("filter.future") * 1000;
>, <Line: -        }
>, <Line: -    }
>, <Line: -    private Position getLastPosition(long deviceId) {
>, <Line: -        if (Context.getIdentityManager() != null) {
>, <Line: -            return Context.getIdentityManager().getLastPosition(deviceId);
>, <Line: -        return null;
>, <Line: -    private boolean filterDuplicate(Position position) {
>, <Line: -        if (filterDuplicate) {
>, <Line: -            Position last = getLastPosition(position.getDeviceId());
>, <Line: -            if (last != null) {
>, <Line: -                return position.getFixTime().equals(last.getFixTime());
>, <Line: -            } else {
>, <Line: -                return false;
>, <Line: -            }
>, <Line: -        } else {
>, <Line: -            return false;
>, <Line: -        }
>, <Line: -    private boolean filterDistance(Position position) {
>, <Line: -        if (filterDistance != 0) {
>, <Line: -            Position last = getLastPosition(position.getDeviceId());
>, <Line: -            if (last != null) {
>, <Line: -                double distance = DistanceCalculator.distance(
>, <Line: -                        position.getLatitude(), position.getLongitude(),
>, <Line: -                        last.getLatitude(), last.getLongitude());
>, <Line: -                return distance < filterDistance;
>, <Line: -            } else {
>, <Line: -                return false;
>, <Line: -            }
>, <Line: -        } else {
>, <Line: -            return false;
>, <Line: -    private boolean filterLimit(Position position) {
>, <Line: -            Position last = getLastPosition(position.getDeviceId());
>, <Line: -        if (filterDuplicate(position)) {
>, <Line: -        if (filterDistance(position)) {
>, <Line: -        if (filterType.length() > 0 && !filterLimit(position)) {
>]