[<Line: +/*
>, <Line: + * Copyright 2017 Anton Tananaev (anton@traccar.org)
>, <Line: + *
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + *
>, <Line: + *     http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + *
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + */
>, <Line: +package org.traccar.protocol;
>, <Line: +import org.jboss.netty.buffer.ChannelBuffer;
>, <Line: +import org.jboss.netty.channel.Channel;
>, <Line: +import org.traccar.BaseProtocolDecoder;
>, <Line: +import org.traccar.DeviceSession;
>, <Line: +import org.traccar.helper.DateBuilder;
>, <Line: +import org.traccar.helper.UnitsConverter;
>, <Line: +import org.traccar.model.CellTower;
>, <Line: +import org.traccar.model.Network;
>, <Line: +import org.traccar.model.Position;
>, <Line: +import java.net.SocketAddress;
>, <Line: +import java.nio.charset.StandardCharsets;
>, <Line: +public class Gl200BinaryProtocolDecoder extends BaseProtocolDecoder {
>, <Line: +    public Gl200BinaryProtocolDecoder(Gl200Protocol protocol) {
>, <Line: +        super(protocol);
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected Object decode(
>, <Line: +            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
>, <Line: +        ChannelBuffer buf = (ChannelBuffer) msg;
>, <Line: +        String header = buf.readBytes(4).toString(StandardCharsets.US_ASCII);
>, <Line: +        if (header.equals("+EVT")) {
>, <Line: +            Position position = new Position();
>, <Line: +            position.setProtocol(getProtocolName());
>, <Line: +            buf.readUnsignedByte(); // message type
>, <Line: +            buf.readUnsignedInt(); // mask
>, <Line: +            buf.readUnsignedShort(); // length
>, <Line: +            buf.readUnsignedByte(); // device type
>, <Line: +            buf.readUnsignedShort(); // protocol version
>, <Line: +            position.set(Position.KEY_VERSION_FW, String.valueOf(buf.readUnsignedShort()));
>, <Line: +            DeviceSession deviceSession = getDeviceSession(
>, <Line: +                    channel, remoteAddress, String.format("%015d", buf.readLong()));
>, <Line: +            if (deviceSession == null) {
>, <Line: +                return null;
>, <Line: +            }
>, <Line: +            position.setDeviceId(deviceSession.getDeviceId());
>, <Line: +            position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
>, <Line: +            position.set(Position.KEY_POWER, buf.readUnsignedShort());
>, <Line: +            buf.readUnsignedByte(); // motion status
>, <Line: +            position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
>, <Line: +            position.set(Position.KEY_INDEX, buf.readUnsignedByte());
>, <Line: +            int hdop = buf.readUnsignedByte();
>, <Line: +            position.setValid(hdop > 0);
>, <Line: +            position.set(Position.KEY_HDOP, hdop);
>, <Line: +            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedMedium()));
>, <Line: +            position.setCourse(buf.readUnsignedShort());
>, <Line: +            position.setAltitude(buf.readShort());
>, <Line: +            position.setLongitude(buf.readInt() * 0.000001);
>, <Line: +            position.setLatitude(buf.readInt() * 0.000001);
>, <Line: +            DateBuilder dateBuilder = new DateBuilder()
>, <Line: +                    .setDate(buf.readUnsignedShort(), buf.readUnsignedByte(), buf.readUnsignedByte())
>, <Line: +                    .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
>, <Line: +            position.setTime(dateBuilder.getDate());
>, <Line: +            position.setNetwork(new Network(CellTower.from(
>, <Line: +                    buf.readUnsignedShort(), buf.readUnsignedShort(),
>, <Line: +                    buf.readUnsignedShort(), buf.readUnsignedShort())));
>, <Line: +            buf.readUnsignedByte(); // reserved
>, <Line: +            return position;
>, <Line: +        }
>, <Line: +        return null;
>, <Line: +    }
>, <Line: +}
>]
[]