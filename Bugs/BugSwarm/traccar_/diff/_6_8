[<Line: +/*
>, <Line: + * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
>, <Line: + *
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + *
>, <Line: + *     http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + *
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + */
>, <Line: +package org.traccar.protocol;
>, <Line: +import org.jboss.netty.buffer.ChannelBuffer;
>, <Line: +import org.jboss.netty.buffer.ChannelBuffers;
>, <Line: +import org.traccar.BaseProtocolEncoder;
>, <Line: +import org.traccar.helper.Checksum;
>, <Line: +import org.traccar.model.Command;
>, <Line: +public class CityeasyProtocolEncoder extends BaseProtocolEncoder {
>, <Line: +    private ChannelBuffer encodeContent(int type, ChannelBuffer content) {
>, <Line: +        ChannelBuffer buf = ChannelBuffers.dynamicBuffer();
>, <Line: +        buf.writeByte('S');
>, <Line: +        buf.writeByte('S');
>, <Line: +        buf.writeShort(2 + 2 + 2 + content.readableBytes() + 4 + 2 + 2);
>, <Line: +        buf.writeShort(type);
>, <Line: +        buf.writeBytes(content);
>, <Line: +        buf.writeInt(0x0B);
>, <Line: +        buf.writeShort(Checksum.crc16Ccitt(buf.toByteBuffer(), 0, 0));
>, <Line: +        buf.writeByte('\r');
>, <Line: +        buf.writeByte('\n');
>, <Line: +        return buf;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected Object encodeCommand(Command command) {
>, <Line: +        ChannelBuffer content = ChannelBuffers.dynamicBuffer();
>, <Line: +        switch (command.getType()) {
>, <Line: +            case Command.TYPE_POSITION_SINGLE:
>, <Line: +                return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_REQUEST, content);
>, <Line: +            case Command.TYPE_POSITION_PERIODIC:
>, <Line: +                content.writeShort(((Number) command.getAttributes().get(Command.KEY_FREQUENCY)).intValue());
>, <Line: +                return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_INTERVAL, content);
>, <Line: +            case Command.TYPE_POSITION_STOP:
>, <Line: +                content.writeShort(0);
>, <Line: +                return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_INTERVAL, content);
>, <Line: +            case Command.TYPE_SET_TIMEZONE:
>, <Line: +                int timezone = ((Number) command.getAttributes().get(Command.KEY_TIMEZONE)).intValue();
>, <Line: +                content.writeByte(timezone < 0 ? 1 : 0);
>, <Line: +                content.writeShort(Math.abs(timezone) / 60);
>, <Line: +                return encodeContent(CityeasyProtocolDecoder.MSG_TIMEZONE, content);
>, <Line: +        }
>, <Line: +        return null;
>, <Line: +    }
>, <Line: +}
>]
[]