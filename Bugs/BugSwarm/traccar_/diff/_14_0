[<Line: + * Copyright 2013 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
>, <Line: +import java.nio.charset.StandardCharsets;
>, <Line: +    private static final int DEFAULT_SELECTOR_D = 0x0002fC;
>, <Line: +    private static final int DEFAULT_SELECTOR_E = 0x007ffc;
>, <Line: +    private void decodeD(Position position, ChannelBuffer buf, int selector, int event) {
>, <Line: +            getLastLocation(position, null);
>, <Line: +    }
>, <Line: +    private void decodeE(Position position, ChannelBuffer buf, int selector) {
>, <Line: +        if ((selector & 0x0008) != 0) {
>, <Line: +            position.set("tachographEvent", buf.readUnsignedShort());
>, <Line: +        }
>, <Line: +        if ((selector & 0x0004) != 0) {
>, <Line: +            getLastLocation(position, new Date(buf.readUnsignedInt() * 1000));
>, <Line: +        } else {
>, <Line: +            getLastLocation(position, null);
>, <Line: +        }
>, <Line: +        if ((selector & 0x0010) != 0) {
>, <Line: +            String time = buf.readUnsignedByte() + "s " + buf.readUnsignedByte() + "m " + buf.readUnsignedByte() + "h "
>, <Line: +                    + buf.readUnsignedByte() + "M " + buf.readUnsignedByte() + "D " + buf.readUnsignedByte() + "Y "
>, <Line: +                    + buf.readByte() + "m " + buf.readByte() + "h";
>, <Line: +            position.set("tachographTime", time);
>, <Line: +        }
>, <Line: +        position.set("workState", buf.readUnsignedByte());
>, <Line: +        position.set("driver1State", buf.readUnsignedByte());
>, <Line: +        position.set("driver2State", buf.readUnsignedByte());
>, <Line: +        if ((selector & 0x0020) != 0) {
>, <Line: +            position.set("tachographStatus", buf.readUnsignedByte());
>, <Line: +        }
>, <Line: +        if ((selector & 0x0040) != 0) {
>, <Line: +            position.set(Position.KEY_OBD_SPEED, buf.readUnsignedShort() / 256.0);
>, <Line: +        }
>, <Line: +        if ((selector & 0x0080) != 0) {
>, <Line: +            position.set(Position.KEY_OBD_ODOMETER, buf.readUnsignedInt() * 5);
>, <Line: +        }
>, <Line: +        if ((selector & 0x0100) != 0) {
>, <Line: +            position.set(Position.KEY_TRIP_ODOMETER, buf.readUnsignedInt() * 5);
>, <Line: +        }
>, <Line: +        if ((selector & 0x8000) != 0) {
>, <Line: +            position.set("kFactor", buf.readUnsignedShort() * 0.001 + " pulses/m");
>, <Line: +        }
>, <Line: +        if ((selector & 0x0200) != 0) {
>, <Line: +            position.set(Position.KEY_RPM, buf.readUnsignedShort() * 0.125);
>, <Line: +        }
>, <Line: +        if ((selector & 0x0400) != 0) {
>, <Line: +            position.set("extraInfo", buf.readUnsignedShort());
>, <Line: +        }
>, <Line: +        if ((selector & 0x0800) != 0) {
>, <Line: +            position.set(Position.KEY_VIN, buf.readBytes(18).toString(StandardCharsets.US_ASCII).trim());
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
>, <Line: +        ChannelBuffer buf = (ChannelBuffer) msg;
>, <Line: +        char protocol = (char) buf.readByte();
>, <Line: +        int version = buf.readUnsignedByte();
>, <Line: +        String imei;
>, <Line: +        if ((version & 0x80) != 0) {
>, <Line: +            imei = String.valueOf((buf.readUnsignedInt() << (3 * 8)) | buf.readUnsignedMedium());
>, <Line: +        } else {
>, <Line: +            imei = String.valueOf(imeiFromUnitId(buf.readUnsignedMedium()));
>, <Line: +        }
>, <Line: +        buf.readUnsignedShort(); // length
>, <Line: +        int selector = DEFAULT_SELECTOR_D;
>, <Line: +        if (protocol == 'E') {
>, <Line: +            selector = DEFAULT_SELECTOR_E;
>, <Line: +        }
>, <Line: +        if ((version & 0x40) != 0) {
>, <Line: +            selector = buf.readUnsignedMedium();
>, <Line: +        }
>, <Line: +        Position position = new Position();
>, <Line: +        position.setProtocol(getProtocolName());
>, <Line: +        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
>, <Line: +        if (deviceSession == null) {
>, <Line: +            return null;
>, <Line: +        }
>, <Line: +        position.setDeviceId(deviceSession.getDeviceId());
>, <Line: +        int event = buf.readUnsignedByte();
>, <Line: +        position.set(Position.KEY_EVENT, event);
>, <Line: +        position.set("eventInfo", buf.readUnsignedByte());
>, <Line: +        if (protocol == 'D') {
>, <Line: +            decodeD(position, buf, selector, event);
>, <Line: +        } else if (protocol == 'E') {
>, <Line: +            decodeE(position, buf, selector);
>, <Line: +        } else {
>, <Line: +            return null;
>, <Line: +        }
>]
[<Line: - * Copyright 2013 - 2015 Anton Tananaev (anton.tananaev@gmail.com)
>, <Line: -    private static final int DEFAULT_SELECTOR = 0x0002FC;
>, <Line: -    @Override
>, <Line: -    protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
>, <Line: -        ChannelBuffer buf = (ChannelBuffer) msg;
>, <Line: -        buf.readUnsignedByte(); // marker
>, <Line: -        int version = buf.readUnsignedByte();
>, <Line: -        String imei;
>, <Line: -        if ((version & 0x80) != 0) {
>, <Line: -            imei = String.valueOf((buf.readUnsignedInt() << (3 * 8)) | buf.readUnsignedMedium());
>, <Line: -        } else {
>, <Line: -            imei = String.valueOf(imeiFromUnitId(buf.readUnsignedMedium()));
>, <Line: -        }
>, <Line: -        buf.readUnsignedShort(); // length
>, <Line: -        int selector = DEFAULT_SELECTOR;
>, <Line: -        if ((version & 0x40) != 0) {
>, <Line: -            selector = buf.readUnsignedMedium();
>, <Line: -        }
>, <Line: -        Position position = new Position();
>, <Line: -        position.setProtocol(getProtocolName());
>, <Line: -        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
>, <Line: -        if (deviceSession == null) {
>, <Line: -            return null;
>, <Line: -        }
>, <Line: -        position.setDeviceId(deviceSession.getDeviceId());
>, <Line: -        int event = buf.readUnsignedByte();
>, <Line: -        position.set(Position.KEY_EVENT, event);
>, <Line: -        position.set("eventInfo", buf.readUnsignedByte());
>, <Line: -            return null; // no location data
>]