[<Line: +import json
>, <Line: +import requests
>, <Line: +from spamhandling import *
>, <Line: +from chatcommunicate import *
>, <Line: +from datahandling import *
>, <Line: +from parsing import get_user_from_url
>, <Line: +class BodyFetcher:
>, <Line: +    queue = {}
>, <Line: +    specialCases = {"stackoverflow.com" : 5, "serverfault.com" : 5, "superuser.com" : 5}
>, <Line: +    def addToQueue(self, post):
>, <Line: +        d=json.loads(json.loads(post)["data"])
>, <Line: +        sitebase = d["siteBaseHostAddress"]
>, <Line: +        postid = d["id"]
>, <Line: +        if sitebase in self.queue:
>, <Line: +            self.queue[sitebase].append(postid)
>, <Line: +        else:
>, <Line: +            self.queue[sitebase] = [postid]
>, <Line: +        print self.queue
>, <Line: +        self.checkQueue()
>, <Line: +    def checkQueue(self):
>, <Line: +        for site, values in self.queue.iteritems():
>, <Line: +            if site in self.specialCases:
>, <Line: +                if len(self.queue[site]) >= self.specialCases[site]:
>, <Line: +                    print "site " + site + " met special case quota, fetching..."
>, <Line: +                    self.makeApiCallForSite(site)
>, <Line: +                    return
>, <Line: +        # if we don't have any sites with their queue filled, take the first one without a special case
>, <Line: +        for site, values in self.queue.iteritems():
>, <Line: +            if site not in self.specialCases:
>, <Line: +                self.makeApiCallForSite(site)
>, <Line: +                return
>, <Line: +    def makeApiCallForSite(self, site):
>, <Line: +        posts = self.queue.pop(site)
>, <Line: +        url = "http://api.stackexchange.com/2.2/questions/" + ";".join(str(x) for x in posts)  + "?site=" + site + "&filter=!-Kh)95tdb6R0joni_wabz(1g(16eESDja&key=IAkbitmze4B8KpacUfLqkw(("
>, <Line: +        response = requests.get(url).json()
>, <Line: +        for post in response["items"]:
>, <Line: +            result = FindSpam.testbody(post["body"],site)
>, <Line: +            if result != []:
>, <Line: +                try:
>, <Line: +                    reason = ", ".join(result)
>, <Line: +                    s="[ [SmokeDetector](https://github.com/Charcoal-SE/SmokeDetector) ] %s: [%s](%s) by [%s](%s) on `%s`" % \
>, <Line: +                      (reason,post["title"].strip(), post["link"],post["owner"]["display_name"].strip(), post["owner"]["link"], site)
>, <Line: +                    print GlobalVars.parser.unescape(s).encode('ascii',errors='replace')
>, <Line: +                    if time.time() >= GlobalVars.blockedTime:
>, <Line: +                        GlobalVars.charcoal_hq.send_message(s)
>, <Line: +                        GlobalVars.tavern_on_the_meta.send_message(s)
>, <Line: +                        for specialroom in GlobalVars.specialrooms:
>, <Line: +                            sites = specialroom["sites"]
>, <Line: +                            if site in sites and reason not in specialroom["unwantedReasons"]:
>, <Line: +                                specialroom["room"].send_message(s)
>, <Line: +                except:
>, <Line: +                    print "NOP"
>]
[]