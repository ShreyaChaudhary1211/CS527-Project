[<Line: +def check_if_spam(title, body, user_name, user_url, post_site, post_id, is_answer):
>, <Line: +    test = FindSpam.test_post(title, body, user_name, post_site, is_answer)
>, <Line: +            return False, None # Don't repost. Reddit will hate you.
>, <Line: +        return True, test
>, <Line: +    return False, None
>, <Line: +def handle_spam(title, poster, site, post_url, poster_url, post_id, reasons):
>, <Line: +    reason = ", ".join(reasons)
>, <Line: +    if len(reasons) == 1 and ("All-caps title" in reasons or "Repeating characters" in reasons):
>, <Line: +def handle_spam_json(data, reason):
>, <Line: +        handle_spam(title_to_post, poster, site, url, poster_url, post_id, reason)
>]
[<Line: -def get_spam_reasons(title, body, user_name, site, is_answer):
>, <Line: -    return FindSpam.test_post(title, body, user_name, site, is_answer)
>, <Line: -def check_if_spam(title, body, user_name, user_url, post_site, post_id, is_answer):
>, <Line: -    test = get_spam_reasons(title, body, user_name, post_site, is_answer)
>, <Line: -            return False # Don't repost. Reddit will hate you.
>, <Line: -        return True
>, <Line: -    return False
>, <Line: -def handle_spam(title, body, poster, site, post_url, poster_url, post_id, is_answer):
>, <Line: -    test = get_spam_reasons(title, body, poster, site, is_answer)
>, <Line: -    reason = ", ".join(test)
>, <Line: -    if len(test) == 1 and ("All-caps title" in test or "Repeating characters" in test):
>, <Line: -def handle_spam_json(data):
>, <Line: -        handle_spam(title_to_post, None, poster, site, url, poster_url, post_id, False)
>]