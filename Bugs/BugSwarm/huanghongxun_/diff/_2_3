[<Line: +import java.util.Arrays;
>, <Line: +                        String libURL = l.getDownloadInfo().getUrl(service.getDownloadType());
>, <Line: +            @Override
>, <Line: +            public Collection<Task> getDependTasks() {
>, <Line: +                return Arrays.asList(downloadMinecraftVersionJson(id));
>, <Line: +            }
>, <Line: +                if (!areDependTasksSucceeded) {
>, <Line: +                    FileUtils.deleteDirectory(vpath);
>, <Line: +                    throw new RuntimeException("Cannot continue because of download failing.");
>, <Line: +                }
>, <Line: +                try {
>, <Line: +                    MinecraftVersion mv = C.GSON.fromJson(FileUtils.readFileToStringQuietly(new File(vpath, id + ".json")), MinecraftVersion.class);
>, <Line: +                    if (mv == null)
>, <Line: +                        throw new JsonSyntaxException("incorrect version");
>, <Line: +                    afters.add(downloadMinecraftJar(mv, mvj));
>, <Line: +                } catch (JsonSyntaxException ex) {
>, <Line: +                    HMCLog.err("Failed to parse minecraft version json.", ex);
>, <Line: +                    FileUtils.deleteDirectory(vpath);
>, <Line: +                }
>, <Line: +    public Task downloadMinecraftJar(MinecraftVersion mv, File mvj) {
>, <Line: +        return new FileDownloadTask(i.getUrl(service.getDownloadType()), mvj, i.sha1)
>, <Line: +            .setFailedCallbackReturnsNewURL(new DownloadTypeSwitcher(mv.id + "/" + mv.id + ".jar")).setTag(mv.id + ".jar");
>, <Line: +    public Task downloadMinecraftVersionJson(String id) {
>, <Line: +        return new TaskInfo("Download Minecraft Json") {
>, <Line: +            @Override
>, <Line: +            public void executeTask() throws Throwable {
>, <Line: +                List<MinecraftRemoteVersion> versions = MinecraftRemoteVersions.getRemoteVersions(service.getDownloadType()).justDo();
>, <Line: +                MinecraftRemoteVersion currentVersion = null;
>, <Line: +                for (MinecraftRemoteVersion v : versions)
>, <Line: +                    if (id.equals(v.id)) {
>, <Line: +                        currentVersion = v;
>, <Line: +                        break;
>, <Line: +                    }
>, <Line: +                if (currentVersion == null)
>, <Line: +                    throw new RuntimeException("Cannot find version: " + id + " in remote repository.");
>, <Line: +                String jsonURL = currentVersion.getUrl(service.getDownloadType());
>, <Line: +                File vpath = new File(service.baseDirectory(), "versions/" + id);
>, <Line: +                File mvt = new File(vpath, id + ".json");
>, <Line: +                if (!vpath.exists() && !vpath.mkdirs())
>, <Line: +                    HMCLog.warn("Failed to make directories: " + vpath);
>, <Line: +                if (mvt.exists() && !mvt.delete())
>, <Line: +                    HMCLog.warn("Failed to delete " + mvt);
>, <Line: +                afters.add(new FileDownloadTask(jsonURL, mvt).setTag(id + ".json"));
>, <Line: +            }
>, <Line: +            Collection<Task> afters = new HashSet<>();
>, <Line: +            @Override
>, <Line: +            public Collection<Task> getAfterTasks() {
>, <Line: +                return afters;
>, <Line: +            }
>, <Line: +        };
>]
[<Line: -import org.jackhuang.hellominecraft.util.tasks.TaskWindow;
>, <Line: -import org.jackhuang.hellominecraft.util.tasks.DoingDoneListener;
>, <Line: -                        String libURL = service.getDownloadType().getProvider().getParsedLibraryDownloadURL(l.getDownloadInfo().getUrl(service.getDownloadType()));
>, <Line: -                List<MinecraftRemoteVersion> versions = MinecraftRemoteVersions.getRemoteVersions(service.getDownloadType()).justDo();
>, <Line: -                MinecraftRemoteVersion currentVersion = null;
>, <Line: -                for (MinecraftRemoteVersion v : versions)
>, <Line: -                    if (id.equals(v.id)) {
>, <Line: -                        currentVersion = v;
>, <Line: -                        break;
>, <Line: -                    }
>, <Line: -                if (currentVersion == null)
>, <Line: -                    throw new RuntimeException("Cannot find version: " + id + " in remote repository.");
>, <Line: -                String jsonURL = currentVersion.getUrl(service.getDownloadType());
>, <Line: -                File mvt = new File(vpath, id + ".json");
>, <Line: -                if (!vpath.exists() && !vpath.mkdirs())
>, <Line: -                    HMCLog.warn("Failed to make directories: " + vpath);
>, <Line: -                if (mvt.exists() && !mvt.delete())
>, <Line: -                    HMCLog.warn("Failed to delete " + mvt);
>, <Line: -                Task t = new FileDownloadTask(jsonURL, mvt).setTag(id + ".json");
>, <Line: -                t.addTaskListener(new DoingDoneListener<Task>() {
>, <Line: -                    @Override
>, <Line: -                    public void onDone(Task k, Collection<Task> taskCollection) {
>, <Line: -                        MinecraftVersion mv;
>, <Line: -                        try {
>, <Line: -                            mv = C.GSON.fromJson(FileUtils.readFileToStringQuietly(mvt), MinecraftVersion.class);
>, <Line: -                            if (mv == null)
>, <Line: -                                throw new JsonSyntaxException("incorrect version");
>, <Line: -                        } catch (JsonSyntaxException ex) {
>, <Line: -                            HMCLog.err("Failed to parse minecraft version json.", ex);
>, <Line: -                            onFailed(k);
>, <Line: -                            return;
>, <Line: -                        }
>, <Line: -                        GameDownloadInfo i = mv.getClientDownloadInfo();
>, <Line: -                        taskCollection.add(new FileDownloadTask(i.getUrl(service.getDownloadType()), mvj, i.sha1)
>, <Line: -                            .setFailedCallbackReturnsNewURL(new DownloadTypeSwitcher(id + "/" + id + ".jar")).setTag(id + ".jar"));
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public void onDoing(Task k, Collection<Task> taskCollection) {
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public void onFailed(Task k) {
>, <Line: -                        FileUtils.deleteDirectoryQuietly(vpath);
>, <Line: -                    }
>, <Line: -                });
>, <Line: -                afters.add(t);
>, <Line: -    @Override
>, <Line: -    public boolean downloadMinecraftJar(String id) {
>, <Line: -        String vurl = service.getDownloadType().getProvider().getVersionsDownloadURL() + id + "/";
>, <Line: -        File vpath = new File(service.baseDirectory(), "versions/" + id);
>, <Line: -        File mvv = new File(vpath, id + ".jar"), moved = null;
>, <Line: -        if (mvv.exists()) {
>, <Line: -            moved = new File(vpath, id + "-renamed.jar");
>, <Line: -            if (!mvv.renameTo(moved))
>, <Line: -                HMCLog.warn("Failed to rename " + mvv + " to " + moved);
>, <Line: -        }
>, <Line: -        File mvt = new File(vpath, id + ".jar");
>, <Line: -        if (!vpath.exists() && !vpath.mkdirs())
>, <Line: -            HMCLog.warn("Failed to make version folder " + vpath);
>, <Line: -        if (TaskWindow.factory()
>, <Line: -            .append(new FileDownloadTask(vurl + id + ".jar", mvt).setFailedCallbackReturnsNewURL(new DownloadTypeSwitcher(id + "/" + id + ".jar")).setTag(id + ".jar"))
>, <Line: -            .create()) {
>, <Line: -            if (moved != null && moved.exists() && !moved.delete())
>, <Line: -                HMCLog.warn("Failed to delete " + moved);
>, <Line: -            return true;
>, <Line: -        } else {
>, <Line: -            if (mvt.exists() && !mvt.delete())
>, <Line: -                HMCLog.warn("Failed to delete game jar " + mvt);
>, <Line: -            if (moved != null && moved.exists() && !moved.renameTo(mvt))
>, <Line: -                HMCLog.warn("Failed to rename " + moved + " to " + mvt);
>, <Line: -            return false;
>, <Line: -        }
>, <Line: -    }
>, <Line: -    public Task downloadMinecraftJarTo(MinecraftVersion mv, File mvt) {
>, <Line: -        String jar = mv.jar == null ? mv.id : mv.jar;
>, <Line: -        return new FileDownloadTask(i.getUrl(service.getDownloadType(), true), mvt, i.sha1).setTag(jar + ".jar");
>, <Line: -    public boolean downloadMinecraftVersionJson(String id) {
>, <Line: -        String vurl = service.getDownloadType().getProvider().getVersionsDownloadURL() + id + "/";
>, <Line: -        File vpath = new File(service.baseDirectory(), "versions/" + id);
>, <Line: -        File mvv = new File(vpath, id + ".json"), moved = null;
>, <Line: -        if (mvv.exists()) {
>, <Line: -            moved = new File(vpath, id + "-renamed.json");
>, <Line: -            if (!mvv.renameTo(moved))
>, <Line: -                HMCLog.warn("Failed to rename " + mvv + " to " + moved);
>, <Line: -        }
>, <Line: -        File mvt = new File(vpath, id + ".json");
>, <Line: -        if (!vpath.exists() && !vpath.mkdirs())
>, <Line: -            HMCLog.warn("Failed to make version folder " + vpath);
>, <Line: -        if (TaskWindow.factory()
>, <Line: -            .append(new FileDownloadTask(vurl + id + ".json", mvt).setTag(id + ".json"))
>, <Line: -            .create()) {
>, <Line: -            if (moved != null && moved.exists() && !moved.delete())
>, <Line: -                HMCLog.warn("Failed to delete " + moved);
>, <Line: -            return true;
>, <Line: -        } else {
>, <Line: -            if (mvt.exists() && !mvt.delete())
>, <Line: -                HMCLog.warn("Failed to delete minecraft version json" + mvt);
>, <Line: -            if (moved != null && moved.exists() && !moved.renameTo(mvt))
>, <Line: -                HMCLog.warn("Failed to rename " + moved + " to " + mvt);
>, <Line: -            return false;
>, <Line: -        }
>]