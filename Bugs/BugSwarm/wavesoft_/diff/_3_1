[<Line: +from tests import temp_hexfile
>, <Line: +  def test_load_creates_correct_single_memblock(self):
>, <Line: +    offset = "0100"
>, <Line: +    data = "214601360121470136007EFE09D21901"
>, <Line: +    checksum = "40"
>, <Line: +    hexfile = temp_hexfile(":10" + offset + "00" + data + checksum + "\n")
>, <Line: +    cchex = CCHEXFile()
>, <Line: +    cchex.load(hexfile)
>, <Line: +    assert len(cchex.memBlocks) == 1
>, <Line: +    memBlock = cchex.memBlocks[0]
>, <Line: +    assert memBlock.addr == int(offset, 16)
>, <Line: +    assert memBlock.bytes == unhexlify(data.encode(encoding='UTF-8'))
>, <Line: +  def test_load_creates_correct_noncontinuous_memblocks(self):
>, <Line: +    lines = [
>, <Line: +      ":10010000" + "7F" * 16 + "FF\n",
>, <Line: +      ":10050000" + "3D" * 16 + "1B\n",
>, <Line: +    ]
>, <Line: +    hexfile = temp_hexfile("".join(lines))
>, <Line: +    cchex = CCHEXFile()
>, <Line: +    cchex.load(hexfile)
>, <Line: +    assert len(cchex.memBlocks) == 2
>, <Line: +    assert cchex.memBlocks[0].addr == 0x0100
>, <Line: +    assert cchex.memBlocks[0].bytes == b"\x7F" * 16
>, <Line: +    assert cchex.memBlocks[1].addr == 0x0500
>, <Line: +    assert cchex.memBlocks[1].bytes == b"\x3D" * 16>]
[<Line: -from tempfile import NamedTemporaryFile
>, <Line: -def temp_hexfile(contents):
>, <Line: -    hexfile = NamedTemporaryFile(suffix='.hex')
>, <Line: -    hexfile.write(contents.encode(encoding='UTF-8'))
>, <Line: -    hexfile.seek(0)
>, <Line: -    return hexfile
>, <Line: -    def test_load_creates_correct_single_memblock(self):
>, <Line: -        offset = "0100"
>, <Line: -        data = "214601360121470136007EFE09D21901"
>, <Line: -        checksum = "40"
>, <Line: -        with temp_hexfile(":10" + offset + "00" + data + checksum + "\n") as hexfile:
>, <Line: -            cchex = CCHEXFile()
>, <Line: -            cchex.load(hexfile.name)
>, <Line: -            assert len(cchex.memBlocks) == 1
>, <Line: -            memBlock = cchex.memBlocks[0]
>, <Line: -            assert memBlock.addr == int(offset, 16)
>, <Line: -            assert memBlock.bytes == unhexlify(data.encode(encoding='UTF-8'))
>, <Line: -    def test_load_creates_correct_noncontinuous_memblocks(self):
>, <Line: -        lines = [
>, <Line: -            ":10010000" + "7F" * 16 + "FF\n",
>, <Line: -            ":10050000" + "3D" * 16 + "1B\n",
>, <Line: -        ]
>, <Line: -        with temp_hexfile("".join(lines)) as hexfile:
>, <Line: -            cchex = CCHEXFile()
>, <Line: -            cchex.load(hexfile.name)
>, <Line: -            assert len(cchex.memBlocks) == 2
>, <Line: -            assert cchex.memBlocks[0].addr == 0x0100
>, <Line: -            assert cchex.memBlocks[0].bytes == b"\x7F" * 16
>, <Line: -            assert cchex.memBlocks[1].addr == 0x0500
>, <Line: -            assert cchex.memBlocks[1].bytes == b"\x3D" * 16
>]