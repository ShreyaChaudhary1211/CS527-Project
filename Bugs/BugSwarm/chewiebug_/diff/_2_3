[<Line: +import java.io.LineNumberReader;
>, <Line: +        EXCLUDE_STRINGS.add("         [Termination Attempts");
>, <Line: +        EXCLUDE_STRINGS.add("      [Humongous");
>, <Line: +        try (LineNumberReader in = this.in) {
>, <Line: +                parsePosition.setLineNumber(this.in.getLineNumber());
>, <Line: +                            parseDetails(in, model, parsePosition, gcEvent, beginningOfLine);
>, <Line: +                        skipLinesRespectingConcurrentEvents(in, model, parsePosition, HEAP_STRINGS);
>, <Line: +    private void parseDetails(LineNumberReader in,
>, <Line: +            pos.setLineNumber(in.getLineNumber());
>, <Line: +            if (LOG.isLoggable(Level.FINE)) LOG.fine("line " + in.getLineNumber() + ": no memory information found (" + event.toString() + ")");
>, <Line: +    private void skipLinesRespectingConcurrentEvents(LineNumberReader in, GCModel model, ParseInformation pos, List<String> lineStartStrings) throws IOException {
>, <Line: +            pos.setLineNumber(in.getLineNumber());
>]
[<Line: -        EXCLUDE_STRINGS.add("      [Humongous Reclaim");
>, <Line: -        try (BufferedReader in = this.in) {
>, <Line: -            int lineNumber = 0;
>, <Line: -                ++lineNumber;
>, <Line: -                parsePosition.setLineNumber(lineNumber);
>, <Line: -                            lineNumber = parseDetails(in, model, parsePosition, lineNumber, gcEvent, beginningOfLine);
>, <Line: -                        lineNumber = skipLinesRespectingConcurrentEvents(in, model, parsePosition, lineNumber, HEAP_STRINGS);
>, <Line: -     * @param lineNumber line number of last line read
>, <Line: -     * @return line number of last line read in this method
>, <Line: -    private int parseDetails(BufferedReader in,
>, <Line: -            int lineNumber,
>, <Line: -            ++lineNumber;
>, <Line: -            pos.setLineNumber(lineNumber);
>, <Line: -            if (LOG.isLoggable(Level.FINE)) LOG.fine("line " + lineNumber + ": no memory information found (" + event.toString() + ")");
>, <Line: -        return lineNumber;
>, <Line: -     * @param lineNumber current line number
>, <Line: -     * @return line number including lines read in this method
>, <Line: -    private int skipLinesRespectingConcurrentEvents(BufferedReader in, GCModel model, ParseInformation pos, int lineNumber, List<String> lineStartStrings) throws IOException {
>, <Line: -            ++lineNumber;
>, <Line: -            pos.setLineNumber(lineNumber);
>, <Line: -        return --lineNumber;
>]