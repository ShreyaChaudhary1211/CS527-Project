[<Line: +import retrofit2.Retrofit;
>, <Line: +import java.io.IOException;
>, <Line: +import java.util.List;
>, <Line: +import retrofit2.http.HTTP;
>, <Line: +import retrofit2.http.Path;
>, <Line: +import retrofit2.Response;
>, <Line: +        @Headers("Content-Type: application/json; charset=utf-8")
>, <Line: +        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys")
>, <Line: +        Call<ResponseBody> listKeys(@Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);
>, <Line: +     * Asynchronously creates a new storage account with the specified parameters. If an account is already created and subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and subsequent create or update request is issued with exact same set of properties, the request will succeed.
>, <Line: +     * Asynchronously creates a new storage account with the specified parameters. If an account is already created and subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and subsequent create or update request is issued with exact same set of properties, the request will succeed.
>, <Line: +     * Asynchronously creates a new storage account with the specified parameters. If an account is already created and subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and subsequent create or update request is issued with exact same set of properties, the request will succeed.
>, <Line: +     * Asynchronously creates a new storage account with the specified parameters. If an account is already created and subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and subsequent create or update request is issued with exact same set of properties, the request will succeed.
>, <Line: +                .register(200, new TypeToken<StorageAccountInner>() { }.getType())
>, <Line: +     * The update operation can be used to update the account type, encryption, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account and. replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value may be set. Update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change storage account keys, use the regenerate keys operation.  The location and name of the storage account cannot be changed after creation.
>, <Line: +     * @param parameters The parameters to provide for the updated account.
>, <Line: +     * The update operation can be used to update the account type, encryption, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account and. replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value may be set. Update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change storage account keys, use the regenerate keys operation.  The location and name of the storage account cannot be changed after creation.
>, <Line: +     * @param parameters The parameters to provide for the updated account.
>, <Line: +     * Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: +     * @return the List&lt;StorageAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
>, <Line: +    public ServiceResponse<List<StorageAccountInner>> list() throws CloudException, IOException, IllegalArgumentException {
>, <Line: +        Call<ResponseBody> call = service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: +        ServiceResponse<PageImpl<StorageAccountInner>> response = listDelegate(call.execute());
>, <Line: +        List<StorageAccountInner> result = response.getBody().getItems();
>, <Line: +        return new ServiceResponse<>(result, response.getResponse());
>, <Line: +     * Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: +    public ServiceCall listAsync(final ServiceCallback<List<StorageAccountInner>> serviceCallback) throws IllegalArgumentException {
>, <Line: +        Call<ResponseBody> call = service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: +        call.enqueue(new ServiceResponseCallback<List<StorageAccountInner>>(serviceCallback) {
>, <Line: +                    ServiceResponse<PageImpl<StorageAccountInner>> result = listDelegate(response);
>, <Line: +                    serviceCallback.success(new ServiceResponse<>(result.getBody().getItems(), result.getResponse()));
>, <Line: +    private ServiceResponse<PageImpl<StorageAccountInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: +        return new AzureServiceResponseBuilder<PageImpl<StorageAccountInner>, CloudException>(this.client.restClient().mapperAdapter())
>, <Line: +                .register(200, new TypeToken<PageImpl<StorageAccountInner>>() { }.getType())
>, <Line: +     * Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: +     * @param resourceGroupName The name of the resource group within the user's subscription.
>, <Line: +    public ServiceResponse<List<StorageAccountInner>> listByResourceGroup(String resourceGroupName) throws CloudException, IOException, IllegalArgumentException {
>, <Line: +        if (resourceGroupName == null) {
>, <Line: +            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
>, <Line: +        }
>, <Line: +        Call<ResponseBody> call = service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: +        ServiceResponse<PageImpl<StorageAccountInner>> response = listByResourceGroupDelegate(call.execute());
>, <Line: +     * Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: +     * @param resourceGroupName The name of the resource group within the user's subscription.
>, <Line: +    public ServiceCall listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<StorageAccountInner>> serviceCallback) throws IllegalArgumentException {
>, <Line: +        if (resourceGroupName == null) {
>, <Line: +            serviceCallback.failure(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
>, <Line: +            return null;
>, <Line: +        }
>, <Line: +        Call<ResponseBody> call = service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: +                    ServiceResponse<PageImpl<StorageAccountInner>> result = listByResourceGroupDelegate(response);
>, <Line: +    private ServiceResponse<PageImpl<StorageAccountInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: +     * Lists the access keys for the specified storage account.
>, <Line: +     * @param resourceGroupName The name of the resource group.
>, <Line: +     * @param accountName The name of the storage account.
>, <Line: +     * @return the StorageAccountListKeysResultInner object wrapped in {@link ServiceResponse} if successful.
>, <Line: +    public ServiceResponse<StorageAccountListKeysResultInner> listKeys(String resourceGroupName, String accountName) throws CloudException, IOException, IllegalArgumentException {
>, <Line: +        if (accountName == null) {
>, <Line: +            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
>, <Line: +        }
>, <Line: +        Call<ResponseBody> call = service.listKeys(resourceGroupName, accountName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: +        return listKeysDelegate(call.execute());
>, <Line: +     * Lists the access keys for the specified storage account.
>, <Line: +     * @param resourceGroupName The name of the resource group.
>, <Line: +     * @param accountName The name of the storage account.
>, <Line: +    public ServiceCall listKeysAsync(String resourceGroupName, String accountName, final ServiceCallback<StorageAccountListKeysResultInner> serviceCallback) throws IllegalArgumentException {
>, <Line: +        if (accountName == null) {
>, <Line: +            serviceCallback.failure(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
>, <Line: +            return null;
>, <Line: +        }
>, <Line: +        Call<ResponseBody> call = service.listKeys(resourceGroupName, accountName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: +        call.enqueue(new ServiceResponseCallback<StorageAccountListKeysResultInner>(serviceCallback) {
>, <Line: +                    serviceCallback.success(listKeysDelegate(response));
>, <Line: +    private ServiceResponse<StorageAccountListKeysResultInner> listKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: +        return new AzureServiceResponseBuilder<StorageAccountListKeysResultInner, CloudException>(this.client.restClient().mapperAdapter())
>, <Line: +                .register(200, new TypeToken<StorageAccountListKeysResultInner>() { }.getType())
>, <Line: +     * @return the StorageAccountListKeysResultInner object wrapped in {@link ServiceResponse} if successful.
>, <Line: +    public ServiceResponse<StorageAccountListKeysResultInner> regenerateKey(String resourceGroupName, String accountName, String keyName) throws CloudException, IOException, IllegalArgumentException {
>, <Line: +    public ServiceCall regenerateKeyAsync(String resourceGroupName, String accountName, String keyName, final ServiceCallback<StorageAccountListKeysResultInner> serviceCallback) throws IllegalArgumentException {
>, <Line: +        call.enqueue(new ServiceResponseCallback<StorageAccountListKeysResultInner>(serviceCallback) {
>, <Line: +    private ServiceResponse<StorageAccountListKeysResultInner> regenerateKeyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: +        return new AzureServiceResponseBuilder<StorageAccountListKeysResultInner, CloudException>(this.client.restClient().mapperAdapter())
>, <Line: +                .register(200, new TypeToken<StorageAccountListKeysResultInner>() { }.getType())
>]
[<Line: -import retrofit2.Response;
>, <Line: -import retrofit2.Retrofit;
>, <Line: -import retrofit2.http.HTTP;
>, <Line: -import retrofit2.http.Path;
>, <Line: -import java.io.IOException;
>, <Line: -import java.util.List;
>, <Line: -        @Headers("Content-Type: application/json; charset=utf-8")
>, <Line: -        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys")
>, <Line: -        Call<ResponseBody> listKeys(@Path("resourceGroupName") String resourceGroupName, @Path("accountName") String accountName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);
>, <Line: -        final String type = null;
>, <Line: -        accountName.withType(null);
>, <Line: -        final String type = null;
>, <Line: -        accountName.withType(null);
>, <Line: -        Call<ResponseBody> call = service.checkNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), accountName, this.client.userAgent());
>, <Line: -        final ServiceCall serviceCall = new ServiceCall(call);
>, <Line: -        call.enqueue(new ServiceResponseCallback<CheckNameAvailabilityResultInner>(serviceCallback) {
>, <Line: -            @Override
>, <Line: -            public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
>, <Line: -                try {
>, <Line: -                    serviceCallback.success(checkNameAvailabilityDelegate(response));
>, <Line: -                } catch (CloudException | IOException exception) {
>, <Line: -                    serviceCallback.failure(exception);
>, <Line: -                }
>, <Line: -            }
>, <Line: -        });
>, <Line: -        return serviceCall;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Checks that account name is valid and is not in use.
>, <Line: -     *
>, <Line: -     * @param name the String value
>, <Line: -     * @param type the String value
>, <Line: -     * @throws CloudException exception thrown from REST call
>, <Line: -     * @throws IOException exception thrown from serialization/deserialization
>, <Line: -     * @throws IllegalArgumentException exception thrown from invalid parameters
>, <Line: -     * @return the CheckNameAvailabilityResultInner object wrapped in {@link ServiceResponse} if successful.
>, <Line: -     */
>, <Line: -    public ServiceResponse<CheckNameAvailabilityResultInner> checkNameAvailability(String name, String type) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -        if (this.client.subscriptionId() == null) {
>, <Line: -            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
>, <Line: -        }
>, <Line: -        if (this.client.apiVersion() == null) {
>, <Line: -            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
>, <Line: -        }
>, <Line: -        if (name == null) {
>, <Line: -            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
>, <Line: -        }
>, <Line: -        StorageAccountCheckNameAvailabilityParameters accountName = new StorageAccountCheckNameAvailabilityParameters();
>, <Line: -        accountName.withName(name);
>, <Line: -        accountName.withType(type);
>, <Line: -        Call<ResponseBody> call = service.checkNameAvailability(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), accountName, this.client.userAgent());
>, <Line: -        return checkNameAvailabilityDelegate(call.execute());
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Checks that account name is valid and is not in use.
>, <Line: -     *
>, <Line: -     * @param name the String value
>, <Line: -     * @param type the String value
>, <Line: -     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
>, <Line: -     * @throws IllegalArgumentException thrown if callback is null
>, <Line: -     * @return the {@link Call} object
>, <Line: -     */
>, <Line: -    public ServiceCall checkNameAvailabilityAsync(String name, String type, final ServiceCallback<CheckNameAvailabilityResultInner> serviceCallback) throws IllegalArgumentException {
>, <Line: -        if (serviceCallback == null) {
>, <Line: -            throw new IllegalArgumentException("ServiceCallback is required for async calls.");
>, <Line: -        }
>, <Line: -        if (this.client.subscriptionId() == null) {
>, <Line: -            serviceCallback.failure(new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null."));
>, <Line: -            return null;
>, <Line: -        }
>, <Line: -        if (this.client.apiVersion() == null) {
>, <Line: -            serviceCallback.failure(new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null."));
>, <Line: -            return null;
>, <Line: -        }
>, <Line: -        if (name == null) {
>, <Line: -            serviceCallback.failure(new IllegalArgumentException("Parameter name is required and cannot be null."));
>, <Line: -            return null;
>, <Line: -        }
>, <Line: -        StorageAccountCheckNameAvailabilityParameters accountName = new StorageAccountCheckNameAvailabilityParameters();
>, <Line: -        accountName.withName(name);
>, <Line: -        accountName.withType(type);
>, <Line: -     * Asynchronously creates a new storage account with the specified parameters. Existing accounts cannot be updated with this API and should instead use the Update Storage Account API. If an account is already created and subsequent PUT request is issued with exact same set of properties, then HTTP 200 would be returned.
>, <Line: -     * Asynchronously creates a new storage account with the specified parameters. Existing accounts cannot be updated with this API and should instead use the Update Storage Account API. If an account is already created and subsequent PUT request is issued with exact same set of properties, then HTTP 200 would be returned.
>, <Line: -     * Asynchronously creates a new storage account with the specified parameters. Existing accounts cannot be updated with this API and should instead use the Update Storage Account API. If an account is already created and subsequent PUT request is issued with exact same set of properties, then HTTP 200 would be returned.
>, <Line: -     * Asynchronously creates a new storage account with the specified parameters. Existing accounts cannot be updated with this API and should instead use the Update Storage Account API. If an account is already created and subsequent PUT request is issued with exact same set of properties, then HTTP 200 would be returned.
>, <Line: -                .register(200, new TypeToken<StorageAccountInner>() { }.getType())
>, <Line: -     * Updates the account type or tags for a storage account. It can also be used to add a custom domain (note that custom domains cannot be added via the Create operation). Only one custom domain is supported per storage account. In order to replace a custom domain, the old value must be cleared before a new value may be set. To clear a custom domain, simply update the custom domain with empty string. Then call update again with the new cutsom domain name. The update API can only be used to update one of tags, accountType, or customDomain per call. To update multiple of these properties, call the API multiple times with one change per call. This call does not change the storage keys for the account. If you want to change storage account keys, use the RegenerateKey operation. The location and name of the storage account cannot be changed after creation.
>, <Line: -     * @param parameters The parameters to update on the account. Note that only one property can be changed at a time using this API.
>, <Line: -     * Updates the account type or tags for a storage account. It can also be used to add a custom domain (note that custom domains cannot be added via the Create operation). Only one custom domain is supported per storage account. In order to replace a custom domain, the old value must be cleared before a new value may be set. To clear a custom domain, simply update the custom domain with empty string. Then call update again with the new cutsom domain name. The update API can only be used to update one of tags, accountType, or customDomain per call. To update multiple of these properties, call the API multiple times with one change per call. This call does not change the storage keys for the account. If you want to change storage account keys, use the RegenerateKey operation. The location and name of the storage account cannot be changed after creation.
>, <Line: -     * @param parameters The parameters to update on the account. Note that only one property can be changed at a time using this API.
>, <Line: -     * Lists the access keys for the specified storage account.
>, <Line: -     * @param resourceGroupName The name of the resource group.
>, <Line: -     * @param accountName The name of the storage account.
>, <Line: -     * @return the StorageAccountKeysInner object wrapped in {@link ServiceResponse} if successful.
>, <Line: -    public ServiceResponse<StorageAccountKeysInner> listKeys(String resourceGroupName, String accountName) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -        if (resourceGroupName == null) {
>, <Line: -            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
>, <Line: -        }
>, <Line: -        if (accountName == null) {
>, <Line: -            throw new IllegalArgumentException("Parameter accountName is required and cannot be null.");
>, <Line: -        }
>, <Line: -        Call<ResponseBody> call = service.listKeys(resourceGroupName, accountName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: -        return listKeysDelegate(call.execute());
>, <Line: -     * Lists the access keys for the specified storage account.
>, <Line: -     * @param resourceGroupName The name of the resource group.
>, <Line: -     * @param accountName The name of the storage account.
>, <Line: -    public ServiceCall listKeysAsync(String resourceGroupName, String accountName, final ServiceCallback<StorageAccountKeysInner> serviceCallback) throws IllegalArgumentException {
>, <Line: -        if (resourceGroupName == null) {
>, <Line: -            serviceCallback.failure(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
>, <Line: -            return null;
>, <Line: -        }
>, <Line: -        if (accountName == null) {
>, <Line: -            serviceCallback.failure(new IllegalArgumentException("Parameter accountName is required and cannot be null."));
>, <Line: -            return null;
>, <Line: -        }
>, <Line: -        Call<ResponseBody> call = service.listKeys(resourceGroupName, accountName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: -        call.enqueue(new ServiceResponseCallback<StorageAccountKeysInner>(serviceCallback) {
>, <Line: -                    serviceCallback.success(listKeysDelegate(response));
>, <Line: -    private ServiceResponse<StorageAccountKeysInner> listKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -        return new AzureServiceResponseBuilder<StorageAccountKeysInner, CloudException>(this.client.restClient().mapperAdapter())
>, <Line: -                .register(200, new TypeToken<StorageAccountKeysInner>() { }.getType())
>, <Line: -     * Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: -    public ServiceResponse<List<StorageAccountInner>> list() throws CloudException, IOException, IllegalArgumentException {
>, <Line: -        Call<ResponseBody> call = service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: -        ServiceResponse<PageImpl<StorageAccountInner>> response = listDelegate(call.execute());
>, <Line: -     * Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: -    public ServiceCall listAsync(final ServiceCallback<List<StorageAccountInner>> serviceCallback) throws IllegalArgumentException {
>, <Line: -        Call<ResponseBody> call = service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: -                    ServiceResponse<PageImpl<StorageAccountInner>> result = listDelegate(response);
>, <Line: -    private ServiceResponse<PageImpl<StorageAccountInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -     * Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: -     * @param resourceGroupName The name of the resource group within the user's subscription.
>, <Line: -     * @return the List&lt;StorageAccountInner&gt; object wrapped in {@link ServiceResponse} if successful.
>, <Line: -    public ServiceResponse<List<StorageAccountInner>> listByResourceGroup(String resourceGroupName) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -        Call<ResponseBody> call = service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: -        ServiceResponse<PageImpl<StorageAccountInner>> response = listByResourceGroupDelegate(call.execute());
>, <Line: -        List<StorageAccountInner> result = response.getBody().getItems();
>, <Line: -        return new ServiceResponse<>(result, response.getResponse());
>, <Line: -     * Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
>, <Line: -     * @param resourceGroupName The name of the resource group within the user's subscription.
>, <Line: -    public ServiceCall listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<StorageAccountInner>> serviceCallback) throws IllegalArgumentException {
>, <Line: -        Call<ResponseBody> call = service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
>, <Line: -        call.enqueue(new ServiceResponseCallback<List<StorageAccountInner>>(serviceCallback) {
>, <Line: -                    ServiceResponse<PageImpl<StorageAccountInner>> result = listByResourceGroupDelegate(response);
>, <Line: -                    serviceCallback.success(new ServiceResponse<>(result.getBody().getItems(), result.getResponse()));
>, <Line: -    private ServiceResponse<PageImpl<StorageAccountInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -        return new AzureServiceResponseBuilder<PageImpl<StorageAccountInner>, CloudException>(this.client.restClient().mapperAdapter())
>, <Line: -                .register(200, new TypeToken<PageImpl<StorageAccountInner>>() { }.getType())
>, <Line: -     * @return the StorageAccountKeysInner object wrapped in {@link ServiceResponse} if successful.
>, <Line: -    public ServiceResponse<StorageAccountKeysInner> regenerateKey(String resourceGroupName, String accountName, String keyName) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -    public ServiceCall regenerateKeyAsync(String resourceGroupName, String accountName, String keyName, final ServiceCallback<StorageAccountKeysInner> serviceCallback) throws IllegalArgumentException {
>, <Line: -        call.enqueue(new ServiceResponseCallback<StorageAccountKeysInner>(serviceCallback) {
>, <Line: -    private ServiceResponse<StorageAccountKeysInner> regenerateKeyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
>, <Line: -        return new AzureServiceResponseBuilder<StorageAccountKeysInner, CloudException>(this.client.restClient().mapperAdapter())
>, <Line: -                .register(200, new TypeToken<StorageAccountKeysInner>() { }.getType())
>]