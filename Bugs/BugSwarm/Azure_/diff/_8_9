[<Line: +public class CheckNameAvailabilityResult {
>, <Line: +    CheckNameAvailabilityResult(CheckNameAvailabilityResultInner inner) {
>, <Line: +        this.inner = inner;
>]
[<Line: -public enum CheckNameAvailabilityResult {
>, <Line: -    /** The name is available. */
>, <Line: -    AVAILABLE(true),
>, <Line: -    /** THe name is not available. */
>, <Line: -    UNAVAILABLE(false);
>, <Line: -    CheckNameAvailabilityResult(boolean nameAvailable) {
>, <Line: -        this.inner = new CheckNameAvailabilityResultInner();
>, <Line: -        this.inner.withNameAvailable(nameAvailable);
>, <Line: -    /**
>, <Line: -     * Set the reason of the unavailable name.
>, <Line: -     *
>, <Line: -     * @param reason the reason that a storage account name could not be used. The
>, <Line: -     * Reason element is only returned if NameAvailable is false. Possible
>, <Line: -     * values include: 'AccountNameInvalid', 'AlreadyExists'.
>, <Line: -     * @return the result itself
>, <Line: -     */
>, <Line: -    CheckNameAvailabilityResult withReason(Reason reason) {
>, <Line: -        this.inner.withReason(reason);
>, <Line: -        return this;
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Set the message from Azure explaining why the name is unavailable.
>, <Line: -     *
>, <Line: -     * @param message the message from Azure storage
>, <Line: -     * @return the result itself
>, <Line: -     */
>, <Line: -    CheckNameAvailabilityResult withMessage(String message) {
>, <Line: -        this.inner.withMessage(message);
>, <Line: -        return this;
>, <Line: -    }
>]