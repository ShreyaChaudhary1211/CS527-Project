[<Line: +import static org.stagemonitor.core.metrics.metrics2.MetricName.name;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.Map;
>, <Line: +import org.stagemonitor.core.metrics.metrics2.MetricName;
>, <Line: +		thresholdMonitoringReporter = ThresholdMonitoringReporter.forRegistry(new Metric2Registry())
>, <Line: +				.alertingPlugin(alertingPlugin)
>, <Line: +				.alertSender(alertSender)
>, <Line: +				.incidentRepository(incidentRepository)
>, <Line: +				.measurementSession(measurementSession)
>, <Line: +				.build();
>, <Line: +		assertEquals("test_timer,signature=timer3 mean >= 5.0", result.getFailingExpression());
>, <Line: +		assertEquals(6.0, result.getCurrentValue(), 0);
>, <Line: +		check.setTarget(name("test_timer").build());
>, <Line: +		final Map<MetricName, Timer> timers = new HashMap<>();
>, <Line: +		timers.put(name("test_timer").tag("signature", "timer1").build(), timer(TimeUnit.MILLISECONDS.toNanos(timer1Mean)));
>, <Line: +		timers.put(name("test_timer").tag("signature", "timer2").build(), timer(TimeUnit.MILLISECONDS.toNanos(timer2Mean)));
>, <Line: +		timers.put(name("test_timer").tag("signature", "timer3").build(), timer(TimeUnit.MILLISECONDS.toNanos(timer3Mean)));
>, <Line: +		timers.put(name("test_other_timer").tag("signature", "timer4").build(), timer(TimeUnit.MILLISECONDS.toNanos(999)));
>, <Line: +		thresholdMonitoringReporter.reportMetrics(
>, <Line: +				new HashMap<>(),
>, <Line: +				new HashMap<>(),
>, <Line: +				new HashMap<>(),
>, <Line: +				new HashMap<>(),
>]
[<Line: -import java.util.SortedMap;
>, <Line: -import java.util.TreeMap;
>, <Line: -import java.util.regex.Pattern;
>, <Line: -import com.codahale.metrics.Counter;
>, <Line: -import com.codahale.metrics.Gauge;
>, <Line: -import com.codahale.metrics.Histogram;
>, <Line: -import com.codahale.metrics.Meter;
>, <Line: -		thresholdMonitoringReporter = new ThresholdMonitoringReporter(new Metric2Registry(), alertingPlugin,
>, <Line: -				alertSender, incidentRepository, measurementSession);
>, <Line: -		assertEquals("test.timer1.mean >= 5.0", result.getFailingExpression());
>, <Line: -		assertEquals(5.0, result.getCurrentValue(), 0);
>, <Line: -		check.setTarget(Pattern.compile("test.timer.*"));
>, <Line: -		final SortedMap<String, Timer> timers = new TreeMap<String, Timer>();
>, <Line: -		timers.put("test.timer1", timer(TimeUnit.MILLISECONDS.toNanos(timer1Mean)));
>, <Line: -		timers.put("test.timer2", timer(TimeUnit.MILLISECONDS.toNanos(timer2Mean)));
>, <Line: -		timers.put("test.timer3", timer(TimeUnit.MILLISECONDS.toNanos(timer3Mean)));
>, <Line: -		timers.put("test.some.other.timer", timer(TimeUnit.MILLISECONDS.toNanos(999)));
>, <Line: -		thresholdMonitoringReporter.report(
>, <Line: -				new TreeMap<String, Gauge>(),
>, <Line: -				new TreeMap<String, Counter>(),
>, <Line: -				new TreeMap<String, Histogram>(),
>, <Line: -				new TreeMap<String, Meter>(),
>]