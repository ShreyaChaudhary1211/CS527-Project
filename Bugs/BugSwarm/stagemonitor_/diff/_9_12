[<Line: +	private final Metric2RegistryModule metric2RegistryModule;
>, <Line: +		this.metric2RegistryModule = new Metric2RegistryModule(builder.getRateUnit(), builder.getDurationUnit());
>, <Line: +		reportMetric(gauges, timestamp, metric2RegistryModule.getValueWriter(Gauge.class), os, bulkActionBytes);
>, <Line: +		reportMetric(counters, timestamp, metric2RegistryModule.getValueWriter(Counter.class), os, bulkActionBytes);
>, <Line: +		reportMetric(histograms, timestamp, metric2RegistryModule.getValueWriter(Histogram.class), os, bulkActionBytes);
>, <Line: +		reportMetric(meters, timestamp, metric2RegistryModule.getValueWriter(Meter.class), os, bulkActionBytes);
>, <Line: +		reportMetric(timers, timestamp, metric2RegistryModule.getValueWriter(Timer.class), os, bulkActionBytes);
>, <Line: +	private <T extends Metric> void reportMetric(Map<MetricName, T> metrics, long timestamp, Metric2RegistryModule.ValueWriter<T> valueWriter,
>]
[<Line: -import com.codahale.metrics.Metered;
>, <Line: -import com.codahale.metrics.Snapshot;
>, <Line: -		reportMetric(gauges, timestamp, new ValueWriter<Gauge>() {
>, <Line: -			public void writeValues(Gauge gauge, JsonGenerator jg) throws IOException {
>, <Line: -				final Object value = gauge.getValue();
>, <Line: -				if (value == null) {
>, <Line: -					return;
>, <Line: -				}
>, <Line: -				if (value instanceof Number) {
>, <Line: -					writeDoubleUnlessNaN(jg, "value", ((Number)value).doubleValue());
>, <Line: -				} else if (value instanceof Boolean) {
>, <Line: -					jg.writeBooleanField("value_boolean", (Boolean) value);
>, <Line: -				} else {
>, <Line: -					jg.writeStringField("value_string", value.toString());
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}, os, bulkActionBytes);
>, <Line: -		reportMetric(counters, timestamp, new ValueWriter<Counter>() {
>, <Line: -			public void writeValues(Counter counter, JsonGenerator jg) throws IOException {
>, <Line: -				jg.writeObjectField("count", counter.getCount());
>, <Line: -			}
>, <Line: -		}, os, bulkActionBytes);
>, <Line: -		reportMetric(histograms, timestamp, new ValueWriter<Histogram>() {
>, <Line: -			public void writeValues(Histogram histogram, JsonGenerator jg) throws IOException {
>, <Line: -				final Snapshot snapshot = histogram.getSnapshot();
>, <Line: -				jg.writeNumberField("count", histogram.getCount());
>, <Line: -				writeSnapshot(snapshot, jg);
>, <Line: -			}
>, <Line: -		}, os, bulkActionBytes);
>, <Line: -		reportMetric(meters, timestamp, new ValueWriter<Meter>() {
>, <Line: -			public void writeValues(Meter meter, JsonGenerator jg) throws IOException {
>, <Line: -				writeMetered(meter, jg);
>, <Line: -			}
>, <Line: -		}, os, bulkActionBytes);
>, <Line: -		reportMetric(timers, timestamp, new ValueWriter<Timer>() {
>, <Line: -			public void writeValues(Timer timer, JsonGenerator jg) throws IOException {
>, <Line: -				writeMetered(timer, jg);
>, <Line: -				writeSnapshot(timer.getSnapshot(), jg);
>, <Line: -			}
>, <Line: -		}, os, bulkActionBytes);
>, <Line: -	}
>, <Line: -	private void writeSnapshot(Snapshot snapshot, JsonGenerator jg) throws IOException {
>, <Line: -		writeDoubleUnlessNaN(jg, "min", convertDuration(snapshot.getMin()));
>, <Line: -		writeDoubleUnlessNaN(jg, "max", convertDuration(snapshot.getMax()));
>, <Line: -		writeDoubleUnlessNaN(jg, "mean", convertDuration(snapshot.getMean()));
>, <Line: -		writeDoubleUnlessNaN(jg, "median", convertDuration(snapshot.getMedian()));
>, <Line: -		writeDoubleUnlessNaN(jg, "std", convertDuration(snapshot.getStdDev()));
>, <Line: -		writeDoubleUnlessNaN(jg, "p25", convertDuration(snapshot.getValue(0.25)));
>, <Line: -		writeDoubleUnlessNaN(jg, "p75", convertDuration(snapshot.get75thPercentile()));
>, <Line: -		writeDoubleUnlessNaN(jg, "p95", convertDuration(snapshot.get95thPercentile()));
>, <Line: -		writeDoubleUnlessNaN(jg, "p98", convertDuration(snapshot.get98thPercentile()));
>, <Line: -		writeDoubleUnlessNaN(jg, "p99", convertDuration(snapshot.get99thPercentile()));
>, <Line: -		writeDoubleUnlessNaN(jg, "p999", convertDuration(snapshot.get999thPercentile()));
>, <Line: -	private void writeMetered(Metered metered, JsonGenerator jg) throws IOException {
>, <Line: -		jg.writeNumberField("count", metered.getCount());
>, <Line: -		writeDoubleUnlessNaN(jg, "m1_rate", convertRate(metered.getOneMinuteRate()));
>, <Line: -		writeDoubleUnlessNaN(jg, "m5_rate", convertRate(metered.getFiveMinuteRate()));
>, <Line: -		writeDoubleUnlessNaN(jg, "m15_rate", convertRate(metered.getFifteenMinuteRate()));
>, <Line: -		writeDoubleUnlessNaN(jg, "mean_rate", convertRate(metered.getMeanRate()));
>, <Line: -	}
>, <Line: -	private <T extends Metric> void reportMetric(Map<MetricName, T> metrics, long timestamp, ValueWriter<T> valueWriter,
>, <Line: -	private static void writeDoubleUnlessNaN(JsonGenerator jg, String key, double value) throws IOException {
>, <Line: -		if (!Double.isNaN(value)) {
>, <Line: -			jg.writeNumberField(key, value);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private interface ValueWriter<T extends Metric> {
>, <Line: -		void writeValues(T value, JsonGenerator jg) throws IOException;
>, <Line: -	}
>]