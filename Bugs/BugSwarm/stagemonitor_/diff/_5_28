[<Line: +import java.util.Collection;
>, <Line: +import java.util.LinkedList;
>, <Line: +import java.util.List;
>, <Line: +@JsonInclude(JsonInclude.Include.NON_EMPTY)
>, <Line: +	private Map<String, ExternalRequestStats> externalRequestStats = new HashMap<String, ExternalRequestStats>();
>, <Line: +	@JsonIgnore
>, <Line: +	private List<ExternalRequest> externalRequests = new LinkedList<ExternalRequest>();
>, <Line: +	public List<ExternalRequest> getExternalRequests() {
>, <Line: +		return externalRequests;
>, <Line: +	}
>, <Line: +	public void addExternalRequest(ExternalRequest externalRequest) {
>, <Line: +		externalRequest.setRequestTrace(this);
>, <Line: +		final ExternalRequestStats stats = this.externalRequestStats.get(externalRequest.getRequestType());
>, <Line: +		if (stats == null) {
>, <Line: +			externalRequestStats.put(externalRequest.getRequestType(), new ExternalRequestStats(externalRequest));
>, <Line: +		} else {
>, <Line: +			stats.add(externalRequest);
>, <Line: +		}
>, <Line: +		externalRequests.add(externalRequest);
>, <Line: +	}
>, <Line: +	public void addTimeToExternalRequest(ExternalRequest externalRequest, long additionalExecutionTime) {
>, <Line: +		externalRequest.incrementExecutionTime(additionalExecutionTime);
>, <Line: +		final ExternalRequestStats externalRequestStats = this.externalRequestStats.get(externalRequest.getRequestType());
>, <Line: +		if (externalRequestStats != null) {
>, <Line: +			externalRequestStats.incrementExecutionTime(additionalExecutionTime);
>, <Line: +		}
>, <Line: +		final CallStackElement callStackElement = externalRequest.getCallStackElement();
>, <Line: +		if (callStackElement != null) {
>, <Line: +			callStackElement.incrementExecutionTime(additionalExecutionTime);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	public Collection<ExternalRequestStats> getExternalRequestStats() {
>, <Line: +		return externalRequestStats.values();
>, <Line: +	}
>, <Line: +	public void finalize() throws Throwable {
>, <Line: +		super.finalize();
>]
[<Line: -@JsonInclude(JsonInclude.Include.NON_NULL)
>, <Line: -	private long executionTimeDb;
>, <Line: -	private int executionCountDb;
>, <Line: -	public long getExecutionTimeDb() {
>, <Line: -		return executionTimeDb;
>, <Line: -	}
>, <Line: -	public void dbCallCompleted(long executionTimeDb) {
>, <Line: -		this.executionCountDb++;
>, <Line: -		this.executionTimeDb += executionTimeDb;
>, <Line: -	}
>, <Line: -	public int getExecutionCountDb() {
>, <Line: -		return executionCountDb;
>, <Line: -	}
>, <Line: -	public void finalize() {
>]