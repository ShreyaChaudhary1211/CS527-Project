[<Line: +import org.stagemonitor.core.Stagemonitor;
>, <Line: +import org.stagemonitor.requestmonitor.ExternalRequest;
>, <Line: +import org.stagemonitor.requestmonitor.RequestMonitorPlugin;
>, <Line: +	private final RequestMonitor requestMonitor;
>, <Line: +	public StagemonitorP6Logger() {
>, <Line: +		this(Stagemonitor.getConfiguration());
>, <Line: +	}
>, <Line: +	public StagemonitorP6Logger(Configuration configuration) {
>, <Line: +		requestMonitor = configuration.getConfig(RequestMonitorPlugin.class).getRequestMonitor();
>, <Line: +	public void logSQL(final int connectionId, String now, long elapsed, Category category, String prepared, String sql) {
>, <Line: +		final RequestTrace requestTrace = RequestMonitor.get().getRequestTrace();
>, <Line: +		if (requestTrace == null) {
>, <Line: +			return;
>, <Line: +		final String externalRequestAttribute = "jdbc" + connectionId;
>, <Line: +		if (category == Category.STATEMENT) {
>, <Line: +			createExternalRequest(externalRequestAttribute, requestTrace, elapsed, prepared, sql);
>, <Line: +		} else {
>, <Line: +			updateExternalRequest(externalRequestAttribute, requestTrace, elapsed);
>, <Line: +	private void createExternalRequest(final String externalRequestAttribute, RequestTrace requestTrace, long elapsed, String prepared, String sql) {
>, <Line: +		if (StringUtils.isNotEmpty(prepared)) {
>, <Line: +			sql = getSql(prepared, sql);
>, <Line: +			String method = sql.substring(0, sql.indexOf(' ')).toUpperCase();
>, <Line: +			final ExternalRequest jdbcRequest = new ExternalRequest("jdbc", method, elapsed, sql);
>, <Line: +			requestMonitor.trackExternalRequest(jdbcRequest);
>, <Line: +			requestTrace.addRequestAttribute(externalRequestAttribute, jdbcRequest);
>, <Line: +	}
>, <Line: +	private void updateExternalRequest(String externalRequestAttribute, RequestTrace requestTrace, long elapsed) {
>, <Line: +		ExternalRequest externalRequest = (ExternalRequest) requestTrace.getRequestAttribute(externalRequestAttribute);
>, <Line: +		if (externalRequest != null) {
>, <Line: +			requestTrace.addTimeToExternalRequest(externalRequest, elapsed);
>, <Line: +	private String getSql(String prepared, String sql) {
>, <Line: +		if (StringUtils.isEmpty(sql) || !jdbcPlugin.isCollectPreparedStatementParameters()) {
>, <Line: +			sql = prepared;
>, <Line: +		return sql.trim();
>, <Line: +		return Category.STATEMENT.equals(category) || Category.RESULTSET.equals(category) || Category.RESULT.equals(category);
>]
[<Line: -import static org.stagemonitor.core.metrics.metrics2.MetricName.name;
>, <Line: -import java.util.concurrent.TimeUnit;
>, <Line: -import org.stagemonitor.core.CorePlugin;
>, <Line: -import org.stagemonitor.core.instrument.StagemonitorClassNameMatcher;
>, <Line: -import org.stagemonitor.core.metrics.aspects.SignatureUtils;
>, <Line: -import org.stagemonitor.core.metrics.metrics2.Metric2Registry;
>, <Line: -import org.stagemonitor.requestmonitor.profiler.Profiler;
>, <Line: -	private final CorePlugin corePlugin;
>, <Line: -	private final Metric2Registry metricRegistry;
>, <Line: -	public StagemonitorP6Logger(Configuration configuration, Metric2Registry metricRegistry) {
>, <Line: -		this.corePlugin = configuration.getConfig(CorePlugin.class);
>, <Line: -		this.metricRegistry = metricRegistry;
>, <Line: -	public void logSQL(int connectionId, String now, long elapsed, Category category, String prepared, String sql) {
>, <Line: -		if (StringUtils.isNotEmpty(prepared)) {
>, <Line: -			if (StringUtils.isEmpty(sql)) {
>, <Line: -				sql = prepared;
>, <Line: -			}
>, <Line: -			trackDbMetrics(elapsed);
>, <Line: -			RequestTrace request = RequestMonitor.getRequest();
>, <Line: -			if (request != null) {
>, <Line: -				request.dbCallCompleted(elapsed);
>, <Line: -				addSqlToCallStack(elapsed, prepared, sql);
>, <Line: -			}
>, <Line: -	}
>, <Line: -	private void trackDbMetrics(long elapsed) {
>, <Line: -		metricRegistry.timer(name("jdbc_statement").tag("signature", "All").build()).update(elapsed, TimeUnit.MILLISECONDS);
>, <Line: -		String daoMethodSignature = getDaoMethodSignature();
>, <Line: -		if (daoMethodSignature != null) {
>, <Line: -			metricRegistry
>, <Line: -					.timer(name("jdbc_statement").tag("signature", daoMethodSignature).build())
>, <Line: -					.update(elapsed, TimeUnit.MILLISECONDS);
>, <Line: -	/**
>, <Line: -	 * Returns the signature of the method (inside the monitored codebase) which triggered the execution of the SQL statement.
>, <Line: -	 */
>, <Line: -	private String getDaoMethodSignature() {
>, <Line: -		if (corePlugin.getIncludePackages().isEmpty()) {
>, <Line: -			return null;
>, <Line: -		String daoMethodSignature = null;
>, <Line: -		for (StackTraceElement stackTraceElement : Thread.currentThread().getStackTrace()) {
>, <Line: -			if (StagemonitorClassNameMatcher.isIncluded(stackTraceElement.getClassName())) {
>, <Line: -				daoMethodSignature = SignatureUtils.getSignature(stackTraceElement.getClassName(), stackTraceElement.getMethodName());
>, <Line: -				break;
>, <Line: -			}
>, <Line: -		return daoMethodSignature;
>, <Line: -	private void addSqlToCallStack(long elapsed, String prepared, String sql) {
>, <Line: -		if (jdbcPlugin.isCollectPreparedStatementParameters()) {
>, <Line: -			Profiler.addIOCall(sql, TimeUnit.MILLISECONDS.toNanos(elapsed));
>, <Line: -		} else {
>, <Line: -			Profiler.addIOCall(prepared, TimeUnit.MILLISECONDS.toNanos(elapsed));
>, <Line: -		return Category.STATEMENT == category;
>]