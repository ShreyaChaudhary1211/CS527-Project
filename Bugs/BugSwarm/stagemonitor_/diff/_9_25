[<Line: +					shadowSize: 1,
>, <Line: +					points: {
>, <Line: +						show: true,
>, <Line: +						radius: 1
>, <Line: +					}
>, <Line: +	function getAllMetricsForGraphWithValues(graph, metricsFromServer) {
>, <Line: +			$.extend(metrics, findPropertyValuesByMetricPath(metricsFromServer, metricPath));
>, <Line: +	function findPropertyValuesByMetricPath(metricsFromServer, metricPath) {
>, <Line: +		var noOfMatches = 0;
>, <Line: +		for (var i = 0; i < metricsFromServer.length; i++) {
>, <Line: +			var metric = metricsFromServer[i];
>, <Line: +			if (utils.matches(metric, metricPath.metricMatcher)) {
>, <Line: +				noOfMatches++;
>, <Line: +				var graphName = metricPath.title || metric[metricPath.groupBy] ||Â metric.name;
>, <Line: +					var sumOfPreviousValues = metrics[graphName] * (noOfMatches - 1);
>, <Line: +					metrics[graphName] = (sumOfPreviousValues + value) / noOfMatches;
>, <Line: +		}
>, <Line: +			percent0To1: function (value) {
>, <Line: +				return formatters().percent(value * 100);
>, <Line: +			},
>]
[<Line: -					shadowSize: 1
>, <Line: -	function getAllMetricsForGraphWithValues(graph, data) {
>, <Line: -			var metricCategory = data[metricPath.metricCategory];
>, <Line: -			$.extend(metrics, findPropertyValuesByRegex(metricCategory, metricPath));
>, <Line: -	function findPropertyValuesByRegex(obj, metricPath) {
>, <Line: -		var matches = 0;
>, <Line: -		$.each(obj, function(key, metric) {
>, <Line: -			if (!(metricPath.metricPathRegex instanceof RegExp)) {
>, <Line: -				metricPath.metricPathRegex = new RegExp(metricPath.metricPathRegex);
>, <Line: -			}
>, <Line: -			var match = metricPath.metricPathRegex.exec(key);
>, <Line: -			if (match != null) {
>, <Line: -				matches++;
>, <Line: -				var graphName = metricPath.title || match[1] || match[0];
>, <Line: -					var sumOfPreviousValues = metrics[graphName] * (matches - 1);
>, <Line: -					metrics[graphName] = (sumOfPreviousValues + value) / matches;
>, <Line: -		});
>]