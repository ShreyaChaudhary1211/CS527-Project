[<Line: +public class ElasticsearchRequestTraceReporterTest extends AbstractElasticsearchRequestTraceReporterTest {
>, <Line: +	@Override
>, <Line: +		super.setUp();
>]
[<Line: -public class ElasticsearchRequestTraceReporterTest {
>, <Line: -	private ElasticsearchClient elasticsearchClient;
>, <Line: -	private RequestMonitorPlugin requestMonitorPlugin;
>, <Line: -	private Logger requestTraceLogger;
>, <Line: -	private Metric2Registry registry;
>, <Line: -		Configuration configuration = mock(Configuration.class);
>, <Line: -		CorePlugin corePlugin = mock(CorePlugin.class);
>, <Line: -		requestMonitorPlugin = mock(RequestMonitorPlugin.class);
>, <Line: -		when(configuration.getConfig(CorePlugin.class)).thenReturn(corePlugin);
>, <Line: -		when(configuration.getConfig(RequestMonitorPlugin.class)).thenReturn(requestMonitorPlugin);
>, <Line: -		when(requestMonitorPlugin.getOnlyReportNRequestsPerMinuteToElasticsearch()).thenReturn(1000000d);
>, <Line: -		when(requestMonitorPlugin.getOnlyReportRequestsWithNameToElasticsearch()).thenReturn(Collections.singleton("Report Me"));
>, <Line: -		when(corePlugin.getElasticsearchUrl()).thenReturn("http://localhost:9200");
>, <Line: -		when(corePlugin.getElasticsearchUrls()).thenReturn(Collections.singletonList("http://localhost:9200"));
>, <Line: -		when(corePlugin.getElasticsearchClient()).thenReturn(elasticsearchClient = mock(ElasticsearchClient.class));
>, <Line: -		registry = new Metric2Registry();
>, <Line: -		when(corePlugin.getMetricRegistry()).thenReturn(registry);
>, <Line: -		requestTraceLogger = mock(Logger.class);
>, <Line: -	private RequestTrace createTestRequestTraceWithCallTree(long executionTime) {
>, <Line: -		final RequestTrace requestTrace = new RequestTrace(UUID.randomUUID().toString(), new MeasurementSession("ERTRT", "test", "test"), requestMonitorPlugin);
>, <Line: -		requestTrace.setCallStack(CallStackElement.createRoot("test"));
>, <Line: -		requestTrace.setName("Report Me");
>, <Line: -		requestTrace.setExecutionTime(executionTime);
>, <Line: -		registry.timer(RequestMonitor.getTimerMetricName(requestTrace.getName())).update(executionTime, TimeUnit.NANOSECONDS);
>, <Line: -		return requestTrace;
>, <Line: -	}
>]