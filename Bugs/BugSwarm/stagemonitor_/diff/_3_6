[<Line: +import static net.bytebuddy.matcher.ElementMatchers.is;
>, <Line: +import static net.bytebuddy.matcher.ElementMatchers.not;
>, <Line: +	private final ElementMatcher<? super TypeDescription> superClassMatcher;
>, <Line: +	public static OverridesMethodElementMatcher overridesSuperMethod() {
>, <Line: +	public static OverridesMethodElementMatcher overridesSuperMethodThat(ElementMatcher<? super MethodDescription> methodElementMatcher) {
>, <Line: +		this(any());
>, <Line: +		this(extraMethodMatcher, not(is(TypeDescription.ForLoadedType.OBJECT)));
>, <Line: +	}
>, <Line: +	private OverridesMethodElementMatcher(ElementMatcher<? super MethodDescription> extraMethodMatcher, ElementMatcher<? super TypeDescription> superClassMatcher) {
>, <Line: +		this.superClassMatcher = superClassMatcher;
>, <Line: +	}
>, <Line: +	public ElementMatcher<MethodDescription.InDefinedShape> onSuperClassesThat(ElementMatcher<? super TypeDescription> superClassMatcher) {
>, <Line: +		return new OverridesMethodElementMatcher(extraMethodMatcher, superClassMatcher);
>, <Line: +		TypeDescription superClass = targetMethod.getDeclaringType();
>, <Line: +		do {
>, <Line: +			superClass = superClass.getSuperClass().asErasure();
>, <Line: +		} while (superClassMatcher.matches(superClass));
>]
[<Line: -import net.bytebuddy.description.type.TypeDefinition;
>, <Line: -	public static ElementMatcher<MethodDescription.InDefinedShape> overridesSuperMethod() {
>, <Line: -	public static ElementMatcher<MethodDescription.InDefinedShape> overridesSuperMethodThat(ElementMatcher<? super MethodDescription> methodElementMatcher) {
>, <Line: -		extraMethodMatcher = any();
>, <Line: -		TypeDefinition superClass = targetMethod.getDeclaringType();
>, <Line: -		while (!superClass.equals(TypeDescription.ForLoadedType.OBJECT)) {
>, <Line: -			superClass = superClass.getSuperClass();
>, <Line: -		}
>]