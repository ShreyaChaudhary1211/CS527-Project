[<Line: +import org.slf4j.Logger;
>, <Line: +import org.slf4j.LoggerFactory;
>, <Line: +	private static final Logger logger = LoggerFactory.getLogger(ReflectiveConnectionMonitoringTransformer.class);
>, <Line: +			final String key = getClassAlreadyTransformedKey(typeDescription, classLoader);
>, <Line: +			final boolean hasAlreadyBeenTransformed = Dispatcher.getValues().containsKey(key);
>, <Line: +			if (DEBUG_INSTRUMENTATION) {
>, <Line: +				logger.info("{}: {}", key, hasAlreadyBeenTransformed);
>, <Line: +			}
>, <Line: +	private static String getClassAlreadyTransformedKey(TypeDescription typeDescription, ClassLoader classLoader) {
>, <Line: +		return typeDescription.getName() + ClassUtils.getIdentityString(classLoader) + ".transformed";
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void beforeTransformation(TypeDescription typeDescription, ClassLoader classLoader) {
>, <Line: +		super.beforeTransformation(typeDescription, classLoader);
>, <Line: +		final String key = getClassAlreadyTransformedKey(typeDescription, classLoader);
>, <Line: +		if (DEBUG_INSTRUMENTATION) {
>, <Line: +			logger.info("setting {}", key);
>, <Line: +		}
>, <Line: +		Dispatcher.getValues().put(key, Boolean.TRUE);
>, <Line: +	}
>]
[<Line: -			final String key = typeDescription.getName() + ClassUtils.getIdentityString(classLoader) + ".transformed";
>, <Line: -			final boolean hasAlreadyBeenTransformed = Dispatcher.getValues().putIfAbsent(key, Boolean.TRUE) != null;
>]