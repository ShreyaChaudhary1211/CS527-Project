[<Line: +# External Requests Dashboard
>, <Line: +This dashboard contains various information about external requests, for example JDBC calls.
>, <Line: +Use the `Request Type` dropdown to see the metrics for the request type `jdbc` for example.
>, <Line: +To analyze the individual external requests go to the corresponding Kibana dashboard: <http://your-kibana-host:5601/app/kibana#/dashboard/External-Requests>.
>, <Line: +## Response Time
>, <Line: +This panel aggregates the response time over all database queries.
>, <Line: +To see the response time of an individual database query, choose the one you are interested in in the Signature dropdown.
>, <Line: +The database queries are named after the Java method which initiated the query.
>, <Line: +## Average Queries / Second
>, <Line: +The average query count per second.
>, <Line: +## Slowest Queries (p75)
>, <Line: +This panel shows the 75th percentile of all external requests.
>, <Line: +The requests are named after the Java method which initiated the query.
>, <Line: +To optimize the performance of JDBC queries, you can analyze the execution plan of the query to see if it uses
>, <Line: +expensive full table scans or if an index would be beneficial.
>, <Line: +## Requests with most Queries/sec
>, <Line: +This panel shows the endpoints (aka. Use Cases or Business Transactions) with the highest query count.
>, <Line: +In order to optimize the performance of these Use Cases, you should try to make fewer external request,
>, <Line: +for example by executing a single batch request which loads all the required data.
>, <Line: +A high JDBC query count might also indicate a classical [n+1 Hibernate problem](http://stackoverflow.com/questions/97197/what-is-the-n1-selects-issue).
>, <Line: +## Time to get JDBC connection (p95)
>, <Line: +A spike in the time to get a connection usually means that the connection pool is exhausted. 
>, <Line: +It could also indicate network problems or an overloaded database server.
>, <Line: +## Most Frequent Queries
>, <Line: +The most frequent queries. Slow but frequent queries may have the potential to benefit from caching.
>]
[]