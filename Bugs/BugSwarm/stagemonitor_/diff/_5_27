[<Line: +					"Set to a value below 1 to deactivate call tree recording and to 1000000 or higher to always collect.")
>, <Line: +			.key("stagemonitor.requestmonitor.collectExternalRequestTimePerRequest")
>, <Line: +			.label("Collect external request time per request group")
>, <Line: +			.description("Whether or not the execution time of external should be collected per request group\n" +
>, <Line: +					"Set to a value below 1 to deactivate ES reporting and to 1000000 or higher to always report.")
>, <Line: +			.dynamic(true)
>, <Line: +			.dynamic(false)
>, <Line: +	private final ConfigurationOption<String> externalRequestsIndexTemplate = ConfigurationOption.stringOption()
>, <Line: +			.key("stagemonitor.requestmonitor.elasticsearch.externalRequestsIndexTemplate")
>, <Line: +			.dynamic(false)
>, <Line: +			.label("ES External Requests Index Template")
>, <Line: +			.description("The classpath location of the index template that is used for the stagemonitor-external-requests-* indices. " +
>, <Line: +					"By specifying the location to your own template, you can fully customize the index template.")
>, <Line: +			.defaultValue("stagemonitor-elasticsearch-external-requests-index-template.json")
>, <Line: +			.configurationCategory(REQUEST_MONITOR_PLUGIN)
>, <Line: +			.tags("elasticsearch")
>, <Line: +			.build();
>, <Line: +	private final ConfigurationOption<Double> onlyReportNExternalRequestsPerMinute = ConfigurationOption.doubleOption()
>, <Line: +			.key("stagemonitor.requestmonitor.external.onlyReportNExternalRequestsPerMinute")
>, <Line: +			.dynamic(true)
>, <Line: +			.label("Only report N external requests per minute to ES")
>, <Line: +			.description("Limits the rate at which external request traces are reported to Elasticsearch. " +
>, <Line: +					"Set to a value below 1 to deactivate ES reporting and to 1000000 or higher to always report.")
>, <Line: +			.defaultValue(0d)
>, <Line: +			.tags("external-requests")
>, <Line: +			.configurationCategory(REQUEST_MONITOR_PLUGIN)
>, <Line: +			.build();
>, <Line: +	private final ConfigurationOption<Double> excludeExternalRequestsWhenFasterThanXPercent = ConfigurationOption.doubleOption()
>, <Line: +			.key("stagemonitor.requestmonitor.external.excludeExternalRequestsWhenFasterThanXPercent")
>, <Line: +			.dynamic(true)
>, <Line: +			.label("Exclude external requests from reporting on x% of the fastest external requests")
>, <Line: +			.description("Exclude the external request from Elasticsearch report when the request was faster faster than x " +
>, <Line: +					"percent of external requests with the same initiator (executedBy). This helps to reduce the network and disk overhead " +
>, <Line: +					"as uninteresting external requests (those which are comparatively fast) are excluded." +
>, <Line: +					"Example: set to 1 to always exclude the external request and to 0 to always include it. " +
>, <Line: +					"With a setting of 0.85, the external request will only be reported for the slowest 25% of the requests.")
>, <Line: +			.defaultValue(0d)
>, <Line: +			.tags("external-requests")
>, <Line: +			.configurationCategory(REQUEST_MONITOR_PLUGIN)
>, <Line: +			.build();
>, <Line: +	private final ConfigurationOption<Double> excludeExternalRequestsFasterThan = ConfigurationOption.doubleOption()
>, <Line: +			.key("stagemonitor.requestmonitor.external.excludeExternalRequestsFasterThan")
>, <Line: +			.dynamic(true)
>, <Line: +			.label("Exclude external requests from reporting when faster than x ms")
>, <Line: +			.description("Exclude the external request from Elasticsearch report when the request was faster faster than x ms.")
>, <Line: +			.defaultValue(0d)
>, <Line: +			.tags("external-requests")
>, <Line: +			.configurationCategory(REQUEST_MONITOR_PLUGIN)
>, <Line: +			.build();
>, <Line: +		final String requestsMappingJson = ElasticsearchClient.requireBoxTypeHotIfHotColdAritectureActive(
>, <Line: +		elasticsearchClient.sendMappingTemplateAsync(requestsMappingJson, "stagemonitor-requests");
>, <Line: +		final String mappingJson = ElasticsearchClient.requireBoxTypeHotIfHotColdAritectureActive(
>, <Line: +				externalRequestsIndexTemplate.getValue(), corePlugin.getMoveToColdNodesAfterDays());
>, <Line: +		elasticsearchClient.sendMappingTemplateAsync(mappingJson, "stagemonitor-external-requests");
>, <Line: +			elasticsearchClient.sendClassPathRessourceBulkAsync("kibana/RequestDashboard.bulk");
>, <Line: +			grafanaClient.sendGrafanaDashboardAsync("grafana/ElasticsearchExternalRequestsDashboard.json");
>, <Line: +		}
>, <Line: +		if (!corePlugin.getElasticsearchUrls().isEmpty()) {
>, <Line: +			elasticsearchClient.sendClassPathRessourceBulkAsync("kibana/StagemonitorRequestsIndexPattern.bulk");
>, <Line: +			elasticsearchClient.sendClassPathRessourceBulkAsync("kibana/RequestAnalysis.bulk");
>, <Line: +			elasticsearchClient.sendClassPathRessourceBulkAsync("kibana/WebAnalytics.bulk");
>, <Line: +			elasticsearchClient.sendClassPathRessourceBulkAsync("kibana/ExternalRequests.bulk");
>, <Line: +			elasticsearchClient.scheduleIndexManagement("stagemonitor-external-requests-",
>, <Line: +					corePlugin.getMoveToColdNodesAfterDays(), deleteRequestTracesAfterDays.getValue());
>, <Line: +	public double getOnlyReportNExternalRequestsPerMinute() {
>, <Line: +		return onlyReportNExternalRequestsPerMinute.getValue();
>, <Line: +	}
>, <Line: +	public double getExcludeExternalRequestsWhenFasterThanXPercent() {
>, <Line: +		return excludeExternalRequestsWhenFasterThanXPercent.getValue();
>, <Line: +	}
>, <Line: +	public double getExcludeExternalRequestsFasterThan() {
>, <Line: +		return excludeExternalRequestsFasterThan.getValue();
>, <Line: +	}
>]
[<Line: -					"Set to a value below 1 to deactivate call tree recording and to 1,000,000 or higher to always collect.")
>, <Line: -			.key("stagemonitor.jdbc.collectDbTimePerRequest")
>, <Line: -			.label("Collect db time per request group")
>, <Line: -			.description("Whether or not db execution time should be collected per request group\n" +
>, <Line: -					"Set to a value below 1 to deactivate ES reporting and to 1,000,000 or higher to always report.")
>, <Line: -			.dynamic(false)
>, <Line: -			.dynamic(true)
>, <Line: -		final String mappingJson = ElasticsearchClient.requireBoxTypeHotIfHotColdAritectureActive(
>, <Line: -		elasticsearchClient.sendMappingTemplateAsync(mappingJson, "stagemonitor-requests");
>, <Line: -		elasticsearchClient.sendKibanaDashboardAsync("kibana/Kibana3RecentRequests.json");
>, <Line: -			elasticsearchClient.sendBulkAsync("kibana/StagemonitorRequestsIndexPattern.bulk");
>, <Line: -			elasticsearchClient.sendBulkAsync("kibana/RequestDashboard.bulk");
>, <Line: -			elasticsearchClient.sendBulkAsync("kibana/RequestAnalysis.bulk");
>, <Line: -			elasticsearchClient.sendBulkAsync("kibana/WebAnalytics.bulk");
>]