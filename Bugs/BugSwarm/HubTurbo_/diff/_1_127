[<Line: +import backend.resource.*;
>, <Line: +import filter.expression.FilterExpression;
>, <Line: +import filter.expression.Qualifier;
>, <Line: +import github.TurboIssueEvent;
>, <Line: +import org.eclipse.egit.github.core.Comment;
>, <Line: +import util.Utility;
>, <Line: +import java.time.LocalDateTime;
>, <Line: +import java.time.temporal.ChronoUnit;
>, <Line: +import java.util.HashSet;
>, <Line: +import java.util.List;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +	private final Model model;
>, <Line: +	public IssuePanelCard(Model model, TurboIssue issue, IssueColumn parentPanel, HashSet<Integer>
>, <Line: +		issuesWithNewComments) {
>, <Line: +		this.model = model;
>, <Line: +			Node feed = getEventDisplay(issue, getUpdateFilterHours(parentPanel.getCurrentFilterExpression()));
>, <Line: +	/**
>, <Line: +	 * Creates a JavaFX node containing a graphical display of this issue's events.
>, <Line: +	 * @param withinHours the number of hours to bound the returned events by
>, <Line: +	 * @return the node
>, <Line: +	 */
>, <Line: +	public Node getEventDisplay(TurboIssue issue, final int withinHours) {
>, <Line: +		final LocalDateTime now = LocalDateTime.now();
>, <Line: +		List<TurboIssueEvent> eventsWithinDuration = issue.getMetadata().getEvents().stream()
>, <Line: +			.filter(event -> {
>, <Line: +				LocalDateTime eventTime = Utility.longToLocalDateTime(event.getDate().getTime());
>, <Line: +				int hours = Utility.safeLongToInt(eventTime.until(now, ChronoUnit.HOURS));
>, <Line: +				return hours < withinHours;
>, <Line: +			})
>, <Line: +			.collect(Collectors.toList());
>, <Line: +		List<Comment> commentsWithinDuration = issue.getMetadata().getComments().stream()
>, <Line: +			.filter(comment -> {
>, <Line: +				LocalDateTime created = Utility.longToLocalDateTime(comment.getCreatedAt().getTime());
>, <Line: +				int hours = Utility.safeLongToInt(created.until(now, ChronoUnit.HOURS));
>, <Line: +				return hours < withinHours;
>, <Line: +			})
>, <Line: +			.collect(Collectors.toList());
>, <Line: +		return layoutEvents(eventsWithinDuration, commentsWithinDuration);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Given a list of issue events, returns a JavaFX node laying them out properly.
>, <Line: +	 * @param events
>, <Line: +	 * @param comments
>, <Line: +	 * @return
>, <Line: +	 */
>, <Line: +	private static Node layoutEvents(List<TurboIssueEvent> events, List<Comment> comments) {
>, <Line: +		VBox result = new VBox();
>, <Line: +		result.setSpacing(3);
>, <Line: +		VBox.setMargin(result, new Insets(3, 0, 0, 0));
>, <Line: +		// Events
>, <Line: +		events.stream()
>, <Line: +			.map(TurboIssueEvent::display)
>, <Line: +			.forEach(e -> result.getChildren().add(e));
>, <Line: +		// Comments
>, <Line: +		if (comments.size() > 0) {
>, <Line: +			String names = comments.stream()
>, <Line: +				.map(comment -> comment.getUser().getLogin())
>, <Line: +				.distinct()
>, <Line: +				.collect(Collectors.joining(", "));
>, <Line: +			HBox commentDisplay = new HBox();
>, <Line: +			commentDisplay.getChildren().addAll(
>, <Line: +				TurboIssueEvent.octicon(TurboIssueEvent.OCTICON_QUOTE),
>, <Line: +				new javafx.scene.control.Label(String.format("%d comments since, involving %s.", comments.size(),
>, <Line: +					names))
>, <Line: +			);
>, <Line: +			result.getChildren().add(commentDisplay);
>, <Line: +		}
>, <Line: +		return result;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Given a list of issue events, returns a textual representation of them,
>, <Line: +	 * concatenated together with newlines.
>, <Line: +	 * @param events
>, <Line: +	 * @param width
>, <Line: +	 * @return
>, <Line: +	 */
>, <Line: +	private static Node formatEventsText(List<TurboIssueEvent> events, int width) {
>, <Line: +		String text = events.stream()
>, <Line: +			.map(TurboIssueEvent::toString)
>, <Line: +			.collect(Collectors.joining("\n"));
>, <Line: +		Text display = new Text(text);
>, <Line: +		display.setWrappingWidth(width);
>, <Line: +		display.getStyleClass().add("issue-panel-feed");
>, <Line: +		return display;
>, <Line: +	}
>, <Line: +		for (TurboLabel label : model.getLabelsOfIssue(issue)) {
>, <Line: +		if (issue.getMilestone().isPresent() && model.getMilestoneOfIssue(issue).isPresent()) {
>, <Line: +			TurboMilestone milestone = model.getMilestoneOfIssue(issue).get();
>, <Line: +			issueDetails.getChildren().add(new Label(milestone.getTitle()));
>, <Line: +		if (issue.getAssignee().isPresent() && model.getAssigneeOfIssue(issue).isPresent()) {
>, <Line: +			TurboUser assignee = model.getAssigneeOfIssue(issue).get();
>, <Line: +			Label assigneeNameLabel = new Label(issue.getAssignee().get());
>, <Line: +			assigneeNameLabel.getStyleClass().add("display-box-padding");
>, <Line: +			Image image = assignee.getAvatar();
>, <Line: +			assert image != null;
>, <Line: +			avatar.setImage(image);
>, <Line: +			HBox assigneeBox = new HBox();
>, <Line: +			assigneeBox.setAlignment(Pos.BASELINE_CENTER);
>, <Line: +			assigneeBox.getChildren().addAll(avatar, assigneeNameLabel);
>, <Line: +			issueDetails.getChildren().add(assigneeBox);
>]
[<Line: -import java.util.HashSet;
>, <Line: -import java.util.List;
>, <Line: -import javafx.scene.control.Tooltip;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -import filter.expression.FilterExpression;
>, <Line: -import filter.expression.Qualifier;
>, <Line: -	public IssuePanelCard(TurboIssue issue, IssueColumn parentPanel, HashSet<Integer> issuesWithNewComments) {
>, <Line: -			Node feed = issue.getEventDisplay(getUpdateFilterHours(parentPanel.getCurrentFilterExpression()));
>, <Line: -		for (TurboLabel label : issue.getLabels()) {
>, <Line: -		if(issue.getParentIssue() >= 0){
>, <Line: -			String parentString = "#" + issue.getParentIssue();
>, <Line: -			Label parent = new Label(parentString);
>, <Line: -			parent.getStyleClass().addAll("display-box-padding");
>, <Line: -			issueDetails.getChildren().add(parent);
>, <Line: -		if (issue.getMilestone() != null) {
>, <Line: -			Label milestone = new Label(issue.getMilestone().getTitle());
>, <Line: -			issueDetails.getChildren().add(milestone);
>, <Line: -		}
>, <Line: -		if (issue.getAssignee() != null) {
>, <Line: -			Label assigneeName = new Label((issue.getAssignee().getAlias()));
>, <Line: -			assigneeName.getStyleClass().add("display-box-padding");
>, <Line: -			Image image = issue.getAssignee().getAvatar();
>, <Line: -			if(image != null){
>, <Line: -				avatar.setImage(image);
>, <Line: -			}
>, <Line: -			HBox assignee = new HBox();
>, <Line: -			assignee.setAlignment(Pos.BASELINE_CENTER);
>, <Line: -			assignee.getChildren().addAll(avatar, assigneeName);
>, <Line: -			issueDetails.getChildren().add(assignee);
>]