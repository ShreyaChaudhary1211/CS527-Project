[<Line: +package backend.stub;
>, <Line: +import backend.IssueMetadata;
>, <Line: +import backend.UserCredentials;
>, <Line: +import backend.interfaces.RepoSource;
>, <Line: +import backend.resource.Model;
>, <Line: +import util.Utility;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Map;
>, <Line: +import java.util.concurrent.CompletableFuture;
>, <Line: +public class DummySource extends RepoSource {
>, <Line: +	private final DummyRepo dummy = new DummyRepo();
>, <Line: +	@Override
>, <Line: +	public String getName() {
>, <Line: +		return "Dummy Repository";
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public CompletableFuture<Boolean> login(UserCredentials credentials) {
>, <Line: +		CompletableFuture<Boolean> response = new CompletableFuture<>();
>, <Line: +		execute(() -> response.complete(dummy.login(credentials)));
>, <Line: +		return response;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public CompletableFuture<Model> downloadRepository(String repoId) {
>, <Line: +		return addTask(new DownloadRepoTask(this, dummy, repoId)).response;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public CompletableFuture<Model> updateModel(Model model) {
>, <Line: +		return addTask(new UpdateModelTask(this, dummy, model)).response;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public CompletableFuture<Map<Integer, IssueMetadata>> downloadMetadata(String repoId, List<Integer> issues) {
>, <Line: +		// TODO
>, <Line: +		assert false : "Not yet implemented";
>, <Line: +		return null;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public CompletableFuture<Boolean> isRepositoryValid(String repoId) {
>, <Line: +		return Utility.unitFutureOf(true);
>, <Line: +	}
>, <Line: +}
>]
[]