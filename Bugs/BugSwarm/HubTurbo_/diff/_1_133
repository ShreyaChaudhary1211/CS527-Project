[<Line: +package util;
>, <Line: +import org.apache.logging.log4j.LogManager;
>, <Line: +import org.apache.logging.log4j.Logger;
>, <Line: +import org.eclipse.egit.github.core.IRepositoryIdProvider;
>, <Line: +import java.util.function.Function;
>, <Line: +/**
>, <Line: + * Nicer interface for using loggers
>, <Line: + */
>, <Line: +public class HTLog {
>, <Line: +	private static final Logger logger = HTLog.get(HTLog.class);
>, <Line: +	public static Logger get(Class<?> c) {
>, <Line: +		return LogManager.getLogger(c.getName());
>, <Line: +	}
>, <Line: +	public static String format(IRepositoryIdProvider repoId, String formatString, Object... args) {
>, <Line: +		return repoId.generateId() + " | " + String.format(formatString, args);
>, <Line: +	}
>, <Line: +	public static String format(String repoId, String formatString, Object... args) {
>, <Line: +		return repoId + " | " + String.format(formatString, args);
>, <Line: +	}
>, <Line: +	public static void error(Logger logger, String message) {
>, <Line: +		logger.error(message);
>, <Line: +	}
>, <Line: +	public static void error(Logger logger, Exception e) {
>, <Line: +		logger.error(e.getLocalizedMessage(), e);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Combinators for dealing with CompletableFutures
>, <Line: +	 */
>, <Line: +	/**
>, <Line: +	 * For use as an argument to .exceptionally. Logs and returns null.
>, <Line: +	 */
>, <Line: +	public static <T> T log(Throwable e) {
>, <Line: +		logger.error(e.getLocalizedMessage(), e);
>, <Line: +		return null;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * For use as an argument to .exceptionally. Logs and returns a given result.
>, <Line: +	 */
>, <Line: +	public static <T> Function<Throwable, T> withResult(T value) {
>, <Line: +		return e -> {
>, <Line: +			logger.error(e.getLocalizedMessage(), e);
>, <Line: +			return value;
>, <Line: +		};
>, <Line: +	}
>, <Line: +}
>]
[]