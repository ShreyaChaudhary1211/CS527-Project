[<Line: +package backend.github;
>, <Line: +import backend.interfaces.Repo;
>, <Line: +import backend.interfaces.TaskRunner;
>, <Line: +import backend.resource.Model;
>, <Line: +import backend.resource.TurboIssue;
>, <Line: +import org.apache.commons.lang3.tuple.ImmutableTriple;
>, <Line: +import org.apache.logging.log4j.Logger;
>, <Line: +import util.HTLog;
>, <Line: +import java.util.Date;
>, <Line: +import java.util.List;
>, <Line: +public class UpdateIssuesTask extends GitHubRepoTask<GitHubRepoTask.Result<TurboIssue>> {
>, <Line: +	private static final Logger logger = HTLog.get(UpdateIssuesTask.class);
>, <Line: +	private final Model model;
>, <Line: +	public UpdateIssuesTask(TaskRunner taskRunner, Repo repo, Model model) {
>, <Line: +		super(taskRunner, repo);
>, <Line: +		this.model = model;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void run() {
>, <Line: +		ImmutableTriple<List<TurboIssue>, String, Date> changes = repo.getUpdatedIssues(model.getRepoId(),
>, <Line: +			model.getUpdateSignature().issuesETag, model.getUpdateSignature().lastCheckTime);
>, <Line: +		List<TurboIssue> existing = model.getIssues();
>, <Line: +		List<TurboIssue> changed = changes.left;
>, <Line: +		logger.info(HTLog.format(model.getRepoId(), "%s issue(s)) changed%s",
>, <Line: +			changed.size(), changed.isEmpty() ? "" : ": " + changed));
>, <Line: +		List<TurboIssue> updated = changed.isEmpty()
>, <Line: +			? existing
>, <Line: +			: TurboIssue.reconcile(model.getRepoId(), existing, changed);
>, <Line: +		response.complete(new Result<>(updated, changes.middle, changes.right));
>, <Line: +	}
>, <Line: +}
>]
[]