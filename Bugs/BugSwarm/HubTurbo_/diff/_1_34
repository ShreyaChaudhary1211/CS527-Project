[<Line: +package backend.resource;
>, <Line: +import backend.IssueMetadata;
>, <Line: +import backend.resource.serialization.SerializableIssue;
>, <Line: +import org.eclipse.egit.github.core.Issue;
>, <Line: +import org.eclipse.egit.github.core.Label;
>, <Line: +import util.Utility;
>, <Line: +import java.time.LocalDateTime;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Optional;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +/**
>, <Line: + * The guidelines in this class apply to all TurboResources.
>, <Line: + */
>, <Line: +@SuppressWarnings("unused")
>, <Line: +public class TurboIssue {
>, <Line: +	public static final String STATE_CLOSED = "closed";
>, <Line: +	public static final String STATE_OPEN = "open";
>, <Line: +	/**
>, <Line: +	 * Must have reasonable, NON-NULL defaults.
>, <Line: +	 * Should be primitive types, or at least easily-serializable ones.
>, <Line: +	 * Should be specified in order.
>, <Line: +	 * Should be immutable as much as possible.
>, <Line: +	 */
>, <Line: +	private void ______SERIALIZED_FIELDS______() {
>, <Line: +	}
>, <Line: +	// Immutable
>, <Line: +	private final int id;
>, <Line: +	private final String creator;
>, <Line: +	private final LocalDateTime createdAt;
>, <Line: +	private final boolean isPullRequest;
>, <Line: +	// Mutable
>, <Line: +	private String title;
>, <Line: +	private String description;
>, <Line: +	private LocalDateTime updatedAt;
>, <Line: +	private int commentCount;
>, <Line: +	private boolean isOpen;
>, <Line: +	private Optional<String> assignee;
>, <Line: +	private List<String> labels;
>, <Line: +	private Optional<Integer> milestone;
>, <Line: +	/**
>, <Line: +	 * Metadata associated with issues that is not serialized.
>, <Line: +	 */
>, <Line: +	private void ______TRANSIENT_FIELDS______() {
>, <Line: +	}
>, <Line: +	private final String repoId;
>, <Line: +	private IssueMetadata metadata;
>, <Line: +	private void ______CONSTRUCTORS______() {
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Default constructor: provides reasonable defaults for things
>, <Line: +	 */
>, <Line: +	public TurboIssue(String repoId, int id, String title) {
>, <Line: +		this.id = id;
>, <Line: +		this.creator = "";
>, <Line: +		this.createdAt = LocalDateTime.now();
>, <Line: +		this.isPullRequest = false;
>, <Line: +		mutableFieldDefaults();
>, <Line: +		this.title = title;
>, <Line: +		this.repoId = repoId;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Immutable-conscious constructor
>, <Line: +	 */
>, <Line: +	public TurboIssue(String repoId, int id, String title,
>, <Line: +	                  String creator, LocalDateTime createdAt, boolean isPullRequest) {
>, <Line: +		this.id = id;
>, <Line: +		this.creator = creator;
>, <Line: +		this.createdAt = createdAt;
>, <Line: +		this.isPullRequest = isPullRequest;
>, <Line: +		mutableFieldDefaults();
>, <Line: +		this.title = title;
>, <Line: +		this.repoId = repoId;
>, <Line: +	}
>, <Line: +	// Copy constructor
>, <Line: +	public TurboIssue(TurboIssue issue) {
>, <Line: +		this.id = issue.id;
>, <Line: +		this.title = issue.title;
>, <Line: +		this.creator = issue.creator;
>, <Line: +		this.createdAt = issue.createdAt;
>, <Line: +		this.isPullRequest = issue.isPullRequest;
>, <Line: +		this.description = issue.description;
>, <Line: +		this.updatedAt = issue.updatedAt;
>, <Line: +		this.commentCount = issue.commentCount;
>, <Line: +		this.isOpen = issue.isOpen;
>, <Line: +		this.assignee = issue.assignee;
>, <Line: +		this.labels = new ArrayList<>(issue.labels);
>, <Line: +		this.milestone = issue.milestone;
>, <Line: +		this.metadata = new IssueMetadata(issue.metadata);
>, <Line: +		this.repoId = issue.repoId;
>, <Line: +	}
>, <Line: +	public TurboIssue(String repoId, Issue issue) {
>, <Line: +		this.id = issue.getNumber();
>, <Line: +		this.title = issue.getTitle();
>, <Line: +		this.creator = issue.getUser().getLogin();
>, <Line: +		this.createdAt = Utility.dateToLocalDateTime(issue.getCreatedAt());
>, <Line: +		this.isPullRequest = isPullRequest(issue);
>, <Line: +		this.description = issue.getBody();
>, <Line: +		this.updatedAt = Utility.dateToLocalDateTime(issue.getUpdatedAt());
>, <Line: +		this.commentCount = issue.getComments();
>, <Line: +		this.isOpen = issue.getState().equals(STATE_OPEN);
>, <Line: +		this.assignee = issue.getAssignee() == null
>, <Line: +			? Optional.empty()
>, <Line: +			: Optional.of(issue.getAssignee().getLogin());
>, <Line: +		this.labels = issue.getLabels().stream()
>, <Line: +			.map(Label::getName)
>, <Line: +			.collect(Collectors.toList());
>, <Line: +		this.milestone = issue.getMilestone() == null
>, <Line: +			? Optional.empty()
>, <Line: +			: Optional.of(issue.getMilestone().getNumber());
>, <Line: +		this.metadata = new IssueMetadata();
>, <Line: +		this.repoId = repoId;
>, <Line: +	}
>, <Line: +	public TurboIssue(String repoId, SerializableIssue issue) {
>, <Line: +		this.id = issue.getId();
>, <Line: +		this.creator = issue.getCreator();
>, <Line: +		this.createdAt = issue.getCreatedAt();
>, <Line: +		this.isPullRequest = issue.isPullRequest();
>, <Line: +		this.title = issue.getTitle();
>, <Line: +		this.description = issue.getDescription();
>, <Line: +		this.updatedAt = issue.getUpdatedAt();
>, <Line: +		this.commentCount = issue.getCommentCount();
>, <Line: +		this.isOpen = issue.isOpen();
>, <Line: +		this.assignee = issue.getAssignee();
>, <Line: +		this.labels = issue.getLabels();
>, <Line: +		this.milestone = issue.getMilestone();
>, <Line: +		this.metadata = new IssueMetadata();
>, <Line: +		this.repoId = repoId;
>, <Line: +	}
>, <Line: +	private void ______CONSTRUCTOR_HELPER_FUNCTIONS______() {
>, <Line: +	}
>, <Line: +	private static boolean isPullRequest(Issue issue) {
>, <Line: +		return issue.getPullRequest() != null && issue.getPullRequest().getUrl() != null;
>, <Line: +	}
>, <Line: +	private void mutableFieldDefaults() {
>, <Line: +		this.title = "";
>, <Line: +		this.description = "";
>, <Line: +		this.updatedAt = LocalDateTime.now();
>, <Line: +		this.commentCount = 0;
>, <Line: +		this.isOpen = true;
>, <Line: +		this.assignee = Optional.empty();
>, <Line: +		this.labels = new ArrayList<>();
>, <Line: +		this.milestone = Optional.empty();
>, <Line: +		this.metadata = new IssueMetadata();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Conceptually, operations on issues. They should only modify non-serialized fields.
>, <Line: +	 */
>, <Line: +	private void ______METHODS______() {
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public String toString() {
>, <Line: +		return "#" + id + " " + title;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Takes lists of TurboIssues and reconciles the changes between them,
>, <Line: +	 * returning a list of TurboIssues with updates from the second.
>, <Line: +	 */
>, <Line: +	public static List<TurboIssue> reconcile(String repoId, List<TurboIssue> existing, List<TurboIssue> changed) {
>, <Line: +		existing = new ArrayList<>(existing);
>, <Line: +		for (TurboIssue issue : changed) {
>, <Line: +			int id = issue.getId();
>, <Line: +			// TODO O(n^2), fix by preprocessing and copying into a map
>, <Line: +			Optional<Integer> corresponding = findIssueWithId(existing, id);
>, <Line: +			if (corresponding.isPresent()) {
>, <Line: +				existing.set(corresponding.get(), new TurboIssue(issue));
>, <Line: +			} else {
>, <Line: +				existing.add(new TurboIssue(issue));
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return existing;
>, <Line: +	}
>, <Line: +	private static Optional<Integer> findIssueWithId(List<TurboIssue> existing, int id) {
>, <Line: +		int i = 0;
>, <Line: +		for (TurboIssue issue : existing) {
>, <Line: +			if (issue.getId() == id) {
>, <Line: +				return Optional.of(i);
>, <Line: +			}
>, <Line: +			++i;
>, <Line: +		}
>, <Line: +		return Optional.empty();
>, <Line: +	}
>, <Line: +	private void ______BOILERPLATE______() {
>, <Line: +	}
>, <Line: +	public String getRepoId() {
>, <Line: +		return repoId;
>, <Line: +	}
>, <Line: +	public int getId() {
>, <Line: +		return id;
>, <Line: +	}
>, <Line: +	public String getCreator() {
>, <Line: +		return creator;
>, <Line: +	}
>, <Line: +	public LocalDateTime getCreatedAt() {
>, <Line: +		return createdAt;
>, <Line: +	}
>, <Line: +	public boolean isPullRequest() {
>, <Line: +		return isPullRequest;
>, <Line: +	}
>, <Line: +	public String getTitle() {
>, <Line: +		return title;
>, <Line: +	}
>, <Line: +	public void setTitle(String title) {
>, <Line: +		this.title = title;
>, <Line: +	}
>, <Line: +	public String getDescription() {
>, <Line: +		return description;
>, <Line: +	}
>, <Line: +	public void setDescription(String description) {
>, <Line: +		this.description = description;
>, <Line: +	}
>, <Line: +	public LocalDateTime getUpdatedAt() {
>, <Line: +		return updatedAt;
>, <Line: +	}
>, <Line: +	public void setUpdatedAt(LocalDateTime updatedAt) {
>, <Line: +		this.updatedAt = updatedAt;
>, <Line: +	}
>, <Line: +	public int getCommentCount() {
>, <Line: +		return commentCount;
>, <Line: +	}
>, <Line: +	public void setCommentCount(int commentCount) {
>, <Line: +		this.commentCount = commentCount;
>, <Line: +	}
>, <Line: +	public boolean isOpen() {
>, <Line: +		return isOpen;
>, <Line: +	}
>, <Line: +	public void setOpen(boolean isOpen) {
>, <Line: +		this.isOpen = isOpen;
>, <Line: +	}
>, <Line: +	public Optional<String> getAssignee() {
>, <Line: +		return assignee;
>, <Line: +	}
>, <Line: +	public void setAssignee(String assignee) {
>, <Line: +		this.assignee = Optional.of(assignee);
>, <Line: +	}
>, <Line: +	public void setAssignee(TurboUser assignee) {
>, <Line: +		setAssignee(assignee.getLoginName());
>, <Line: +	}
>, <Line: +	public List<String> getLabels() {
>, <Line: +		return labels;
>, <Line: +	}
>, <Line: +	public void setLabels(List<String> labels) {
>, <Line: +		this.labels = labels;
>, <Line: +	}
>, <Line: +	public void addLabel(String label) {
>, <Line: +		this.labels.add(label);
>, <Line: +	}
>, <Line: +	public void addLabel(TurboLabel label) {
>, <Line: +		addLabel(label.getActualName());
>, <Line: +	}
>, <Line: +	public Optional<Integer> getMilestone() {
>, <Line: +		return milestone;
>, <Line: +	}
>, <Line: +	public void setMilestone(Integer milestone) {
>, <Line: +		this.milestone = Optional.of(milestone);
>, <Line: +	}
>, <Line: +	public void setMilestone(TurboMilestone milestone) {
>, <Line: +		setMilestone(milestone.getId());
>, <Line: +	}
>, <Line: +	public IssueMetadata getMetadata() {
>, <Line: +		return metadata;
>, <Line: +	}
>, <Line: +	public void setMetadata(IssueMetadata metadata) {
>, <Line: +		this.metadata = metadata;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Metadata is not considered for equality.
>, <Line: +	 * In general only serialised fields are.
>, <Line: +	 */
>, <Line: +	@Override
>, <Line: +	public boolean equals(Object o) {
>, <Line: +		if (this == o) return true;
>, <Line: +		if (o == null || getClass() != o.getClass()) return false;
>, <Line: +		TurboIssue issue = (TurboIssue) o;
>, <Line: +		if (commentCount != issue.commentCount) return false;
>, <Line: +		if (id != issue.id) return false;
>, <Line: +		if (isOpen != issue.isOpen) return false;
>, <Line: +		if (isPullRequest != issue.isPullRequest) return false;
>, <Line: +		if (assignee != null ? !assignee.equals(issue.assignee) : issue.assignee != null) return false;
>, <Line: +		if (createdAt != null ? !createdAt.equals(issue.createdAt) : issue.createdAt != null) return false;
>, <Line: +		if (creator != null ? !creator.equals(issue.creator) : issue.creator != null) return false;
>, <Line: +		if (description != null ? !description.equals(issue.description) : issue.description != null) return false;
>, <Line: +		if (labels != null ? !labels.equals(issue.labels) : issue.labels != null) return false;
>, <Line: +		if (milestone != null ? !milestone.equals(issue.milestone) : issue.milestone != null) return false;
>, <Line: +		if (title != null ? !title.equals(issue.title) : issue.title != null) return false;
>, <Line: +		if (updatedAt != null ? !updatedAt.equals(issue.updatedAt) : issue.updatedAt != null) return false;
>, <Line: +		return true;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public int hashCode() {
>, <Line: +		int result = id;
>, <Line: +		result = 31 * result + (creator != null ? creator.hashCode() : 0);
>, <Line: +		result = 31 * result + (createdAt != null ? createdAt.hashCode() : 0);
>, <Line: +		result = 31 * result + (isPullRequest ? 1 : 0);
>, <Line: +		result = 31 * result + (title != null ? title.hashCode() : 0);
>, <Line: +		result = 31 * result + (description != null ? description.hashCode() : 0);
>, <Line: +		result = 31 * result + (updatedAt != null ? updatedAt.hashCode() : 0);
>, <Line: +		result = 31 * result + commentCount;
>, <Line: +		result = 31 * result + (isOpen ? 1 : 0);
>, <Line: +		result = 31 * result + (assignee != null ? assignee.hashCode() : 0);
>, <Line: +		result = 31 * result + (labels != null ? labels.hashCode() : 0);
>, <Line: +		result = 31 * result + (milestone != null ? milestone.hashCode() : 0);
>, <Line: +		return result;
>, <Line: +	}
>, <Line: +}
>]
[]