[]
[<Line: -package tests;
>, <Line: -import model.Model;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -import model.TurboMilestone;
>, <Line: -import org.eclipse.egit.github.core.*;
>, <Line: -import org.junit.BeforeClass;
>, <Line: -import org.junit.Test;
>, <Line: -import util.events.EventHandler;
>, <Line: -import util.events.ModelChangedEvent;
>, <Line: -import util.events.ModelChangedEventHandler;
>, <Line: -import java.io.IOException;
>, <Line: -import java.util.Arrays;
>, <Line: -import java.util.List;
>, <Line: -import java.util.concurrent.CompletableFuture;
>, <Line: -import static org.junit.Assert.*;
>, <Line: -@SuppressWarnings("unused")
>, <Line: -public class ModelTests {
>, <Line: -	private static final String TEST_REPO_OWNER = "test";
>, <Line: -	private static final String TEST_REPO_NAME = "testing";
>, <Line: -	@BeforeClass
>, <Line: -	public static void setup() {
>, <Line: -		Model.isInTestMode = true;
>, <Line: -	}
>, <Line: -	@Test(expected = UnsupportedOperationException.class)
>, <Line: -	public void mutationOfIssues() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.getIssues().add(TestUtils.getStubTurboIssue(model, 1));
>, <Line: -	}
>, <Line: -	@Test(expected = UnsupportedOperationException.class)
>, <Line: -	public void mutationOfMilestones() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.getMilestones().add(TestUtils.getStubTurboMilestone("this"));
>, <Line: -	}
>, <Line: -	@Test(expected = UnsupportedOperationException.class)
>, <Line: -	public void mutationOfLabels() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.getLabels().add(TestUtils.getStubTurboLabel("does", "not"));
>, <Line: -	}
>, <Line: -	@Test(expected = UnsupportedOperationException.class)
>, <Line: -	public void mutationOfUsers() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.getCollaborators().add(TestUtils.getStubTurboUser("matter"));
>, <Line: -	}
>, <Line: -	private void ______MODEL_FUNCTIONALITY______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadingFromCache() throws IOException {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadComponents(new RepositoryId(TEST_REPO_OWNER, TEST_REPO_NAME), (a, b) -> {});
>, <Line: -		assertEquals(model.getLabels().size(), 10);
>, <Line: -		assertEquals(model.getMilestones().size(), 10);
>, <Line: -		assertEquals(model.getCollaborators().size(), 10);
>, <Line: -		assertEquals(model.getIssues().size(), 10);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadingFromGitHub() throws IOException {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadComponents(new RepositoryId(TEST_REPO_OWNER, TEST_REPO_NAME), (a, b) -> {});
>, <Line: -		assertEquals(model.getLabels().size(), 10);
>, <Line: -		assertEquals(model.getMilestones().size(), 10);
>, <Line: -		assertEquals(model.getCollaborators().size(), 10);
>, <Line: -		assertEquals(model.getIssues().size(), 10);
>, <Line: -	}
>, <Line: -	private int numberOfUpdates = 0;
>, <Line: -	private EventHandler modelChangedHandler = null;
>, <Line: -	private void registerChangeEvent(Model model) {
>, <Line: -		assert modelChangedHandler == null;
>, <Line: -		model.getTestEvents().register(modelChangedHandler = new ModelChangedEventHandler() {
>, <Line: -			@Override
>, <Line: -			public void handle(ModelChangedEvent e) {
>, <Line: -				++numberOfUpdates;
>, <Line: -			}
>, <Line: -		});
>, <Line: -	}
>, <Line: -	private void unregisterChangeEvent(Model model) {
>, <Line: -		assert modelChangedHandler != null;
>, <Line: -		model.getTestEvents().unregister(modelChangedHandler);
>, <Line: -	}
>, <Line: -	private void ______ISSUES______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadIssuesTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getIssues().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadIssues(TestUtils.getStubIssues(10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getIssues().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(1, end - start);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void getIndexOfIssueTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadIssues(TestUtils.getStubIssues(10));
>, <Line: -		for (int i = 1; i <= 10; i++) {
>, <Line: -			assertEquals(model.getIndexOfIssue(i), i - 1);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void getIssueWithIdTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadIssues(TestUtils.getStubIssues(10));
>, <Line: -		for (int i = 1; i <= 10; i++) {
>, <Line: -			assertNotEquals(model.getIssueWithId(i), null);
>, <Line: -			assertTrue(model.getIssueWithId(i).getTitle().endsWith(i + ""));
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void ______CACHED_ISSUES______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadTurboIssuesTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getIssues().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadTurboIssues(TestUtils.getStubTurboIssues(model, 10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getIssues().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(1, end - start);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void appendToCachedIssuesTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadIssues(TestUtils.getStubIssues(10));
>, <Line: -		TurboIssue issue11 = TestUtils.getStubTurboIssue(model, 11);
>, <Line: -		model.appendToCachedIssues(issue11);
>, <Line: -		assertTrue(model.getIssues().size() > 0);
>, <Line: -		assertEquals(model.getIssueWithId(11), issue11);
>, <Line: -		assertEquals(model.getIssues().get(0), issue11);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void updateCachedIssuesTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadIssues(TestUtils.getStubIssues(10));
>, <Line: -		Issue issue1 = TestUtils.getStubIssue(3);
>, <Line: -		issue1.setTitle("something different");
>, <Line: -		Issue issue2 = TestUtils.getStubIssue(11);
>, <Line: -		issue2.setTitle("something really different");
>, <Line: -		assertEquals(model.getIssueWithId(3).getTitle(), "issue3");
>, <Line: -		assertEquals(model.getIssueWithId(11), null);
>, <Line: -		model.updateCachedIssues(new CompletableFuture<>(), Arrays.asList(issue1, issue2), "testing/test");
>, <Line: -		// 3 is there and has been changed
>, <Line: -		// 11 is not there but is there after
>, <Line: -		assertEquals(model.getIssueWithId(3).getTitle(), "something different");
>, <Line: -		assertEquals(model.getIssueWithId(11).getTitle(), "something really different");
>, <Line: -		assertEquals(model.getIssueWithId(11), model.getIssues().get(0));
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void updateCachedIssueTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadIssues(TestUtils.getStubIssues(10));
>, <Line: -		TurboIssue issue = TestUtils.getStubTurboIssue(model, 3);
>, <Line: -		issue.setTitle("something different");
>, <Line: -		// 3 is there
>, <Line: -		assertEquals(model.getIssueWithId(3).getTitle(), "issue3");
>, <Line: -		model.updateCachedIssue(issue);
>, <Line: -		// 3 has been changed
>, <Line: -		assertEquals(model.getIssueWithId(3).getTitle(), "something different");
>, <Line: -		issue = TestUtils.getStubTurboIssue(model, 11);
>, <Line: -		issue.setTitle("something really different");
>, <Line: -		// 11 is not there
>, <Line: -		assertEquals(model.getIssueWithId(11), null);
>, <Line: -		model.updateCachedIssue(issue);
>, <Line: -		// 11 has been added, and to the front
>, <Line: -		assertEquals(model.getIssueWithId(11).getTitle(), "something really different");
>, <Line: -		assertEquals(model.getIssueWithId(11), model.getIssues().get(0));
>, <Line: -	}
>, <Line: -	private void ______LABELS______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void getLabelByGhNameTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadLabels(TestUtils.getStubLabels(10));
>, <Line: -		for (int i = 0; i < model.getLabels().size(); i++) {
>, <Line: -			assertEquals(model.getLabels().get(i), model.getLabelByGhName("group.label" + (i + 1)));
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void addLabelTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadLabels(TestUtils.getStubLabels(10));
>, <Line: -		TurboLabel newLabel = TestUtils.getStubTurboLabel("group", "name");
>, <Line: -		model.addLabel(newLabel);
>, <Line: -		assertNotEquals(model.getLabels().size(), 0);
>, <Line: -		assertEquals(model.getLabels().get(model.getLabels().size() - 1), newLabel);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void isExclusiveLabelTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		List<TurboLabel> labels = TestUtils.getStubTurboLabels(10);
>, <Line: -		labels.forEach(l -> l.setExclusive(true));
>, <Line: -		model.loadTurboLabels(labels);
>, <Line: -		assertTrue(model.isExclusiveLabelGroup("group"));
>, <Line: -		labels.get(0).setExclusive(false);
>, <Line: -		assertFalse(model.isExclusiveLabelGroup("group"));
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void deleteLabelTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadTurboLabels(TestUtils.getStubTurboLabels(10));
>, <Line: -		model.deleteLabel(model.getLabels().get(4));
>, <Line: -		model.deleteLabel(model.getLabels().get(2)); // ids 3 and 5
>, <Line: -		assertEquals(model.getLabels().size(), 8);
>, <Line: -		for (TurboLabel label : model.getLabels()) {
>, <Line: -			if (label.getName().endsWith("3") || label.getName().endsWith("5")) {
>, <Line: -				assert false;
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadLabelsTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getLabels().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadLabels(TestUtils.getStubLabels(10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getLabels().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(end - start, 1);
>, <Line: -	}
>, <Line: -	private void ______CACHED_LABELS______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadTurboLabelsTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getLabels().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadTurboLabels(TestUtils.getStubTurboLabels(10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getLabels().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(end - start, 1);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void updateCachedLabelsTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		List<Label> labels = TestUtils.getStubLabels(10);
>, <Line: -		model.loadLabels(labels);
>, <Line: -		Label label1 = labels.get(3);
>, <Line: -		label1.setName("something");
>, <Line: -		Label label2 = TestUtils.getStubLabel("something else");
>, <Line: -		assertEquals(model.getLabels().size(), 10);
>, <Line: -		assertEquals(model.getLabels().get(3).getName(), "label4");
>, <Line: -		assertEquals(model.getLabelByGhName("something else"), null);
>, <Line: -		model.updateCachedLabels(new CompletableFuture<>(), Arrays.asList(label1, label2), "testing/test");
>, <Line: -		assertEquals(model.getLabels().size(), 2);
>, <Line: -		// label1 is there and has been changed
>, <Line: -		// label2 is not there but is there after
>, <Line: -		// Order is preserved
>, <Line: -		// The other labels are gone
>, <Line: -		assertEquals(model.getLabels().get(0).getName(), "something");
>, <Line: -		assertEquals(model.getLabels().get(1).getName(), "something else");
>, <Line: -	}
>, <Line: -	private void ______MILESTONES______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void addMilestoneTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadIssues(TestUtils.getStubIssues(10));
>, <Line: -		TurboMilestone newMilestone = TestUtils.getStubTurboMilestone("milestone123");
>, <Line: -		model.addMilestone(newMilestone);
>, <Line: -		assertEquals(model.getMilestones().get(model.getMilestones().size() - 1), newMilestone);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void deleteMilestoneTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadTurboMilestones(TestUtils.getStubTurboMilestones(10));
>, <Line: -		model.deleteMilestone(model.getMilestones().get(4));
>, <Line: -		model.deleteMilestone(model.getMilestones().get(2)); // ids 3 and 5
>, <Line: -		assertEquals(model.getMilestones().size(), 8);
>, <Line: -		for (TurboMilestone milestone : model.getMilestones()) {
>, <Line: -			if (milestone.getTitle().endsWith("3") || milestone.getTitle().endsWith("5")) {
>, <Line: -				assert false;
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadMilestonesTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getMilestones().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadMilestones(TestUtils.getStubMilestones(10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getMilestones().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(end - start, 1);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void getMilestoneByTitleTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadMilestones(TestUtils.getStubMilestones(10));
>, <Line: -		for (int i = 0; i < model.getMilestones().size(); i++) {
>, <Line: -			assertEquals(model.getMilestones().get(i), model.getMilestoneByTitle("v0." + (i + 1)));
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void ______CACHED_MILESTONES______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadTurboMilestonesTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getMilestones().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadTurboMilestones(TestUtils.getStubTurboMilestones(10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getMilestones().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(end - start, 1);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void updateCachedMilestonesTest() {
>, <Line: -	    Model model = new Model();
>, <Line: -	    List<Milestone> milestones = TestUtils.getStubMilestones(10);
>, <Line: -	    model.loadMilestones(milestones);
>, <Line: -	    Milestone milestone1 = milestones.get(3);
>, <Line: -	    milestone1.setTitle("amilestone");
>, <Line: -	    Milestone milestone2 = TestUtils.getStubMilestone("anothermilestone");
>, <Line: -	    assertEquals(model.getMilestones().size(), 10);
>, <Line: -	    assertEquals(model.getMilestones().get(3).getTitle(), "v0.4");
>, <Line: -	    assertEquals(model.getMilestoneByTitle("anothermilestone"), null);
>, <Line: -	    model.updateCachedMilestones(new CompletableFuture<>(), Arrays.asList(milestone1, milestone2), "testing/test");
>, <Line: -	    assertEquals(model.getMilestones().size(), 2);
>, <Line: -	    // milestone1 is there and has been changed
>, <Line: -	    // milestone2 is not there but is there after
>, <Line: -	    // Order is preserved
>, <Line: -	    // The other milestones are gone
>, <Line: -	    assertEquals(model.getMilestones().get(0).getTitle(), "amilestone");
>, <Line: -	    assertEquals(model.getMilestones().get(1).getTitle(), "anothermilestone");
>, <Line: -	}
>, <Line: -	private void ______COLLABORATORS______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void getUserByGhNameTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		model.loadCollaborators(TestUtils.getStubUsers(10));
>, <Line: -		for (int i = 0; i < model.getCollaborators().size(); i++) {
>, <Line: -			assertEquals(model.getCollaborators().get(i), model.getUserByGhName("user" + (i+1)));
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadCollaboratorsTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getCollaborators().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadCollaborators(TestUtils.getStubUsers(10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getCollaborators().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(1, end - start);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void clearCollaboratorsTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getCollaborators().size(), 0);
>, <Line: -		model.loadTurboCollaborators(TestUtils.getStubTurboUsers(10));
>, <Line: -		assertEquals(model.getCollaborators().size(), 10);
>, <Line: -		model.clearCollaborators();
>, <Line: -		assertEquals(model.getCollaborators().size(), 0);
>, <Line: -	}
>, <Line: -	private void ______CACHED_COLLABORATORS______() {
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void loadTurboCollaboratorsTest() {
>, <Line: -		Model model = new Model();
>, <Line: -		assertEquals(model.getCollaborators().size(), 0);
>, <Line: -		int start = numberOfUpdates;
>, <Line: -		registerChangeEvent(model);
>, <Line: -		model.loadTurboCollaborators(TestUtils.getStubTurboUsers(10));
>, <Line: -		unregisterChangeEvent(model);
>, <Line: -		int end = numberOfUpdates;
>, <Line: -		// All issues loaded
>, <Line: -		assertEquals(model.getCollaborators().size(), 10);
>, <Line: -		// Only one update triggered
>, <Line: -		assertEquals(end - start, 1);
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void updateCachedCollaboratorsTest() {
>, <Line: -	    Model model = new Model();
>, <Line: -	    List<User> milestones = TestUtils.getStubUsers(10);
>, <Line: -	    model.loadCollaborators(milestones);
>, <Line: -	    User user1 = milestones.get(3);
>, <Line: -	    user1.setLogin("auser");
>, <Line: -        User user2 = TestUtils.getStubUser("anotheruser");
>, <Line: -        assertEquals(model.getCollaborators().size(), 10);
>, <Line: -        assertEquals(model.getCollaborators().get(3).getGithubName(), "user4");
>, <Line: -        assertEquals(model.getUserByGhName("anotheruser"), null);
>, <Line: -        model.updateCachedCollaborators(new CompletableFuture<>(), Arrays.asList(user1, user2), "testing/test");
>, <Line: -        assertEquals(model.getCollaborators().size(), 2);
>, <Line: -        // user1 is there and has been changed
>, <Line: -        // user2 is not there but is there after
>, <Line: -        // Order is preserved
>, <Line: -        // The other milestones are gone
>, <Line: -        assertEquals(model.getCollaborators().get(0).getGithubName(), "auser");
>, <Line: -        assertEquals(model.getCollaborators().get(1).getGithubName(), "anotheruser");
>, <Line: -	}
>, <Line: -	private void ______RESOURCE_METADATA______() {
>, <Line: -	}
>, <Line: -	// TODO enforce invariants rather than test getters
>, <Line: -}
>]