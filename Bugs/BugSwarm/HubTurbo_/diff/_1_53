[]
[<Line: -package command;
>, <Line: -import java.io.IOException;
>, <Line: -import java.lang.ref.WeakReference;
>, <Line: -import javafx.application.Platform;
>, <Line: -import model.Model;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -import org.apache.logging.log4j.LogManager;
>, <Line: -import org.apache.logging.log4j.Logger;
>, <Line: -import service.ServiceManager;
>, <Line: -public abstract class TurboIssueCommand {
>, <Line: -	protected static final Logger logger = LogManager.getLogger(TurboIssueCommand.class.getName());
>, <Line: -	protected TurboIssue issue;
>, <Line: -	protected WeakReference<Model> model;
>, <Line: -	protected boolean isUndoableCommand = false;
>, <Line: -	protected boolean isSuccessful = false;
>, <Line: -	protected boolean isUndone = false;
>, <Line: -	protected String lastOperationExecuted = "";
>, <Line: -	protected String loggingRemarks;
>, <Line: -	public TurboIssueCommand(Model model, TurboIssue issue){
>, <Line: -		this.issue = issue;
>, <Line: -		this.model = new WeakReference<Model>(model);
>, <Line: -	}
>, <Line: -	public boolean getIsUndoable(){
>, <Line: -		return isUndoableCommand;
>, <Line: -	}
>, <Line: -	public boolean execute(){
>, <Line: -		boolean result = performExecuteAction();
>, <Line: -		if(result){
>, <Line: -			Platform.runLater(() -> {
>, <Line: -				model.get().refresh();
>, <Line: -			});
>, <Line: -		}
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	protected abstract boolean performExecuteAction();
>, <Line: -	public boolean undo(){
>, <Line: -		boolean result = performUndoAction();
>, <Line: -		if(result){
>, <Line: -			Platform.runLater(() -> {
>, <Line: -				model.get().refresh();
>, <Line: -			});
>, <Line: -		}
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	protected abstract boolean performUndoAction();
>, <Line: -	public void setLoggingRemarks(String remarks){
>, <Line: -		this.loggingRemarks = remarks;
>, <Line: -	}
>, <Line: -	public String getLastOperation(){
>, <Line: -		return lastOperationExecuted;
>, <Line: -	}
>, <Line: -	protected void updateGithubIssueState() throws IOException{
>, <Line: -		ServiceManager service = ServiceManager.getInstance();
>, <Line: -		if(issue.isOpen() == true){
>, <Line: -			service.openIssue(issue.getId());
>, <Line: -		}else{
>, <Line: -			service.closeIssue(issue.getId());
>, <Line: -		}
>, <Line: -	}
>, <Line: -	protected void processInheritedLabels(Integer originalParent, Integer newParent, TurboIssue issue) {
>, <Line: -		removeInheritedLabel(originalParent, issue);
>, <Line: -		addInheritedLabel(newParent, issue);
>, <Line: -	}
>, <Line: -	private void addInheritedLabel(Integer added, TurboIssue issue){
>, <Line: -		TurboIssue addedParent = model.get().getIssueWithId(added);
>, <Line: -		if(addedParent == null){
>, <Line: -			return;
>, <Line: -		}
>, <Line: -		for(TurboLabel label : addedParent.getLabels()){
>, <Line: -			issue.addLabel(label);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void removeInheritedLabel(Integer removed, TurboIssue issue){
>, <Line: -		TurboIssue removedParent = model.get().getIssueWithId(removed);
>, <Line: -		if(removedParent == null){
>, <Line: -			return;
>, <Line: -		}
>, <Line: -		for (TurboLabel label : removedParent.getLabels()) {
>, <Line: -			issue.removeLabel(label);
>, <Line: -		}
>, <Line: -	}
>, <Line: -}
>]