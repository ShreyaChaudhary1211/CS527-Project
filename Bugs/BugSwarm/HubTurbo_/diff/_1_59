[]
[<Line: -package command;
>, <Line: -import java.io.IOException;
>, <Line: -import java.net.SocketTimeoutException;
>, <Line: -import java.net.UnknownHostException;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.List;
>, <Line: -import javafx.application.Platform;
>, <Line: -import org.eclipse.egit.github.core.Label;
>, <Line: -import org.eclipse.egit.github.core.client.RequestException;
>, <Line: -import service.ServiceManager;
>, <Line: -import util.CollectionUtilities;
>, <Line: -import util.DialogMessage;
>, <Line: -import model.Model;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -/**
>, <Line: - * Sets labels of issue on github
>, <Line: - * Also sets labels of given TurboIssue object to given list of TurboLabels
>, <Line: - * */
>, <Line: -public class TurboIssueSetLabels extends TurboIssueCommand{
>, <Line: -	private List<TurboLabel> previousLabels;
>, <Line: -	private List<TurboLabel> newLabels;
>, <Line: -	public TurboIssueSetLabels(Model model, TurboIssue issue, List<TurboLabel> labels){
>, <Line: -		super(model, issue);
>, <Line: -		this.newLabels = labels;
>, <Line: -		this.previousLabels = issue.getLabels(); //Is a copy of original list of labels
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected boolean performExecuteAction() {
>, <Line: -		isSuccessful = setLabelsForIssue(previousLabels, newLabels, true);
>, <Line: -		return isSuccessful;
>, <Line: -	}
>, <Line: -	private boolean setGithubLabelsForIssue(List<Label> ghLabels) throws IOException{
>, <Line: -		List<Label> res = ServiceManager.getInstance().setLabelsForIssue(issue.getId(), ghLabels);
>, <Line: -		boolean result = res.containsAll(ghLabels);
>, <Line: -		if(result){
>, <Line: -			updateGithubIssueState();
>, <Line: -		}
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	private boolean setLabelsForIssue(List<TurboLabel> oldLabels, List<TurboLabel>updatedLabels, boolean logRemarks){
>, <Line: -		issue.setLabels(updatedLabels);
>, <Line: -		ArrayList<Label> ghLabels = CollectionUtilities.getGithubLabelList(updatedLabels);
>, <Line: -		try {
>, <Line: -			boolean result = setGithubLabelsForIssue(ghLabels);
>, <Line: -			if(result){
>, <Line: -				logLabelsChange(oldLabels, updatedLabels, logRemarks);
>, <Line: -			}
>, <Line: -			return result;
>, <Line: -		} catch (IOException e) {
>, <Line: -			issue.setLabels(oldLabels);
>, <Line: -			if(e instanceof SocketTimeoutException | e instanceof UnknownHostException){
>, <Line: -				Platform.runLater(()->{
>, <Line: -					DialogMessage.showWarningDialog("Internet Connection Timeout", 
>, <Line: -							"Timeout modifying labels for issue in GitHub, please check your internet connection.");
>, <Line: -				});
>, <Line: -				logger.info("Could not set issue labels: " + e.getLocalizedMessage());
>, <Line: -			}else if(e instanceof RequestException){
>, <Line: -				Platform.runLater(()->{
>, <Line: -					DialogMessage.showWarningDialog("No repository permissions", 
>, <Line: -							"Cannot modify issue labels.");
>, <Line: -				});
>, <Line: -				logger.info("Could not set issue labels: " + e.getLocalizedMessage());
>, <Line: -			}else{
>, <Line: -				logger.error(e.getLocalizedMessage(), e);
>, <Line: -			}
>, <Line: -			return false;
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void logLabelsChange(List<TurboLabel> oldLabels, List<TurboLabel> labels, boolean logRemarks){		
>, <Line: -		lastOperationExecuted = IssueChangeLogger.logLabelsChange(model.get(), issue, oldLabels, labels);
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected boolean performUndoAction() {
>, <Line: -		if(isSuccessful){
>, <Line: -			isUndone = setLabelsForIssue(newLabels, previousLabels, false);
>, <Line: -		}
>, <Line: -		return isUndone;
>, <Line: -	}
>, <Line: -}
>]