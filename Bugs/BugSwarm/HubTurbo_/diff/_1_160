[<Line: +//package tests;
>, <Line: +//
>, <Line: +//import java.util.ArrayList;
>, <Line: +//import java.util.Date;
>, <Line: +//import java.util.List;
>, <Line: +//
>, <Line: +//import backend.resource.*;
>, <Line: +//import org.eclipse.egit.github.core.Issue;
>, <Line: +//import org.eclipse.egit.github.core.Label;
>, <Line: +//import org.eclipse.egit.github.core.Milestone;
>, <Line: +//import org.eclipse.egit.github.core.User;
>, <Line: +//
>, <Line: +//public class TestUtils {
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Methods for generating GitHub stub data.
>, <Line: +//	 */
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of Issues of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @param number
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<Issue> getStubIssues(int number) {
>, <Line: +//		ArrayList<Issue> issues = new ArrayList<>();
>, <Line: +//
>, <Line: +//		User user = new User();
>, <Line: +//		user.setLogin("tester");
>, <Line: +//
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			Issue issue = getStubIssue(i + 1);
>, <Line: +//			issues.add(issue);
>, <Line: +//		}
>, <Line: +//		return issues;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static Issue getStubIssue(int issueId) {
>, <Line: +//		User user = new User();
>, <Line: +//		user.setLogin("tester");
>, <Line: +//
>, <Line: +//		Issue issue = new Issue();
>, <Line: +//		issue.setTitle("issue" + issueId);
>, <Line: +//		issue.setBody("description for issue " + issueId);
>, <Line: +//		issue.setNumber(issueId);
>, <Line: +//		issue.setState("open");
>, <Line: +//		issue.setUser(user);
>, <Line: +//		issue.setCreatedAt(new Date());
>, <Line: +//		issue.setUpdatedAt(new Date());
>, <Line: +//
>, <Line: +//		return issue;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of Labels of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<Label> getStubLabels(int number) {
>, <Line: +//		ArrayList<Label> labels = new ArrayList<>();
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			Label label = getStubLabel("group.label" + (i + 1));
>, <Line: +//			labels.add(label);
>, <Line: +//		}
>, <Line: +//		return labels;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static Label getStubLabel(String name) {
>, <Line: +//
>, <Line: +//		Label label = new Label();
>, <Line: +//		label.setName(name);
>, <Line: +//		return label;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of Users of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<User> getStubUsers(int number) {
>, <Line: +//		ArrayList<User> users = new ArrayList<>();
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			User user = getStubUser("user" + (i + 1));
>, <Line: +//			users.add(user);
>, <Line: +//		}
>, <Line: +//		return users;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static User getStubUser(String name) {
>, <Line: +//		User milestone = new User();
>, <Line: +//		milestone.setLogin(name);
>, <Line: +//		return milestone;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of Milestones of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<Milestone> getStubMilestones(int number) {
>, <Line: +//		ArrayList<Milestone> milestones = new ArrayList<>();
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			Milestone milestone = getStubMilestone("v0." + (i + 1));
>, <Line: +//			milestones.add(milestone);
>, <Line: +//		}
>, <Line: +//		return milestones;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static Milestone getStubMilestone(String title) {
>, <Line: +//		Milestone milestone = new Milestone();
>, <Line: +//		milestone.setTitle(title);
>, <Line: +//		return milestone;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Methods for generating Turbo* stub data.
>, <Line: +//	 */
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of TurboIssues of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @param model
>, <Line: +//	 * @param number
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<TurboIssue> getStubTurboIssues(Model model, int number) {
>, <Line: +//		ArrayList<TurboIssue> issues = new ArrayList<>();
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			TurboIssue issue = getStubTurboIssue(model, i + 1);
>, <Line: +//			issues.add(issue);
>, <Line: +//		}
>, <Line: +//		return issues;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static TurboIssue getStubTurboIssue(Model model, int issueId) {
>, <Line: +//		TurboIssue issue = new TurboIssue(issueId, "issue" + issueId);
>, <Line: +//		issue.setDescription("description for issue " + issueId);
>, <Line: +//		return issue;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of TurboLabels of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<TurboLabel> getStubTurboLabels(int number) {
>, <Line: +//		ArrayList<TurboLabel> labels = new ArrayList<>();
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			TurboLabel label = getStubTurboLabel("group", "name" + (i + 1));
>, <Line: +//			labels.add(label);
>, <Line: +//		}
>, <Line: +//		return labels;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static TurboLabel getStubTurboLabel(String group, String name) {
>, <Line: +//		return new TurboLabel(group, name);
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of TurboUsers of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<TurboUser> getStubTurboUsers(int number) {
>, <Line: +//		ArrayList<TurboUser> users = new ArrayList<>();
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			TurboUser user = getStubTurboUser("user" + (i + 1));
>, <Line: +//			users.add(user);
>, <Line: +//		}
>, <Line: +//		return users;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static TurboUser getStubTurboUser(String name) {
>, <Line: +//		TurboUser user = new TurboUser(name);
>, <Line: +//		return user;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	/**
>, <Line: +//	 * Generates a list of TurboMilestones of the given length.
>, <Line: +//	 *
>, <Line: +//	 * @return
>, <Line: +//	 */
>, <Line: +//	public static List<TurboMilestone> getStubTurboMilestones(int number) {
>, <Line: +//		ArrayList<TurboMilestone> milestones = new ArrayList<>();
>, <Line: +//		for (int i = 0; i < number; i++) {
>, <Line: +//			TurboMilestone milestone = getStubTurboMilestone("v0." + (i + 1));
>, <Line: +//			milestones.add(milestone);
>, <Line: +//		}
>, <Line: +//		return milestones;
>, <Line: +//	}
>, <Line: +//
>, <Line: +//	public static TurboMilestone getStubTurboMilestone(String name) {
>, <Line: +//		return new TurboMilestone(name);
>, <Line: +//	}
>, <Line: +//}
>]
[<Line: -package tests;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.Date;
>, <Line: -import java.util.List;
>, <Line: -import model.Model;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -import model.TurboMilestone;
>, <Line: -import model.TurboUser;
>, <Line: -import org.eclipse.egit.github.core.Issue;
>, <Line: -import org.eclipse.egit.github.core.Label;
>, <Line: -import org.eclipse.egit.github.core.Milestone;
>, <Line: -import org.eclipse.egit.github.core.User;
>, <Line: -import service.RepositoryResources;
>, <Line: -public class TestUtils {
>, <Line: -	/**
>, <Line: -	 * Methods for generating GitHub stub data.
>, <Line: -	 */
>, <Line: -	/**
>, <Line: -	 * Generates a data structure containing stub data of the given length,
>, <Line: -	 * loaded from a simulated cache. Does not contain issues, since that's how
>, <Line: -	 * the cache-loaded data works.
>, <Line: -	 * 
>, <Line: -	 * @param model
>, <Line: -	 * @param n
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static RepositoryResources getStubResources(Model model, int n) {
>, <Line: -		return RepositoryResources.fromGitHub(
>, <Line: -			getStubIssues(n),
>, <Line: -			getStubLabels(n),
>, <Line: -			getStubMilestones(n),
>, <Line: -			getStubUsers(n)
>, <Line: -		);
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of Issues of the given length.
>, <Line: -	 * 
>, <Line: -	 * @param number
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<Issue> getStubIssues(int number) {
>, <Line: -		ArrayList<Issue> issues = new ArrayList<>();
>, <Line: -		User user = new User();
>, <Line: -		user.setLogin("tester");
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			Issue issue = getStubIssue(i + 1);
>, <Line: -			issues.add(issue);
>, <Line: -		}
>, <Line: -		return issues;
>, <Line: -	}
>, <Line: -	public static Issue getStubIssue(int issueId) {
>, <Line: -		User user = new User();
>, <Line: -		user.setLogin("tester");
>, <Line: -		Issue issue = new Issue();
>, <Line: -		issue.setTitle("issue" + issueId);
>, <Line: -		issue.setBody("description for issue " + issueId);
>, <Line: -		issue.setNumber(issueId);
>, <Line: -		issue.setState("open");
>, <Line: -		issue.setUser(user);
>, <Line: -		issue.setCreatedAt(new Date());
>, <Line: -		issue.setUpdatedAt(new Date());
>, <Line: -		return issue;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of Labels of the given length.
>, <Line: -	 * 
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<Label> getStubLabels(int number) {
>, <Line: -		ArrayList<Label> labels = new ArrayList<>();
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			Label label = getStubLabel("group.label" + (i + 1));
>, <Line: -			labels.add(label);
>, <Line: -		}
>, <Line: -		return labels;
>, <Line: -	}
>, <Line: -	public static Label getStubLabel(String name) {
>, <Line: -		Label label = new Label();
>, <Line: -		label.setName(name);
>, <Line: -		return label;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of Users of the given length.
>, <Line: -	 * 
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<User> getStubUsers(int number) {
>, <Line: -		ArrayList<User> users = new ArrayList<>();
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			User user = getStubUser("user" + (i + 1));
>, <Line: -			users.add(user);
>, <Line: -		}
>, <Line: -		return users;
>, <Line: -	}
>, <Line: -	public static User getStubUser(String name) {
>, <Line: -		User milestone = new User();
>, <Line: -		milestone.setLogin(name);
>, <Line: -		return milestone;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of Milestones of the given length.
>, <Line: -	 * 
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<Milestone> getStubMilestones(int number) {
>, <Line: -		ArrayList<Milestone> milestones = new ArrayList<>();
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			Milestone milestone = getStubMilestone("v0." + (i + 1));
>, <Line: -			milestones.add(milestone);
>, <Line: -		}
>, <Line: -		return milestones;
>, <Line: -	}
>, <Line: -	public static Milestone getStubMilestone(String title) {
>, <Line: -		Milestone milestone = new Milestone();
>, <Line: -		milestone.setTitle(title);
>, <Line: -		return milestone;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Methods for generating Turbo* stub data.
>, <Line: -	 */
>, <Line: -	/**
>, <Line: -	 * Generates a data structure containing stub data of the given length,
>, <Line: -	 * loaded from a simulated cache. Does not contain issues, since that's how
>, <Line: -	 * the cache-loaded data works.
>, <Line: -	 * 
>, <Line: -	 * @param model
>, <Line: -	 * @param n
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static RepositoryResources getStubTurboResourcesFromCache(Model model, int n) {
>, <Line: -		return RepositoryResources.fromCache(
>, <Line: -			TestUtils.getStubTurboIssues(model, 10),
>, <Line: -			getStubTurboLabels(n),
>, <Line: -			getStubTurboMilestones(n),
>, <Line: -			getStubTurboUsers(n)
>, <Line: -		);
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of TurboIssues of the given length.
>, <Line: -	 * 
>, <Line: -	 * @param model
>, <Line: -	 * @param number
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<TurboIssue> getStubTurboIssues(Model model, int number) {
>, <Line: -		ArrayList<TurboIssue> issues = new ArrayList<>();
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			TurboIssue issue = getStubTurboIssue(model, i + 1);
>, <Line: -			issues.add(issue);
>, <Line: -		}
>, <Line: -		return issues;
>, <Line: -	}
>, <Line: -	public static TurboIssue getStubTurboIssue(Model model, int issueId) {
>, <Line: -		TurboIssue issue = new TurboIssue("issue" + issueId, "description for issue " + issueId, model);
>, <Line: -		issue.setId(issueId);
>, <Line: -		return issue;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of TurboLabels of the given length.
>, <Line: -	 * 
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<TurboLabel> getStubTurboLabels(int number) {
>, <Line: -		ArrayList<TurboLabel> labels = new ArrayList<>();
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			TurboLabel label = getStubTurboLabel("group", "name" + (i + 1));
>, <Line: -			labels.add(label);
>, <Line: -		}
>, <Line: -		return labels;
>, <Line: -	}
>, <Line: -	public static TurboLabel getStubTurboLabel(String group, String name) {
>, <Line: -		TurboLabel label = new TurboLabel();
>, <Line: -		label.setName(name);
>, <Line: -		label.setGroup(group);
>, <Line: -		return label;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of TurboUsers of the given length.
>, <Line: -	 * 
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<TurboUser> getStubTurboUsers(int number) {
>, <Line: -		ArrayList<TurboUser> users = new ArrayList<>();
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			TurboUser user = getStubTurboUser("user" + (i + 1));
>, <Line: -			users.add(user);
>, <Line: -		}
>, <Line: -		return users;
>, <Line: -	}
>, <Line: -	public static TurboUser getStubTurboUser(String name) {
>, <Line: -		TurboUser user = new TurboUser();
>, <Line: -		user.setGithubName(name);
>, <Line: -		return user;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Generates a list of TurboMilestones of the given length.
>, <Line: -	 * 
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	public static List<TurboMilestone> getStubTurboMilestones(int number) {
>, <Line: -		ArrayList<TurboMilestone> milestones = new ArrayList<>();
>, <Line: -		for (int i = 0; i < number; i++) {
>, <Line: -			TurboMilestone milestone = getStubTurboMilestone("v0." + (i + 1));
>, <Line: -			milestones.add(milestone);
>, <Line: -		}
>, <Line: -		return milestones;
>, <Line: -	}
>, <Line: -	public static TurboMilestone getStubTurboMilestone(String name) {
>, <Line: -		return new TurboMilestone(name);
>, <Line: -	}
>, <Line: -}
>]