[<Line: +package backend.json;
>, <Line: +import backend.interfaces.RepoStore;
>, <Line: +import backend.interfaces.StoreTask;
>, <Line: +import backend.resource.Model;
>, <Line: +import backend.resource.serialization.SerializableModel;
>, <Line: +import com.google.gson.Gson;
>, <Line: +import com.google.gson.reflect.TypeToken;
>, <Line: +import org.apache.logging.log4j.Logger;
>, <Line: +import util.HTLog;
>, <Line: +import java.util.Optional;
>, <Line: +import java.util.concurrent.CompletableFuture;
>, <Line: +class ReadTask extends StoreTask {
>, <Line: +	private static final Logger logger = HTLog.get(ReadTask.class);
>, <Line: +	public final CompletableFuture<Model> response;
>, <Line: +	public ReadTask(String repoId, CompletableFuture<Model> response) {
>, <Line: +		super(repoId);
>, <Line: +		this.response = response;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void run() {
>, <Line: +		Model model = load(repoId);
>, <Line: +		response.complete(model);
>, <Line: +	}
>, <Line: +	private Model load(String repoId) {
>, <Line: +		Optional<String> input = RepoStore.read(repoId);
>, <Line: +		if (!input.isPresent()) {
>, <Line: +			logger.error("Unable to load " + repoId + " from JSON cache; defaulting to an empty Model");
>, <Line: +			return new Model(repoId);
>, <Line: +		} else {
>, <Line: +			logger.info(HTLog.format(repoId, "Loaded from JSON cache"));
>, <Line: +			SerializableModel sModel = new Gson().fromJson(input.get(),
>, <Line: +				new TypeToken<SerializableModel>(){}.getType());
>, <Line: +			return new Model(sModel);
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]