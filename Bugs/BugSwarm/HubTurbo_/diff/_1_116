[<Line: +import ui.UI;
>, <Line: +import util.events.UpdateProgressEventHandler;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.Map;
>, <Line: +public class HTStatusBar extends StatusBar implements StatusUI {
>, <Line: +	private final UI ui;
>, <Line: +	private final Map<String, TextProgressBar> progressBars;
>, <Line: +	public HTStatusBar(UI ui) {
>, <Line: +		this.ui = ui;
>, <Line: +		progressBars = new HashMap<>();
>, <Line: +		setup();
>, <Line: +		setupProgressEvents();
>, <Line: +	private void setupProgressEvents() {
>, <Line: +		ui.registerEvent((UpdateProgressEventHandler) e -> {
>, <Line: +			Platform.runLater(() -> {
>, <Line: +				if (progressBars.containsKey(e.repoId)) {
>, <Line: +					if (e.done) {
>, <Line: +						getRightItems().remove(progressBars.get(e.repoId));
>, <Line: +					} else {
>, <Line: +						progressBars.get(e.repoId).setProgress(e.progress);
>, <Line: +					}
>, <Line: +				} else {
>, <Line: +					TextProgressBar progressBar = new TextProgressBar(e.repoId);
>, <Line: +					progressBars.put(e.repoId, progressBar);
>, <Line: +					getRightItems().add(progressBar);
>, <Line: +				}
>, <Line: +			});
>, <Line: +	private void setup() {
>, <Line: +		getStyleClass().add("top-borders");
>, <Line: +	public void displayMessage(String text) {
>, <Line: +			setText(text);
>, <Line: +	@Override
>, <Line: +	public void clear() {
>, <Line: +		displayMessage("");
>]
[<Line: -import javafx.geometry.Insets;
>, <Line: -import javafx.scene.control.Label;
>, <Line: -import javafx.scene.layout.HBox;
>, <Line: -public class HTStatusBar extends StatusBar {
>, <Line: -	private static HTStatusBar instance = null;
>, <Line: -	public static HTStatusBar getInstance() {
>, <Line: -		if (instance == null) {
>, <Line: -			instance = new HTStatusBar();
>, <Line: -		}
>, <Line: -		return instance;
>, <Line: -	}
>, <Line: -	private Label timerLabel = new Label();
>, <Line: -	public HTStatusBar() {
>, <Line: -		getStyleClass().add("top-borders");
>, <Line: -		setupTimerLabel();
>, <Line: -		getRightItems().add(timerLabel);
>, <Line: -	}
>, <Line: -	private void setupTimerLabel() {
>, <Line: -		HBox.setMargin(timerLabel, new Insets(3));
>, <Line: -	public static void displayMessage(String text) {
>, <Line: -		Platform.runLater(() -> {
>, <Line: -			getInstance().setText(text);
>, <Line: -	public static void updateRefreshTimer(int time) {
>, <Line: -		Platform.runLater(() -> {
>, <Line: -			getInstance().timerLabel.setText(Integer.toString(time));
>, <Line: -		});
>, <Line: -	}
>, <Line: -	public static void addProgress(double increment) {
>, <Line: -		double progress = Math.min(Math.max(0, getInstance().getProgress() + increment), 1);
>, <Line: -		Platform.runLater(() -> {
>, <Line: -			getInstance().setProgress(progress);
>, <Line: -		});
>, <Line: -	public static void addProgressAndDisplayMessage(double increment, String message) {
>, <Line: -		double progress = Math.min(Math.max(0, getInstance().getProgress() + increment), 1);
>, <Line: -			getInstance().setText(message);
>, <Line: -			getInstance().setProgress(progress);
>, <Line: -	public static void updateProgress(double progress) {
>, <Line: -		Platform.runLater(() -> {
>, <Line: -			getInstance().setProgress(progress);
>, <Line: -		});
>]