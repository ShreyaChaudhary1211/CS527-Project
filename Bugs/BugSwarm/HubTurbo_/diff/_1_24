[<Line: +package backend.interfaces;
>, <Line: +import backend.IssueMetadata;
>, <Line: +import backend.UserCredentials;
>, <Line: +import backend.resource.Model;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Map;
>, <Line: +import java.util.concurrent.CompletableFuture;
>, <Line: +import java.util.concurrent.ExecutorService;
>, <Line: +import java.util.concurrent.Executors;
>, <Line: +public abstract class RepoSource implements TaskRunner {
>, <Line: +	private final ExecutorService pool = Executors.newCachedThreadPool();
>, <Line: +	@Override
>, <Line: +	public <R> RepoTask<R> addTask(RepoTask<R> task) {
>, <Line: +		execute(task);
>, <Line: +		return task;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void execute(Runnable r) {
>, <Line: +		pool.execute(r);
>, <Line: +	}
>, <Line: +	public abstract String getName();
>, <Line: +	public abstract CompletableFuture<Boolean> login(UserCredentials credentials);
>, <Line: +	public abstract CompletableFuture<Model> downloadRepository(String repoId);
>, <Line: +	public abstract CompletableFuture<Model> updateModel(Model model);
>, <Line: +	public abstract CompletableFuture<Map<Integer, IssueMetadata>> downloadMetadata(String repoId, List<Integer> issues);
>, <Line: +	public abstract CompletableFuture<Boolean> isRepositoryValid(String repoId);
>, <Line: +}
>]
[]