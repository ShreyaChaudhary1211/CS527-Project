[]
[<Line: -package storage;
>, <Line: -import java.io.BufferedReader;
>, <Line: -import java.io.File;
>, <Line: -import java.io.FileReader;
>, <Line: -import java.io.FileWriter;
>, <Line: -import java.io.IOException;
>, <Line: -import java.time.LocalDateTime;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.Date;
>, <Line: -import java.util.List;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -import model.TurboMilestone;
>, <Line: -import model.TurboUser;
>, <Line: -import org.apache.commons.io.FileUtils;
>, <Line: -import org.apache.logging.log4j.LogManager;
>, <Line: -import org.apache.logging.log4j.Logger;
>, <Line: -import com.google.gson.Gson;
>, <Line: -import com.google.gson.GsonBuilder;
>, <Line: -import util.Utility;
>, <Line: -public class CacheFileHandler {
>, <Line: -	private static final Logger logger = LogManager.getLogger(CacheFileHandler.class.getName());
>, <Line: -	private static final String DIR_CACHE = ".hubturbocache";
>, <Line: -	private static final String FILE_DATA_CACHE = "-cache.json";
>, <Line: -	private static final String FILE_DATA_CACHE_TEMP = "-cache-temp.json";
>, <Line: -	private CachedRepoData repo = null;
>, <Line: -	private String repoId = null;
>, <Line: -	/**
>, <Line: -	 * TODO Stop-gap measure pending a more robust updater that can
>, <Line: -	 * deal with schema versions.
>, <Line: -	 */
>, <Line: -	public static void deleteCacheDirectory() {
>, <Line: -		try {
>, <Line: -			FileUtils.deleteDirectory(new File(DIR_CACHE));
>, <Line: -		} catch (IOException e) {
>, <Line: -			logger.error(e.getLocalizedMessage(), e);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public CacheFileHandler(String repoId) {
>, <Line: -		this.repoId = repoId;
>, <Line: -		directorySetup();
>, <Line: -		readFromFile();
>, <Line: -	}
>, <Line: -	private void directorySetup() {
>, <Line: -		File directory = new File(DIR_CACHE);
>, <Line: -		if (!directory.exists()) {
>, <Line: -			directory.mkdir();
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public void readFromFile() {
>, <Line: -		String filename = getFileName(FILE_DATA_CACHE, this.repoId);
>, <Line: -		if (!new File(filename).exists()) {
>, <Line: -			return;
>, <Line: -		}
>, <Line: -		Gson gson = new GsonBuilder()
>, <Line: -			.registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())
>, <Line: -			.create();
>, <Line: -		try {
>, <Line: -			BufferedReader bufferedReader = new BufferedReader(new FileReader(filename));
>, <Line: -			repo = gson.fromJson(bufferedReader, CachedRepoData.class);
>, <Line: -			bufferedReader.close();
>, <Line: -		} catch (IOException e) {
>, <Line: -			logger.error(e.getLocalizedMessage(), e);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private String getFileName(String givenFileName, String repoIdString) {
>, <Line: -		String[] repoIdTokens = repoIdString.split("/");
>, <Line: -		String repoFileName = repoIdTokens[0] + "_" + repoIdTokens[1];
>, <Line: -		return DIR_CACHE + File.separator + repoFileName + givenFileName;
>, <Line: -	}
>, <Line: -	public CachedRepoData getRepo() {
>, <Line: -		return repo;
>, <Line: -	}
>, <Line: -	public void writeToFile(String repoIdString, String issuesETag, String labelsETag, String milestonesETag,
>, <Line: -	    String collabsETag, Date issueCheckTime,
>, <Line: -	    List<TurboUser> collaborators, List<TurboLabel> labels,
>, <Line: -	    List<TurboMilestone> milestones, List<TurboIssue> issues) {
>, <Line: -		CachedRepoData currentRepoData = new CachedRepoData(issuesETag, collabsETag, labelsETag, milestonesETag,
>, <Line: -			Utility.dateToLocalDateTime(issueCheckTime), new ArrayList<>(collaborators), new ArrayList<>(labels),
>, <Line: -			new ArrayList<>(milestones), new ArrayList<>(issues));
>, <Line: -		Gson gson = new GsonBuilder().setPrettyPrinting()
>, <Line: -				.registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
>, <Line: -		String json = gson.toJson(currentRepoData);
>, <Line: -		// Save to temp file first, then replace main cache file when done
>, <Line: -		try {
>, <Line: -			FileWriter writer = new FileWriter(getFileName(FILE_DATA_CACHE_TEMP, repoIdString));
>, <Line: -			writer.write(json);
>, <Line: -			writer.close();
>, <Line: -			File file = new File(getFileName(FILE_DATA_CACHE, repoIdString));
>, <Line: -			if (file.exists() && !file.delete()) {
>, <Line: -				logger.error("Failed to delete cache file");
>, <Line: -			}
>, <Line: -			File newFile = new File(getFileName(FILE_DATA_CACHE_TEMP, repoIdString));
>, <Line: -			if (!newFile.renameTo(file)) {
>, <Line: -				logger.error("Failed to rename temp cache file");
>, <Line: -			}
>, <Line: -		} catch (IOException e) {
>, <Line: -			logger.error(e.getLocalizedMessage(), e);
>, <Line: -		}
>, <Line: -		logger.info("Wrote to file for repo " + repoIdString + " with last checked time: " + issueCheckTime);
>, <Line: -	}
>, <Line: -}
>]