[]
[<Line: -package command;
>, <Line: -import java.io.IOException;
>, <Line: -import java.net.SocketTimeoutException;
>, <Line: -import java.net.UnknownHostException;
>, <Line: -import java.util.List;
>, <Line: -import javafx.application.Platform;
>, <Line: -import org.eclipse.egit.github.core.Label;
>, <Line: -import org.eclipse.egit.github.core.client.RequestException;
>, <Line: -import service.ServiceManager;
>, <Line: -import util.CollectionUtilities;
>, <Line: -import util.DialogMessage;
>, <Line: -import model.Model;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -/**
>, <Line: - * Removes list of labels from issue on github
>, <Line: - * Also removes given List of labes from given TurboIssue object
>, <Line: - * */
>, <Line: -public class TurboIssueRemoveLabels extends TurboIssueCommand{
>, <Line: -	private List<TurboLabel> removedLabels;
>, <Line: -	public TurboIssueRemoveLabels(Model model, TurboIssue issue, List<TurboLabel> labels){
>, <Line: -		super(model, issue);
>, <Line: -		this.removedLabels = labels;
>, <Line: -	}
>, <Line: -	private void logRemoveOperation(List<TurboLabel> original, List<TurboLabel> edited){
>, <Line: -		String changeLog = IssueChangeLogger.logLabelsChange(model.get(), issue, original, edited);
>, <Line: -		lastOperationExecuted = changeLog;
>, <Line: -	}
>, <Line: -	private boolean setLabelsForIssueInGithub() throws IOException{
>, <Line: -		List<Label> issueLabels = CollectionUtilities.getGithubLabelList(issue.getLabels());
>, <Line: -		//Use setLabelsForIssue instead of addLabels to enforce label group exclusivity
>, <Line: -		List<Label> resLabels = ServiceManager.getInstance().setLabelsForIssue(issue.getId(), issueLabels);
>, <Line: -		boolean result =  resLabels.containsAll(issueLabels);
>, <Line: -		if(result){
>, <Line: -			updateGithubIssueState();
>, <Line: -		}
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected boolean performExecuteAction() {
>, <Line: -		List<TurboLabel> original = issue.getLabels();
>, <Line: -		issue.removeLabels(removedLabels);
>, <Line: -		try {
>, <Line: -			isSuccessful = setLabelsForIssueInGithub();
>, <Line: -			if(isSuccessful){
>, <Line: -				logRemoveOperation(original, issue.getLabels());
>, <Line: -			}
>, <Line: -		} catch (IOException e) {
>, <Line: -			issue.addLabels(removedLabels);
>, <Line: -			isSuccessful = false;
>, <Line: -			if(e instanceof SocketTimeoutException | e instanceof UnknownHostException){
>, <Line: -				Platform.runLater(()->{
>, <Line: -					DialogMessage.showWarningDialog("Internet Connection Timeout", 
>, <Line: -							"Timeout removing label(s) from issue in GitHub, please check your internet connection.");
>, <Line: -				});
>, <Line: -				logger.info("Could not remove issue labels: " + e.getLocalizedMessage());
>, <Line: -			}else if(e instanceof RequestException){
>, <Line: -				Platform.runLater(()->{
>, <Line: -					DialogMessage.showWarningDialog("No repository permissions", 
>, <Line: -							"Cannot remove label(s) from issue.");
>, <Line: -				});
>, <Line: -				logger.info("Could not remove issue labels: " + e.getLocalizedMessage());
>, <Line: -			}else{
>, <Line: -				logger.error(e.getLocalizedMessage(), e);
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return isSuccessful;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected boolean performUndoAction() {
>, <Line: -		List<TurboLabel> original = issue.getLabels();
>, <Line: -		issue.addLabels(removedLabels);
>, <Line: -		try {
>, <Line: -			boolean result = setLabelsForIssueInGithub();
>, <Line: -			if(result){
>, <Line: -				logRemoveOperation(original, issue.getLabels());
>, <Line: -			}
>, <Line: -			isUndone = result;
>, <Line: -		} catch (IOException e) {
>, <Line: -			issue.removeLabels(removedLabels);
>, <Line: -			isUndone = false;
>, <Line: -			if(e instanceof SocketTimeoutException){
>, <Line: -				Platform.runLater(()->{
>, <Line: -					DialogMessage.showWarningDialog("Internet Connection Timeout", 
>, <Line: -							"Timeout modifying label(s) for issue in GitHub, please check your internet connection.");
>, <Line: -				});
>, <Line: -			}else if(e instanceof RequestException){
>, <Line: -				Platform.runLater(()->{
>, <Line: -					DialogMessage.showWarningDialog("No repository permissions", 
>, <Line: -							"Cannot modify issue labels.");
>, <Line: -				});
>, <Line: -			}else{
>, <Line: -				logger.error(e.getLocalizedMessage(), e);
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return isUndone;
>, <Line: -	}
>, <Line: -}
>]