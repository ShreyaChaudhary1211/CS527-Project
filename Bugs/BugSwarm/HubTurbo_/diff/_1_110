[<Line: +import javafx.scene.control.*;
>, <Line: +import prefs.Preferences;
>, <Line: +import util.events.*;
>, <Line: +import java.io.IOException;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Map;
>, <Line: +import java.util.Optional;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +import java.util.stream.Stream;
>, <Line: +	private final Preferences prefs;
>, <Line: +	public MenuControl(UI ui, ColumnControl columns, ScrollPane columnsScrollPane, Preferences prefs) {
>, <Line: +		this.prefs = prefs;
>, <Line: +//			DataManager.getInstance().setLastLoginPassword("");
>, <Line: +	    if (filterStrings.isEmpty()) {
>, <Line: +		    logger.info("Did not save new board");
>, <Line: +		    return;
>, <Line: +		TextInputDialog dlg = new TextInputDialog("");
>, <Line: +		dlg.setTitle("Board Name");
>, <Line: +		dlg.getDialogPane().setContentText("What should this board be called?");
>, <Line: +		dlg.getDialogPane().setHeaderText("Please name this board");
>, <Line: +		Optional<String> response = dlg.showAndWait();
>, <Line: +		if (response.isPresent()) {
>, <Line: +			prefs.addBoard(response.get(), filterStrings);
>, <Line: +			ui.triggerEvent(new BoardSavedEvent());
>, <Line: +			logger.info("New board" + response.get() + " saved, containing " + filterStrings);
>, <Line: +		}
>, <Line: +        dlg.getDialogPane().setContentText("Are you sure you want to delete this board?");
>, <Line: +			prefs.removeBoard(boardName);
>, <Line: +		ui.registerEvent((BoardSavedEventHandler) e -> {
>, <Line: +			open.getItems().clear();
>, <Line: +			delete.getItems().clear();
>, <Line: +			Map<String, List<String>> boards = prefs.getAllBoards();
>, <Line: +			for (final String boardName : boards.keySet()) {
>, <Line: +				final List<String> filterSet = boards.get(boardName);
>, <Line: +				MenuItem openItem = new MenuItem(boardName);
>, <Line: +				openItem.setOnAction(e1 -> onBoardOpen(boardName, filterSet));
>, <Line: +				open.getItems().add(openItem);
>, <Line: +				MenuItem deleteItem = new MenuItem(boardName);
>, <Line: +				deleteItem.setOnAction(e1 -> onBoardDelete(boardName));
>, <Line: +				delete.getItems().add(deleteItem);
>, <Line: +			ui.logic.refresh();
>, <Line: +//					updateMessage(String.format("Reloading %s...",
>, <Line: +//						ServiceManager.getInstance().getRepoId().generateId()));
>, <Line: +					// TODO
>, <Line: +//					ServiceManager.getInstance().forceRefresh((message, progress) -> {
>, <Line: +//						updateProgress(progress * 100, 100);
>, <Line: +//						updateMessage(message);
>, <Line: +//					});
>, <Line: +		setHvalue(columnIndex * (columnsScrollPane.getHmax()) / (NumOfColumns - 1));
>]
[<Line: -import java.io.IOException;
>, <Line: -import java.net.SocketTimeoutException;
>, <Line: -import java.net.UnknownHostException;
>, <Line: -import java.util.List;
>, <Line: -import java.util.Map;
>, <Line: -import java.util.Optional;
>, <Line: -import java.util.concurrent.CountDownLatch;
>, <Line: -import java.util.stream.Collectors;
>, <Line: -import java.util.stream.Stream;
>, <Line: -import javafx.scene.control.Alert;
>, <Line: -import javafx.scene.control.ButtonType;
>, <Line: -import javafx.scene.control.Menu;
>, <Line: -import javafx.scene.control.MenuBar;
>, <Line: -import javafx.scene.control.MenuItem;
>, <Line: -import javafx.scene.control.ScrollBar;
>, <Line: -import javafx.scene.control.ScrollPane;
>, <Line: -import javafx.scene.control.TextInputDialog;
>, <Line: -import service.ServiceManager;
>, <Line: -import storage.DataManager;
>, <Line: -import util.events.IssueCreatedEvent;
>, <Line: -import util.events.LabelCreatedEvent;
>, <Line: -import util.events.MilestoneCreatedEvent;
>, <Line: -import util.events.BoardSavedEvent;
>, <Line: -import util.events.BoardSavedEventHandler;
>, <Line: -	public MenuControl(UI ui, ColumnControl columns, ScrollPane columnsScrollPane) {
>, <Line: -			DataManager.getInstance().setLastLoginPassword("");
>, <Line: -	    if (!filterStrings.isEmpty()) {
>, <Line: -            TextInputDialog dlg = new TextInputDialog("");
>, <Line: -            dlg.setTitle("Board Name");
>, <Line: -            dlg.getDialogPane().setContentText("What should this board be called?");
>, <Line: -    		dlg.getDialogPane().setHeaderText("Please name this board");
>, <Line: -            Optional<String> response = dlg.showAndWait();
>, <Line: -	    	if (response.isPresent()) {
>, <Line: -	        	DataManager.getInstance().addBoard(response.get(), filterStrings);
>, <Line: -	        	ui.triggerEvent(new BoardSavedEvent());
>, <Line: -	        	logger.info("New board" + response.get() + " saved, containing " + filterStrings);
>, <Line: -	        	return;
>, <Line: -	    	}
>, <Line: -    	logger.info("Did not save new board");
>, <Line: -        dlg.getDialogPane().setContentText("Are you sure you want to delete this panelboard?");
>, <Line: -			DataManager.getInstance().removeBoard(boardName);
>, <Line: -		ui.registerEvent(new BoardSavedEventHandler() {
>, <Line: -			@Override
>, <Line: -			public void handle(BoardSavedEvent e) {
>, <Line: -				open.getItems().clear();
>, <Line: -				delete.getItems().clear();
>, <Line: -				Map<String, List<String>> boards = DataManager.getInstance().getAllBoards();
>, <Line: -				for (final String boardName : boards.keySet()) {
>, <Line: -					final List<String> filterSet = boards.get(boardName);
>, <Line: -					MenuItem openItem = new MenuItem(boardName);
>, <Line: -					openItem.setOnAction(e1 -> onBoardOpen(boardName, filterSet));
>, <Line: -					open.getItems().add(openItem);
>, <Line: -					MenuItem deleteItem = new MenuItem(boardName);
>, <Line: -					deleteItem.setOnAction(e1 -> onBoardDelete(boardName));
>, <Line: -					delete.getItems().add(deleteItem);
>, <Line: -				}
>, <Line: -			ServiceManager.getInstance().updateModelNow();
>, <Line: -					updateMessage(String.format("Reloading %s...",
>, <Line: -						ServiceManager.getInstance().getRepoId().generateId()));
>, <Line: -					ServiceManager.getInstance().forceRefresh((message, progress) -> {
>, <Line: -						updateProgress(progress * 100, 100);
>, <Line: -						updateMessage(message);
>, <Line: -					});
>, <Line: -		setHvalue(columnIndex * (columnsScrollPane.getHmax())/(NumOfColumns-1));
>]