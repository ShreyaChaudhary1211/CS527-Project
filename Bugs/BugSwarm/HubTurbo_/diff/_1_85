[]
[<Line: -package model;
>, <Line: -import javafx.geometry.Insets;
>, <Line: -import javafx.scene.Node;
>, <Line: -import javafx.scene.layout.HBox;
>, <Line: -import javafx.scene.layout.VBox;
>, <Line: -import javafx.scene.text.Text;
>, <Line: -import org.apache.logging.log4j.LogManager;
>, <Line: -import org.apache.logging.log4j.Logger;
>, <Line: -import org.eclipse.egit.github.core.*;
>, <Line: -import service.ServiceManager;
>, <Line: -import service.TurboIssueEvent;
>, <Line: -import storage.DataManager;
>, <Line: -import util.CollectionUtilities;
>, <Line: -import util.Utility;
>, <Line: -import java.lang.ref.WeakReference;
>, <Line: -import java.text.SimpleDateFormat;
>, <Line: -import java.time.LocalDateTime;
>, <Line: -import java.time.ZoneId;
>, <Line: -import java.time.temporal.ChronoUnit;
>, <Line: -import java.util.*;
>, <Line: -import java.util.stream.Collectors;
>, <Line: -@SuppressWarnings("unused")
>, <Line: -public class TurboIssue implements TurboResource {
>, <Line: -	private static final Logger logger = LogManager.getLogger(TurboIssue.class.getName());
>, <Line: -	private static final String STATE_CLOSED = "closed";
>, <Line: -	private static final String STATE_OPEN = "open";
>, <Line: -	private static final String REGEX_REPLACE_DESC = "^[^<>]*<hr>";
>, <Line: -	private static final String REGEX_SPLIT_PARENT = "(,\\s+)?#";
>, <Line: -	private static final String REGEX_SPLIT_LINES = "(\\r?\\n)+";
>, <Line: -	private static final String METADATA_HEADER_PARENT = "* Parent: ";
>, <Line: -	private static final String OLD_METADATA_HEADER_PARENT = "* Parent(s): ";
>, <Line: -	private static final String METADATA_PARENT = "#%1d \n";
>, <Line: -	private static final String METADATA_SEPERATOR = "<hr>";
>, <Line: -	private static final String NEW_LINE = "\n";
>, <Line: -	private static final int REFRESH_FEED_MINUTES = 15;
>, <Line: -	private void ______SERIALISED_FIELDS______() {
>, <Line: -	}
>, <Line: -	private String creator;
>, <Line: -	private String createdAt;
>, <Line: -	private LocalDateTime updatedAt;
>, <Line: -	private int commentCount;
>, <Line: -	private PullRequest pullRequest;
>, <Line: -	private int id = 0;
>, <Line: -	private String title = "";
>, <Line: -	private String description = "";
>, <Line: -	private int parentIssue = 0;
>, <Line: -	private boolean state = false;
>, <Line: -	private TurboUser assignee;
>, <Line: -	private String htmlUrl;
>, <Line: -	/**
>, <Line: -	 * These fields should not be accessed directly. They are lazily
>, <Line: -	 * loaded and may not yet be available at an arbitrary point.
>, <Line: -	 * Access them through getLabels() or getMilestone() instead.
>, <Line: -	 */
>, <Line: -	private Optional<TurboMilestone> milestone = Optional.empty();
>, <Line: -	private Optional<List<TurboLabel>> labels = Optional.empty();
>, <Line: -	/**
>, <Line: -	 * These fields contain references to information required for lazy loading.
>, <Line: -	 */
>, <Line: -	private Optional<Milestone> temporaryMilestone = Optional.empty();
>, <Line: -	private Optional<List<Label>> temporaryLabels = Optional.empty();
>, <Line: -	private void ______MISCELLANEOUS_FIELDS______() {
>, <Line: -	}
>, <Line: -	private Model model;
>, <Line: -	private List<TurboIssueEvent> events = new ArrayList<>();
>, <Line: -	private List<Comment> comments = new ArrayList<>();
>, <Line: -	private boolean hasNewComments = false;
>, <Line: -	private LocalDateTime lastModifiedTime;
>, <Line: -	private void ______ESSENTIALS______() {
>, <Line: -	}
>, <Line: -	public TurboIssue(String title, String desc, Model model) {
>, <Line: -		assert title != null;
>, <Line: -		assert desc != null;
>, <Line: -		assert model != null;
>, <Line: -		this.model = model;
>, <Line: -		setTitle(title);
>, <Line: -		setDescription(desc);
>, <Line: -		setOpen(true);
>, <Line: -	}
>, <Line: -	public TurboIssue(Issue issue, Model model) {
>, <Line: -		assert issue != null;
>, <Line: -		assert model != null;
>, <Line: -		this.model = model;
>, <Line: -		setHtmlUrl(issue.getHtmlUrl());
>, <Line: -		setTitle(issue.getTitle());
>, <Line: -		setOpen(issue.getState().equals(STATE_OPEN));
>, <Line: -		setId(issue.getNumber());
>, <Line: -		setDescription(extractDescription(issue.getBody()));
>, <Line: -		setAssignee(issue.getAssignee() == null ? null : new TurboUser(issue.getAssignee()));
>, <Line: -		setMilestone(issue.getMilestone() == null ? null : new TurboMilestone(issue.getMilestone()));
>, <Line: -		setLabels(translateLabels(issue.getLabels()));
>, <Line: -		setParentIssue(extractIssueParent(issue.getBody()));
>, <Line: -		setPullRequest(issue.getPullRequest());
>, <Line: -		setCommentCount(issue.getComments());
>, <Line: -		setCreator(issue.getUser().getLogin());
>, <Line: -		setCreatedAt(new SimpleDateFormat("d MMM yy, h:mm a").format(issue.getCreatedAt()));
>, <Line: -		setUpdatedAt(LocalDateTime.ofInstant(issue.getUpdatedAt().toInstant(), ZoneId.systemDefault()));
>, <Line: -	}
>, <Line: -	public Issue toGhResource() {
>, <Line: -		Issue ghIssue = new Issue();
>, <Line: -		ghIssue.setHtmlUrl(getHtmlUrl());
>, <Line: -		ghIssue.setNumber(getId());
>, <Line: -		ghIssue.setTitle(getTitle());
>, <Line: -		ghIssue.setState(isOpen() ? STATE_OPEN : STATE_CLOSED);
>, <Line: -		if (assignee != null)
>, <Line: -			ghIssue.setAssignee(assignee.toGhResource());
>, <Line: -		if (milestone != null)
>, <Line: -			ghIssue.setMilestone(getMilestone().toGhResource());
>, <Line: -		ghIssue.setLabels(TurboLabel.toGhLabels(getLabelCollection()));
>, <Line: -		ghIssue.setBody(buildGithubBody());
>, <Line: -		return ghIssue;
>, <Line: -	}
>, <Line: -	public TurboIssue(TurboIssue other) {
>, <Line: -		assert other != null;
>, <Line: -		copyValuesFrom(other);
>, <Line: -	}
>, <Line: -	private void log(String field, String change) {
>, <Line: -	    logger.info(String.format("Issue %d %s: %s", this.getId(), field, change));
>, <Line: -	}
>, <Line: -	private void log(String field, String before, String after) {
>, <Line: -	    logger.info(String.format("Issue %d %s: '%s' -> '%s'", this.getId(), field, before, after));
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public void copyValuesFrom(TurboResource other) {
>, <Line: -	    assert other != null;
>, <Line: -		assert other instanceof TurboIssue;
>, <Line: -		TurboIssue otherIssue = (TurboIssue) other;
>, <Line: -		model = otherIssue.model;
>, <Line: -		setHtmlUrl(otherIssue.getHtmlUrl());
>, <Line: -		// Logging is done with the assumption that this method is used for
>, <Line: -		// updating the values of TurboIssue in mind
>, <Line: -		if (!otherIssue.getTitle().equals(this.getTitle())) {
>, <Line: -			log("title", this.getTitle(), otherIssue.getTitle());
>, <Line: -		}
>, <Line: -		setTitle(otherIssue.getTitle());
>, <Line: -		setOpen(otherIssue.isOpen());
>, <Line: -		setId(otherIssue.getId());
>, <Line: -		if (otherIssue.getDescription() != null && this.getDescription() != null) {
>, <Line: -			if (!otherIssue.getDescription().equals(this.getDescription())) {
>, <Line: -				log("desc", this.getDescription(), otherIssue.getDescription());
>, <Line: -			}
>, <Line: -		} else if (otherIssue.getDescription() == null && this.getDescription() != null) {
>, <Line: -			log("desc", "removed");
>, <Line: -		} else if (otherIssue.getDescription() != null
>, <Line: -			&& this.getDescription() == null) {
>, <Line: -			log("desc", "added");
>, <Line: -		}
>, <Line: -		setDescription(otherIssue.getDescription());
>, <Line: -		if (otherIssue.getAssignee() != null && this.getAssignee() != null) {
>, <Line: -			if (!otherIssue.getAssignee().equals(this.getAssignee())) {
>, <Line: -				log("assignee", this.getAssignee().logString(), otherIssue.getAssignee().logString());
>, <Line: -			}
>, <Line: -		} else if (otherIssue.getAssignee() == null && this.getAssignee() != null) {
>, <Line: -			log("assignee", "removed");
>, <Line: -		} else if (otherIssue.getAssignee() != null && this.getAssignee() == null) {
>, <Line: -			log("assignee", "added");
>, <Line: -		}
>, <Line: -		setAssignee(otherIssue.getAssignee());
>, <Line: -		if (otherIssue.getMilestone() != null && this.getMilestone() != null) {
>, <Line: -			if (!otherIssue.getMilestone().equals(this.getMilestone())) {
>, <Line: -				log("milestone", this.getMilestone().logString(), otherIssue.getMilestone().logString());
>, <Line: -			}
>, <Line: -		} else if (otherIssue.getMilestone() == null && this.getMilestone() != null) {
>, <Line: -			log("milestone", "removed");
>, <Line: -		} else if (otherIssue.getMilestone() != null && this.getMilestone() == null) {
>, <Line: -			log("milestone", "added");
>, <Line: -		}
>, <Line: -		setMilestone(otherIssue.getMilestone());
>, <Line: -		List<TurboLabel> oldList = new ArrayList<>(this.getLabels());
>, <Line: -		List<TurboLabel> newList = new ArrayList<>(otherIssue.getLabels());
>, <Line: -		HashMap<String, HashSet<TurboLabel>> changes = CollectionUtilities
>, <Line: -			.getChangesToList(oldList, newList);
>, <Line: -		HashSet<TurboLabel> removed = changes
>, <Line: -			.get(CollectionUtilities.REMOVED_TAG);
>, <Line: -		HashSet<TurboLabel> added = changes
>, <Line: -			.get(CollectionUtilities.ADDED_TAG);
>, <Line: -		if (removed.size() > 0) {
>, <Line: -			logger.info(String.format("Issue %d labels removed: %s", this.getId(), Utility.stringify(removed)));
>, <Line: -		}
>, <Line: -		if (added.size() > 0) {
>, <Line: -			logger.info(String.format("Issue %d labels added: %s", this.getId(), Utility.stringify(added)));
>, <Line: -		}
>, <Line: -		setLabels(otherIssue.getLabels());
>, <Line: -		setParentIssue(otherIssue.getParentIssue());
>, <Line: -		setPullRequest(otherIssue.getPullRequest());
>, <Line: -		setCommentCount(otherIssue.getCommentCount());
>, <Line: -		setCreator(otherIssue.getCreator());
>, <Line: -		setCreatedAt(otherIssue.getCreatedAt());
>, <Line: -		setUpdatedAt(otherIssue.getUpdatedAt());
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public String toString() {
>, <Line: -	    return "TurboIssue [id=" + id + ", title=" + title + "]";
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * A convenient string representation of this object, for purposes of readable logs.
>, <Line: -	 * @return a string representation suitable for logs
>, <Line: -	 */
>, <Line: -	public String logString() {
>, <Line: -	    return "Issue #" + getId() + ": " + getTitle();
>, <Line: -	}
>, <Line: -	private void ______UTILITY_METHODS______() {
>, <Line: -	}
>, <Line: -	public boolean isPullRequest() {
>, <Line: -		return pullRequest != null && pullRequest.getUrl() != null;
>, <Line: -	}
>, <Line: -	public final TurboIssue parentReference() {
>, <Line: -		if (getParentIssue() != -1) {
>, <Line: -			return model.getIssueWithId(getParentIssue());
>, <Line: -		}
>, <Line: -		return null;
>, <Line: -	}
>, <Line: -	public boolean hasAncestor(int index) {
>, <Line: -		TurboIssue current = this;
>, <Line: -		while (current.getParentIssue() != -1) {
>, <Line: -			if (current.getParentIssue() == index)
>, <Line: -				return true;
>, <Line: -			current = current.parentReference();
>, <Line: -		}
>, <Line: -		return false;
>, <Line: -	}
>, <Line: -	public int getDepth() {
>, <Line: -		int depth = 0;
>, <Line: -		TurboIssue current = this;
>, <Line: -		while (current.getParentIssue() != -1) {
>, <Line: -			++depth;
>, <Line: -			current = current.parentReference();
>, <Line: -		}
>, <Line: -		return depth;
>, <Line: -	}
>, <Line: -	private TurboLabel getLabelReference(TurboLabel label) {
>, <Line: -		assert label != null;
>, <Line: -		List<TurboLabel> allLabels = model.getLabels();
>, <Line: -		int index = allLabels.indexOf(label);
>, <Line: -		assert index != -1;
>, <Line: -		return allLabels.get(index);
>, <Line: -	}
>, <Line: -	private TurboMilestone getMilestoneReference(TurboMilestone milestone) {
>, <Line: -		assert milestone != null;
>, <Line: -		List<TurboMilestone> allMilestones = model.getMilestones();
>, <Line: -		int index = allMilestones.indexOf(milestone);
>, <Line: -		assert index != -1;
>, <Line: -		return allMilestones.get(index);
>, <Line: -	}
>, <Line: -	private TurboUser getCollaboratorReference(TurboUser user) {
>, <Line: -		List<TurboUser> allCollaborators = model.getCollaborators();
>, <Line: -		int index = allCollaborators.indexOf(user);
>, <Line: -		if (index != -1) {
>, <Line: -			return allCollaborators.get(index);
>, <Line: -		} else {
>, <Line: -			return user;
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public boolean hasLabel(TurboLabel label) {
>, <Line: -		return getLabelCollection().contains(label);
>, <Line: -	}
>, <Line: -	public void addLabel(TurboLabel label) {
>, <Line: -		if (getLabelCollection().contains(label)) {
>, <Line: -			return;
>, <Line: -		}
>, <Line: -		if (label.isExclusive()) {
>, <Line: -			removeLabelsWithGroup(label.getGroup());
>, <Line: -		}
>, <Line: -		addToLabels(label);
>, <Line: -	}
>, <Line: -	private void removeLabelsWithGroup(String group) {
>, <Line: -		List<TurboLabel> labels = getLabelsWithGroup(group);
>, <Line: -		removeLabels(labels);
>, <Line: -	}
>, <Line: -	private List<TurboLabel> getLabelsWithGroup(String group) {
>, <Line: -		return getLabelCollection().stream()
>, <Line: -			.filter(label -> group.equalsIgnoreCase(label.getGroup()))
>, <Line: -			.collect(Collectors.toList());
>, <Line: -	}
>, <Line: -	public void addLabels(List<TurboLabel> newLabels) {
>, <Line: -		newLabels.forEach(this::addLabel);
>, <Line: -	}
>, <Line: -	public void removeLabel(TurboLabel label) {
>, <Line: -		getLabelCollection().remove(label);
>, <Line: -	}
>, <Line: -	public void removeLabels(List<TurboLabel> toRemove) {
>, <Line: -		toRemove.forEach(this::removeLabel);
>, <Line: -	}
>, <Line: -	private void addToLabels(TurboLabel label) {
>, <Line: -		getLabelCollection().add(getLabelReference(label));
>, <Line: -	}
>, <Line: -	public static String extractDescription(String issueBody) {
>, <Line: -		if (issueBody == null) {
>, <Line: -			return "";
>, <Line: -		}
>, <Line: -		return issueBody.replaceAll(REGEX_REPLACE_DESC, "").trim();
>, <Line: -	}
>, <Line: -	public static int extractIssueParent(String issueBody) {
>, <Line: -		if (issueBody == null) {
>, <Line: -			return -1;
>, <Line: -		}
>, <Line: -		String[] lines = issueBody.split(REGEX_SPLIT_LINES);
>, <Line: -		int seperatorLineIndex = getSeparatorIndex(lines);
>, <Line: -		for (int i = 0; i < seperatorLineIndex; i++) {
>, <Line: -			String line = lines[i];
>, <Line: -			if (line.startsWith(METADATA_HEADER_PARENT)) {
>, <Line: -				String value = line.replace(METADATA_HEADER_PARENT, "");
>, <Line: -				String[] valueTokens = value.split(REGEX_SPLIT_PARENT);
>, <Line: -				for (String valueToken : valueTokens) {
>, <Line: -					if (!valueToken.trim().isEmpty()) {
>, <Line: -						return Integer.parseInt(valueToken.trim());
>, <Line: -					}
>, <Line: -				}
>, <Line: -			} else if (line.startsWith(OLD_METADATA_HEADER_PARENT)) {
>, <Line: -				// legacy
>, <Line: -				String value = line.replace(OLD_METADATA_HEADER_PARENT, "");
>, <Line: -				String[] valueTokens = value.split(REGEX_SPLIT_PARENT);
>, <Line: -				for (String valueToken : valueTokens) {
>, <Line: -					if (!valueToken.trim().isEmpty()) {
>, <Line: -						return Integer.parseInt(valueToken.trim());
>, <Line: -					}
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return -1;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Creates a JavaFX node containing a graphical display of this issue's events.
>, <Line: -	 * @param withinHours the number of hours to bound the returned events by
>, <Line: -	 * @return the node
>, <Line: -	 */
>, <Line: -	public Node getEventDisplay(final int withinHours) {
>, <Line: -		final LocalDateTime now = LocalDateTime.now();
>, <Line: -		List<TurboIssueEvent> eventsWithinDuration = events.stream()
>, <Line: -			.filter(event -> {
>, <Line: -				LocalDateTime eventTime = Utility.longToLocalDateTime(event.getDate().getTime());
>, <Line: -				int hours = Utility.safeLongToInt(eventTime.until(now, ChronoUnit.HOURS));
>, <Line: -				return hours < withinHours;
>, <Line: -			})
>, <Line: -			.collect(Collectors.toList());
>, <Line: -		List<Comment> commentsWithinDuration = this.comments.stream()
>, <Line: -			.filter(comment -> {
>, <Line: -				LocalDateTime created = Utility.longToLocalDateTime(comment.getCreatedAt().getTime());
>, <Line: -				int hours = Utility.safeLongToInt(created.until(now, ChronoUnit.HOURS));
>, <Line: -				return hours < withinHours;
>, <Line: -			})
>, <Line: -			.collect(Collectors.toList());
>, <Line: -		return layoutEvents(eventsWithinDuration, commentsWithinDuration);
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Given a list of issue events, returns a JavaFX node laying them out properly.
>, <Line: -	 * @param events
>, <Line: -	 * @param comments
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	private static Node layoutEvents(List<TurboIssueEvent> events, List<Comment> comments) {
>, <Line: -		VBox result = new VBox();
>, <Line: -		result.setSpacing(3);
>, <Line: -		VBox.setMargin(result, new Insets(3, 0, 0, 0));
>, <Line: -		// Events
>, <Line: -		events.stream()
>, <Line: -			.map(TurboIssueEvent::display)
>, <Line: -			.forEach(e -> result.getChildren().add(e));
>, <Line: -		// Comments
>, <Line: -		if (comments.size() > 0) {
>, <Line: -			String names = comments.stream()
>, <Line: -				.map(comment -> comment.getUser().getLogin())
>, <Line: -				.distinct()
>, <Line: -				.collect(Collectors.joining(", "));
>, <Line: -			HBox commentDisplay = new HBox();
>, <Line: -			commentDisplay.getChildren().addAll(
>, <Line: -				TurboIssueEvent.octicon(TurboIssueEvent.OCTICON_QUOTE),
>, <Line: -				new javafx.scene.control.Label(String.format("%d comments since, involving %s.", comments.size(),
>, <Line: -					names))
>, <Line: -			);
>, <Line: -			result.getChildren().add(commentDisplay);
>, <Line: -		}
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Given a list of issue events, returns a textual representation of them,
>, <Line: -	 * concatenated together with newlines.
>, <Line: -	 * @param events
>, <Line: -	 * @param width
>, <Line: -	 * @return
>, <Line: -	 */
>, <Line: -	private static Node formatEventsText(List<TurboIssueEvent> events, int width) {
>, <Line: -		String text = events.stream()
>, <Line: -			.map(TurboIssueEvent::toString)
>, <Line: -			.collect(Collectors.joining("\n"));
>, <Line: -		Text display = new Text(text);
>, <Line: -		display.setWrappingWidth(width);
>, <Line: -		display.getStyleClass().add("issue-panel-feed");
>, <Line: -		return display;
>, <Line: -	}
>, <Line: -	private List<TurboIssueEvent> getGitHubEvents() {
>, <Line: -		List<TurboIssueEvent> feeds = new ArrayList<TurboIssueEvent>();
>, <Line: -		try {
>, <Line: -			feeds = ServiceManager.getInstance().getEvents(getId());
>, <Line: -		} catch (Exception e) {
>, <Line: -			logger.error(e.getLocalizedMessage(), e);
>, <Line: -		}
>, <Line: -		return feeds;
>, <Line: -	}
>, <Line: -	private List<TurboLabel> translateLabels(List<Label> labels) {
>, <Line: -		List<TurboLabel> turboLabels = new ArrayList<>();
>, <Line: -		if (labels == null) {
>, <Line: -			return turboLabels;
>, <Line: -		}
>, <Line: -		turboLabels.addAll(labels.stream()
>, <Line: -			.map(label -> new TurboLabel(label))
>, <Line: -			.collect(Collectors.toList()));
>, <Line: -		return turboLabels;
>, <Line: -	}
>, <Line: -	private static int getSeparatorIndex(String[] lines) {
>, <Line: -		for (int i = 0; i < lines.length; i++) {
>, <Line: -			if (lines[i].equals(METADATA_SEPERATOR)) {
>, <Line: -				return i;
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return -1;
>, <Line: -	}
>, <Line: -	public String buildGithubBody() {
>, <Line: -		StringBuilder body = new StringBuilder();
>, <Line: -		int parent = this.getParentIssue();
>, <Line: -		if (parent > 0) {
>, <Line: -			String parentData = METADATA_HEADER_PARENT + METADATA_PARENT;
>, <Line: -			body.append(String.format(parentData, this.getParentIssue()));
>, <Line: -			body.append(METADATA_SEPERATOR + "\n");
>, <Line: -		}
>, <Line: -		body.append(getDescription());
>, <Line: -		return body.toString();
>, <Line: -	}
>, <Line: -	public boolean hasComments() {
>, <Line: -		return comments.size() > 0;
>, <Line: -	}
>, <Line: -	public List<Comment> getComments() {
>, <Line: -		return comments;
>, <Line: -	}
>, <Line: -	public void setComments(List<Comment> comments) {
>, <Line: -		this.comments = comments;
>, <Line: -	}
>, <Line: -	public boolean hasEvents() {
>, <Line: -		return events.size() > 0;
>, <Line: -	}
>, <Line: -	public List<TurboIssueEvent> getEvents() {
>, <Line: -		return events;
>, <Line: -	}
>, <Line: -	public void setEvents(List<TurboIssueEvent> events) {
>, <Line: -		this.events = events;
>, <Line: -	}
>, <Line: -	private void ______GETTERS_AND_SETTERS______() {
>, <Line: -	}
>, <Line: -	public String getCreator() {
>, <Line: -		String name = DataManager.getInstance().getUserAlias(creator);
>, <Line: -		if (name == null) {
>, <Line: -			name = creator;
>, <Line: -		}
>, <Line: -		return name;
>, <Line: -	}
>, <Line: -	public void setCreator(String creator) {
>, <Line: -		this.creator = creator;
>, <Line: -	}
>, <Line: -	public String getCreatedAt() {
>, <Line: -		return this.createdAt;
>, <Line: -	}
>, <Line: -	public void setCreatedAt(String createdAt) {
>, <Line: -		this.createdAt = createdAt;
>, <Line: -	}
>, <Line: -	public LocalDateTime getUpdatedAt() {
>, <Line: -		return this.updatedAt;
>, <Line: -	}
>, <Line: -	public void setUpdatedAt(LocalDateTime updatedAt) {
>, <Line: -		this.updatedAt = updatedAt;
>, <Line: -	}
>, <Line: -	public int getCommentCount() {
>, <Line: -		return commentCount;
>, <Line: -	}
>, <Line: -	public void setCommentCount(int num) {
>, <Line: -		this.commentCount = num;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Returns the pull request object associated with this issue.
>, <Line: -	 * Is not guaranteed to be null even if the issue is not a pull request;
>, <Line: -	 * use {@link #isPullRequest()} to check for that.
>, <Line: -	 * @return the pull request object
>, <Line: -	 */
>, <Line: -	public PullRequest getPullRequest() {
>, <Line: -		return pullRequest;
>, <Line: -	}
>, <Line: -	public void setPullRequest(PullRequest pr) {
>, <Line: -		this.pullRequest = pr;
>, <Line: -	}
>, <Line: -	public final int getId() {
>, <Line: -		return id;
>, <Line: -	}
>, <Line: -	public final void setId(int value) {
>, <Line: -		id = value;
>, <Line: -	}
>, <Line: -	public final String getTitle() {
>, <Line: -		return title;
>, <Line: -	}
>, <Line: -	public final void setTitle(String value) {
>, <Line: -		title = value;
>, <Line: -	}
>, <Line: -	public final String getDescription() {
>, <Line: -		return description;
>, <Line: -	}
>, <Line: -	public final void setDescription(String value) {
>, <Line: -		description = value;
>, <Line: -	}
>, <Line: -	public int getParentIssue() {
>, <Line: -		return parentIssue;
>, <Line: -	}
>, <Line: -	public final void setParentIssue(int parent) {
>, <Line: -		parentIssue = parent;
>, <Line: -	}
>, <Line: -	public final boolean isOpen() {
>, <Line: -		return state;
>, <Line: -	}
>, <Line: -	public final void setOpen(boolean value) {
>, <Line: -		state = value;
>, <Line: -	}
>, <Line: -	public TurboUser getAssignee() {
>, <Line: -		return assignee;
>, <Line: -	}
>, <Line: -	public void setAssignee(TurboUser assignee) {
>, <Line: -		this.assignee = getCollaboratorReference(assignee);
>, <Line: -	}
>, <Line: -	public TurboMilestone getMilestone() {
>, <Line: -		if (!milestone.isPresent()) {
>, <Line: -			if (!temporaryMilestone.isPresent()) {
>, <Line: -				return null;
>, <Line: -			}
>, <Line: -			milestone = Optional.of(model.getMilestoneByTitle(temporaryMilestone.get().getTitle()));
>, <Line: -		}
>, <Line: -		return milestone.get();
>, <Line: -	}
>, <Line: -	public void setMilestone(TurboMilestone milestone) {
>, <Line: -		if (milestone == null) {
>, <Line: -			this.milestone = Optional.empty();
>, <Line: -		} else {
>, <Line: -			this.milestone = Optional.of(getMilestoneReference(milestone));
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public String getHtmlUrl() {
>, <Line: -		return htmlUrl;
>, <Line: -	}
>, <Line: -	public void setHtmlUrl(String htmlUrl) {
>, <Line: -		this.htmlUrl = htmlUrl;
>, <Line: -	}
>, <Line: -	public List<TurboLabel> getLabels() {
>, <Line: -		return new ArrayList<>(getLabelCollection());
>, <Line: -	}
>, <Line: -	private List<TurboLabel> getLabelCollection() {
>, <Line: -		if (!labels.isPresent()) {
>, <Line: -			if (!temporaryLabels.isPresent()) {
>, <Line: -				return new ArrayList<>();
>, <Line: -			}
>, <Line: -			List<TurboLabel> newLabels = temporaryLabels.get().stream()
>, <Line: -				.map(label -> model.getLabelByGhName(label.getName()))
>, <Line: -				.collect(Collectors.toList());
>, <Line: -			labels = Optional.of(newLabels);
>, <Line: -		}
>, <Line: -		return labels.get();
>, <Line: -	}
>, <Line: -	public void setLabels(List<TurboLabel> labels) {
>, <Line: -		this.labels = Optional.of(labels);
>, <Line: -	}
>, <Line: -	public void setTemporaryLabels(Optional<List<Label>> labels) {
>, <Line: -		this.temporaryLabels = labels;
>, <Line: -	}
>, <Line: -	public void setTemporaryMilestone(Optional<Milestone> milestone) {
>, <Line: -		this.temporaryMilestone = milestone;
>, <Line: -	}
>, <Line: -}
>]