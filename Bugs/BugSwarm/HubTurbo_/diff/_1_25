[<Line: +package backend.interfaces;
>, <Line: +import backend.resource.Model;
>, <Line: +import backend.resource.serialization.SerializableModel;
>, <Line: +import util.Utility;
>, <Line: +import java.io.File;
>, <Line: +import java.util.Optional;
>, <Line: +import java.util.concurrent.CompletableFuture;
>, <Line: +import java.util.concurrent.ExecutorService;
>, <Line: +import java.util.concurrent.Executors;
>, <Line: +public abstract class RepoStore {
>, <Line: +	public static final String DIRECTORY = "store";
>, <Line: +	private final ExecutorService pool = Executors.newSingleThreadExecutor();
>, <Line: +	public static String escapeRepoName(String repoName) {
>, <Line: +		return repoName.replace("/", "-") + ".json";
>, <Line: +	}
>, <Line: +	protected void addTask(StoreTask task) {
>, <Line: +		pool.execute(task);
>, <Line: +	}
>, <Line: +	public abstract CompletableFuture<Model> loadRepository(String repoId);
>, <Line: +	public abstract void saveRepository(String repoId, SerializableModel model);
>, <Line: +	public boolean isRepoStored(String repoId) {
>, <Line: +		File file = new File(getRepoPath(repoId));
>, <Line: +		return file.exists() && file.isFile();
>, <Line: +	}
>, <Line: +	private static String getRepoPath(String repoId) {
>, <Line: +		ensureDirectoryExists();
>, <Line: +		String newRepoName = RepoStore.escapeRepoName(repoId);
>, <Line: +		return new File(RepoStore.DIRECTORY, newRepoName).getAbsolutePath();
>, <Line: +	}
>, <Line: +	public static void write(String repoId, String output) {
>, <Line: +		Utility.writeFile(getRepoPath(repoId), output);
>, <Line: +	}
>, <Line: +	public static Optional<String> read(String repoId) {
>, <Line: +		return Utility.readFile(getRepoPath(repoId));
>, <Line: +	}
>, <Line: +	private static void ensureDirectoryExists() {
>, <Line: +		File directory = new File(RepoStore.DIRECTORY);
>, <Line: +		if (!directory.exists() || !directory.isDirectory()) {
>, <Line: +			directory.mkdirs();
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]