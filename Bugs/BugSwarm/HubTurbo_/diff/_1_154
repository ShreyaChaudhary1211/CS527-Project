[]
[<Line: -package tests;
>, <Line: -import org.eclipse.egit.github.core.Issue;
>, <Line: -import org.junit.BeforeClass;
>, <Line: -import org.junit.Test;
>, <Line: -import service.ServiceManager;
>, <Line: -import tests.stubs.ServiceManagerStub;
>, <Line: -import java.io.IOException;
>, <Line: -import java.util.Date;
>, <Line: -import static org.junit.Assert.*;
>, <Line: -public class ServiceManagerTests {
>, <Line: -	public static String TEST_GITHUB_USERNAME = "testapi";
>, <Line: -	private static String TEST_GITHUB_PASSWORD = "hubAPItest1";
>, <Line: -	public static String TEST_REPO_NAME = "issuetest";
>, <Line: -	private static ServiceManager serviceManager;
>, <Line: -	@BeforeClass
>, <Line: -	public static void setup() {
>, <Line: -		ServiceManager.isInTestMode = true;
>, <Line: -		serviceManager = (ServiceManagerStub) ServiceManager.getInstance();
>, <Line: -		testLogin();
>, <Line: -	}
>, <Line: -	public static void testLogin() {
>, <Line: -		boolean wrongCred = serviceManager.login(TEST_GITHUB_USERNAME, "123");
>, <Line: -		assertFalse(wrongCred);
>, <Line: -		assertTrue(serviceManager.login(TEST_GITHUB_USERNAME, TEST_GITHUB_PASSWORD));
>, <Line: -		try {
>, <Line: -			serviceManager.setupRepository(TEST_GITHUB_USERNAME, TEST_REPO_NAME, (a, b) -> {});
>, <Line: -		} catch (IOException e) {
>, <Line: -			fail();
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void setupRepositoryTest() {
>, <Line: -		try {
>, <Line: -			serviceManager.setupRepository(TEST_GITHUB_USERNAME, TEST_REPO_NAME, (a, b) -> {});
>, <Line: -		} catch (IOException e) {
>, <Line: -			fail();
>, <Line: -		}
>, <Line: -		// Size is due to loading stub data
>, <Line: -		assertEquals(10, serviceManager.getModel().getIssues().size());
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testCreateIssue() {
>, <Line: -		try {
>, <Line: -			assertNotNull(serviceManager.createIssue(TestUtils.getStubIssue(1)));
>, <Line: -		} catch (IOException e) {
>, <Line: -			fail();
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testModifyIssueTitle() {
>, <Line: -	    Date now = new Date();
>, <Line: -	    try {
>, <Line: -	        // TODO: fully automate this
>, <Line: -	        serviceManager.editIssueTitle(1, "test " + now);
>, <Line: -	    } catch (IOException e) {
>, <Line: -	        fail();
>, <Line: -	    }
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testModifyIssueDescription() {
>, <Line: -	    Date now = new Date();
>, <Line: -	    try {
>, <Line: -	        // TODO: fully automate this
>, <Line: -	        String desc = "desc " + now;
>, <Line: -	        serviceManager.editIssueBody(1, desc);
>, <Line: -	    } catch (IOException e) {
>, <Line: -	        fail(e.getMessage());
>, <Line: -	    }
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void testChangeIssueState() {
>, <Line: -	    try {
>, <Line: -	        Issue issue = serviceManager.getIssue(1);
>, <Line: -	        assertTrue(issue != null);
>, <Line: -	        if (issue.getState().equals(ServiceManager.STATE_OPEN)) {
>, <Line: -	            closeAndOpenIssue(1);
>, <Line: -	        } else {
>, <Line: -	            openAndCloseIssue(1);
>, <Line: -	        }
>, <Line: -	    } catch (IOException e) {
>, <Line: -	        e.printStackTrace();
>, <Line: -	        fail();
>, <Line: -	    }
>, <Line: -	}
>, <Line: -	private void openAndCloseIssue(int issueId) {
>, <Line: -	    try {
>, <Line: -	        testOpenIssue(1);
>, <Line: -	        testCloseIssue(1);
>, <Line: -	    } catch (IOException e) {
>, <Line: -	        fail(e.getMessage());
>, <Line: -	    }
>, <Line: -	}
>, <Line: -	private void testOpenIssue(int issueId) throws IOException {
>, <Line: -	    serviceManager.openIssue(1);
>, <Line: -	    String newState = serviceManager.getIssue(1).getState();
>, <Line: -	    assertTrue(newState.equals(ServiceManager.STATE_OPEN));
>, <Line: -	}
>, <Line: -	private void testCloseIssue(int issueId) throws IOException {
>, <Line: -	    serviceManager.closeIssue(1);
>, <Line: -	    String newState = serviceManager.getIssue(1).getState();
>, <Line: -	    assertTrue(newState.equals(ServiceManager.STATE_CLOSED));
>, <Line: -	}
>, <Line: -	private void closeAndOpenIssue(int issueId) {
>, <Line: -	    try {
>, <Line: -	        testCloseIssue(1);
>, <Line: -	        testOpenIssue(1);
>, <Line: -	    } catch (IOException e) {
>, <Line: -	        fail(e.getMessage());
>, <Line: -	    }
>, <Line: -	}
>, <Line: -}
>]