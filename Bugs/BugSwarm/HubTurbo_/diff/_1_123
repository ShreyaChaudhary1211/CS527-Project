[<Line: +import backend.interfaces.IModel;
>, <Line: +import backend.resource.TurboIssue;
>, <Line: +import prefs.Preferences;
>, <Line: +import util.events.ModelUpdatedEventHandler;
>, <Line: +	private final Preferences prefs;
>, <Line: +	private IModel model;
>, <Line: +	public ColumnControl(UI ui, Preferences prefs) {
>, <Line: +		this.prefs = prefs;
>, <Line: +		// Set up the connection to the browser
>, <Line: +		new UIBrowserBridge(ui);
>, <Line: +		ui.registerEvent((ModelUpdatedEventHandler) e -> {
>, <Line: +			updateModel(e.model);
>, <Line: +			forEach(child -> {
>, <Line: +				if (child instanceof IssueColumn) {
>, <Line: +					((IssueColumn) child).setItems(e.model.getIssues());
>, <Line: +				}
>, <Line: +			});
>, <Line: +		ui.registerEvent((IssueSelectedEventHandler) e ->
>, <Line: +			setCurrentlySelectedColumn(Optional.of(e.columnIndex)));
>, <Line: +		ui.registerEvent((ColumnClickedEventHandler) e ->
>, <Line: +			setCurrentlySelectedColumn(Optional.of(e.columnIndex)));
>, <Line: +	/**
>, <Line: +	 * Called on login
>, <Line: +	 */
>, <Line: +	public void init() {
>, <Line: +		restoreColumns();
>, <Line: +	private void updateModel(IModel newModel) {
>, <Line: +		model = newModel;
>, <Line: +	public void saveSession() {
>, <Line: +		List<String> sessionFilters = new ArrayList<>();
>, <Line: +		getChildren().forEach(child -> {
>, <Line: +			if (child instanceof IssueColumn) {
>, <Line: +				String filter = ((IssueColumn) child).getCurrentFilterString();
>, <Line: +				sessionFilters.add(filter);
>, <Line: +			}
>, <Line: +		});
>, <Line: +		prefs.setLastOpenFilters(sessionFilters);
>, <Line: +	}
>, <Line: +	public void restoreColumns() {
>, <Line: +		getChildren().clear();
>, <Line: +		List<String> filters = prefs.getLastOpenFilters();
>, <Line: +		if (filters.isEmpty()) {
>, <Line: +			addColumn();
>, <Line: +			return;
>, <Line: +		}
>, <Line: +		for (String filter : filters) {
>, <Line: +			addColumn().filterByString(filter);
>, <Line: +		}
>, <Line: +	}
>, <Line: +					.map(TurboIssue::getId)
>, <Line: +					.forEach(result::add);
>, <Line: +		IssueColumn panel = new IssuePanel(ui, model, this, index);
>, <Line: +		Node child = getChildren().remove(index);
>, <Line: +		((Column) child).close();
>, <Line: +	public double getPanelWidth() {
>, <Line: +		// In any case actual column width is COLUMN_WIDTH at minimum, so we can assume
>, <Line: +		return 40 + Column.COLUMN_WIDTH;
>]
[<Line: -import command.TurboCommandExecutor;
>, <Line: -import javafx.application.Platform;
>, <Line: -import javafx.stage.Stage;
>, <Line: -import model.Model;
>, <Line: -import storage.DataManager;
>, <Line: -import util.events.ColumnClickedEvent;
>, <Line: -import util.events.IssueSelectedEvent;
>, <Line: -import util.events.ModelChangedEvent;
>, <Line: -import util.events.ModelChangedEventHandler;
>, <Line: -	private final Stage stage;
>, <Line: -	private final Model model;
>, <Line: -	@SuppressWarnings("unused")
>, <Line: -	private final UIBrowserBridge uiBrowserBridge;
>, <Line: -	private TurboCommandExecutor dragAndDropExecutor;
>, <Line: -	public ColumnControl(UI ui, Stage stage, Model model) {
>, <Line: -		this.stage = stage;
>, <Line: -		this.model = model;
>, <Line: -		this.dragAndDropExecutor = new TurboCommandExecutor();
>, <Line: -		this.uiBrowserBridge = new UIBrowserBridge(ui);
>, <Line: -		ui.registerEvent(new ModelChangedEventHandler() {
>, <Line: -			@Override
>, <Line: -			public void handle(ModelChangedEvent e) {
>, <Line: -				Platform.runLater(() -> {
>, <Line: -					forEach(child -> {
>, <Line: -						if (child instanceof IssueColumn) {
>, <Line: -							((IssueColumn) child).setItems(e.issues);
>, <Line: -						}
>, <Line: -					});
>, <Line: -				});
>, <Line: -			}
>, <Line: -		});
>, <Line: -		ui.registerEvent(new IssueSelectedEventHandler() {
>, <Line: -			@Override
>, <Line: -			public void handle(IssueSelectedEvent e) {
>, <Line: -				setCurrentlySelectedColumn(Optional.of(e.columnIndex));
>, <Line: -			}
>, <Line: -		ui.registerEvent(new ColumnClickedEventHandler() {
>, <Line: -			@Override
>, <Line: -			public void handle(ColumnClickedEvent e) {
>, <Line: -				setCurrentlySelectedColumn(Optional.of(e.columnIndex));
>, <Line: -			}
>, <Line: -		});
>, <Line: -	public void restoreColumns() {
>, <Line: -		getChildren().clear();
>, <Line: -		List<String> filters = DataManager.getInstance().getFiltersFromPreviousSession(model.getRepoId());
>, <Line: -		if (filters != null && !filters.isEmpty()) {
>, <Line: -			for (String filter : filters) {
>, <Line: -				addColumn().filterByString(filter);
>, <Line: -			}
>, <Line: -		} else {
>, <Line: -			addColumn();
>, <Line: -		}
>, <Line: -	public void displayMessage(String message) {
>, <Line: -		HTStatusBar.displayMessage(message);
>, <Line: -						.map(issue -> issue.getId()).
>, <Line: -						forEach(issueId -> result.add(issueId));
>, <Line: -	public void loadIssues() {
>, <Line: -		for (Node node : getChildren()) {
>, <Line: -			if (node instanceof IssueColumn) {
>, <Line: -				IssueColumn panel = (IssueColumn) node;
>, <Line: -				panel.setItems(model.getIssues());
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>, <Line: -		IssueColumn panel = new IssuePanel(ui, stage, model, this, index, dragAndDropExecutor);
>, <Line: -		getChildren().remove(index);
>, <Line: -	public void saveSession() {
>, <Line: -		List<String> sessionFilters = new ArrayList<String>();
>, <Line: -		getChildren().forEach(child -> {
>, <Line: -			if (child instanceof IssueColumn) {
>, <Line: -				String filter = ((IssueColumn) child).getCurrentFilterString();
>, <Line: -				sessionFilters.add(filter);
>, <Line: -			}
>, <Line: -		});
>, <Line: -		DataManager.getInstance().setFiltersForNextSession(model.getRepoId(), sessionFilters);
>, <Line: -	}
>, <Line: -	public double getColumnWidth() {
>, <Line: -		return (getChildren() == null || getChildren().size() == 0)
>, <Line: -				? 0
>, <Line: -				: 40 + Column.COLUMN_WIDTH;
>, <Line: -		// In any case column width is set to COLUMN_WIDTH at minimum, so we can assume
>]