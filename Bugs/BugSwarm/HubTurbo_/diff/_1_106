[]
[<Line: -package storage;
>, <Line: -import model.*;
>, <Line: -import org.eclipse.egit.github.core.PullRequest;
>, <Line: -import java.time.LocalDateTime;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.List;
>, <Line: -import java.util.Optional;
>, <Line: -import java.util.stream.Collectors;
>, <Line: -class SerializableIssue {
>, <Line: -	private String creator;
>, <Line: -	private String createdAt;
>, <Line: -	private LocalDateTime updatedAt;
>, <Line: -	private int numOfComments;
>, <Line: -	private PullRequest pullRequest;
>, <Line: -	private int id;
>, <Line: -	private String title;
>, <Line: -	private String description;
>, <Line: -	private int parentIssue;
>, <Line: -	private boolean state;
>, <Line: -	private TurboUser assignee;
>, <Line: -	private SerializableMilestone milestone;
>, <Line: -	private String htmlUrl;
>, <Line: -	private List<SerializableLabel> labels;
>, <Line: -	public SerializableIssue(TurboIssue issue) {
>, <Line: -		this.creator = issue.getCreator();
>, <Line: -		this.createdAt = issue.getCreatedAt();
>, <Line: -		this.updatedAt = issue.getUpdatedAt();
>, <Line: -		this.numOfComments = issue.getCommentCount();
>, <Line: -		this.pullRequest = issue.getPullRequest();
>, <Line: -		this.id = issue.getId();
>, <Line: -		this.title = issue.getTitle();
>, <Line: -		this.description = issue.getDescription();
>, <Line: -		this.parentIssue = issue.getParentIssue();
>, <Line: -		this.state = issue.isOpen();
>, <Line: -		this.assignee = issue.getAssignee();
>, <Line: -		TurboMilestone turboMilestone = issue.getMilestone();
>, <Line: -		if (turboMilestone != null) {
>, <Line: -			this.milestone = new SerializableMilestone(issue.getMilestone());
>, <Line: -		} else {
>, <Line: -			this.milestone = null;
>, <Line: -		}
>, <Line: -		this.htmlUrl = issue.getHtmlUrl();
>, <Line: -		List<TurboLabel> turboLabelObservableList = issue.getLabels();
>, <Line: -		List<TurboLabel> turboLabelList = turboLabelObservableList.stream().collect(Collectors.toList());
>, <Line: -		this.labels = convertFromListOfTurboLabels(turboLabelList);
>, <Line: -	}
>, <Line: -	private List<SerializableLabel> convertFromListOfTurboLabels(List<TurboLabel> turboLabelsList) {
>, <Line: -		List<SerializableLabel> list = new ArrayList<SerializableLabel>();
>, <Line: -		if (turboLabelsList == null) {
>, <Line: -			return null;
>, <Line: -		} else {
>, <Line: -			for (TurboLabel label : turboLabelsList) {
>, <Line: -				list.add(new SerializableLabel(label));
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return list;
>, <Line: -	}
>, <Line: -	public TurboIssue toTurboIssue(Model model) {
>, <Line: -		TurboIssue tI = new TurboIssue(this.title, this.description, model);
>, <Line: -		tI.setCreator(creator);
>, <Line: -		tI.setCreatedAt(createdAt);
>, <Line: -		tI.setUpdatedAt(updatedAt);
>, <Line: -		tI.setCommentCount(numOfComments);
>, <Line: -		tI.setPullRequest(pullRequest);
>, <Line: -		tI.setId(id);
>, <Line: -		tI.setParentIssue(parentIssue);
>, <Line: -		tI.setOpen(state);
>, <Line: -		tI.setAssignee(assignee);
>, <Line: -		tI.setHtmlUrl(htmlUrl);
>, <Line: -		if (milestone == null) {
>, <Line: -			tI.setTemporaryMilestone(Optional.empty());
>, <Line: -		} else {
>, <Line: -			tI.setTemporaryMilestone(Optional.of(milestone.toTurboMilestone().toGhResource()));
>, <Line: -		}
>, <Line: -		if (labels == null) {
>, <Line: -			tI.setTemporaryLabels(Optional.empty());
>, <Line: -		} else {
>, <Line: -			tI.setTemporaryLabels(Optional.of(labels.stream()
>, <Line: -				.map(SerializableLabel::toTurboLabel)
>, <Line: -				.map(TurboLabel::toGhResource)
>, <Line: -				.collect(Collectors.toList())));
>, <Line: -		}
>, <Line: -		return tI;
>, <Line: -	}
>, <Line: -}
>]