[]
[<Line: -package command;
>, <Line: -import java.util.ArrayList;
>, <Line: -import java.util.List;
>, <Line: -import model.Model;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -import model.TurboMilestone;
>, <Line: -import model.TurboUser;
>, <Line: -public class TurboCommandExecutor {
>, <Line: -	private ArrayList<String> executionLog;
>, <Line: -	public TurboCommandExecutor(){
>, <Line: -		executionLog = new ArrayList<String>();
>, <Line: -	}
>, <Line: -	public boolean executeCommand(CommandType command, Model model, TurboIssue issue, Object... args){
>, <Line: -		return executeCommand(command, "", model, issue, args);
>, <Line: -	}
>, <Line: -	public boolean executeCommand(CommandType command, String remarks, Model model, TurboIssue issue, Object...args){
>, <Line: -		TurboIssueCommand issueCommand = createIssueCommand(command, model, issue, args);
>, <Line: -		issueCommand.setLoggingRemarks(remarks);
>, <Line: -		boolean result = issueCommand.execute();
>, <Line: -		if(result){
>, <Line: -			executionLog.add(issueCommand.getLastOperation());
>, <Line: -		}
>, <Line: -		return result;
>, <Line: -	}
>, <Line: -	@SuppressWarnings("unchecked")
>, <Line: -	protected TurboIssueCommand createIssueCommand(CommandType command, Model model, TurboIssue issue, Object... args){
>, <Line: -		switch(command){
>, <Line: -		case ADD_ISSUE:
>, <Line: -			return new TurboIssueAdd(model, issue);
>, <Line: -		case EDIT_ISSUE:
>, <Line: -			if(args.length == 1 && args[0].getClass() == TurboIssue.class){
>, <Line: -				return new TurboIssueEdit(model, issue, (TurboIssue)args[0]);
>, <Line: -			}
>, <Line: -		case ADD_LABELS: 
>, <Line: -			if(args.length == 1){
>, <Line: -				return new TurboIssueAddLabels(model, issue, (List<TurboLabel>)args[0]);
>, <Line: -			}
>, <Line: -		case SET_LABELS: 
>, <Line: -			if(args.length == 1){
>, <Line: -				return new TurboIssueSetLabels(model, issue, (List<TurboLabel>)args[0]);
>, <Line: -			}
>, <Line: -		case REMOVE_LABELS:
>, <Line: -			if(args.length == 1){
>, <Line: -				return new TurboIssueRemoveLabels(model, issue, (List<TurboLabel>)args[0]);
>, <Line: -			}
>, <Line: -		case SET_ASSIGNEE: 
>, <Line: -			if(args.length == 1 && args[0].getClass() == TurboUser.class){
>, <Line: -				return new TurboIssueSetAssignee(model, issue, (TurboUser)args[0]);
>, <Line: -			}
>, <Line: -		case SET_MILESTONE: 
>, <Line: -			if(args.length == 1 && args[0].getClass() == TurboMilestone.class){
>, <Line: -				return new TurboIssueSetMilestone(model, issue, (TurboMilestone)args[0]);
>, <Line: -			}
>, <Line: -		case SET_PARENT: 
>, <Line: -			if(args.length == 1 && args[0].getClass() == Integer.class){
>, <Line: -				return new TurboIssueSetParent(model, issue, (Integer)args[0]);
>, <Line: -			}
>, <Line: -		case EDIT_DESCRIPTION:
>, <Line: -			if(args.length == 1 && args[0].getClass() == String.class){
>, <Line: -				return new TurboIssueEditDescription(model, issue, (String)args[0]);
>, <Line: -			}
>, <Line: -		case EDIT_TITLE:
>, <Line: -			if(args.length == 1 && args[0].getClass() == String.class){
>, <Line: -				return new TurboIssueEditTitle(model, issue, (String)args[0]);
>, <Line: -			}
>, <Line: -		default:
>, <Line: -			throw new IllegalArgumentException(); //TODO:
>, <Line: -		}
>, <Line: -	}
>, <Line: -}
>]