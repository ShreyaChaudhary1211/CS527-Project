[]
[<Line: -package storage;
>, <Line: -import java.io.File;
>, <Line: -import java.io.FileInputStream;
>, <Line: -import java.io.FileOutputStream;
>, <Line: -import java.io.IOException;
>, <Line: -import java.io.InputStreamReader;
>, <Line: -import java.io.OutputStreamWriter;
>, <Line: -import java.io.Reader;
>, <Line: -import java.io.Writer;
>, <Line: -import java.lang.reflect.Modifier;
>, <Line: -import java.lang.reflect.Type;
>, <Line: -import java.time.Instant;
>, <Line: -import java.time.LocalDateTime;
>, <Line: -import java.time.ZoneId;
>, <Line: -import org.apache.logging.log4j.LogManager;
>, <Line: -import org.apache.logging.log4j.Logger;
>, <Line: -import com.google.gson.Gson;
>, <Line: -import com.google.gson.GsonBuilder;
>, <Line: -import com.google.gson.JsonDeserializationContext;
>, <Line: -import com.google.gson.JsonDeserializer;
>, <Line: -import com.google.gson.JsonElement;
>, <Line: -import com.google.gson.JsonParseException;
>, <Line: -import com.google.gson.JsonPrimitive;
>, <Line: -import com.google.gson.JsonSerializationContext;
>, <Line: -import com.google.gson.JsonSerializer;
>, <Line: -public class ConfigFileHandler {
>, <Line: -	private static final String CHARSET = "UTF-8";
>, <Line: -	private static final Logger logger = LogManager.getLogger(ConfigFileHandler.class.getName());
>, <Line: -	private Gson gson;
>, <Line: -	private final String sessionConfigFilePath;
>, <Line: -	private final String localConfigFilePath;
>, <Line: -	public ConfigFileHandler(String sessionConfigFilePath, String localConfigFilePath) {
>, <Line: -		this.localConfigFilePath = localConfigFilePath;
>, <Line: -		this.sessionConfigFilePath = sessionConfigFilePath;
>, <Line: -		setupGson();
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Local and session configuration
>, <Line: -	 */
>, <Line: -	/**
>, <Line: -	 * Writes to the session configuration file.
>, <Line: -	 */
>, <Line: -	public void saveSessionConfig(SessionConfiguration config) {
>, <Line: -		try {
>, <Line: -			Writer writer = new OutputStreamWriter(new FileOutputStream(sessionConfigFilePath) , CHARSET);
>, <Line: -			gson.toJson(config, SessionConfiguration.class, writer);
>, <Line: -			writer.close();
>, <Line: -		} catch (IOException e) {
>, <Line: -			logger.error(e.getLocalizedMessage(), e);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Locals session configuration file, creating it if it doesn't exist.
>, <Line: -	 */
>, <Line: -	public SessionConfiguration loadSessionConfig() {
>, <Line: -		// Default to an empty configuration
>, <Line: -		SessionConfiguration config = new SessionConfiguration();
>, <Line: -		File configFile = new File(sessionConfigFilePath);
>, <Line: -		if (configFile.exists()) {
>, <Line: -			try {
>, <Line: -				Reader reader = new InputStreamReader(new FileInputStream(sessionConfigFilePath), CHARSET);
>, <Line: -				config = gson.fromJson(reader, SessionConfiguration.class);
>, <Line: -				reader.close();
>, <Line: -			} catch (IOException e) {
>, <Line: -				logger.error(e.getLocalizedMessage(), e);
>, <Line: -			}
>, <Line: -		} else {
>, <Line: -			try {
>, <Line: -				configFile.createNewFile();
>, <Line: -				saveSessionConfig(config);
>, <Line: -			} catch (IOException e) {
>, <Line: -				logger.error(e.getLocalizedMessage(), e);
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return config;
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Writes to the local configuration file.
>, <Line: -	 */
>, <Line: -	public void saveLocalConfig(LocalConfiguration config) {
>, <Line: -		try {
>, <Line: -			Writer writer = new OutputStreamWriter(new FileOutputStream(localConfigFilePath), CHARSET);
>, <Line: -			gson.toJson(config, LocalConfiguration.class, writer);
>, <Line: -			writer.close();
>, <Line: -		} catch (IOException e) {
>, <Line: -			logger.error(e.getLocalizedMessage(), e);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	/**
>, <Line: -	 * Locals local configuration file, creating it if it doesn't exist.
>, <Line: -	 */
>, <Line: -	public LocalConfiguration loadLocalConfig() {
>, <Line: -		// Default to an empty configuration
>, <Line: -		LocalConfiguration config = new LocalConfiguration();
>, <Line: -		File configFile = new File(localConfigFilePath);
>, <Line: -		if (configFile.exists()) {
>, <Line: -			try {
>, <Line: -				Reader reader = new InputStreamReader(new FileInputStream(localConfigFilePath), CHARSET);
>, <Line: -				config = gson.fromJson(reader, LocalConfiguration.class);
>, <Line: -				reader.close();
>, <Line: -			} catch (IOException e) {
>, <Line: -				logger.error(e.getLocalizedMessage(), e);
>, <Line: -			}
>, <Line: -		} else {
>, <Line: -			try {
>, <Line: -				configFile.createNewFile();
>, <Line: -				saveLocalConfig(config);
>, <Line: -			} catch (IOException e) {
>, <Line: -				logger.error(e.getLocalizedMessage(), e);
>, <Line: -			}
>, <Line: -		}
>, <Line: -		return config;
>, <Line: -	}
>, <Line: -	private void setupGson() {
>, <Line: -		 gson = new GsonBuilder()
>, <Line: -			.setPrettyPrinting()
>, <Line: -			.registerTypeAdapter(LocalDateTime.class, new JsonSerializer<LocalDateTime>() {
>, <Line: -				@Override
>, <Line: -				public JsonElement serialize(
>, <Line: -						LocalDateTime src, Type typeOfSrc,
>, <Line: -						JsonSerializationContext context) {
>, <Line: -					Instant instant = src.atZone(ZoneId.systemDefault()).toInstant();
>, <Line: -					long epochMilli = instant.toEpochMilli();
>, <Line: -					return new JsonPrimitive(epochMilli);
>, <Line: -				}
>, <Line: -			})
>, <Line: -			.registerTypeAdapter(LocalDateTime.class, new JsonDeserializer<LocalDateTime>() {
>, <Line: -				@Override
>, <Line: -				public LocalDateTime deserialize(
>, <Line: -						JsonElement json, Type typeOfT,
>, <Line: -						JsonDeserializationContext context)
>, <Line: -						throws JsonParseException {
>, <Line: -					Instant instant = Instant.ofEpochMilli(json.getAsJsonPrimitive().getAsLong());
>, <Line: -			        return LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
>, <Line: -				}								
>, <Line: -			})
>, <Line: -			.create();
>, <Line: -	}
>, <Line: -}
>]