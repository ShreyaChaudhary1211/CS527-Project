[<Line: +package backend.resource;
>, <Line: +import backend.UpdateSignature;
>, <Line: +import backend.interfaces.IBaseModel;
>, <Line: +import backend.resource.serialization.SerializableModel;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Optional;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +@SuppressWarnings("unused")
>, <Line: +public class Model implements IBaseModel {
>, <Line: +	private final UpdateSignature updateSignature;
>, <Line: +	private final String repoId;
>, <Line: +	private final List<TurboIssue> issues;
>, <Line: +	private final List<TurboLabel> labels;
>, <Line: +	private final List<TurboMilestone> milestones;
>, <Line: +	private final List<TurboUser> users;
>, <Line: +	/**
>, <Line: +	 * Standard constructor
>, <Line: +	 */
>, <Line: +	public Model(String repoId, List<TurboIssue> issues,
>, <Line: +		List<TurboLabel> labels, List<TurboMilestone> milestones, List<TurboUser> users,
>, <Line: +		UpdateSignature updateSignature) {
>, <Line: +		this.updateSignature = updateSignature;
>, <Line: +		this.repoId = repoId;
>, <Line: +		this.issues = issues;
>, <Line: +		this.labels = labels;
>, <Line: +		this.milestones = milestones;
>, <Line: +		this.users = users;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Standard constructor with empty update signature -- for use when
>, <Line: +	 * a model is first downloaded
>, <Line: +	 */
>, <Line: +	public Model(String repoId, List<TurboIssue> issues,
>, <Line: +		List<TurboLabel> labels, List<TurboMilestone> milestones, List<TurboUser> users) {
>, <Line: +		this.updateSignature = UpdateSignature.empty;
>, <Line: +		this.repoId = repoId;
>, <Line: +		this.issues = issues;
>, <Line: +		this.labels = labels;
>, <Line: +		this.milestones = milestones;
>, <Line: +		this.users = users;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Constructor for the empty model
>, <Line: +	 */
>, <Line: +	public Model(String repoId) {
>, <Line: +		this.updateSignature = UpdateSignature.empty;
>, <Line: +		this.repoId = repoId;
>, <Line: +		this.issues = new ArrayList<>();
>, <Line: +		this.labels = new ArrayList<>();
>, <Line: +		this.milestones = new ArrayList<>();
>, <Line: +		this.users = new ArrayList<>();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Copy constructor
>, <Line: +	 */
>, <Line: +	public Model(Model model) {
>, <Line: +		this.updateSignature = model.updateSignature;
>, <Line: +		this.repoId = model.getRepoId();
>, <Line: +		this.issues = new ArrayList<>(model.getIssues());
>, <Line: +		this.labels = new ArrayList<>(model.getLabels());
>, <Line: +		this.milestones = new ArrayList<>(model.getMilestones());
>, <Line: +		this.users = new ArrayList<>(model.getUsers());
>, <Line: +	}
>, <Line: +	public Model(SerializableModel model) {
>, <Line: +		this.updateSignature = model.updateSignature;
>, <Line: +		this.repoId = model.repoId;
>, <Line: +		this.issues = model.issues.stream()
>, <Line: +			.map(i -> new TurboIssue(model.repoId, i))
>, <Line: +			.collect(Collectors.toList());
>, <Line: +		this.labels = model.labels.stream()
>, <Line: +			.map(l -> new TurboLabel(model.repoId, l))
>, <Line: +			.collect(Collectors.toList());
>, <Line: +		this.milestones = model.milestones.stream()
>, <Line: +			.map(m -> new TurboMilestone(model.repoId, m))
>, <Line: +			.collect(Collectors.toList());
>, <Line: +		this.users = model.users.stream()
>, <Line: +			.map(u -> new TurboUser(model.repoId, u))
>, <Line: +			.collect(Collectors.toList());
>, <Line: +	}
>, <Line: +	public String getRepoId() {
>, <Line: +		return repoId;
>, <Line: +	}
>, <Line: +	public UpdateSignature getUpdateSignature() {
>, <Line: +		return updateSignature;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public List<TurboIssue> getIssues() {
>, <Line: +		return new ArrayList<>(issues);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public List<TurboLabel> getLabels() {
>, <Line: +		return new ArrayList<>(labels);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public List<TurboMilestone> getMilestones() {
>, <Line: +		return new ArrayList<>(milestones);
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public List<TurboUser> getUsers() {
>, <Line: +		return new ArrayList<>(users);
>, <Line: +	}
>, <Line: +	private void ______OPERATIONS_____() {
>, <Line: +	}
>, <Line: +	public Optional<TurboIssue> getIssueById(int issueId) {
>, <Line: +		assert issueId >= 1 : "Invalid issue id " + issueId;
>, <Line: +		for (TurboIssue issue : getIssues()) {
>, <Line: +			if (issue.getId() == issueId) {
>, <Line: +				return Optional.of(issue);
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return Optional.empty();
>, <Line: +	}
>, <Line: +	public Optional<TurboLabel> getLabelByActualName(String labelName) {
>, <Line: +		assert labelName != null && !labelName.isEmpty() : "Invalid label name " + labelName;
>, <Line: +		for (TurboLabel label : getLabels()) {
>, <Line: +			if (label.getActualName().equals(labelName)) {
>, <Line: +				return Optional.of(label);
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return Optional.empty();
>, <Line: +	}
>, <Line: +	public Optional<TurboUser> getUserByLogin(String login) {
>, <Line: +		assert login != null && !login.isEmpty() : "Invalid user name " + login;
>, <Line: +		for (TurboUser user : getUsers()) {
>, <Line: +			if (user.getLoginName().equals(login)) {
>, <Line: +				return Optional.of(user);
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return Optional.empty();
>, <Line: +	}
>, <Line: +	public Optional<TurboMilestone> getMilestoneByTitle(String title) {
>, <Line: +		assert title != null && !title.isEmpty() : "Invalid milestone title " + title;
>, <Line: +		for (TurboMilestone milestone : getMilestones()) {
>, <Line: +			if (milestone.getTitle().equals(title)) {
>, <Line: +				return Optional.of(milestone);
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return Optional.empty();
>, <Line: +	}
>, <Line: +	public Optional<TurboMilestone> getMilestoneById(int id) {
>, <Line: +		assert id >= 1 : "Invalid milestone id " + id;
>, <Line: +		for (TurboMilestone milestone : getMilestones()) {
>, <Line: +			if (milestone.getId() == id) {
>, <Line: +				return Optional.of(milestone);
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return Optional.empty();
>, <Line: +	}
>, <Line: +	public Optional<TurboMilestone> getMilestoneOfIssue(TurboIssue issue) {
>, <Line: +		return issue.getMilestone().flatMap(this::getMilestoneById);
>, <Line: +	}
>, <Line: +	public Optional<TurboUser> getAssigneeOfIssue(TurboIssue issue) {
>, <Line: +		return issue.getAssignee().flatMap(this::getUserByLogin);
>, <Line: +	}
>, <Line: +	public List<TurboLabel> getLabelsOfIssue(TurboIssue issue) {
>, <Line: +		return issue.getLabels().stream()
>, <Line: +			.map(this::getLabelByActualName)
>, <Line: +			.filter(Optional::isPresent).map(Optional::get)
>, <Line: +			.collect(Collectors.toList());
>, <Line: +	}
>, <Line: +	private void ______BOILERPLATE______() {
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public boolean equals(Object o) {
>, <Line: +		if (this == o) return true;
>, <Line: +		if (o == null || getClass() != o.getClass()) return false;
>, <Line: +		Model model = (Model) o;
>, <Line: +		if (!issues.equals(model.issues)) return false;
>, <Line: +		if (!labels.equals(model.labels)) return false;
>, <Line: +		if (!milestones.equals(model.milestones)) return false;
>, <Line: +		if (!repoId.equals(model.repoId)) return false;
>, <Line: +		if (!updateSignature.equals(model.updateSignature)) return false;
>, <Line: +		if (!users.equals(model.users)) return false;
>, <Line: +		return true;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public int hashCode() {
>, <Line: +		int result = updateSignature.hashCode();
>, <Line: +		result = 31 * result + repoId.hashCode();
>, <Line: +		result = 31 * result + issues.hashCode();
>, <Line: +		result = 31 * result + labels.hashCode();
>, <Line: +		result = 31 * result + milestones.hashCode();
>, <Line: +		result = 31 * result + users.hashCode();
>, <Line: +		return result;
>, <Line: +	}
>, <Line: +}
>]
[]