[<Line: +package prefs;
>, <Line: +import org.eclipse.egit.github.core.RepositoryId;
>, <Line: +import ui.UI;
>, <Line: +import ui.issuecolumn.ColumnControl;
>, <Line: +import java.util.List;
>, <Line: +import java.util.Map;
>, <Line: +import java.util.Optional;
>, <Line: +public class Preferences {
>, <Line: +	public static final String DIRECTORY = "settings";
>, <Line: +	private static final String GLOBAL_CONFIG_FILE = "global.json";
>, <Line: +	private final ConfigFileHandler fileHandler;
>, <Line: +	private final UI ui;
>, <Line: +	private final ColumnControl columns;
>, <Line: +	public GlobalConfig global;
>, <Line: +	public Preferences(UI ui, ColumnControl columns) {
>, <Line: +		this.ui = ui;
>, <Line: +		this.columns = columns;
>, <Line: +		this.fileHandler = new ConfigFileHandler(DIRECTORY, GLOBAL_CONFIG_FILE);
>, <Line: +		loadGlobalConfig();
>, <Line: +	}
>, <Line: +	public void saveGlobalConfig() {
>, <Line: +		fileHandler.saveGlobalConfig(global);
>, <Line: +	}
>, <Line: +	public void loadGlobalConfig() {
>, <Line: +		global = fileHandler.loadGlobalConfig();
>, <Line: +	}
>, <Line: +	public String getLastLoginPassword() {
>, <Line: +		return global.getLastLoginPassword();
>, <Line: +	}
>, <Line: +	public String getLastLoginUsername() {
>, <Line: +		return global.getLastLoginUsername();
>, <Line: +	}
>, <Line: +	public void setLastLoginCredentials(String username, String password) {
>, <Line: +		global.setLastLoginCredentials(username, password);
>, <Line: +	}
>, <Line: +	public List<String> getLastOpenFilters() {
>, <Line: +		return global.getLastOpenFilters();
>, <Line: +	}
>, <Line: +	public void setLastOpenFilters(List<String> filter) {
>, <Line: +		global.setLastOpenFilters(filter);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Interface to configuration files
>, <Line: +	 */
>, <Line: +	/**
>, <Line: +	 * Boards
>, <Line: +	 */
>, <Line: +	public void addBoard(String name, List<String> filterExprs) {
>, <Line: +		assert name != null && filterExprs != null;
>, <Line: +		global.addBoard(name, filterExprs);
>, <Line: +	}
>, <Line: +//	public List<String> getBoardPanels(String name) {
>, <Line: +//		return global.getBoardPanels(name);
>, <Line: +//	}
>, <Line: +	public Map<String, List<String>> getAllBoards() {
>, <Line: +		return global.getAllBoards();
>, <Line: +	}
>, <Line: +	public void removeBoard(String name) {
>, <Line: +		global.removeBoard(name);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Session configuration
>, <Line: +	 */
>, <Line: +	public void addToLastViewedRepositories(String repository) {
>, <Line: +		global.addToLastViewedRepositories(repository);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Helper method to get the most recently viewed repository,
>, <Line: +	 * allowing for failure if there are none (on first run)
>, <Line: +	 * @return
>, <Line: +	 */
>, <Line: +	public Optional<RepositoryId> getLastViewedRepository() {
>, <Line: +		List<String> lastViewed = global.getLastViewedRepositories();
>, <Line: +		if (lastViewed.isEmpty()) {
>, <Line: +			return Optional.empty();
>, <Line: +		} else {
>, <Line: +			String id = lastViewed.get(lastViewed.size()-1);
>, <Line: +			return Optional.of(RepositoryId.createFromId(id));
>, <Line: +		}
>, <Line: +	}
>, <Line: +	public List<String> getLastViewedRepositories() {
>, <Line: +		return global.getLastViewedRepositories();
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Testing
>, <Line: +	 */
>, <Line: +//	public void setConfigFileHandler(ConfigFileHandler handler) {
>, <Line: +//		this.fileHandler = handler;
>, <Line: +//		init();
>, <Line: +//	}
>, <Line: +//
>, <Line: +}
>]
[]