[<Line: +import backend.interfaces.IModel;
>, <Line: +import backend.resource.TurboIssue;
>, <Line: +import backend.resource.TurboLabel;
>, <Line: +import backend.resource.TurboMilestone;
>, <Line: +import backend.resource.TurboUser;
>, <Line: +import filter.MetaQualifierInfo;
>, <Line: +import filter.QualifierApplicationException;
>, <Line: +import util.Utility;
>, <Line: +import java.util.function.Consumer;
>, <Line: +	public static boolean process(IModel model, FilterExpression expr, TurboIssue issue) {
>, <Line: +		FilterExpression exprWithNormalQualifiers = expr.filter(Qualifier::shouldNotBeStripped);
>, <Line: +		// Preprocessing for repo qualifier
>, <Line: +		boolean containsRepoQualifier = metaQualifiers.stream()
>, <Line: +				.map(Qualifier::getName)
>, <Line: +				.collect(Collectors.toList())
>, <Line: +			.contains("repo");
>, <Line: +		if (!containsRepoQualifier) {
>, <Line: +			exprWithNormalQualifiers = new Conjunction(
>, <Line: +				new Qualifier("repo", model.getDefaultRepo()),
>, <Line: +				exprWithNormalQualifiers);
>, <Line: +		}
>, <Line: +		return exprWithNormalQualifiers.isSatisfiedBy(model, issue, new MetaQualifierInfo(metaQualifiers));
>, <Line: +	}
>, <Line: +	public static void processMetaQualifierEffects(FilterExpression expr, Consumer<Qualifier> callback) {
>, <Line: +		expr.find(Qualifier::isMetaQualifier).forEach(callback);
>, <Line: +	@Override
>, <Line: +    public boolean isSatisfiedBy(IModel model, TurboIssue issue, MetaQualifierInfo info) {
>, <Line: +            return milestoneSatisfies(model, issue);
>, <Line: +            return labelsSatisfy(model, issue);
>, <Line: +            return assigneeSatisfies(model, issue);
>, <Line: +            return involvesSatisfies(model, issue);
>, <Line: +	        return satisfiesUpdatedHours(issue);
>, <Line: +        case "repo":
>, <Line: +            return satisfiesRepo(issue);
>, <Line: +    public void applyTo(TurboIssue issue, IModel model) throws QualifierApplicationException {
>, <Line: +        return new ArrayList<>(Arrays.asList(name));
>, <Line: +            	String quotedContent = content.get();
>, <Line: +	private static boolean shouldNotBeStripped(Qualifier q) {
>, <Line: +		return !shouldBeStripped(q);
>, <Line: +	}
>, <Line: +	private static boolean shouldBeStripped(Qualifier q) {
>, <Line: +		switch (q.getName()) {
>, <Line: +			case "in":
>, <Line: +				return true;
>, <Line: +			default:
>, <Line: +				return false;
>, <Line: +		}
>, <Line: +		case "repo":
>, <Line: +	    return number.isPresent() && issue.getId() == number.get();
>, <Line: +	private boolean satisfiesRepo(TurboIssue issue) {
>, <Line: +		if (!content.isPresent()) return false;
>, <Line: +		return issue.getRepoId().equals(content.get());
>, <Line: +	}
>, <Line: +    	LocalDate creationDate = issue.getCreatedAt().toLocalDate();
>, <Line: +	    return content.isPresent() && !satisfiesHasConditions(issue);
>, <Line: +    private boolean assigneeSatisfies(IModel model, TurboIssue issue) {
>, <Line: +	    if (!content.isPresent()) return false;
>, <Line: +	    Optional<TurboUser> assignee = model.getAssigneeOfIssue(issue);
>, <Line: +	    if (!assignee.isPresent()) return false;
>, <Line: +	    String content = this.content.get().toLowerCase();
>, <Line: +	    String login = assignee.get().getLoginName() == null ? "" : assignee.get().getLoginName().toLowerCase();
>, <Line: +	    String name = assignee.get().getRealName() == null ? "" : assignee.get().getRealName().toLowerCase();
>, <Line: +	    return login.contains(content) || name.contains(content);
>, <Line: +    private boolean involvesSatisfies(IModel model, TurboIssue issue) {
>, <Line: +    	return authorSatisfies(issue) || assigneeSatisfies(model, issue);
>, <Line: +    private boolean labelsSatisfy(IModel model, TurboIssue issue) {
>, <Line: +	    // Make use of TurboLabel constructor to parse the string, to avoid duplication
>, <Line: +	    TurboLabel tokens = new TurboLabel("", content.get().toLowerCase());
>, <Line: +	    String group = "";
>, <Line: +		if (tokens.getGroup().isPresent()) {
>, <Line: +			group = tokens.getGroup().get().toLowerCase();
>, <Line: +		}
>, <Line: +	    String labelName = tokens.getName().toLowerCase();
>, <Line: +        for (TurboLabel label : model.getLabelsOfIssue(issue)) {
>, <Line: +	        if (label.getGroup().isPresent()) {
>, <Line: +		        // Check both
>, <Line: +		        if (label.getGroup().get().toLowerCase().contains(group)
>, <Line: +			        && label.getName().toLowerCase().contains(labelName)) {
>, <Line: +			        return true;
>, <Line: +		        }
>, <Line: +	        } else {
>, <Line: +		        // Check only the label name
>, <Line: +		        return label.getName().toLowerCase().contains(labelName);
>, <Line: +	        }
>, <Line: +    private boolean milestoneSatisfies(IModel model, TurboIssue issue) {
>, <Line: +    	if (!content.isPresent()) return false;
>, <Line: +	    Optional<TurboMilestone> milestone = model.getMilestoneOfIssue(issue);
>, <Line: +	    if (!milestone.isPresent()) return false;
>, <Line: +	    String contents = content.get().toLowerCase();
>, <Line: +	    String title = milestone.get().getTitle().toLowerCase();
>, <Line: +        return title.contains(contents);
>, <Line: +	    switch (content) {
>, <Line: +		    case "issue":
>, <Line: +			    return !issue.isPullRequest();
>, <Line: +		    case "pr":
>, <Line: +		    case "pullrequest":
>, <Line: +			    return issue.isPullRequest();
>, <Line: +		    default:
>, <Line: +			    return false;
>, <Line: +	    }
>, <Line: +	private void applyMilestone(TurboIssue issue, IModel model) throws QualifierApplicationException {
>, <Line: +    private void applyLabel(TurboIssue issue, IModel model) throws QualifierApplicationException {
>, <Line: +        List<TurboLabel> labels = model.getLabels().stream()
>, <Line: +           .filter(l -> l.getActualName().toLowerCase().contains(content.get().toLowerCase()))
>, <Line: +	        .collect(Collectors.toList());
>, <Line: +    private void applyAssignee(TurboIssue issue, IModel model) throws QualifierApplicationException {
>, <Line: +        List<TurboUser> assignees = model.getUsers().stream()
>, <Line: +	        .filter(c -> c.getLoginName().toLowerCase().contains(content.get().toLowerCase()))
>, <Line: +	        .collect(Collectors.toList());
>]
[<Line: -import java.time.format.DateTimeFormatter;
>, <Line: -import model.Model;
>, <Line: -import model.TurboIssue;
>, <Line: -import model.TurboLabel;
>, <Line: -import model.TurboMilestone;
>, <Line: -import model.TurboUser;
>, <Line: -import util.Utility;
>, <Line: -import filter.MetaQualifierInfo;
>, <Line: -import filter.QualifierApplicationException;
>, <Line: -    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMM yy, h:mm a");
>, <Line: -	public static boolean process(FilterExpression expr, TurboIssue issue) {
>, <Line: -		FilterExpression exprWithNormalQualifiers = expr.filter(Qualifier::isNotMetaQualifier);
>, <Line: -		return exprWithNormalQualifiers.isSatisfiedBy(issue, new MetaQualifierInfo(metaQualifiers));
>, <Line: -	 * @param dateTime
>, <Line: -    public boolean isSatisfiedBy(TurboIssue issue, MetaQualifierInfo info) {
>, <Line: -            return milestoneSatisfies(issue);
>, <Line: -        case "parent":
>, <Line: -            return parentSatisfies(issue);
>, <Line: -            return labelsSatisfy(issue);
>, <Line: -            return assigneeSatisfies(issue);
>, <Line: -            return involvesSatisfies(issue);
>, <Line: -            return satisfiesUpdatedHours(issue);
>, <Line: -    public void applyTo(TurboIssue issue, Model model) throws QualifierApplicationException {
>, <Line: -        case "parent":
>, <Line: -            applyParent(issue, model);
>, <Line: -            break;
>, <Line: -        return new ArrayList<String>(Arrays.asList(name));
>, <Line: -            	String quotedContent = content.get().toString();
>, <Line: -	private static boolean isNotMetaQualifier(Qualifier q) {
>, <Line: -		return !isMetaQualifier(q);
>, <Line: -        if (!number.isPresent()) return false;
>, <Line: -        return issue.getId() == number.get();
>, <Line: -    	LocalDate creationDate = LocalDate.parse(issue.getCreatedAt(), formatter);
>, <Line: -        case "parent":
>, <Line: -        case "parents":
>, <Line: -            return issue.getParentIssue() != -1;
>, <Line: -    	if (!content.isPresent()) return false;
>, <Line: -        return !satisfiesHasConditions(issue);
>, <Line: -    private boolean assigneeSatisfies(TurboIssue issue) {
>, <Line: -    	if (!content.isPresent()) return false;
>, <Line: -        TurboUser assignee = issue.getAssignee();
>, <Line: -        String content = this.content.get().toLowerCase();
>, <Line: -        if (assignee == null) return false;
>, <Line: -        return assignee.getAlias().toLowerCase().contains(content)
>, <Line: -                || assignee.getGithubName().toLowerCase().contains(content)
>, <Line: -                || (assignee.getRealName() != null && assignee.getRealName().toLowerCase().contains(content));
>, <Line: -    	if (creator == null) return false;
>, <Line: -    private boolean involvesSatisfies(TurboIssue issue) {
>, <Line: -    	return authorSatisfies(issue) || assigneeSatisfies(issue);
>, <Line: -    private boolean labelsSatisfy(TurboIssue issue) {
>, <Line: -        String group = "";
>, <Line: -        String labelName = content.get().toLowerCase();
>, <Line: -        Optional<String[]> tokens = TurboLabel.parseName(labelName);
>, <Line: -		if (tokens.isPresent()) {
>, <Line: -			group = tokens.get()[0];
>, <Line: -			labelName = tokens.get()[1];
>, <Line: -		} else {
>, <Line: -			// The name isn't in the format group.name or group.
>, <Line: -			// Take the entire thing to be the label name
>, <Line: -		}
>, <Line: -        // Both can't be null
>, <Line: -        assert group != null && labelName != null;
>, <Line: -        // At most one can be empty
>, <Line: -        assert !(group.isEmpty() && labelName.isEmpty());
>, <Line: -        for (TurboLabel l : issue.getLabels()) {
>, <Line: -            if (labelName.isEmpty() || l.getName() != null && l.getName().toLowerCase().contains(labelName)) {
>, <Line: -                if (group.isEmpty() || l.getGroup() != null && l.getGroup().toLowerCase().contains(group)) {
>, <Line: -                    return true;
>, <Line: -                }
>, <Line: -            }
>, <Line: -    private boolean parentSatisfies(TurboIssue issue) {
>, <Line: -    	if (!number.isPresent()) return false;
>, <Line: -        int parentIndex = number.get();
>, <Line: -        if (parentIndex > 0) {
>, <Line: -            TurboIssue current = issue;
>, <Line: -            // The parent itself should show
>, <Line: -            if (current.getId() == parentIndex) return true;
>, <Line: -            // Descendants should show too
>, <Line: -            return current.hasAncestor(parentIndex);
>, <Line: -        }
>, <Line: -        // Invalid issue number
>, <Line: -        return false;
>, <Line: -    }
>, <Line: -    private boolean milestoneSatisfies(TurboIssue issue) {
>, <Line: -    	if (!content.isPresent()) return false;
>, <Line: -        if (issue.getMilestone() == null) return false;
>, <Line: -        return issue.getMilestone().getTitle().toLowerCase().contains(content.get().toLowerCase());
>, <Line: -    	if (content.equals("issue")) {
>, <Line: -            return !issue.isPullRequest();
>, <Line: -    	} else if (content.equals("pr") || content.equals("pullrequest")) {
>, <Line: -    		return issue.isPullRequest();
>, <Line: -    	} else {
>, <Line: -    		return false;
>, <Line: -    	}
>, <Line: -	private void applyMilestone(TurboIssue issue, Model model) throws QualifierApplicationException {
>, <Line: -    private void applyParent(TurboIssue issue, Model model) throws QualifierApplicationException {
>, <Line: -    	if (!number.isPresent()) {
>, <Line: -    		throw new QualifierApplicationException("Invalid parent " + (date.isPresent() ? date.get() : dateRange.get()));
>, <Line: -    	}
>, <Line: -        String parent = content.get().toLowerCase();
>, <Line: -        int index = number.get();
>, <Line: -        if (index != -1) {
>, <Line: -            issue.setParentIssue(index);
>, <Line: -        } else {
>, <Line: -            // Find parents containing the partial title
>, <Line: -            List<TurboIssue> parents = model.getIssues().stream().filter(i -> i.getTitle().toLowerCase().contains(parent.toLowerCase())).collect(Collectors.toList());
>, <Line: -            if (parents.size() > 1) {
>, <Line: -                throw new QualifierApplicationException("Ambiguous filter: can apply any of the following parents: " + parents.toString());
>, <Line: -            } else {
>, <Line: -                issue.setParentIssue(parents.get(0).getId());
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>, <Line: -    private void applyLabel(TurboIssue issue, Model model) throws QualifierApplicationException {
>, <Line: -        List<TurboLabel> labels = model.getLabels()
>, <Line: -                                       .stream()
>, <Line: -                                       .filter(l -> l.toGhName().toLowerCase().contains(content.get().toLowerCase())).collect(Collectors.toList());
>, <Line: -    private void applyAssignee(TurboIssue issue, Model model) throws QualifierApplicationException {
>, <Line: -        List<TurboUser> assignees = model.getCollaborators().stream().filter(c -> c.getGithubName().toLowerCase().contains(content.get().toLowerCase())).collect(Collectors.toList());
>]