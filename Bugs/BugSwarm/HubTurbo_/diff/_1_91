[<Line: +package prefs;
>, <Line: +import org.apache.logging.log4j.LogManager;
>, <Line: +import org.apache.logging.log4j.Logger;
>, <Line: +import javax.crypto.BadPaddingException;
>, <Line: +import javax.crypto.Cipher;
>, <Line: +import javax.crypto.IllegalBlockSizeException;
>, <Line: +import javax.crypto.NoSuchPaddingException;
>, <Line: +import javax.crypto.spec.SecretKeySpec;
>, <Line: +import java.security.InvalidKeyException;
>, <Line: +import java.security.Key;
>, <Line: +import java.security.NoSuchAlgorithmException;
>, <Line: +import java.util.*;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +/**
>, <Line: + * Abstractions for the contents of the global config file.
>, <Line: + */
>, <Line: +@SuppressWarnings("unused")
>, <Line: +public class GlobalConfig {
>, <Line: +	private static final Logger logger = LogManager.getLogger(GlobalConfig.class.getName());
>, <Line: +	private List<String> lastOpenFilters = new ArrayList<>();
>, <Line: +	private List<RepoViewRecord> lastViewedRepositories = new ArrayList<>();
>, <Line: +	private String lastLoginUsername = "";
>, <Line: +	private byte[] lastLoginPassword = new byte[0];
>, <Line: +	private Map<String, List<String>> boards = new HashMap<>();
>, <Line: +	public GlobalConfig() {
>, <Line: +	}
>, <Line: +	public void addBoard(String name, List<String> filterExprs) {
>, <Line: +		boards.put(name, filterExprs);
>, <Line: +	}
>, <Line: +	public List<String> getBoardPanels(String name) {
>, <Line: +		return boards.get(name);
>, <Line: +	}
>, <Line: +	public Map<String, List<String>> getAllBoards() {
>, <Line: +		return new HashMap<>(boards);
>, <Line: +	}
>, <Line: +	public void removeBoard(String name) {
>, <Line: +		boards.remove(name);
>, <Line: +	}
>, <Line: +	public void setLastOpenFilters(List<String> filter) {
>, <Line: +		lastOpenFilters = new ArrayList<>(filter);
>, <Line: +	}
>, <Line: +	public List<String> getLastOpenFilters() {
>, <Line: +		return new ArrayList<>(lastOpenFilters);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Adds a repository to the list of last-viewed repositories.
>, <Line: +	 * The list will always have 10 or fewer items.
>, <Line: +	 */
>, <Line: +	public void addToLastViewedRepositories(String repository) {
>, <Line: +		repository = repository.toLowerCase();
>, <Line: +		// Create record for this repository
>, <Line: +		RepoViewRecord latestRepoView = new RepoViewRecord(repository);
>, <Line: +		int index = lastViewedRepositories.indexOf(latestRepoView);
>, <Line: +		if (index < 0) {
>, <Line: +			lastViewedRepositories.add(latestRepoView);
>, <Line: +		} else {
>, <Line: +			lastViewedRepositories.get(index).setTimestamp(latestRepoView.getTimestamp());
>, <Line: +		}
>, <Line: +		// Keep only the 10 latest records
>, <Line: +		Collections.sort(lastViewedRepositories);
>, <Line: +		while (lastViewedRepositories.size() > 10) {
>, <Line: +			lastViewedRepositories.remove(lastViewedRepositories.size() - 1);
>, <Line: +		}
>, <Line: +		assert lastViewedRepositories.size() <= 10;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * Returns last-viewed repositories in owner/name format.
>, <Line: +	 * They are sorted by access date, latest first.
>, <Line: +	 */
>, <Line: +	public List<String> getLastViewedRepositories() {
>, <Line: +		return lastViewedRepositories.stream()
>, <Line: +				.map(RepoViewRecord::getRepository)
>, <Line: +				.collect(Collectors.toList());
>, <Line: +	}
>, <Line: +	public String getLastLoginUsername() {
>, <Line: +		return lastLoginUsername;
>, <Line: +	}
>, <Line: +	public String getLastLoginPassword() {
>, <Line: +		return decrypt(lastLoginPassword);
>, <Line: +	}
>, <Line: +	public void setLastLoginCredentials(String username, String password) {
>, <Line: +		this.lastLoginUsername = username;
>, <Line: +		this.lastLoginPassword = encrypt(password);
>, <Line: +	}
>, <Line: +	private static byte[] encrypt(String lastPassword) {
>, <Line: +		byte[] result = new byte[0];
>, <Line: +		try {
>, <Line: +			String key = "HubTurboHubTurbo";
>, <Line: +		    Key aesKey = new SecretKeySpec(key.getBytes(), "AES");
>, <Line: +			Cipher cipher = Cipher.getInstance("AES");
>, <Line: +			cipher.init(Cipher.ENCRYPT_MODE, aesKey);
>, <Line: +			result = cipher.doFinal(lastPassword.getBytes());
>, <Line: +		} catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
>, <Line: +			logger.error("Cannot encrypt data " + e.getMessage(), e);
>, <Line: +		}
>, <Line: +		return result;
>, <Line: +	}
>, <Line: +	private static String decrypt(byte[] lastLoginEncrypted) {
>, <Line: +		String result = "";
>, <Line: +		try {
>, <Line: +			String key = "HubTurboHubTurbo";
>, <Line: +		    Key aesKey = new SecretKeySpec(key.getBytes(), "AES");
>, <Line: +			Cipher cipher = Cipher.getInstance("AES");
>, <Line: +			cipher.init(Cipher.DECRYPT_MODE, aesKey);
>, <Line: +			result = new String(cipher.doFinal(lastLoginEncrypted));
>, <Line: +		} catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {
>, <Line: +			logger.error("Cannot encrypt data " + e.getMessage(), e);
>, <Line: +		}
>, <Line: +		return result;
>, <Line: +	}
>, <Line: +}
>]
[]