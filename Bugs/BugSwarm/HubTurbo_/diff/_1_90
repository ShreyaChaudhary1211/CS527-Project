[<Line: +package prefs;
>, <Line: +import com.google.gson.*;
>, <Line: +import org.apache.logging.log4j.LogManager;
>, <Line: +import org.apache.logging.log4j.Logger;
>, <Line: +import util.HTLog;
>, <Line: +import java.io.*;
>, <Line: +import java.lang.reflect.Type;
>, <Line: +import java.time.Instant;
>, <Line: +import java.time.LocalDateTime;
>, <Line: +import java.time.ZoneId;
>, <Line: +public class ConfigFileHandler {
>, <Line: +	private static final Logger logger = LogManager.getLogger(ConfigFileHandler.class.getName());
>, <Line: +	private static final String CHARSET = "UTF-8";
>, <Line: +	private final String globalConfigFileName;
>, <Line: +	private final String configDirectory;
>, <Line: +	private Gson gson;
>, <Line: +	public ConfigFileHandler(String configDirectory, String globalConfigFileName) {
>, <Line: +		this.globalConfigFileName = globalConfigFileName;
>, <Line: +		this.configDirectory = configDirectory;
>, <Line: +		setupGson();
>, <Line: +		ensureDirectoryExists();
>, <Line: +	}
>, <Line: +	private void ensureDirectoryExists() {
>, <Line: +		File directory = new File(configDirectory);
>, <Line: +		if (!directory.exists() || !directory.isDirectory()) {
>, <Line: +			directory.mkdirs();
>, <Line: +		}
>, <Line: +	}
>, <Line: +	private File getGlobalConfigFile() {
>, <Line: +		return new File(configDirectory, globalConfigFileName).getAbsoluteFile();
>, <Line: +	}
>, <Line: +	public void saveGlobalConfig(GlobalConfig config) {
>, <Line: +		File configFile = getGlobalConfigFile();
>, <Line: +		try {
>, <Line: +			Writer writer = new OutputStreamWriter(new FileOutputStream(configFile) , CHARSET);
>, <Line: +			gson.toJson(config, GlobalConfig.class, writer);
>, <Line: +			writer.close();
>, <Line: +		} catch (IOException e) {
>, <Line: +			HTLog.error(logger, e);
>, <Line: +		}
>, <Line: +	}
>, <Line: +	public GlobalConfig loadGlobalConfig() {
>, <Line: +		// Default to an empty configuration
>, <Line: +		GlobalConfig config = new GlobalConfig();
>, <Line: +		File configFile = getGlobalConfigFile();
>, <Line: +		if (configFile.exists()) {
>, <Line: +			try {
>, <Line: +				Reader reader = new InputStreamReader(new FileInputStream(configFile), CHARSET);
>, <Line: +				config = gson.fromJson(reader, GlobalConfig.class);
>, <Line: +				reader.close();
>, <Line: +			} catch (IOException e) {
>, <Line: +				HTLog.error(logger, e);
>, <Line: +			}
>, <Line: +		} else {
>, <Line: +			try {
>, <Line: +				configFile.createNewFile();
>, <Line: +				saveGlobalConfig(config);
>, <Line: +			} catch (IOException e) {
>, <Line: +				HTLog.error(logger, e);
>, <Line: +			}
>, <Line: +		}
>, <Line: +		return config;
>, <Line: +	}
>, <Line: +	private void setupGson() {
>, <Line: +		 gson = new GsonBuilder()
>, <Line: +			.setPrettyPrinting()
>, <Line: +			.registerTypeAdapter(LocalDateTime.class, new JsonSerializer<LocalDateTime>() {
>, <Line: +				@Override
>, <Line: +				public JsonElement serialize(
>, <Line: +						LocalDateTime src, Type typeOfSrc,
>, <Line: +						JsonSerializationContext context) {
>, <Line: +					Instant instant = src.atZone(ZoneId.systemDefault()).toInstant();
>, <Line: +					long epochMilli = instant.toEpochMilli();
>, <Line: +					return new JsonPrimitive(epochMilli);
>, <Line: +				}
>, <Line: +			})
>, <Line: +			.registerTypeAdapter(LocalDateTime.class,
>, <Line: +				(JsonDeserializer<LocalDateTime>) (json, typeOfT, context) -> {
>, <Line: +					Instant instant = Instant.ofEpochMilli(json.getAsJsonPrimitive().getAsLong());
>, <Line: +					return LocalDateTime.ofInstant(instant, ZoneId.systemDefault());
>, <Line: +				}
>, <Line: +			).create();
>, <Line: +	}
>, <Line: +}
>]
[]