[<Line: +package backend.github;
>, <Line: +import backend.UpdateSignature;
>, <Line: +import backend.interfaces.Repo;
>, <Line: +import backend.interfaces.TaskRunner;
>, <Line: +import backend.resource.*;
>, <Line: +import org.apache.logging.log4j.Logger;
>, <Line: +import util.HTLog;
>, <Line: +import java.util.concurrent.ExecutionException;
>, <Line: +public class UpdateModelTask extends GitHubRepoTask<Model> {
>, <Line: +	private static final Logger logger = HTLog.get(UpdateModelTask.class);
>, <Line: +	private final Model model;
>, <Line: +	public UpdateModelTask(TaskRunner taskRunner, Repo repo, Model model) {
>, <Line: +		super(taskRunner, repo);
>, <Line: +		this.model = model;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public void run() {
>, <Line: +		UpdateIssuesTask issuesTask = new UpdateIssuesTask(taskRunner, repo, model);
>, <Line: +		UpdateLabelsTask labelsTask = new UpdateLabelsTask(taskRunner, repo, model);
>, <Line: +		UpdateMilestonesTask milestonesTask = new UpdateMilestonesTask(taskRunner, repo, model);
>, <Line: +		UpdateUsersTask usersTask = new UpdateUsersTask(taskRunner, repo, model);
>, <Line: +		taskRunner.execute(issuesTask);
>, <Line: +		taskRunner.execute(labelsTask);
>, <Line: +		taskRunner.execute(milestonesTask);
>, <Line: +		taskRunner.execute(usersTask);
>, <Line: +		try {
>, <Line: +			GitHubRepoTask.Result<TurboIssue> issuesResult = issuesTask.response.get();
>, <Line: +			GitHubRepoTask.Result<TurboLabel> labelsResult = labelsTask.response.get();
>, <Line: +			GitHubRepoTask.Result<TurboMilestone> milestonesResult = milestonesTask.response.get();
>, <Line: +			GitHubRepoTask.Result<TurboUser> usersResult = usersTask.response.get();
>, <Line: +			UpdateSignature newSignature =
>, <Line: +				new UpdateSignature(issuesResult.ETag, labelsResult.ETag,
>, <Line: +					milestonesResult.ETag, usersResult.ETag, issuesResult.lastCheckTime);
>, <Line: +			Model result = new Model(model.getRepoId(), issuesResult.items,
>, <Line: +				labelsResult.items, milestonesResult.items, usersResult.items, newSignature);
>, <Line: +			logger.info(HTLog.format(model.getRepoId(), "Updated model with " + result.summarise()));
>, <Line: +			response.complete(result);
>, <Line: +		} catch (InterruptedException | ExecutionException e) {
>, <Line: +			HTLog.error(logger, e);
>, <Line: +		}
>, <Line: +	}
>, <Line: +}
>]
[]