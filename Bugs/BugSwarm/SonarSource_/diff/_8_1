[<Line: +import com.google.common.collect.ImmutableList;
>, <Line: +import org.sonar.php.api.PHPKeyword;
>, <Line: +import org.sonar.php.checks.formatting.FormattingCheck;
>, <Line: +import org.sonar.php.checks.utils.CheckUtils;
>, <Line: +import org.sonar.plugins.php.api.tree.ScriptTree;
>, <Line: +import org.sonar.plugins.php.api.tree.Tree;
>, <Line: +import org.sonar.plugins.php.api.tree.expression.ExpressionTree;
>, <Line: +import org.sonar.plugins.php.api.visitors.PHPVisitorCheck;
>, <Line: +import java.util.List;
>, <Line: +  key = FormattingStandardCheck.KEY,
>, <Line: +public class FormattingStandardCheck extends PHPVisitorCheck {
>, <Line: +  public static final String KEY = "S1808";
>, <Line: +  private static final FormattingCheck[] SUB_CHECKS = {
>, <Line: +    new NamespaceAndUseStatementCheck(),
>, <Line: +    new CurlyBraceCheck(),
>, <Line: +    new PunctuatorSpacingCheck(),
>, <Line: +    new FunctionSpacingCheck(),
>, <Line: +    new ControlStructureSpacingCheck(),
>, <Line: +    new IndentationCheck(),
>, <Line: +    new ExtendsImplementsLineCheck()
>, <Line: +  private static final List<String> INTERNAL_FUNCTIONS = ImmutableList.of(
>, <Line: +    PHPKeyword.ECHO.getValue(),
>, <Line: +    PHPKeyword.ISSET.getValue(),
>, <Line: +    PHPKeyword.EMPTY.getValue(),
>, <Line: +    PHPKeyword.INCLUDE_ONCE.getValue(),
>, <Line: +    PHPKeyword.INCLUDE.getValue(),
>, <Line: +    PHPKeyword.EVAL.getValue(),
>, <Line: +    PHPKeyword.REQUIRE.getValue(),
>, <Line: +    PHPKeyword.REQUIRE_ONCE.getValue(),
>, <Line: +    PHPKeyword.CLONE.getValue(),
>, <Line: +    PHPKeyword.PRINT.getValue(),
>, <Line: +    PHPKeyword.HALT_COMPILER.getValue()
>, <Line: +  );
>, <Line: +  public boolean isInternalFunction(ExpressionTree callee) {
>, <Line: +    String calleeString = CheckUtils.asString(callee);
>, <Line: +    return INTERNAL_FUNCTIONS.contains(calleeString);
>, <Line: +  public void visitScript(ScriptTree tree) {
>, <Line: +    for (FormattingCheck subCheck : SUB_CHECKS) {
>, <Line: +      subCheck.checkFormat(this, tree);
>, <Line: +    }
>, <Line: +  public void reportIssue(String msg, Tree tree) {
>, <Line: +    context().newIssue(KEY, msg).tree(tree);
>]
[<Line: -import com.sonar.sslr.api.AstNode;
>, <Line: -import org.sonar.php.api.PHPPunctuator;
>, <Line: -import org.sonar.php.parser.PHPGrammar;
>, <Line: -import org.sonar.squidbridge.checks.SquidCheck;
>, <Line: -import org.sonar.sslr.grammar.GrammarRuleKey;
>, <Line: -import org.sonar.sslr.parser.LexerlessGrammar;
>, <Line: -import javax.annotation.Nullable;
>, <Line: -import java.util.Arrays;
>, <Line: -  key = "S1808",
>, <Line: -public class FormattingStandardCheck extends SquidCheck<LexerlessGrammar> {
>, <Line: -  private static final GrammarRuleKey[] CLASS_AND_FUNCTION = {
>, <Line: -    PHPGrammar.CLASS_DECLARATION,
>, <Line: -    PHPGrammar.INTERFACE_DECLARATION,
>, <Line: -    PHPGrammar.TRAIT_ADAPTATIONS,
>, <Line: -    PHPGrammar.METHOD_DECLARATION,
>, <Line: -    PHPGrammar.FUNCTION_DECLARATION
>, <Line: -  };
>, <Line: -  private static final GrammarRuleKey[] CONTROL_STRUCTURE = {
>, <Line: -    PHPGrammar.IF_STATEMENT,
>, <Line: -    PHPGrammar.ELSEIF_CLAUSE,
>, <Line: -    PHPGrammar.ELSE_CLAUSE,
>, <Line: -    PHPGrammar.DO_WHILE_STATEMENT,
>, <Line: -    PHPGrammar.WHILE_STATEMENT,
>, <Line: -    PHPGrammar.FOR_STATEMENT,
>, <Line: -    PHPGrammar.FOREACH_STATEMENT,
>, <Line: -    PHPGrammar.SWITCH_STATEMENT,
>, <Line: -    PHPGrammar.TRY_STATEMENT,
>, <Line: -    PHPGrammar.CATCH_STATEMENT,
>, <Line: -    PHPGrammar.FINALLY_STATEMENT
>, <Line: -  private final NamespaceAndUseStatementCheck namespaceAndUseStatementCheck = new NamespaceAndUseStatementCheck();
>, <Line: -  private final CurlyBraceCheck curlyBraceCheck = new CurlyBraceCheck();
>, <Line: -  private final PunctuatorSpacingCheck punctuatorSpacingCheck = new PunctuatorSpacingCheck();
>, <Line: -  private final FunctionSpacingCheck functionSpacingCheck = new FunctionSpacingCheck();
>, <Line: -  private final ControlStructureSpacingCheck controlStructureSpacingCheck = new ControlStructureSpacingCheck();
>, <Line: -  private final IndentationCheck indentationCheck = new IndentationCheck();
>, <Line: -  private final ExtendsImplementsLineCheck extendsImplementsLineCheck = new ExtendsImplementsLineCheck();
>, <Line: -  @Override
>, <Line: -  public void init() {
>, <Line: -    subscribeTo(
>, <Line: -      PHPGrammar.NAMESPACE_STATEMENT,
>, <Line: -      PHPGrammar.PARAMETER_LIST,
>, <Line: -      PHPGrammar.FUNCTION_CALL_PARAMETER_LIST,
>, <Line: -      PHPGrammar.FUNCTION_EXPRESSION,
>, <Line: -      PHPGrammar.USE_STATEMENT);
>, <Line: -    subscribeTo(CLASS_AND_FUNCTION);
>, <Line: -    subscribeTo(CONTROL_STRUCTURE);
>, <Line: -    subscribeTo(PHPPunctuator.RPARENTHESIS);
>, <Line: -  public void visitNode(AstNode astNode) {
>, <Line: -    namespaceAndUseStatementCheck.visitNode(this, astNode);
>, <Line: -    curlyBraceCheck.visitNode(this, astNode);
>, <Line: -    punctuatorSpacingCheck.visitNode(this, astNode);
>, <Line: -    functionSpacingCheck.visitNode(this, astNode);
>, <Line: -    controlStructureSpacingCheck.visitNode(this, astNode);
>, <Line: -    indentationCheck.visitNode(this, astNode);
>, <Line: -    extendsImplementsLineCheck.visitNode(this, astNode);
>, <Line: -  @Override
>, <Line: -  public void leaveFile(@Nullable AstNode astNode) {
>, <Line: -    namespaceAndUseStatementCheck.leaveFile();
>, <Line: -  public void reportIssue(String msg, AstNode node) {
>, <Line: -    getContext().createLineViolation(this, msg, node);
>, <Line: -  }
>, <Line: -  public static GrammarRuleKey[] getClassAndFunctionNodes() {
>, <Line: -    return Arrays.copyOf(CLASS_AND_FUNCTION, CLASS_AND_FUNCTION.length);
>, <Line: -  }
>, <Line: -  public static GrammarRuleKey[] getControlStructureNodes() {
>, <Line: -    return Arrays.copyOf(CONTROL_STRUCTURE, CONTROL_STRUCTURE.length);
>, <Line: -  }
>]