diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/logs/HEAD b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/logs/HEAD
index 622d7fc9..a8dcf472 100644
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/logs/HEAD
+++ b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/logs/HEAD
@@ -1 +1 @@
-0000000000000000000000000000000000000000 0652b0ae78f34665887b449b3cbfa3db020f976d Saahil Hiranandani <suc2@illinois.edu> 1709590422 -0600	clone: from https://github.com/apache/shardingsphere.git
+0000000000000000000000000000000000000000 0652b0ae78f34665887b449b3cbfa3db020f976d Saahil Hiranandani <suc2@illinois.edu> 1709590500 -0600	clone: from https://github.com/apache/shardingsphere.git
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/logs/refs/heads/master b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/logs/refs/heads/master
index 622d7fc9..a8dcf472 100644
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/logs/refs/heads/master
+++ b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/logs/refs/heads/master
@@ -1 +1 @@
-0000000000000000000000000000000000000000 0652b0ae78f34665887b449b3cbfa3db020f976d Saahil Hiranandani <suc2@illinois.edu> 1709590422 -0600	clone: from https://github.com/apache/shardingsphere.git
+0000000000000000000000000000000000000000 0652b0ae78f34665887b449b3cbfa3db020f976d Saahil Hiranandani <suc2@illinois.edu> 1709590500 -0600	clone: from https://github.com/apache/shardingsphere.git
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/logs/refs/remotes/origin/HEAD b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/logs/refs/remotes/origin/HEAD
index 622d7fc9..a8dcf472 100644
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/logs/refs/remotes/origin/HEAD
+++ b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/logs/refs/remotes/origin/HEAD
@@ -1 +1 @@
-0000000000000000000000000000000000000000 0652b0ae78f34665887b449b3cbfa3db020f976d Saahil Hiranandani <suc2@illinois.edu> 1709590422 -0600	clone: from https://github.com/apache/shardingsphere.git
+0000000000000000000000000000000000000000 0652b0ae78f34665887b449b3cbfa3db020f976d Saahil Hiranandani <suc2@illinois.edu> 1709590500 -0600	clone: from https://github.com/apache/shardingsphere.git
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.idx b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.idx
similarity index 88%
rename from C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.idx
rename to C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.idx
index 842e8125..3bbc9c9c 100644
Binary files a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.idx and b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.idx differ
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.pack b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.pack
similarity index 99%
rename from C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.pack
rename to C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.pack
index 4b7f6398..6d188de1 100644
Binary files a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.pack and b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.pack differ
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.rev b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.rev
similarity index 98%
rename from C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.rev
rename to C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.rev
index 347a4f42..ca7028fe 100644
Binary files a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/.git/objects/pack/pack-22c8b31dd8799ac095e1f76d14b347b7494c9293.rev and b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Patched-Version/.git/objects/pack/pack-d254e85855cd412af77d9690e94f71ebb5a96a3f.rev differ
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/agent/plugins/metrics/type/prometheus/src/test/java/org/apache/shardingsphere/agent/plugin/metrics/prometheus/exoprter/PrometheusMetricsExporterTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/agent/plugins/metrics/type/prometheus/src/test/java/org/apache/shardingsphere/agent/plugin/metrics/prometheus/exoprter/PrometheusMetricsExporterTest.java
deleted file mode 100644
index 0e2c4d30..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/agent/plugins/metrics/type/prometheus/src/test/java/org/apache/shardingsphere/agent/plugin/metrics/prometheus/exoprter/PrometheusMetricsExporterTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.agent.plugin.metrics.prometheus.exoprter;
-
-import org.apache.shardingsphere.agent.plugin.metrics.core.collector.type.GaugeMetricFamilyMetricsCollector;
-import org.apache.shardingsphere.agent.plugin.metrics.core.exporter.MetricsExporter;
-import org.junit.jupiter.api.Test;
-
-import java.util.Optional;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-class PrometheusMetricsExporterTest {
-    
-    @Test
-    void assertCollectWithAbsentMetricsExporter() {
-        MetricsExporter exporter = mock(MetricsExporter.class);
-        when(exporter.export("Prometheus")).thenReturn(Optional.empty());
-        assertTrue(new PrometheusMetricsExporter(exporter).collect().isEmpty());
-    }
-    
-    @Test
-    void assertCollectWithPresentMetricsExporter() {
-        MetricsExporter exporter = mock(MetricsExporter.class);
-        when(exporter.export("Prometheus")).thenReturn(Optional.of(mock(GaugeMetricFamilyMetricsCollector.class)));
-        assertThat(new PrometheusMetricsExporter(exporter).collect().size(), is(1));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/agent/plugins/tracing/type/opentelemetry/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentelemetry/constant/OpenTelemetryConstants.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/agent/plugins/tracing/type/opentelemetry/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentelemetry/constant/OpenTelemetryConstants.java
deleted file mode 100644
index 4150b32c..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/agent/plugins/tracing/type/opentelemetry/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/opentelemetry/constant/OpenTelemetryConstants.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.agent.plugin.tracing.opentelemetry.constant;
-
-import lombok.AccessLevel;
-import lombok.NoArgsConstructor;
-
-/**
- * OpenTelemetry constants.
- */
-@NoArgsConstructor(access = AccessLevel.PRIVATE)
-public final class OpenTelemetryConstants {
-    
-    public static final String TRACER_NAME = "shardingsphere-agent";
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLLongLongBinlogProtocolValue.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLLongLongBinlogProtocolValue.java
deleted file mode 100644
index 8422a1ae..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/main/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLLongLongBinlogProtocolValue.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;
-
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.MySQLBinlogProtocolValue;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-
-import java.io.Serializable;
-
-/**
- * LONGLONG type value of MySQL binlog protocol.
- */
-public final class MySQLLongLongBinlogProtocolValue implements MySQLBinlogProtocolValue {
-    
-    @Override
-    public Serializable read(final MySQLBinlogColumnDef columnDef, final MySQLPacketPayload payload) {
-        return payload.readInt8();
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/decimal/MySQLFloatBinlogProtocolValueTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/decimal/MySQLFloatBinlogProtocolValueTest.java
deleted file mode 100644
index 55a2c165..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/decimal/MySQLFloatBinlogProtocolValueTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.decimal;
-
-import io.netty.buffer.ByteBuf;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLFloatBinlogProtocolValueTest {
-    
-    @Mock
-    private MySQLPacketPayload payload;
-    
-    @Mock
-    private ByteBuf byteBuf;
-    
-    @Mock
-    private MySQLBinlogColumnDef columnDef;
-    
-    @Test
-    void assertRead() {
-        when(payload.getByteBuf()).thenReturn(byteBuf);
-        when(byteBuf.readFloatLE()).thenReturn(1.1F);
-        MySQLFloatBinlogProtocolValue actual = new MySQLFloatBinlogProtocolValue();
-        assertThat(actual.read(columnDef, payload), is(1.1F));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLInt24BinlogProtocolValueTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLInt24BinlogProtocolValueTest.java
deleted file mode 100644
index a661c7ff..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLInt24BinlogProtocolValueTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;
-
-import io.netty.buffer.ByteBuf;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLInt24BinlogProtocolValueTest {
-    
-    @Mock
-    private MySQLPacketPayload payload;
-    
-    @Mock
-    private ByteBuf byteBuf;
-    
-    @Mock
-    private MySQLBinlogColumnDef columnDef;
-    
-    @Test
-    void assertRead() {
-        when(payload.getByteBuf()).thenReturn(byteBuf);
-        when(byteBuf.readMediumLE()).thenReturn(1);
-        MySQLInt24BinlogProtocolValue actual = new MySQLInt24BinlogProtocolValue();
-        assertThat(actual.read(columnDef, payload), is(1));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLLongBinlogProtocolValueTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLLongBinlogProtocolValueTest.java
deleted file mode 100644
index 65931f51..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLLongBinlogProtocolValueTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;
-
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLLongBinlogProtocolValueTest {
-    
-    @Mock
-    private MySQLPacketPayload payload;
-    
-    @Mock
-    private MySQLBinlogColumnDef columnDef;
-    
-    @Test
-    void assertRead() {
-        when(payload.readInt4()).thenReturn(1);
-        MySQLLongBinlogProtocolValue actual = new MySQLLongBinlogProtocolValue();
-        assertThat(actual.read(columnDef, payload), is(1));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLShortBinlogProtocolValueTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLShortBinlogProtocolValueTest.java
deleted file mode 100644
index 750bb810..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLShortBinlogProtocolValueTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;
-
-import io.netty.buffer.ByteBuf;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLShortBinlogProtocolValueTest {
-    
-    @Mock
-    private MySQLPacketPayload payload;
-    
-    @Mock
-    private ByteBuf byteBuf;
-    
-    @Mock
-    private MySQLBinlogColumnDef columnDef;
-    
-    @Test
-    void assertRead() {
-        when(payload.getByteBuf()).thenReturn(byteBuf);
-        when(byteBuf.readShortLE()).thenReturn((short) 1);
-        MySQLShortBinlogProtocolValue actual = new MySQLShortBinlogProtocolValue();
-        assertThat(actual.read(columnDef, payload), is((short) 1));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLTinyBinlogProtocolValueTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLTinyBinlogProtocolValueTest.java
deleted file mode 100644
index 9a091aaf..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/integer/MySQLTinyBinlogProtocolValueTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.integer;
-
-import io.netty.buffer.ByteBuf;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLTinyBinlogProtocolValueTest {
-    
-    @Mock
-    private MySQLPacketPayload payload;
-    
-    @Mock
-    private ByteBuf byteBuf;
-    
-    @Mock
-    private MySQLBinlogColumnDef columnDef;
-    
-    @Test
-    void assertRead() {
-        when(payload.getByteBuf()).thenReturn(byteBuf);
-        when(byteBuf.readByte()).thenReturn((byte) 1);
-        MySQLTinyBinlogProtocolValue actual = new MySQLTinyBinlogProtocolValue();
-        assertThat(actual.read(columnDef, payload), is((byte) 1));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/string/MySQLStringBinlogProtocolValueTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/string/MySQLStringBinlogProtocolValueTest.java
deleted file mode 100644
index 7f2683c7..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/string/MySQLStringBinlogProtocolValueTest.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.string;
-
-import io.netty.buffer.ByteBuf;
-import org.apache.shardingsphere.db.protocol.mysql.constant.MySQLBinaryColumnType;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-import org.apache.shardingsphere.infra.exception.core.external.sql.type.generic.UnsupportedSQLOperationException;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.io.Serializable;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertInstanceOf;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLStringBinlogProtocolValueTest {
-    
-    @Mock
-    private MySQLPacketPayload payload;
-    
-    @Mock
-    private ByteBuf byteBuf;
-    
-    private MySQLBinlogColumnDef columnDef;
-    
-    @BeforeEach
-    void setUp() {
-        columnDef = new MySQLBinlogColumnDef(MySQLBinaryColumnType.STRING);
-    }
-    
-    @Test
-    void assertReadEnumValueWithMeta1() {
-        columnDef.setColumnMeta((MySQLBinaryColumnType.ENUM.getValue() << 8) + 1);
-        when(payload.readInt1()).thenReturn(1);
-        assertThat(new MySQLStringBinlogProtocolValue().read(columnDef, payload), is(1));
-    }
-    
-    @Test
-    void assertReadEnumValueWithMeta2() {
-        columnDef.setColumnMeta((MySQLBinaryColumnType.ENUM.getValue() << 8) + 2);
-        when(payload.readInt2()).thenReturn(32767);
-        assertThat(new MySQLStringBinlogProtocolValue().read(columnDef, payload), is(32767));
-    }
-    
-    @Test
-    void assertReadEnumValueWithMetaFailure() {
-        columnDef.setColumnMeta((MySQLBinaryColumnType.ENUM.getValue() << 8) + 3);
-        assertThrows(UnsupportedSQLOperationException.class, () -> new MySQLStringBinlogProtocolValue().read(columnDef, payload));
-    }
-    
-    @Test
-    void assertReadSetValue() {
-        columnDef.setColumnMeta(MySQLBinaryColumnType.SET.getValue() << 8);
-        when(payload.getByteBuf()).thenReturn(byteBuf);
-        when(byteBuf.readByte()).thenReturn((byte) 0xff);
-        assertThat(new MySQLStringBinlogProtocolValue().read(columnDef, payload), is((byte) 0xff));
-    }
-    
-    @Test
-    void assertReadStringValue() {
-        String expected = "test_value";
-        columnDef.setColumnMeta(MySQLBinaryColumnType.STRING.getValue() << 8);
-        when(payload.getByteBuf()).thenReturn(byteBuf);
-        when(byteBuf.readUnsignedByte()).thenReturn((short) expected.length());
-        when(payload.readStringFixByBytes(expected.length())).thenReturn(expected.getBytes());
-        Serializable actual = new MySQLStringBinlogProtocolValue().read(columnDef, payload);
-        assertInstanceOf(MySQLBinaryString.class, actual);
-        assertThat(((MySQLBinaryString) actual).getBytes(), is(expected.getBytes()));
-    }
-    
-    @Test
-    void assertReadLongStringValue() {
-        String expected = "test_value";
-        columnDef.setColumnMeta((MySQLBinaryColumnType.STRING.getValue() ^ ((256 & 0x300) >> 4)) << 8);
-        when(payload.getByteBuf()).thenReturn(byteBuf);
-        when(byteBuf.readUnsignedShortLE()).thenReturn(expected.length());
-        when(payload.readStringFixByBytes(expected.length())).thenReturn(expected.getBytes());
-        Serializable actual = new MySQLStringBinlogProtocolValue().read(columnDef, payload);
-        assertInstanceOf(MySQLBinaryString.class, actual);
-        assertThat(((MySQLBinaryString) actual).getBytes(), is(expected.getBytes()));
-    }
-    
-    @Test
-    void assertReadValueWithUnknownType() {
-        columnDef.setColumnMeta(MySQLBinaryColumnType.VAR_STRING.getValue() << 8);
-        assertThrows(UnsupportedSQLOperationException.class, () -> new MySQLStringBinlogProtocolValue().read(columnDef, payload));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/time/MySQLDatetimeBinlogProtocolValueTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/time/MySQLDatetimeBinlogProtocolValueTest.java
deleted file mode 100644
index 1051e9cd..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/mysql/src/test/java/org/apache/shardingsphere/db/protocol/mysql/packet/binlog/row/column/value/time/MySQLDatetimeBinlogProtocolValueTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.time;
-
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.payload.MySQLPacketPayload;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.sql.Timestamp;
-import java.time.LocalDateTime;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLDatetimeBinlogProtocolValueTest {
-    
-    @Mock
-    private MySQLPacketPayload payload;
-    
-    @Mock
-    private MySQLBinlogColumnDef columnDef;
-    
-    @Test
-    void assertRead() {
-        when(payload.readInt8()).thenReturn(99991231235959L);
-        LocalDateTime expected = LocalDateTime.of(9999, 12, 31, 23, 59, 59);
-        assertThat(new MySQLDatetimeBinlogProtocolValue().read(columnDef, payload), is(Timestamp.valueOf(expected)));
-    }
-    
-    @Test
-    void assertReadNullTime() {
-        when(payload.readInt8()).thenReturn(0L);
-        assertThat(new MySQLDatetimeBinlogProtocolValue().read(columnDef, payload), is(MySQLTimeValueUtils.DATETIME_OF_ZERO));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/extended/bind/PostgreSQLComBindPacketTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/extended/bind/PostgreSQLComBindPacketTest.java
deleted file mode 100644
index d7a0563d..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/extended/bind/PostgreSQLComBindPacketTest.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.postgresql.packet.command.query.extended.bind;
-
-import io.netty.buffer.Unpooled;
-import org.apache.shardingsphere.db.protocol.postgresql.packet.command.query.extended.PostgreSQLColumnType;
-import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;
-import org.junit.jupiter.api.Test;
-
-import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
-class PostgreSQLComBindPacketTest {
-    
-    private static final byte[] BIND_MESSAGE_BYTES = {
-            0x00, 0x00, 0x00, 0x19, 0x00, 0x53, 0x5f,
-            0x31, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
-            0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a,
-            0x00, 0x00
-    };
-    
-    @Test
-    void assertConstructPostgreSQLComBindPacket() {
-        PostgreSQLComBindPacket actual = new PostgreSQLComBindPacket(new PostgreSQLPacketPayload(Unpooled.wrappedBuffer(BIND_MESSAGE_BYTES), StandardCharsets.UTF_8));
-        assertThat(actual.getPortal(), is(""));
-        assertThat(actual.getStatementId(), is("S_1"));
-        assertThat(actual.readParameters(Collections.singletonList(PostgreSQLColumnType.INT4)), is(Collections.singletonList(10)));
-        assertTrue(actual.readResultFormats().isEmpty());
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/extended/sync/PostgreSQLComSyncPacketTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/extended/sync/PostgreSQLComSyncPacketTest.java
deleted file mode 100644
index d5af2ba4..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/db-protocol/postgresql/src/test/java/org/apache/shardingsphere/db/protocol/postgresql/packet/command/query/extended/sync/PostgreSQLComSyncPacketTest.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.db.protocol.postgresql.packet.command.query.extended.sync;
-
-import org.apache.shardingsphere.db.protocol.postgresql.packet.command.PostgreSQLCommandPacketType;
-import org.apache.shardingsphere.db.protocol.postgresql.payload.PostgreSQLPacketPayload;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.verify;
-
-@ExtendWith(MockitoExtension.class)
-class PostgreSQLComSyncPacketTest {
-    
-    @Mock
-    private PostgreSQLPacketPayload payload;
-    
-    @Test
-    void assertNewInstance() {
-        PostgreSQLComSyncPacket actual = new PostgreSQLComSyncPacket(payload);
-        actual.write(payload);
-        verify(payload).readInt4();
-        assertThat(actual.getIdentifier(), is(PostgreSQLCommandPacketType.SYNC_COMMAND));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/feature/type/ShadowExampleScenario.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/feature/type/ShadowExampleScenario.java
deleted file mode 100644
index c2e4052d..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/feature/type/ShadowExampleScenario.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.example.generator.scenario.feature.type;
-
-import org.apache.shardingsphere.example.generator.scenario.feature.FeatureExampleScenario;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Map;
-
-/**
- * Shadow example scenario.
- */
-public final class ShadowExampleScenario implements FeatureExampleScenario {
-    
-    @Override
-    public Map<String, String> getJavaClassTemplateMap() {
-        return Collections.emptyMap();
-    }
-    
-    @Override
-    public Map<String, String> getResourceTemplateMap() {
-        return Collections.emptyMap();
-    }
-    
-    @Override
-    public Collection<String> getJavaClassPaths() {
-        return Collections.emptySet();
-    }
-    
-    @Override
-    public Collection<String> getResourcePaths() {
-        return Collections.emptySet();
-    }
-    
-    @Override
-    public String getType() {
-        return "shadow";
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/framework/FrameworkExampleScenario.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/framework/FrameworkExampleScenario.java
deleted file mode 100644
index b6d855fd..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/framework/FrameworkExampleScenario.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.example.generator.scenario.framework;
-
-import org.apache.shardingsphere.example.generator.scenario.ExampleScenario;
-
-/**
- * Framework example scenario.
- */
-public interface FrameworkExampleScenario extends ExampleScenario {
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/framework/type/JDBCExampleScenario.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/framework/type/JDBCExampleScenario.java
deleted file mode 100644
index 08012dea..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-jdbc-example-generator/src/main/java/org/apache/shardingsphere/example/generator/scenario/framework/type/JDBCExampleScenario.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.example.generator.scenario.framework.type;
-
-import org.apache.shardingsphere.example.generator.scenario.framework.FrameworkExampleScenario;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-
-/**
- * JDBC example scenario.
- */
-public final class JDBCExampleScenario implements FrameworkExampleScenario {
-    
-    @Override
-    public Map<String, String> getJavaClassTemplateMap() {
-        Map<String, String> result = new HashMap<>(5, 1);
-        result.put("java/main/JDBCExampleMain.ftl", "ExampleMain.java");
-        result.put("java/config/Configuration.ftl", "config/Configuration.java");
-        result.put("java/repository/jdbc/OrderItemRepository.ftl", "repository/OrderItemRepository.java");
-        result.put("java/repository/jdbc/OrderRepository.ftl", "repository/OrderRepository.java");
-        result.put("java/repository/jdbc/AddressRepository.ftl", "repository/AddressRepository.java");
-        return result;
-    }
-    
-    @Override
-    public Map<String, String> getResourceTemplateMap() {
-        return Collections.emptyMap();
-    }
-    
-    @Override
-    public Collection<String> getJavaClassPaths() {
-        Collection<String> result = new HashSet<>(2, 1F);
-        result.add("config");
-        result.add("repository");
-        return result;
-    }
-    
-    @Override
-    public Collection<String> getResourcePaths() {
-        return Collections.emptySet();
-    }
-    
-    @Override
-    public String getType() {
-        return "jdbc";
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-parser-example/src/main/java/org/apache/shardingsphere/example/parser/postgresql/statement/PostgreSQLParserStatementExample.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-parser-example/src/main/java/org/apache/shardingsphere/example/parser/postgresql/statement/PostgreSQLParserStatementExample.java
deleted file mode 100644
index bffd2527..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/examples/shardingsphere-parser-example/src/main/java/org/apache/shardingsphere/example/parser/postgresql/statement/PostgreSQLParserStatementExample.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.example.parser.postgresql.statement;
-
-import org.apache.shardingsphere.sql.parser.api.CacheOption;
-import org.apache.shardingsphere.sql.parser.api.SQLParserEngine;
-import org.apache.shardingsphere.sql.parser.api.SQLStatementVisitorEngine;
-import org.apache.shardingsphere.sql.parser.core.ParseASTNode;
-import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
-
-import java.util.Arrays;
-import java.util.List;
-
-public final class PostgreSQLParserStatementExample {
-    
-    private static final String DML_SELECT_SQL = "SELECT t.id, t.name, t.age FROM table1 AS t ORDER BY t.id DESC;";
-    
-    private static final String DML_INSERT_SQL = "INSERT INTO table1 (name, age) VALUES ('z', 18);";
-    
-    private static final String DML_UPDATE_SQL = "UPDATE table1 SET name = 'j' WHERE id = 1;";
-    
-    private static final String DML_DELETE_SQL = "DELETE FROM table1 AS t1 WHERE id = 1;";
-    
-    private static final String DDL_CREATE_SQL = "CREATE TABLE table2 (id BIGINT(20) PRIMARY KEY, name VARCHAR(20), age INT(2))";
-    
-    private static final String DDL_DROP_SQL = "DROP TABLE table1, table2;";
-    
-    private static final String DDL_ALTER_SQL = "ALTER TABLE table1 DROP age;";
-
-    private static final List<String> POSTGRESQL_PARSER_STATEMENT_LIST;
-    
-    static {
-        POSTGRESQL_PARSER_STATEMENT_LIST = Arrays.asList(DML_SELECT_SQL, DML_INSERT_SQL, DML_UPDATE_SQL, DML_DELETE_SQL, DDL_CREATE_SQL, DDL_DROP_SQL, DDL_ALTER_SQL);
-    }
-    
-    // CHECKSTYLE:OFF
-    public static void main(final String[] args) {
-        // CHECKSTYLE:ON
-        POSTGRESQL_PARSER_STATEMENT_LIST.forEach(sql -> {
-            CacheOption cacheOption = new CacheOption(128, 1024L);
-            SQLParserEngine parserEngine = new SQLParserEngine("PostgreSQL", cacheOption);
-            ParseASTNode parseASTNode = parserEngine.parse(sql, false);
-            SQLStatementVisitorEngine visitorEngine = new SQLStatementVisitorEngine("PostgreSQL");
-            SQLStatement sqlStatement = visitorEngine.visit(parseASTNode);
-            System.out.println(sqlStatement.toString());
-        });
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/broadcast/distsql/handler/src/main/java/org/apache/shardingsphere/broadcast/distsql/handler/update/StorageUnitBroadcastDefinitionProcessor.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/broadcast/distsql/handler/src/main/java/org/apache/shardingsphere/broadcast/distsql/handler/update/StorageUnitBroadcastDefinitionProcessor.java
deleted file mode 100644
index 9a27c2ff..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/broadcast/distsql/handler/src/main/java/org/apache/shardingsphere/broadcast/distsql/handler/update/StorageUnitBroadcastDefinitionProcessor.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.broadcast.distsql.handler.update;
-
-import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
-import org.apache.shardingsphere.distsql.handler.engine.update.rdl.resource.StorageUnitDefinitionProcessor;
-import org.apache.shardingsphere.distsql.statement.rdl.resource.unit.type.UnregisterStorageUnitStatement;
-
-/**
- * Storage unit definition processor for broadcast rule.
- */
-public final class StorageUnitBroadcastDefinitionProcessor implements StorageUnitDefinitionProcessor<BroadcastRule> {
-    
-    @Override
-    public boolean ignoreUsageCheckOnUnregister(final UnregisterStorageUnitStatement sqlStatement) {
-        return sqlStatement.isIgnoreBroadcastTables();
-    }
-    
-    @Override
-    public Class<BroadcastRule> getRuleClass() {
-        return BroadcastRule.class;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/broadcast/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.rql.rule.CountResultRowBuilder b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/broadcast/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.rql.rule.CountResultRowBuilder
deleted file mode 100644
index 4c69e312..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/broadcast/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.rql.rule.CountResultRowBuilder
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.broadcast.distsql.handler.query.BroadcastCountResultRowBuilder
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/mask/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.ral.plugin.PluginTypeAndClassMapper b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/mask/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.ral.plugin.PluginTypeAndClassMapper
deleted file mode 100644
index 64486f25..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/mask/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.ral.plugin.PluginTypeAndClassMapper
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.mask.distsql.handler.query.MaskAlgorithmTypeAndClassMapper
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/checker/ReadwriteSplittingRuleConfigurationCheckerTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/checker/ReadwriteSplittingRuleConfigurationCheckerTest.java
deleted file mode 100644
index 6ecf3bf9..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/checker/ReadwriteSplittingRuleConfigurationCheckerTest.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.readwritesplitting.checker;
-
-import org.apache.shardingsphere.infra.algorithm.core.config.AlgorithmConfiguration;
-import org.apache.shardingsphere.infra.config.rule.checker.RuleConfigurationChecker;
-import org.apache.shardingsphere.infra.rule.identifier.type.datasource.DataSourceMapperContainedRule;
-import org.apache.shardingsphere.infra.spi.type.ordered.OrderedSPILoader;
-import org.apache.shardingsphere.readwritesplitting.api.ReadwriteSplittingRuleConfiguration;
-import org.apache.shardingsphere.readwritesplitting.api.rule.ReadwriteSplittingDataSourceRuleConfiguration;
-import org.apache.shardingsphere.readwritesplitting.exception.checker.DataSourceNameNotExistedException;
-import org.apache.shardingsphere.readwritesplitting.exception.checker.DuplicateDataSourceException;
-import org.apache.shardingsphere.readwritesplitting.exception.checker.InvalidWeightLoadBalancerConfigurationException;
-import org.apache.shardingsphere.readwritesplitting.exception.checker.MissingRequiredWriteDataSourceNameException;
-import org.apache.shardingsphere.test.fixture.jdbc.MockedDataSource;
-import org.apache.shardingsphere.test.util.PropertiesBuilder;
-import org.apache.shardingsphere.test.util.PropertiesBuilder.Property;
-import org.junit.jupiter.api.Test;
-
-import javax.sql.DataSource;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-class ReadwriteSplittingRuleConfigurationCheckerTest {
-    
-    @SuppressWarnings({"rawtypes", "unchecked"})
-    @Test
-    void assertInvalidCheck() {
-        ReadwriteSplittingRuleConfiguration config = createInvalidConfiguration();
-        RuleConfigurationChecker checker = OrderedSPILoader.getServicesByClass(RuleConfigurationChecker.class, Collections.singleton(config.getClass())).get(config.getClass());
-        assertThrows(MissingRequiredWriteDataSourceNameException.class, () -> checker.check("test", config, Collections.emptyMap(), Collections.emptyList()));
-    }
-    
-    private ReadwriteSplittingRuleConfiguration createInvalidConfiguration() {
-        ReadwriteSplittingRuleConfiguration result = mock(ReadwriteSplittingRuleConfiguration.class);
-        ReadwriteSplittingDataSourceRuleConfiguration dataSourceConfig = mock(ReadwriteSplittingDataSourceRuleConfiguration.class);
-        when(dataSourceConfig.getName()).thenReturn("readwrite_ds");
-        when(result.getDataSources()).thenReturn(Collections.singleton(dataSourceConfig));
-        return result;
-    }
-    
-    @SuppressWarnings({"rawtypes", "unchecked"})
-    @Test
-    void assertCheckWhenConfigInvalidWriteDataSource() {
-        ReadwriteSplittingRuleConfiguration config = mock(ReadwriteSplittingRuleConfiguration.class);
-        List<ReadwriteSplittingDataSourceRuleConfiguration> configs = Arrays.asList(createDataSourceRuleConfig(
-                "write_ds_0", Arrays.asList("read_ds_0", "read_ds_1")), createDataSourceRuleConfig("write_ds_2", Arrays.asList("read_ds_0", "read_ds_1")));
-        when(config.getDataSources()).thenReturn(configs);
-        RuleConfigurationChecker checker = OrderedSPILoader.getServicesByClass(RuleConfigurationChecker.class, Collections.singleton(config.getClass())).get(config.getClass());
-        assertThrows(DataSourceNameNotExistedException.class, () -> checker.check("test", config, mockDataSources(), Collections.emptyList()));
-    }
-    
-    @SuppressWarnings({"rawtypes", "unchecked"})
-    @Test
-    void assertCheckWhenConfigInvalidReadDataSource() {
-        ReadwriteSplittingRuleConfiguration config = mock(ReadwriteSplittingRuleConfiguration.class);
-        List<ReadwriteSplittingDataSourceRuleConfiguration> configs = Arrays.asList(createDataSourceRuleConfig(
-                "write_ds_0", Arrays.asList("read_ds_0", "read_ds_0")), createDataSourceRuleConfig("write_ds_1", Arrays.asList("read_ds_0", "read_ds_0")));
-        when(config.getDataSources()).thenReturn(configs);
-        RuleConfigurationChecker checker = OrderedSPILoader.getServicesByClass(RuleConfigurationChecker.class, Collections.singleton(config.getClass())).get(config.getClass());
-        assertThrows(DuplicateDataSourceException.class, () -> checker.check("test", config, mockDataSources(), Collections.emptyList()));
-    }
-    
-    @SuppressWarnings({"rawtypes", "unchecked"})
-    @Test
-    void assertCheckWeightLoadBalanceInvalidDataSourceName() {
-        ReadwriteSplittingRuleConfiguration config = mock(ReadwriteSplittingRuleConfiguration.class);
-        Collection<ReadwriteSplittingDataSourceRuleConfiguration> configs = Collections.singleton(createDataSourceRuleConfig("write_ds_0", Arrays.asList("read_ds_0", "read_ds_1")));
-        when(config.getDataSources()).thenReturn(configs);
-        AlgorithmConfiguration algorithm = new AlgorithmConfiguration("WEIGHT", PropertiesBuilder.build(new Property("read_ds_2", "1"), new Property("read_ds_1", "2")));
-        when(config.getLoadBalancers()).thenReturn(Collections.singletonMap("weight_ds", algorithm));
-        RuleConfigurationChecker checker = OrderedSPILoader.getServicesByClass(RuleConfigurationChecker.class, Collections.singleton(config.getClass())).get(config.getClass());
-        assertThrows(InvalidWeightLoadBalancerConfigurationException.class, () -> checker.check("test", config, mockDataSources(), Collections.emptyList()));
-    }
-    
-    @SuppressWarnings({"rawtypes", "unchecked"})
-    @Test
-    void assertCheckWhenConfigOtherRulesDatasource() {
-        ReadwriteSplittingRuleConfiguration config = createContainsOtherRulesDatasourceConfig();
-        RuleConfigurationChecker checker = OrderedSPILoader.getServicesByClass(RuleConfigurationChecker.class, Collections.singleton(config.getClass())).get(config.getClass());
-        DataSourceMapperContainedRule dataSourceMapperContainedRule = mock(DataSourceMapperContainedRule.class, RETURNS_DEEP_STUBS);
-        when(dataSourceMapperContainedRule.getDataSourceMapperRule().getDataSourceMapper().containsKey("otherDatasourceName")).thenReturn(true);
-        checker.check("test", config, mockDataSources(), Collections.singleton(dataSourceMapperContainedRule));
-    }
-    
-    private ReadwriteSplittingRuleConfiguration createContainsOtherRulesDatasourceConfig() {
-        ReadwriteSplittingRuleConfiguration result = mock(ReadwriteSplittingRuleConfiguration.class);
-        ReadwriteSplittingDataSourceRuleConfiguration dataSourceConfig = mock(ReadwriteSplittingDataSourceRuleConfiguration.class);
-        when(dataSourceConfig.getName()).thenReturn("readwrite_ds");
-        when(dataSourceConfig.getWriteDataSourceName()).thenReturn("otherDatasourceName");
-        when(dataSourceConfig.getReadDataSourceNames()).thenReturn(Arrays.asList("read_ds_0", "read_ds_1"));
-        when(result.getDataSources()).thenReturn(Collections.singleton(dataSourceConfig));
-        return result;
-    }
-    
-    private ReadwriteSplittingDataSourceRuleConfiguration createDataSourceRuleConfig(final String writeDataSource, final List<String> readDataSources) {
-        ReadwriteSplittingDataSourceRuleConfiguration result = mock(ReadwriteSplittingDataSourceRuleConfiguration.class);
-        when(result.getName()).thenReturn("readwrite_ds");
-        when(result.getWriteDataSourceName()).thenReturn(writeDataSource);
-        when(result.getReadDataSourceNames()).thenReturn(readDataSources);
-        when(result.getLoadBalancerName()).thenReturn("weight_ds");
-        return result;
-    }
-    
-    private Map<String, DataSource> mockDataSources() {
-        Map<String, DataSource> result = new LinkedHashMap<>(2, 1F);
-        result.put("read_ds_0", new MockedDataSource());
-        result.put("read_ds_1", new MockedDataSource());
-        result.put("write_ds_0", new MockedDataSource());
-        result.put("write_ds_1", new MockedDataSource());
-        return result;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/route/standard/filter/DisabledReadDataSourcesFilterTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/route/standard/filter/DisabledReadDataSourcesFilterTest.java
deleted file mode 100644
index 4acf5b3d..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/core/src/test/java/org/apache/shardingsphere/readwritesplitting/route/standard/filter/DisabledReadDataSourcesFilterTest.java
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.readwritesplitting.route.standard.filter;
-
-import org.apache.shardingsphere.infra.algorithm.load.balancer.random.RandomLoadBalanceAlgorithm;
-import org.apache.shardingsphere.readwritesplitting.api.rule.ReadwriteSplittingDataSourceRuleConfiguration;
-import org.apache.shardingsphere.readwritesplitting.api.transaction.TransactionalReadQueryStrategy;
-import org.apache.shardingsphere.readwritesplitting.rule.ReadwriteSplittingDataSourceRule;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-
-class DisabledReadDataSourcesFilterTest {
-    
-    private ReadwriteSplittingDataSourceRule rule;
-    
-    @BeforeEach
-    void setUp() {
-        rule = new ReadwriteSplittingDataSourceRule(
-                new ReadwriteSplittingDataSourceRuleConfiguration("test_pr", "write_ds", Arrays.asList("read_ds_0", "read_ds_1"), null),
-                TransactionalReadQueryStrategy.DYNAMIC, new RandomLoadBalanceAlgorithm());
-    }
-    
-    @Test
-    void assertGetReadDataSourceNamesWithoutDisabledDataSourceNames() {
-        assertThat(new DisabledReadDataSourcesFilter().filter(rule, Arrays.asList("read_ds_0", "read_ds_1")), is(Arrays.asList("read_ds_0", "read_ds_1")));
-    }
-    
-    @Test
-    void assertGetReadDataSourceNamesWithDisabledDataSourceNames() {
-        rule.disableDataSource("read_ds_0");
-        assertThat(new DisabledReadDataSourcesFilter().filter(rule, Arrays.asList("read_ds_0", "read_ds_1")), is(Collections.singletonList("read_ds_1")));
-    }
-    
-    @Test
-    void assertDisableDataSource() {
-        rule.disableDataSource("read_ds_0");
-        assertThat(new DisabledReadDataSourcesFilter().filter(rule, Arrays.asList("read_ds_0", "read_ds_1")), is(Collections.singletonList("read_ds_1")));
-    }
-    
-    @Test
-    void assertEnableDataSource() {
-        rule.disableDataSource("read_ds_0");
-        rule.enableDataSource("read_ds_0");
-        assertThat(new DisabledReadDataSourcesFilter().filter(rule, Arrays.asList("read_ds_0", "read_ds_1")), is(Arrays.asList("read_ds_0", "read_ds_1")));
-    }
-    
-    @Test
-    void assertGetEnabledReplicaDataSources() {
-        rule.disableDataSource("read_ds_0");
-        assertThat(new DisabledReadDataSourcesFilter().filter(rule, Arrays.asList("read_ds_0", "read_ds_1")), is(Collections.singletonList("read_ds_1")));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/distsql/parser/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.parser.engine.spi.DistSQLParserFacade b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/distsql/parser/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.parser.engine.spi.DistSQLParserFacade
deleted file mode 100644
index 64efe2e5..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/readwrite-splitting/distsql/parser/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.parser.engine.spi.DistSQLParserFacade
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.readwritesplitting.distsql.parser.facade.ReadwriteSplittingDistSQLParserFacade
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/cache/checker/algorithm/impl/BuiltInCacheableShardingAlgorithmClassProvider.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/cache/checker/algorithm/impl/BuiltInCacheableShardingAlgorithmClassProvider.java
deleted file mode 100644
index 0072a5f1..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/cache/checker/algorithm/impl/BuiltInCacheableShardingAlgorithmClassProvider.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.cache.checker.algorithm.impl;
-
-import org.apache.shardingsphere.sharding.algorithm.sharding.mod.HashModShardingAlgorithm;
-import org.apache.shardingsphere.sharding.algorithm.sharding.mod.ModShardingAlgorithm;
-import org.apache.shardingsphere.sharding.algorithm.sharding.range.BoundaryBasedRangeShardingAlgorithm;
-import org.apache.shardingsphere.sharding.algorithm.sharding.range.VolumeBasedRangeShardingAlgorithm;
-import org.apache.shardingsphere.sharding.cache.checker.algorithm.CacheableShardingAlgorithmClassProvider;
-import org.apache.shardingsphere.sharding.spi.ShardingAlgorithm;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-/**
- * Built-in cacheable sharding algorithm class provider.
- */
-public final class BuiltInCacheableShardingAlgorithmClassProvider implements CacheableShardingAlgorithmClassProvider {
-    
-    @Override
-    public Collection<Class<? extends ShardingAlgorithm>> getCacheableShardingAlgorithmClasses() {
-        return Arrays.asList(ModShardingAlgorithm.class, HashModShardingAlgorithm.class, VolumeBasedRangeShardingAlgorithm.class, BoundaryBasedRangeShardingAlgorithm.class);
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/exception/algorithm/sharding/MismatchedShardingDataSourceRouteInfoException.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/exception/algorithm/sharding/MismatchedShardingDataSourceRouteInfoException.java
deleted file mode 100644
index 7cf07ecc..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/exception/algorithm/sharding/MismatchedShardingDataSourceRouteInfoException.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.exception.algorithm.sharding;
-
-import org.apache.shardingsphere.infra.exception.core.external.sql.sqlstate.XOpenSQLState;
-import org.apache.shardingsphere.sharding.exception.ShardingSQLException;
-
-import java.util.Collection;
-
-/**
- * Mismatched sharding data source route info exception.
- */
-public final class MismatchedShardingDataSourceRouteInfoException extends ShardingSQLException {
-    
-    private static final long serialVersionUID = -345707079477626285L;
-    
-    public MismatchedShardingDataSourceRouteInfoException(final Collection<String> routeDataSourceNames, final Collection<String> actualDataSourceNames) {
-        super(XOpenSQLState.CHECK_OPTION_VIOLATION, 86, "Some routed data sources do not belong to configured data sources. routed data sources: `%s`, configured data sources: `%s`.",
-                routeDataSourceNames, actualDataSourceNames);
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueBetweenOperatorGenerator.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueBetweenOperatorGenerator.java
deleted file mode 100644
index cec2da69..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueBetweenOperatorGenerator.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.route.engine.condition.generator.impl;
-
-import com.google.common.collect.Range;
-import org.apache.shardingsphere.sharding.route.engine.condition.Column;
-import org.apache.shardingsphere.sharding.route.engine.condition.ExpressionConditionUtils;
-import org.apache.shardingsphere.sharding.route.engine.condition.generator.ConditionValue;
-import org.apache.shardingsphere.sharding.route.engine.condition.generator.ConditionValueGenerator;
-import org.apache.shardingsphere.sharding.route.engine.condition.value.RangeShardingConditionValue;
-import org.apache.shardingsphere.sharding.route.engine.condition.value.ShardingConditionValue;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.BetweenExpression;
-import org.apache.shardingsphere.sql.parser.sql.common.util.SafeNumberOperationUtils;
-import org.apache.shardingsphere.timeservice.core.rule.TimestampServiceRule;
-
-import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Optional;
-
-/**
- * Condition value generator for between operator.
- */
-public final class ConditionValueBetweenOperatorGenerator implements ConditionValueGenerator<BetweenExpression> {
-    
-    @Override
-    public Optional<ShardingConditionValue> generate(final BetweenExpression predicate, final Column column, final List<Object> params, final TimestampServiceRule timestampServiceRule) {
-        ConditionValue betweenConditionValue = new ConditionValue(predicate.getBetweenExpr(), params);
-        ConditionValue andConditionValue = new ConditionValue(predicate.getAndExpr(), params);
-        Optional<Comparable<?>> betweenValue = betweenConditionValue.getValue();
-        Optional<Comparable<?>> andValue = andConditionValue.getValue();
-        List<Integer> parameterMarkerIndexes = new ArrayList<>(2);
-        betweenConditionValue.getParameterMarkerIndex().ifPresent(parameterMarkerIndexes::add);
-        andConditionValue.getParameterMarkerIndex().ifPresent(parameterMarkerIndexes::add);
-        if (betweenValue.isPresent() && andValue.isPresent()) {
-            return Optional.of(new RangeShardingConditionValue<>(column.getName(), column.getTableName(), SafeNumberOperationUtils.safeClosed(betweenValue.get(), andValue.get()),
-                    parameterMarkerIndexes));
-        }
-        Timestamp timestamp = timestampServiceRule.getTimestamp();
-        if (!betweenValue.isPresent() && ExpressionConditionUtils.isNowExpression(predicate.getBetweenExpr())) {
-            betweenValue = Optional.of(timestamp);
-        }
-        if (!andValue.isPresent() && ExpressionConditionUtils.isNowExpression(predicate.getAndExpr())) {
-            andValue = Optional.of(timestamp);
-        }
-        if (!betweenValue.isPresent() || !andValue.isPresent()) {
-            return Optional.empty();
-        }
-        return Optional.of(new RangeShardingConditionValue<>(column.getName(), column.getTableName(), Range.closed(betweenValue.get(), andValue.get()), parameterMarkerIndexes));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueCompareOperatorGenerator.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueCompareOperatorGenerator.java
deleted file mode 100644
index e645e9d1..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/main/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueCompareOperatorGenerator.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.route.engine.condition.generator.impl;
-
-import com.google.common.collect.Range;
-import org.apache.shardingsphere.sharding.route.engine.condition.Column;
-import org.apache.shardingsphere.sharding.route.engine.condition.ExpressionConditionUtils;
-import org.apache.shardingsphere.sharding.route.engine.condition.generator.ConditionValue;
-import org.apache.shardingsphere.sharding.route.engine.condition.generator.ConditionValueGenerator;
-import org.apache.shardingsphere.sharding.route.engine.condition.value.ListShardingConditionValue;
-import org.apache.shardingsphere.sharding.route.engine.condition.value.RangeShardingConditionValue;
-import org.apache.shardingsphere.sharding.route.engine.condition.value.ShardingConditionValue;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.ColumnSegment;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.BinaryOperationExpression;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ExpressionSegment;
-import org.apache.shardingsphere.timeservice.core.rule.TimestampServiceRule;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Optional;
-
-/**
- * Condition value generator for compare operator.
- */
-public final class ConditionValueCompareOperatorGenerator implements ConditionValueGenerator<BinaryOperationExpression> {
-    
-    private static final String EQUAL = "=";
-    
-    private static final String GREATER_THAN = ">";
-    
-    private static final String LESS_THAN = "<";
-    
-    private static final String AT_MOST = "<=";
-    
-    private static final String AT_LEAST = ">=";
-    
-    private static final String IS = "IS";
-    
-    private static final Collection<String> OPERATORS = new HashSet<>(Arrays.asList(EQUAL, GREATER_THAN, LESS_THAN, AT_LEAST, AT_MOST, IS));
-    
-    @Override
-    public Optional<ShardingConditionValue> generate(final BinaryOperationExpression predicate, final Column column, final List<Object> params, final TimestampServiceRule timestampServiceRule) {
-        String operator = predicate.getOperator().toUpperCase();
-        if (!isSupportedOperator(operator)) {
-            return Optional.empty();
-        }
-        ExpressionSegment valueExpression = predicate.getLeft() instanceof ColumnSegment ? predicate.getRight() : predicate.getLeft();
-        ConditionValue conditionValue = new ConditionValue(valueExpression, params);
-        if (conditionValue.isNull()) {
-            return generate(null, column, operator, conditionValue.getParameterMarkerIndex().orElse(-1));
-        }
-        Optional<Comparable<?>> value = conditionValue.getValue();
-        if (value.isPresent()) {
-            return generate(value.get(), column, operator, conditionValue.getParameterMarkerIndex().orElse(-1));
-        }
-        if (ExpressionConditionUtils.isNowExpression(valueExpression)) {
-            return generate(timestampServiceRule.getTimestamp(), column, operator, -1);
-        }
-        return Optional.empty();
-    }
-    
-    private Optional<ShardingConditionValue> generate(final Comparable<?> comparable, final Column column, final String operator, final int parameterMarkerIndex) {
-        String columnName = column.getName();
-        String tableName = column.getTableName();
-        List<Integer> parameterMarkerIndexes = parameterMarkerIndex > -1 ? Collections.singletonList(parameterMarkerIndex) : Collections.emptyList();
-        switch (operator) {
-            case EQUAL:
-                return Optional.of(new ListShardingConditionValue<>(columnName, tableName, new ArrayList<>(Collections.singleton(comparable)), parameterMarkerIndexes));
-            case GREATER_THAN:
-                return null == comparable ? Optional.empty() : Optional.of(new RangeShardingConditionValue<>(columnName, tableName, Range.greaterThan(comparable), parameterMarkerIndexes));
-            case LESS_THAN:
-                return null == comparable ? Optional.empty() : Optional.of(new RangeShardingConditionValue<>(columnName, tableName, Range.lessThan(comparable), parameterMarkerIndexes));
-            case AT_MOST:
-                return null == comparable ? Optional.empty() : Optional.of(new RangeShardingConditionValue<>(columnName, tableName, Range.atMost(comparable), parameterMarkerIndexes));
-            case AT_LEAST:
-                return null == comparable ? Optional.empty() : Optional.of(new RangeShardingConditionValue<>(columnName, tableName, Range.atLeast(comparable), parameterMarkerIndexes));
-            case IS:
-                return "null".equalsIgnoreCase(String.valueOf(comparable))
-                        ? Optional.of(new ListShardingConditionValue<>(columnName, tableName, new ArrayList<>(Collections.singleton(null)), parameterMarkerIndexes))
-                        : Optional.empty();
-            default:
-                return Optional.empty();
-        }
-    }
-    
-    private boolean isSupportedOperator(final String operator) {
-        return OPERATORS.contains(operator);
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/test/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueInOperatorGeneratorTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/test/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueInOperatorGeneratorTest.java
deleted file mode 100644
index 75d2e65e..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/core/src/test/java/org/apache/shardingsphere/sharding/route/engine/condition/generator/impl/ConditionValueInOperatorGeneratorTest.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.route.engine.condition.generator.impl;
-
-import org.apache.shardingsphere.sharding.route.engine.condition.Column;
-import org.apache.shardingsphere.sharding.route.engine.condition.value.ListShardingConditionValue;
-import org.apache.shardingsphere.sharding.route.engine.condition.value.ShardingConditionValue;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.ColumnSegment;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.InExpression;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.ListExpression;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.complex.CommonExpressionSegment;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.simple.LiteralExpressionSegment;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.simple.ParameterMarkerExpressionSegment;
-import org.apache.shardingsphere.sql.parser.sql.common.value.identifier.IdentifierValue;
-import org.apache.shardingsphere.timeservice.api.config.TimestampServiceRuleConfiguration;
-import org.apache.shardingsphere.timeservice.core.rule.TimestampServiceRule;
-import org.junit.jupiter.api.Test;
-
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.LinkedList;
-import java.util.Optional;
-import java.util.Properties;
-
-import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
-class ConditionValueInOperatorGeneratorTest {
-    
-    private final ConditionValueInOperatorGenerator generator = new ConditionValueInOperatorGenerator();
-    
-    private final Column column = new Column("id", "tbl");
-    
-    private final TimestampServiceRule timestampServiceRule = new TimestampServiceRule(new TimestampServiceRuleConfiguration("System", new Properties()));
-    
-    @Test
-    void assertNowExpression() {
-        ListExpression listExpression = new ListExpression(0, 0);
-        listExpression.getItems().add(new CommonExpressionSegment(0, 0, "now()"));
-        InExpression inExpression = new InExpression(0, 0, null, listExpression, false);
-        Optional<ShardingConditionValue> shardingConditionValue = generator.generate(inExpression, column, new LinkedList<>(), timestampServiceRule);
-        assertTrue(shardingConditionValue.isPresent());
-        assertThat(((ListShardingConditionValue<?>) shardingConditionValue.get()).getValues().iterator().next(), instanceOf(Date.class));
-        assertTrue(shardingConditionValue.get().getParameterMarkerIndexes().isEmpty());
-    }
-    
-    @Test
-    void assertNullExpression() {
-        ListExpression listExpression = new ListExpression(0, 0);
-        listExpression.getItems().add(new LiteralExpressionSegment(0, 0, null));
-        listExpression.getItems().add(new LiteralExpressionSegment(0, 0, null));
-        InExpression inExpression = new InExpression(0, 0, null, listExpression, false);
-        Optional<ShardingConditionValue> shardingConditionValue = generator.generate(inExpression, column, new LinkedList<>(), timestampServiceRule);
-        assertTrue(shardingConditionValue.isPresent());
-        assertThat(((ListShardingConditionValue) shardingConditionValue.get()).getValues(), is(Arrays.asList(null, null)));
-        assertTrue(shardingConditionValue.get().getParameterMarkerIndexes().isEmpty());
-        assertThat(shardingConditionValue.get().toString(), is("tbl.id in (,)"));
-    }
-    
-    @Test
-    void assertNullAndCommonExpression() {
-        ListExpression listExpression = new ListExpression(0, 0);
-        listExpression.getItems().add(new LiteralExpressionSegment(0, 0, "test1"));
-        listExpression.getItems().add(new LiteralExpressionSegment(0, 0, null));
-        listExpression.getItems().add(new LiteralExpressionSegment(0, 0, null));
-        listExpression.getItems().add(new LiteralExpressionSegment(0, 0, "test2"));
-        InExpression inExpression = new InExpression(0, 0, null, listExpression, false);
-        Optional<ShardingConditionValue> shardingConditionValue = generator.generate(inExpression, column, new LinkedList<>(), timestampServiceRule);
-        assertTrue(shardingConditionValue.isPresent());
-        assertThat(((ListShardingConditionValue) shardingConditionValue.get()).getValues(), is(Arrays.asList("test1", null, null, "test2")));
-        assertTrue(shardingConditionValue.get().getParameterMarkerIndexes().isEmpty());
-        assertThat(shardingConditionValue.get().toString(), is("tbl.id in (test1,,,test2)"));
-    }
-    
-    @SuppressWarnings("unchecked")
-    @Test
-    void assertGenerateConditionValueWithParameter() {
-        ColumnSegment left = new ColumnSegment(0, 0, new IdentifierValue("id"));
-        ListExpression right = new ListExpression(0, 0);
-        right.getItems().add(new ParameterMarkerExpressionSegment(0, 0, 0));
-        InExpression predicate = new InExpression(0, 0, left, right, false);
-        Optional<ShardingConditionValue> actual = generator.generate(predicate, column, Collections.singletonList(1), timestampServiceRule);
-        assertTrue(actual.isPresent());
-        assertThat(actual.get(), instanceOf(ListShardingConditionValue.class));
-        ListShardingConditionValue<Integer> conditionValue = (ListShardingConditionValue<Integer>) actual.get();
-        assertThat(conditionValue.getTableName(), is("tbl"));
-        assertThat(conditionValue.getColumnName(), is("id"));
-        assertThat(conditionValue.getValues(), is(Collections.singletonList(1)));
-        assertThat(conditionValue.getParameterMarkerIndexes(), is(Collections.singletonList(0)));
-    }
-    
-    @Test
-    void assertGenerateConditionValueWithoutParameter() {
-        ColumnSegment left = new ColumnSegment(0, 0, new IdentifierValue("order_id"));
-        ListExpression right = new ListExpression(0, 0);
-        right.getItems().add(new ParameterMarkerExpressionSegment(0, 0, 0));
-        InExpression predicate = new InExpression(0, 0, left, right, false);
-        Optional<ShardingConditionValue> actual = generator.generate(predicate, column, new LinkedList<>(), timestampServiceRule);
-        assertFalse(actual.isPresent());
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/provider/ShardingConvertRuleConfigurationProvider.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/provider/ShardingConvertRuleConfigurationProvider.java
deleted file mode 100644
index 5376d756..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/provider/ShardingConvertRuleConfigurationProvider.java
+++ /dev/null
@@ -1,214 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.distsql.handler.provider;
-
-import com.google.common.base.Strings;
-import org.apache.shardingsphere.distsql.handler.engine.query.ral.convert.ConvertRuleConfigurationProvider;
-import org.apache.shardingsphere.infra.algorithm.core.config.AlgorithmConfiguration;
-import org.apache.shardingsphere.infra.config.rule.RuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.rule.ShardingAutoTableRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.rule.ShardingTableReferenceRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.rule.ShardingTableRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.audit.ShardingAuditStrategyConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.keygen.KeyGenerateStrategyConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.sharding.ComplexShardingStrategyConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.sharding.ShardingStrategyConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.sharding.StandardShardingStrategyConfiguration;
-import org.apache.shardingsphere.sharding.distsql.handler.constant.ShardingDistSQLConstants;
-
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Objects;
-
-/**
- * Sharding convert rule configuration provider.
- */
-public final class ShardingConvertRuleConfigurationProvider implements ConvertRuleConfigurationProvider {
-    
-    @Override
-    public String convert(final RuleConfiguration ruleConfig) {
-        StringBuilder result = new StringBuilder();
-        ShardingRuleConfiguration shardingRuleConfig = (ShardingRuleConfiguration) ruleConfig;
-        appendShardingTableRules(shardingRuleConfig, result);
-        appendShardingBindingTableRules(shardingRuleConfig, result);
-        appendDefaultShardingStrategy(shardingRuleConfig, result);
-        return result.toString();
-    }
-    
-    private void appendShardingTableRules(final ShardingRuleConfiguration ruleConfig, final StringBuilder stringBuilder) {
-        if (ruleConfig.getTables().isEmpty() && ruleConfig.getAutoTables().isEmpty()) {
-            return;
-        }
-        String tableRules = getTableRules(ruleConfig);
-        String autoTableRules = getAutoTableRules(ruleConfig);
-        stringBuilder.append(ShardingDistSQLConstants.CREATE_SHARDING_TABLE).append(tableRules);
-        if (!Strings.isNullOrEmpty(tableRules) && !Strings.isNullOrEmpty(autoTableRules)) {
-            stringBuilder.append(ShardingDistSQLConstants.COMMA);
-        }
-        stringBuilder.append(autoTableRules).append(ShardingDistSQLConstants.SEMI).append(System.lineSeparator()).append(System.lineSeparator());
-    }
-    
-    private void appendShardingBindingTableRules(final ShardingRuleConfiguration ruleConfig, final StringBuilder stringBuilder) {
-        if (ruleConfig.getBindingTableGroups().isEmpty()) {
-            return;
-        }
-        stringBuilder.append(ShardingDistSQLConstants.SHARDING_BINDING_TABLE_RULES);
-        Iterator<ShardingTableReferenceRuleConfiguration> iterator = ruleConfig.getBindingTableGroups().iterator();
-        while (iterator.hasNext()) {
-            ShardingTableReferenceRuleConfiguration referenceRuleConfig = iterator.next();
-            stringBuilder.append(String.format(ShardingDistSQLConstants.BINDING_TABLES, referenceRuleConfig.getName(), referenceRuleConfig.getReference()));
-            if (iterator.hasNext()) {
-                stringBuilder.append(ShardingDistSQLConstants.COMMA);
-            }
-        }
-        stringBuilder.append(ShardingDistSQLConstants.SEMI).append(System.lineSeparator()).append(System.lineSeparator());
-    }
-    
-    private void appendDefaultShardingStrategy(final ShardingRuleConfiguration ruleConfig, final StringBuilder result) {
-        if (null == ruleConfig.getDefaultDatabaseShardingStrategy() && null == ruleConfig.getDefaultTableShardingStrategy()) {
-            return;
-        }
-        if (null != ruleConfig.getDefaultDatabaseShardingStrategy()) {
-            appendStrategy(ruleConfig.getDefaultDatabaseShardingStrategy(), ShardingDistSQLConstants.DEFAULT_DATABASE_STRATEGY, result, ruleConfig.getShardingAlgorithms());
-            result.append(ShardingDistSQLConstants.SEMI).append(System.lineSeparator()).append(System.lineSeparator());
-        }
-        if (null != ruleConfig.getDefaultTableShardingStrategy()) {
-            appendStrategy(ruleConfig.getDefaultTableShardingStrategy(), ShardingDistSQLConstants.DEFAULT_TABLE_STRATEGY, result, ruleConfig.getShardingAlgorithms());
-            result.append(ShardingDistSQLConstants.SEMI).append(System.lineSeparator()).append(System.lineSeparator());
-        }
-    }
-    
-    private String getTableRules(final ShardingRuleConfiguration ruleConfig) {
-        StringBuilder result = new StringBuilder();
-        if (!ruleConfig.getTables().isEmpty()) {
-            Iterator<ShardingTableRuleConfiguration> iterator = ruleConfig.getTables().iterator();
-            while (iterator.hasNext()) {
-                ShardingTableRuleConfiguration tableRuleConfig = iterator.next();
-                result.append(String.format(ShardingDistSQLConstants.SHARDING_TABLE, tableRuleConfig.getLogicTable(), tableRuleConfig.getActualDataNodes(),
-                        appendTableStrategy(tableRuleConfig, ruleConfig)));
-                if (iterator.hasNext()) {
-                    result.append(ShardingDistSQLConstants.COMMA);
-                }
-            }
-        }
-        return result.toString();
-    }
-    
-    private String getAutoTableRules(final ShardingRuleConfiguration ruleConfig) {
-        StringBuilder result = new StringBuilder();
-        if (!ruleConfig.getAutoTables().isEmpty()) {
-            Iterator<ShardingAutoTableRuleConfiguration> iterator = ruleConfig.getAutoTables().iterator();
-            while (iterator.hasNext()) {
-                ShardingAutoTableRuleConfiguration autoTableRuleConfig = iterator.next();
-                result.append(String.format(ShardingDistSQLConstants.SHARDING_AUTO_TABLE, autoTableRuleConfig.getLogicTable(), autoTableRuleConfig.getActualDataSources(),
-                        appendAutoTableStrategy(autoTableRuleConfig, ruleConfig)));
-                if (iterator.hasNext()) {
-                    result.append(ShardingDistSQLConstants.COMMA);
-                }
-            }
-        }
-        return result.toString();
-    }
-    
-    private String appendTableStrategy(final ShardingTableRuleConfiguration tableRuleConfig, final ShardingRuleConfiguration ruleConfig) {
-        StringBuilder result = new StringBuilder();
-        appendStrategy(tableRuleConfig.getDatabaseShardingStrategy(), ShardingDistSQLConstants.DATABASE_STRATEGY, result, ruleConfig.getShardingAlgorithms());
-        appendStrategy(tableRuleConfig.getTableShardingStrategy(), ShardingDistSQLConstants.TABLE_STRATEGY, result, ruleConfig.getShardingAlgorithms());
-        appendKeyGenerateStrategy(ruleConfig.getKeyGenerators(), tableRuleConfig.getKeyGenerateStrategy(), result);
-        appendAuditStrategy(ruleConfig.getAuditors(), null != tableRuleConfig.getAuditStrategy() ? tableRuleConfig.getAuditStrategy() : ruleConfig.getDefaultAuditStrategy(), result);
-        return result.toString();
-    }
-    
-    private String appendAutoTableStrategy(final ShardingAutoTableRuleConfiguration autoTableRuleConfig, final ShardingRuleConfiguration ruleConfig) {
-        StringBuilder result = new StringBuilder();
-        StandardShardingStrategyConfiguration strategyConfig = (StandardShardingStrategyConfiguration) autoTableRuleConfig.getShardingStrategy();
-        String shardingColumn = Strings.isNullOrEmpty(strategyConfig.getShardingColumn()) ? ruleConfig.getDefaultShardingColumn() : strategyConfig.getShardingColumn();
-        result.append(String.format(ShardingDistSQLConstants.AUTO_TABLE_STRATEGY, shardingColumn, getAlgorithmType(ruleConfig.getShardingAlgorithms().get(strategyConfig.getShardingAlgorithmName()))));
-        appendKeyGenerateStrategy(ruleConfig.getKeyGenerators(), autoTableRuleConfig.getKeyGenerateStrategy(), result);
-        appendAuditStrategy(ruleConfig.getAuditors(), null != autoTableRuleConfig.getAuditStrategy() ? autoTableRuleConfig.getAuditStrategy() : ruleConfig.getDefaultAuditStrategy(), result);
-        return result.toString();
-    }
-    
-    private void appendStrategy(final ShardingStrategyConfiguration strategyConfig, final String strategyType,
-                                final StringBuilder stringBuilder, final Map<String, AlgorithmConfiguration> shardingAlgorithms) {
-        if (null == strategyConfig) {
-            return;
-        }
-        if (Objects.equals(strategyType, ShardingDistSQLConstants.DATABASE_STRATEGY) || Objects.equals(strategyType, ShardingDistSQLConstants.TABLE_STRATEGY)) {
-            stringBuilder.append(ShardingDistSQLConstants.COMMA).append(System.lineSeparator());
-        }
-        String type = strategyConfig.getType().toLowerCase();
-        String algorithmDefinition = getAlgorithmType(shardingAlgorithms.get(strategyConfig.getShardingAlgorithmName()));
-        switch (type) {
-            case ShardingDistSQLConstants.STANDARD:
-                StandardShardingStrategyConfiguration standardShardingStrategyConfig = (StandardShardingStrategyConfiguration) strategyConfig;
-                stringBuilder.append(String.format(ShardingDistSQLConstants.SHARDING_STRATEGY_STANDARD, strategyType, type, standardShardingStrategyConfig.getShardingColumn(), algorithmDefinition));
-                break;
-            case ShardingDistSQLConstants.COMPLEX:
-                ComplexShardingStrategyConfiguration complexShardingStrategyConfig = (ComplexShardingStrategyConfiguration) strategyConfig;
-                stringBuilder.append(String.format(ShardingDistSQLConstants.SHARDING_STRATEGY_COMPLEX, strategyType, type, complexShardingStrategyConfig.getShardingColumns(), algorithmDefinition));
-                break;
-            case ShardingDistSQLConstants.HINT:
-                stringBuilder.append(String.format(ShardingDistSQLConstants.SHARDING_STRATEGY_HINT, strategyType, type, algorithmDefinition));
-                break;
-            case ShardingDistSQLConstants.NONE:
-                stringBuilder.append(String.format(ShardingDistSQLConstants.SHARDING_STRATEGY_NONE, strategyType, "none"));
-                break;
-            default:
-                break;
-        }
-    }
-    
-    private void appendKeyGenerateStrategy(final Map<String, AlgorithmConfiguration> keyGenerators,
-                                           final KeyGenerateStrategyConfiguration keyGenerateStrategyConfig, final StringBuilder stringBuilder) {
-        if (null == keyGenerateStrategyConfig) {
-            return;
-        }
-        stringBuilder.append(ShardingDistSQLConstants.COMMA).append(System.lineSeparator());
-        String algorithmDefinition = getAlgorithmType(keyGenerators.get(keyGenerateStrategyConfig.getKeyGeneratorName()));
-        stringBuilder.append(String.format(ShardingDistSQLConstants.KEY_GENERATOR_STRATEGY, keyGenerateStrategyConfig.getColumn(), algorithmDefinition));
-    }
-    
-    private void appendAuditStrategy(final Map<String, AlgorithmConfiguration> auditors, final ShardingAuditStrategyConfiguration auditStrategy, final StringBuilder stringBuilder) {
-        if (null != auditStrategy) {
-            stringBuilder.append(ShardingDistSQLConstants.COMMA).append(System.lineSeparator());
-            stringBuilder.append(String.format(ShardingDistSQLConstants.AUDIT_STRATEGY, getAlgorithmTypes(auditors, auditStrategy.getAuditorNames()), auditStrategy.isAllowHintDisable()));
-        }
-    }
-    
-    private String getAlgorithmTypes(final Map<String, AlgorithmConfiguration> auditors, final Collection<String> auditorNames) {
-        StringBuilder result = new StringBuilder();
-        if (!auditorNames.isEmpty()) {
-            Iterator<String> iterator = auditorNames.iterator();
-            while (iterator.hasNext()) {
-                result.append(getAlgorithmType(auditors.get(iterator.next())));
-                if (iterator.hasNext()) {
-                    result.append(ShardingDistSQLConstants.COMMA);
-                }
-            }
-        }
-        return result.toString();
-    }
-    
-    @Override
-    public Class<ShardingRuleConfiguration> getType() {
-        return ShardingRuleConfiguration.class;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/query/ShowShardingTableRulesUsedAlgorithmExecutor.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/query/ShowShardingTableRulesUsedAlgorithmExecutor.java
deleted file mode 100644
index f8b9f2dc..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/java/org/apache/shardingsphere/sharding/distsql/handler/query/ShowShardingTableRulesUsedAlgorithmExecutor.java
+++ /dev/null
@@ -1,106 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.distsql.handler.query;
-
-import lombok.Setter;
-import org.apache.shardingsphere.distsql.handler.aware.DistSQLExecutorRuleAware;
-import org.apache.shardingsphere.distsql.handler.engine.query.DistSQLQueryExecutor;
-import org.apache.shardingsphere.infra.merge.result.impl.local.LocalDataQueryResultRow;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-import org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.rule.ShardingTableRuleConfiguration;
-import org.apache.shardingsphere.sharding.distsql.statement.ShowShardingTableRulesUsedAlgorithmStatement;
-import org.apache.shardingsphere.sharding.rule.ShardingRule;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedList;
-
-/**
- * Show sharding table rules used algorithm executor.
- */
-@Setter
-public final class ShowShardingTableRulesUsedAlgorithmExecutor implements DistSQLQueryExecutor<ShowShardingTableRulesUsedAlgorithmStatement>, DistSQLExecutorRuleAware<ShardingRule> {
-    
-    private ShardingRule rule;
-    
-    @Override
-    public Collection<String> getColumnNames(final ShowShardingTableRulesUsedAlgorithmStatement sqlStatement) {
-        return Arrays.asList("type", "name");
-    }
-    
-    @Override
-    public Collection<LocalDataQueryResultRow> getRows(final ShowShardingTableRulesUsedAlgorithmStatement sqlStatement, final ContextManager contextManager) {
-        if (!sqlStatement.getShardingAlgorithmName().isPresent()) {
-            return Collections.emptyList();
-        }
-        Collection<LocalDataQueryResultRow> result = new LinkedList<>();
-        ShardingRuleConfiguration ruleConfig = rule.getConfiguration();
-        String algorithmName = sqlStatement.getShardingAlgorithmName().get();
-        boolean matchDefaultDatabaseShardingStrategy = null != ruleConfig.getDefaultDatabaseShardingStrategy()
-                && algorithmName.equals(ruleConfig.getDefaultDatabaseShardingStrategy().getShardingAlgorithmName());
-        boolean matchDefaultTableShardingStrategy = null != ruleConfig.getDefaultTableShardingStrategy()
-                && algorithmName.equals(ruleConfig.getDefaultTableShardingStrategy().getShardingAlgorithmName());
-        ruleConfig.getTables().forEach(each -> {
-            if (isMatchDatabaseShardingStrategy(each, algorithmName, matchDefaultDatabaseShardingStrategy) || isMatchTableShardingStrategy(each, algorithmName, matchDefaultTableShardingStrategy)) {
-                result.add(new LocalDataQueryResultRow("table", each.getLogicTable()));
-            }
-        });
-        ruleConfig.getAutoTables().forEach(each -> {
-            if (null != each.getShardingStrategy() && algorithmName.equals(each.getShardingStrategy().getShardingAlgorithmName())) {
-                result.add(new LocalDataQueryResultRow("auto_table", each.getLogicTable()));
-            }
-        });
-        return result;
-    }
-    
-    private boolean isMatchDatabaseShardingStrategy(final ShardingTableRuleConfiguration tableRuleConfig, final String algorithmName, final boolean matchDefaultDatabaseShardingStrategy) {
-        return isMatchDatabaseShardingStrategy(tableRuleConfig, algorithmName) || isMatchDefaultDatabaseShardingStrategy(tableRuleConfig, matchDefaultDatabaseShardingStrategy);
-    }
-    
-    private boolean isMatchDatabaseShardingStrategy(final ShardingTableRuleConfiguration tableRuleConfig, final String algorithmName) {
-        return null != tableRuleConfig.getDatabaseShardingStrategy() && algorithmName.equals(tableRuleConfig.getDatabaseShardingStrategy().getShardingAlgorithmName());
-    }
-    
-    private boolean isMatchDefaultDatabaseShardingStrategy(final ShardingTableRuleConfiguration tableRuleConfig, final boolean matchDefaultDatabaseShardingStrategy) {
-        return null == tableRuleConfig.getDatabaseShardingStrategy() && matchDefaultDatabaseShardingStrategy;
-    }
-    
-    private boolean isMatchTableShardingStrategy(final ShardingTableRuleConfiguration tableRuleConfig, final String algorithmName, final boolean matchDefaultTableShardingStrategy) {
-        return isMatchTableShardingStrategy(tableRuleConfig, algorithmName) || isMatchDefaultTableShardingStrategy(tableRuleConfig, matchDefaultTableShardingStrategy);
-    }
-    
-    private boolean isMatchTableShardingStrategy(final ShardingTableRuleConfiguration tableRuleConfig, final String algorithmName) {
-        return null != tableRuleConfig.getTableShardingStrategy() && algorithmName.equals(tableRuleConfig.getTableShardingStrategy().getShardingAlgorithmName());
-    }
-    
-    private boolean isMatchDefaultTableShardingStrategy(final ShardingTableRuleConfiguration tableRuleConfig, final boolean matchDefaultTableShardingStrategy) {
-        return null == tableRuleConfig.getTableShardingStrategy() && matchDefaultTableShardingStrategy;
-    }
-    
-    @Override
-    public Class<ShardingRule> getRuleClass() {
-        return ShardingRule.class;
-    }
-    
-    @Override
-    public Class<ShowShardingTableRulesUsedAlgorithmStatement> getType() {
-        return ShowShardingTableRulesUsedAlgorithmStatement.class;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.rql.rule.CountResultRowBuilder b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.rql.rule.CountResultRowBuilder
deleted file mode 100644
index 644ec27c..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/main/resources/META-INF/services/org.apache.shardingsphere.distsql.handler.executor.rql.rule.CountResultRowBuilder
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.sharding.distsql.handler.query.ShardingCountResultRowBuilder
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/test/java/org/apache/shardingsphere/sharding/distsql/query/ShowShardingTableRulesUsedKeyGeneratorExecutorTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/test/java/org/apache/shardingsphere/sharding/distsql/query/ShowShardingTableRulesUsedKeyGeneratorExecutorTest.java
deleted file mode 100644
index 8c493a9e..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/handler/src/test/java/org/apache/shardingsphere/sharding/distsql/query/ShowShardingTableRulesUsedKeyGeneratorExecutorTest.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.distsql.query;
-
-import org.apache.shardingsphere.distsql.handler.engine.DistSQLConnectionContext;
-import org.apache.shardingsphere.distsql.handler.engine.query.DistSQLQueryExecuteEngine;
-import org.apache.shardingsphere.infra.algorithm.core.config.AlgorithmConfiguration;
-import org.apache.shardingsphere.infra.merge.result.impl.local.LocalDataQueryResultRow;
-import org.apache.shardingsphere.infra.metadata.database.ShardingSphereDatabase;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-import org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.rule.ShardingAutoTableRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.rule.ShardingTableRuleConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.keygen.KeyGenerateStrategyConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.sharding.NoneShardingStrategyConfiguration;
-import org.apache.shardingsphere.sharding.api.config.strategy.sharding.StandardShardingStrategyConfiguration;
-import org.apache.shardingsphere.sharding.distsql.statement.ShowShardingTableRulesUsedKeyGeneratorStatement;
-import org.apache.shardingsphere.sharding.rule.ShardingRule;
-import org.apache.shardingsphere.test.util.PropertiesBuilder;
-import org.apache.shardingsphere.test.util.PropertiesBuilder.Property;
-import org.junit.jupiter.api.Test;
-
-import java.sql.SQLException;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Optional;
-import java.util.Properties;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-class ShowShardingTableRulesUsedKeyGeneratorExecutorTest {
-    
-    private DistSQLQueryExecuteEngine engine;
-    
-    DistSQLQueryExecuteEngine setUp(final ShowShardingTableRulesUsedKeyGeneratorStatement statement, final String keyGeneratorName) {
-        when(statement.getKeyGeneratorName()).thenReturn(Optional.of(keyGeneratorName));
-        return new DistSQLQueryExecuteEngine(statement, "foo_db", mockContextManager(), mock(DistSQLConnectionContext.class));
-    }
-    
-    private ContextManager mockContextManager() {
-        ContextManager result = mock(ContextManager.class, RETURNS_DEEP_STUBS);
-        ShardingSphereDatabase database = mock(ShardingSphereDatabase.class, RETURNS_DEEP_STUBS);
-        when(result.getDatabase("foo_db")).thenReturn(database);
-        ShardingRule rule = mock(ShardingRule.class);
-        when(rule.getConfiguration()).thenReturn(createRuleConfiguration());
-        when(database.getRuleMetaData().findSingleRule(ShardingRule.class)).thenReturn(Optional.of(rule));
-        return result;
-    }
-    
-    @Test
-    void assertGetRowData() throws SQLException {
-        engine = setUp(mock(ShowShardingTableRulesUsedKeyGeneratorStatement.class), "snowflake");
-        engine.executeQuery();
-        Collection<LocalDataQueryResultRow> actual = engine.getRows();
-        assertThat(actual.size(), is(2));
-        Iterator<LocalDataQueryResultRow> iterator = actual.iterator();
-        LocalDataQueryResultRow row = iterator.next();
-        assertThat(row.getCell(1), is("table"));
-        assertThat(row.getCell(2), is("t_order"));
-        row = iterator.next();
-        assertThat(row.getCell(1), is("auto_table"));
-        assertThat(row.getCell(2), is("t_order_auto"));
-    }
-    
-    private ShardingRuleConfiguration createRuleConfiguration() {
-        ShardingRuleConfiguration result = new ShardingRuleConfiguration();
-        result.getTables().add(createShardingTableRuleConfiguration());
-        result.getAutoTables().add(createShardingAutoTableRuleConfiguration());
-        result.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration("user_id", "database_inline"));
-        result.setDefaultTableShardingStrategy(new NoneShardingStrategyConfiguration());
-        result.getShardingAlgorithms().put("database_inline", createShardingInlineAlgorithmConfiguration("ds_${user_id % 2}"));
-        result.getShardingAlgorithms().put("t_order_inline", createShardingInlineAlgorithmConfiguration("t_order_${order_id % 2}"));
-        result.getShardingAlgorithms().put("auto_mod", createShardingAutoModAlgorithmConfiguration());
-        result.getKeyGenerators().put("snowflake", createKeyGeneratorConfiguration());
-        return result;
-    }
-    
-    private ShardingAutoTableRuleConfiguration createShardingAutoTableRuleConfiguration() {
-        ShardingAutoTableRuleConfiguration result = new ShardingAutoTableRuleConfiguration("t_order_auto", "ds_0, ds_1");
-        result.setShardingStrategy(new StandardShardingStrategyConfiguration("order_id", "auto_mod"));
-        result.setKeyGenerateStrategy(new KeyGenerateStrategyConfiguration("order_id", "snowflake"));
-        return result;
-    }
-    
-    private ShardingTableRuleConfiguration createShardingTableRuleConfiguration() {
-        ShardingTableRuleConfiguration result = new ShardingTableRuleConfiguration("t_order", "ds_${0..1}.t_order_${0..1}");
-        result.setTableShardingStrategy(new StandardShardingStrategyConfiguration("order_id", "t_order_inline"));
-        result.setKeyGenerateStrategy(new KeyGenerateStrategyConfiguration("order_id", "snowflake"));
-        return result;
-    }
-    
-    private AlgorithmConfiguration createShardingInlineAlgorithmConfiguration(final String algorithmExpression) {
-        return new AlgorithmConfiguration("INLINE", PropertiesBuilder.build(new Property("algorithm-expression", algorithmExpression)));
-    }
-    
-    private AlgorithmConfiguration createShardingAutoModAlgorithmConfiguration() {
-        return new AlgorithmConfiguration("MOD", PropertiesBuilder.build(new Property("sharding-count", "4")));
-    }
-    
-    private AlgorithmConfiguration createKeyGeneratorConfiguration() {
-        return new AlgorithmConfiguration("SNOWFLAKE", new Properties());
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/statement/src/main/java/org/apache/shardingsphere/sharding/distsql/statement/ShowShardingTableRulesUsedAlgorithmStatement.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/statement/src/main/java/org/apache/shardingsphere/sharding/distsql/statement/ShowShardingTableRulesUsedAlgorithmStatement.java
deleted file mode 100644
index 9cbd71a6..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/features/sharding/distsql/statement/src/main/java/org/apache/shardingsphere/sharding/distsql/statement/ShowShardingTableRulesUsedAlgorithmStatement.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.sharding.distsql.statement;
-
-import org.apache.shardingsphere.distsql.statement.rql.rule.database.ShowDatabaseRulesStatement;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.generic.DatabaseSegment;
-
-import java.util.Optional;
-
-/**
- * Show sharding table rules used algorithm statement.
- */
-public final class ShowShardingTableRulesUsedAlgorithmStatement extends ShowDatabaseRulesStatement {
-    
-    private final String shardingAlgorithmName;
-    
-    public ShowShardingTableRulesUsedAlgorithmStatement(final String shardingAlgorithmName, final DatabaseSegment database) {
-        super(database);
-        this.shardingAlgorithmName = shardingAlgorithmName;
-    }
-    
-    /**
-     * Get algorithm name.
-     *
-     * @return algorithm name.
-     */
-    public Optional<String> getShardingAlgorithmName() {
-        return Optional.ofNullable(shardingAlgorithmName);
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/algorithm/key-generator/type/snowflake/src/main/java/org/apache/shardingsphere/infra/algorithm/keygen/snowflake/SnowflakeKeyGenerateAlgorithm.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/algorithm/key-generator/type/snowflake/src/main/java/org/apache/shardingsphere/infra/algorithm/keygen/snowflake/SnowflakeKeyGenerateAlgorithm.java
deleted file mode 100644
index cb09f5a4..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/algorithm/key-generator/type/snowflake/src/main/java/org/apache/shardingsphere/infra/algorithm/keygen/snowflake/SnowflakeKeyGenerateAlgorithm.java
+++ /dev/null
@@ -1,188 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.algorithm.keygen.snowflake;
-
-import lombok.Setter;
-import lombok.SneakyThrows;
-import org.apache.shardingsphere.infra.exception.core.ShardingSpherePreconditions;
-import org.apache.shardingsphere.infra.instance.InstanceContext;
-import org.apache.shardingsphere.infra.instance.InstanceContextAware;
-import org.apache.shardingsphere.infra.algorithm.keygen.core.KeyGenerateAlgorithm;
-import org.apache.shardingsphere.infra.algorithm.core.context.AlgorithmSQLContext;
-import org.apache.shardingsphere.infra.algorithm.keygen.core.exception.KeyGenerateAlgorithmInitializationException;
-import org.apache.shardingsphere.infra.algorithm.keygen.snowflake.exception.SnowflakeClockMoveBackException;
-
-import java.time.Instant;
-import java.time.LocalDateTime;
-import java.time.ZoneId;
-import java.util.Collection;
-import java.util.LinkedList;
-import java.util.Properties;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.concurrent.atomic.AtomicReference;
-
-/**
- * Snowflake key generate algorithm.
- * 
- * <pre>
- *     Length of key is 64 bit.
- *     1 bit sign bit.
- *     41 bits timestamp offset from 2016.11.01(ShardingSphere distributed primary key published data) to now.
- *     10 bits worker process id.
- *     12 bits auto increment offset in one mills
- * </pre>
- */
-public final class SnowflakeKeyGenerateAlgorithm implements KeyGenerateAlgorithm, InstanceContextAware {
-    
-    public static final long EPOCH;
-    
-    private static final String MAX_VIBRATION_OFFSET_KEY = "max-vibration-offset";
-    
-    private static final String MAX_TOLERATE_TIME_DIFFERENCE_MILLIS_KEY = "max-tolerate-time-difference-milliseconds";
-    
-    private static final long SEQUENCE_BITS = 12L;
-    
-    private static final long WORKER_ID_BITS = 10L;
-    
-    private static final long SEQUENCE_MASK = (1 << SEQUENCE_BITS) - 1L;
-    
-    private static final long WORKER_ID_LEFT_SHIFT_BITS = SEQUENCE_BITS;
-    
-    private static final long TIMESTAMP_LEFT_SHIFT_BITS = WORKER_ID_LEFT_SHIFT_BITS + WORKER_ID_BITS;
-    
-    private static final int DEFAULT_VIBRATION_VALUE = 1;
-    
-    private static final int MAX_TOLERATE_TIME_DIFFERENCE_MILLIS = 10;
-    
-    private static final int DEFAULT_WORKER_ID = 0;
-    
-    @Setter
-    private static TimeService timeService = new TimeService();
-    
-    private final AtomicReference<InstanceContext> instanceContext = new AtomicReference<>();
-    
-    private final AtomicInteger sequenceOffset = new AtomicInteger(-1);
-    
-    private final AtomicLong sequence = new AtomicLong();
-    
-    private final AtomicLong lastMillis = new AtomicLong();
-    
-    private Properties props;
-    
-    private int maxVibrationOffset;
-    
-    private int maxTolerateTimeDifferenceMillis;
-    
-    static {
-        EPOCH = LocalDateTime.of(2016, 11, 1, 0, 0, 0).toInstant(ZoneId.systemDefault().getRules().getOffset(Instant.now())).toEpochMilli();
-    }
-    
-    @Override
-    public void init(final Properties props) {
-        this.props = props;
-        maxVibrationOffset = getMaxVibrationOffset(props);
-        maxTolerateTimeDifferenceMillis = getMaxTolerateTimeDifferenceMillis(props);
-    }
-    
-    private int getMaxVibrationOffset(final Properties props) {
-        int result = Integer.parseInt(props.getOrDefault(MAX_VIBRATION_OFFSET_KEY, DEFAULT_VIBRATION_VALUE).toString());
-        ShardingSpherePreconditions.checkState(result >= 0 && result <= SEQUENCE_MASK, () -> new KeyGenerateAlgorithmInitializationException(getType(), "Illegal max vibration offset."));
-        return result;
-    }
-    
-    private int getMaxTolerateTimeDifferenceMillis(final Properties props) {
-        int result = Integer.parseInt(props.getOrDefault(MAX_TOLERATE_TIME_DIFFERENCE_MILLIS_KEY, MAX_TOLERATE_TIME_DIFFERENCE_MILLIS).toString());
-        ShardingSpherePreconditions.checkState(result >= 0, () -> new KeyGenerateAlgorithmInitializationException(getType(), "Illegal max tolerate time difference milliseconds."));
-        return result;
-    }
-    
-    @Override
-    public void setInstanceContext(final InstanceContext instanceContext) {
-        this.instanceContext.set(instanceContext);
-        if (null != instanceContext) {
-            instanceContext.generateWorkerId(props);
-        }
-    }
-    
-    @Override
-    public Collection<Long> generateKeys(final AlgorithmSQLContext context, final int keyGenerateCount) {
-        Collection<Long> result = new LinkedList<>();
-        for (int index = 0; index < keyGenerateCount; index++) {
-            result.add(generateKey());
-        }
-        return result;
-    }
-    
-    private synchronized Long generateKey() {
-        long currentMillis = timeService.getCurrentMillis();
-        if (waitTolerateTimeDifferenceIfNeed(currentMillis)) {
-            currentMillis = timeService.getCurrentMillis();
-        }
-        if (lastMillis.get() == currentMillis) {
-            sequence.set(sequence.incrementAndGet() & SEQUENCE_MASK);
-            if (0L == sequence.get()) {
-                currentMillis = waitUntilNextTime(currentMillis);
-            }
-        } else {
-            vibrateSequenceOffset();
-            sequence.set(sequenceOffset.get());
-        }
-        lastMillis.set(currentMillis);
-        return ((currentMillis - EPOCH) << TIMESTAMP_LEFT_SHIFT_BITS) | ((long) getWorkerId() << WORKER_ID_LEFT_SHIFT_BITS) | sequence.get();
-    }
-    
-    @SneakyThrows(InterruptedException.class)
-    private boolean waitTolerateTimeDifferenceIfNeed(final long currentMillis) {
-        if (lastMillis.get() <= currentMillis) {
-            return false;
-        }
-        long timeDifferenceMillis = lastMillis.get() - currentMillis;
-        ShardingSpherePreconditions.checkState(timeDifferenceMillis < maxTolerateTimeDifferenceMillis, () -> new SnowflakeClockMoveBackException(lastMillis.get(), currentMillis));
-        Thread.sleep(timeDifferenceMillis);
-        return true;
-    }
-    
-    private long waitUntilNextTime(final long lastTime) {
-        long result = timeService.getCurrentMillis();
-        while (result <= lastTime) {
-            result = timeService.getCurrentMillis();
-        }
-        return result;
-    }
-    
-    private void vibrateSequenceOffset() {
-        if (!sequenceOffset.compareAndSet(maxVibrationOffset, 0)) {
-            sequenceOffset.incrementAndGet();
-        }
-    }
-    
-    private int getWorkerId() {
-        return null == instanceContext.get() ? DEFAULT_WORKER_ID : instanceContext.get().getWorkerId();
-    }
-    
-    @Override
-    public String getType() {
-        return "SNOWFLAKE";
-    }
-    
-    @Override
-    public boolean isDefault() {
-        return true;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/data-source-pool/type/hikari/src/main/java/org/apache/shardingsphere/infra/datasource/pool/hikari/detector/HikariDataSourcePoolActiveDetector.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/data-source-pool/type/hikari/src/main/java/org/apache/shardingsphere/infra/datasource/pool/hikari/detector/HikariDataSourcePoolActiveDetector.java
deleted file mode 100644
index 65c66432..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/data-source-pool/type/hikari/src/main/java/org/apache/shardingsphere/infra/datasource/pool/hikari/detector/HikariDataSourcePoolActiveDetector.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.datasource.pool.hikari.detector;
-
-import lombok.SneakyThrows;
-import org.apache.shardingsphere.infra.datasource.pool.destroyer.DataSourcePoolActiveDetector;
-
-import javax.sql.DataSource;
-
-/**
- * Hikari data source pool active detector.
- */
-public final class HikariDataSourcePoolActiveDetector implements DataSourcePoolActiveDetector {
-    
-    @Override
-    public boolean containsActiveConnection(final DataSource dataSource) {
-        return 0 != getActiveConnections(dataSource);
-    }
-    
-    @SneakyThrows(ReflectiveOperationException.class)
-    private int getActiveConnections(final DataSource dataSource) {
-        Object hikariPoolMXBean = dataSource.getClass().getMethod("getHikariPoolMXBean").invoke(dataSource);
-        return null == hikariPoolMXBean ? 0 : (int) hikariPoolMXBean.getClass().getMethod("getActiveConnections").invoke(hikariPoolMXBean);
-    }
-    
-    @Override
-    public String getType() {
-        return "com.zaxxer.hikari.HikariDataSource";
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/h2/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.database.core.metadata.database.system.DialectSystemDatabase b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/h2/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.database.core.metadata.database.system.DialectSystemDatabase
deleted file mode 100644
index 45f9d30f..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/h2/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.database.core.metadata.database.system.DialectSystemDatabase
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.infra.database.h2.metadata.database.system.H2SystemDatabase
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/opengauss/src/test/java/org/apache/shardingsphere/infra/database/opengauss/metadata/database/system/OpenGaussSystemDatabaseTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/opengauss/src/test/java/org/apache/shardingsphere/infra/database/opengauss/metadata/database/system/OpenGaussSystemDatabaseTest.java
deleted file mode 100644
index efd23a81..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/opengauss/src/test/java/org/apache/shardingsphere/infra/database/opengauss/metadata/database/system/OpenGaussSystemDatabaseTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.database.opengauss.metadata.database.system;
-
-import org.apache.shardingsphere.infra.database.core.spi.DatabaseTypedSPILoader;
-import org.apache.shardingsphere.infra.database.core.metadata.database.system.DialectSystemDatabase;
-import org.apache.shardingsphere.infra.database.core.type.DatabaseType;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
-import org.junit.jupiter.api.Test;
-
-import java.util.Arrays;
-import java.util.HashSet;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-
-class OpenGaussSystemDatabaseTest {
-    
-    private final DialectSystemDatabase systemDatabase = DatabaseTypedSPILoader.getService(DialectSystemDatabase.class, TypedSPILoader.getService(DatabaseType.class, "openGauss"));
-    
-    @Test
-    void assertGetSystemDatabases() {
-        assertTrue(systemDatabase.getSystemDatabaseSchemaMap().containsKey("postgres"));
-    }
-    
-    @Test
-    void assertGetSystemSchemas() {
-        assertThat(systemDatabase.getSystemSchemas(), is(new HashSet<>(Arrays.asList("information_schema", "pg_catalog", "blockchain",
-                "cstore", "db4ai", "dbe_perf", "dbe_pldebugger", "gaussdb", "oracle", "pkg_service", "snapshot", "sqladvisor", "dbe_pldeveloper", "pg_toast", "pkg_util", "shardingsphere"))));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/oracle/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.database.core.metadata.data.loader.DialectMetaDataLoader b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/oracle/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.database.core.metadata.data.loader.DialectMetaDataLoader
deleted file mode 100644
index 0de5ecf4..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/oracle/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.database.core.metadata.data.loader.DialectMetaDataLoader
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.infra.database.oracle.metadata.data.loader.OracleMetaDataLoader
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/postgresql/src/test/java/org/apache/shardingsphere/infra/database/postgresql/connector/PostgreSQLConnectionPropertiesParserTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/postgresql/src/test/java/org/apache/shardingsphere/infra/database/postgresql/connector/PostgreSQLConnectionPropertiesParserTest.java
deleted file mode 100644
index 870a40ee..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/database/type/postgresql/src/test/java/org/apache/shardingsphere/infra/database/postgresql/connector/PostgreSQLConnectionPropertiesParserTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.database.postgresql.connector;
-
-import org.apache.shardingsphere.infra.database.core.connector.ConnectionPropertiesParser;
-import org.apache.shardingsphere.infra.database.core.connector.url.UnrecognizedDatabaseURLException;
-import org.apache.shardingsphere.infra.database.core.connector.ConnectionProperties;
-import org.apache.shardingsphere.infra.database.core.spi.DatabaseTypedSPILoader;
-import org.apache.shardingsphere.infra.database.core.type.DatabaseType;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
-import org.apache.shardingsphere.test.util.PropertiesBuilder;
-import org.apache.shardingsphere.test.util.PropertiesBuilder.Property;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtensionContext;
-import org.junit.jupiter.params.ParameterizedTest;
-import org.junit.jupiter.params.provider.Arguments;
-import org.junit.jupiter.params.provider.ArgumentsProvider;
-import org.junit.jupiter.params.provider.ArgumentsSource;
-
-import java.util.Properties;
-import java.util.stream.Stream;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-
-class PostgreSQLConnectionPropertiesParserTest {
-    
-    private final ConnectionPropertiesParser parser = DatabaseTypedSPILoader.getService(ConnectionPropertiesParser.class, TypedSPILoader.getService(DatabaseType.class, "PostgreSQL"));
-    
-    @ParameterizedTest(name = "{0}")
-    @ArgumentsSource(NewConstructorTestCaseArgumentsProvider.class)
-    void assertNewConstructor(final String name, final String url, final String hostname, final int port, final String catalog, final String schema, final Properties queryProps) {
-        ConnectionProperties actual = parser.parse(url, null, null);
-        assertThat(actual.getHostname(), is(hostname));
-        assertThat(actual.getPort(), is(port));
-        assertThat(actual.getCatalog(), is(catalog));
-        assertThat(actual.getSchema(), is(schema));
-        assertThat(actual.getQueryProperties(), is(queryProps));
-    }
-    
-    @Test
-    void assertNewConstructorFailure() {
-        assertThrows(UnrecognizedDatabaseURLException.class, () -> parser.parse("jdbc:postgresql:xxxxxxxx", null, null));
-    }
-    
-    private static class NewConstructorTestCaseArgumentsProvider implements ArgumentsProvider {
-        
-        @Override
-        public Stream<? extends Arguments> provideArguments(final ExtensionContext extensionContext) {
-            return Stream.of(
-                    Arguments.of("simple", "jdbc:postgresql://127.0.0.1/foo_ds", "127.0.0.1", 5432, "foo_ds", null, new Properties()),
-                    Arguments.of("complex", "jdbc:postgresql://127.0.0.1:9999,127.0.0.2:9999,127.0.0.3:9999/foo_ds?targetServerType=master", "127.0.0.1", 9999, "foo_ds", null,
-                            PropertiesBuilder.build(new Property("targetServerType", "master"))));
-        }
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/database/type/AlterDatabaseRuleOperator.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/database/type/AlterDatabaseRuleOperator.java
deleted file mode 100644
index 89b9c9a6..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/database/type/AlterDatabaseRuleOperator.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.engine.database.type;
-
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.engine.database.DatabaseRuleOperator;
-import org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.spi.database.DatabaseRuleAlterExecutor;
-import org.apache.shardingsphere.distsql.statement.rdl.rule.database.DatabaseRuleDefinitionStatement;
-import org.apache.shardingsphere.infra.config.rule.RuleConfiguration;
-import org.apache.shardingsphere.infra.config.rule.decorator.RuleConfigurationDecorator;
-import org.apache.shardingsphere.infra.instance.mode.ModeContextManager;
-import org.apache.shardingsphere.infra.metadata.database.ShardingSphereDatabase;
-import org.apache.shardingsphere.infra.metadata.version.MetaDataVersion;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-
-import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.Map.Entry;
-import java.util.stream.Collectors;
-
-/**
- * Alter database rule operator.
- */
-@RequiredArgsConstructor
-public final class AlterDatabaseRuleOperator implements DatabaseRuleOperator {
-    
-    private final ContextManager contextManager;
-    
-    @SuppressWarnings("rawtypes")
-    private final DatabaseRuleAlterExecutor executor;
-    
-    @Override
-    @SuppressWarnings("unchecked")
-    public Collection<MetaDataVersion> operate(final DatabaseRuleDefinitionStatement sqlStatement, final ShardingSphereDatabase database, final RuleConfiguration currentRuleConfig) {
-        RuleConfiguration toBeAlteredRuleConfig = executor.buildToBeAlteredRuleConfiguration(sqlStatement);
-        ModeContextManager modeContextManager = contextManager.getInstanceContext().getModeContextManager();
-        RuleConfiguration toBeDroppedRuleConfig = executor.buildToBeDroppedRuleConfiguration(toBeAlteredRuleConfig);
-        modeContextManager.removeRuleConfigurationItem(database.getName(), toBeDroppedRuleConfig);
-        return modeContextManager.alterRuleConfiguration(database.getName(), decorateRuleConfiguration(database, toBeAlteredRuleConfig));
-    }
-    
-    @SuppressWarnings("unchecked")
-    private RuleConfiguration decorateRuleConfiguration(final ShardingSphereDatabase database, final RuleConfiguration ruleConfig) {
-        return TypedSPILoader.findService(RuleConfigurationDecorator.class, ruleConfig.getClass()).map(optional -> optional.decorate(database.getName(),
-                database.getResourceMetaData().getStorageUnits().entrySet().stream()
-                        .collect(Collectors.toMap(Entry::getKey, entry -> entry.getValue().getDataSource(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new)),
-                database.getRuleMetaData().getRules(), ruleConfig)).orElse(ruleConfig);
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/database/type/CreateDatabaseRuleOperator.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/database/type/CreateDatabaseRuleOperator.java
deleted file mode 100644
index 919cac5c..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/database/type/CreateDatabaseRuleOperator.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.engine.database.type;
-
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.engine.database.DatabaseRuleOperator;
-import org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.spi.database.DatabaseRuleCreateExecutor;
-import org.apache.shardingsphere.distsql.statement.rdl.rule.database.DatabaseRuleDefinitionStatement;
-import org.apache.shardingsphere.infra.config.rule.RuleConfiguration;
-import org.apache.shardingsphere.infra.config.rule.decorator.RuleConfigurationDecorator;
-import org.apache.shardingsphere.infra.instance.mode.ModeContextManager;
-import org.apache.shardingsphere.infra.metadata.database.ShardingSphereDatabase;
-import org.apache.shardingsphere.infra.metadata.version.MetaDataVersion;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-
-import java.util.Collection;
-import java.util.LinkedHashMap;
-import java.util.Map.Entry;
-import java.util.stream.Collectors;
-
-/**
- * Create database rule operator.
- */
-@RequiredArgsConstructor
-public final class CreateDatabaseRuleOperator implements DatabaseRuleOperator {
-    
-    private final ContextManager contextManager;
-    
-    @SuppressWarnings("rawtypes")
-    private final DatabaseRuleCreateExecutor executor;
-    
-    @Override
-    @SuppressWarnings("unchecked")
-    public Collection<MetaDataVersion> operate(final DatabaseRuleDefinitionStatement sqlStatement, final ShardingSphereDatabase database, final RuleConfiguration currentRuleConfig) {
-        RuleConfiguration toBeCreatedRuleConfig = executor.buildToBeCreatedRuleConfiguration(sqlStatement);
-        ModeContextManager modeContextManager = contextManager.getInstanceContext().getModeContextManager();
-        return modeContextManager.alterRuleConfiguration(database.getName(), decorateRuleConfiguration(database, toBeCreatedRuleConfig));
-    }
-    
-    @SuppressWarnings("unchecked")
-    private RuleConfiguration decorateRuleConfiguration(final ShardingSphereDatabase database, final RuleConfiguration ruleConfig) {
-        return TypedSPILoader.findService(RuleConfigurationDecorator.class, ruleConfig.getClass()).map(optional -> optional.decorate(database.getName(),
-                database.getResourceMetaData().getStorageUnits().entrySet().stream()
-                        .collect(Collectors.toMap(Entry::getKey, entry -> entry.getValue().getDataSource(), (oldValue, currentValue) -> oldValue, LinkedHashMap::new)),
-                database.getRuleMetaData().getRules(), ruleConfig)).orElse(ruleConfig);
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/global/GlobalRuleDefinitionExecuteEngine.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/global/GlobalRuleDefinitionExecuteEngine.java
deleted file mode 100644
index 77d67dfc..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/distsql-handler/src/main/java/org/apache/shardingsphere/distsql/handler/engine/update/rdl/rule/engine/global/GlobalRuleDefinitionExecuteEngine.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.engine.global;
-
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.distsql.handler.engine.update.rdl.rule.spi.global.GlobalRuleDefinitionExecutor;
-import org.apache.shardingsphere.distsql.statement.rdl.rule.global.GlobalRuleDefinitionStatement;
-import org.apache.shardingsphere.infra.config.rule.RuleConfiguration;
-import org.apache.shardingsphere.infra.rule.ShardingSphereRule;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-
-import java.util.Collection;
-
-/**
- * Global rule definition execute engine.
- */
-@RequiredArgsConstructor
-public final class GlobalRuleDefinitionExecuteEngine {
-    
-    private final GlobalRuleDefinitionStatement sqlStatement;
-    
-    private final ContextManager contextManager;
-    
-    @SuppressWarnings("rawtypes")
-    private final GlobalRuleDefinitionExecutor executor;
-    
-    /**
-     * Execute update.
-     */
-    @SuppressWarnings("unchecked")
-    public void executeUpdate() {
-        ShardingSphereRule rule = contextManager.getMetaDataContexts().getMetaData().getGlobalRuleMetaData().getSingleRule(executor.getRuleClass());
-        executor.setRule(rule);
-        executor.checkBeforeUpdate(sqlStatement);
-        contextManager.getInstanceContext().getModeContextManager().alterGlobalRuleConfiguration(processUpdate(sqlStatement, rule));
-    }
-    
-    @SuppressWarnings("unchecked")
-    private RuleConfiguration processUpdate(final GlobalRuleDefinitionStatement sqlStatement, final ShardingSphereRule rule) {
-        RuleConfiguration result = executor.buildToBeAlteredRuleConfiguration(sqlStatement);
-        Collection<RuleConfiguration> ruleConfigs = contextManager.getMetaDataContexts().getMetaData().getGlobalRuleMetaData().getConfigurations();
-        ruleConfigs.remove(rule.getConfiguration());
-        ruleConfigs.add(result);
-        return result;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/exception/dialect/core/src/main/java/org/apache/shardingsphere/infra/exception/dialect/exception/syntax/database/DatabaseCreateExistsException.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/exception/dialect/core/src/main/java/org/apache/shardingsphere/infra/exception/dialect/exception/syntax/database/DatabaseCreateExistsException.java
deleted file mode 100644
index ed4dda4b..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/exception/dialect/core/src/main/java/org/apache/shardingsphere/infra/exception/dialect/exception/syntax/database/DatabaseCreateExistsException.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.exception.dialect.exception.syntax.database;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.infra.exception.dialect.exception.SQLDialectException;
-
-/**
- * Database create exists exception.
- */
-@RequiredArgsConstructor
-@Getter
-public final class DatabaseCreateExistsException extends SQLDialectException {
-    
-    private static final long serialVersionUID = 779787160167652641L;
-    
-    private final String databaseName;
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/exception/dialect/core/src/main/java/org/apache/shardingsphere/infra/exception/dialect/exception/transaction/TableModifyInTransactionException.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/exception/dialect/core/src/main/java/org/apache/shardingsphere/infra/exception/dialect/exception/transaction/TableModifyInTransactionException.java
deleted file mode 100644
index 2160d56b..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/exception/dialect/core/src/main/java/org/apache/shardingsphere/infra/exception/dialect/exception/transaction/TableModifyInTransactionException.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.exception.dialect.exception.transaction;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-import org.apache.shardingsphere.infra.exception.dialect.exception.SQLDialectException;
-
-/**
- * Table modify in transaction exception.
- */
-@RequiredArgsConstructor
-@Getter
-public final class TableModifyInTransactionException extends SQLDialectException {
-    
-    private static final long serialVersionUID = 5676889868293244575L;
-    
-    private final String tableName;
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/execute/result/query/impl/driver/jdbc/type/memory/QueryResultDataRowLoader.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/execute/result/query/impl/driver/jdbc/type/memory/QueryResultDataRowLoader.java
deleted file mode 100644
index 7555c78a..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/executor/src/main/java/org/apache/shardingsphere/infra/executor/sql/execute/result/query/impl/driver/jdbc/type/memory/QueryResultDataRowLoader.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.executor.sql.execute.result.query.impl.driver.jdbc.type.memory;
-
-import org.apache.shardingsphere.infra.database.core.resultset.ResultSetMapper;
-import org.apache.shardingsphere.infra.database.core.type.DatabaseType;
-import org.apache.shardingsphere.infra.executor.sql.execute.result.query.type.memory.row.MemoryQueryResultDataRow;
-
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.LinkedList;
-import java.util.List;
-
-/**
- * Query result data row loader.
- */
-public final class QueryResultDataRowLoader {
-    
-    private final ResultSetMapper resultSetMapper;
-    
-    public QueryResultDataRowLoader(final DatabaseType databaseType) {
-        resultSetMapper = new ResultSetMapper(databaseType);
-    }
-    
-    /**
-     * Load query result data row.
-     * 
-     * @param columnCount column count
-     * @param resultSet result set
-     * @return query result data row
-     * @throws SQLException SQL exception
-     */
-    public Collection<MemoryQueryResultDataRow> load(final int columnCount, final ResultSet resultSet) throws SQLException {
-        Collection<MemoryQueryResultDataRow> result = new LinkedList<>();
-        while (resultSet.next()) {
-            List<Object> rowData = new ArrayList<>(columnCount);
-            for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
-                Object rowValue = resultSetMapper.load(resultSet, columnIndex);
-                rowData.add(resultSet.wasNull() ? null : rowValue);
-            }
-            result.add(new MemoryQueryResultDataRow(rowData));
-        }
-        return result;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/result/query/impl/driver/jdbc/metadata/JDBCQueryResultMetaDataTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/result/query/impl/driver/jdbc/metadata/JDBCQueryResultMetaDataTest.java
deleted file mode 100644
index 7caa2f20..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/executor/src/test/java/org/apache/shardingsphere/infra/executor/sql/execute/result/query/impl/driver/jdbc/metadata/JDBCQueryResultMetaDataTest.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.executor.sql.execute.result.query.impl.driver.jdbc.metadata;
-
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-
-import java.sql.ResultSetMetaData;
-import java.sql.SQLException;
-import java.sql.Types;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-class JDBCQueryResultMetaDataTest {
-    
-    private JDBCQueryResultMetaData queryResultMetaData;
-    
-    @BeforeEach
-    void setUp() throws SQLException {
-        queryResultMetaData = new JDBCQueryResultMetaData(mockResultSetMetaData());
-    }
-    
-    private ResultSetMetaData mockResultSetMetaData() throws SQLException {
-        ResultSetMetaData result = mock(ResultSetMetaData.class);
-        when(result.getColumnCount()).thenReturn(1);
-        when(result.getColumnName(1)).thenReturn("order_id");
-        when(result.getColumnLabel(1)).thenReturn("oid");
-        when(result.getColumnTypeName(1)).thenReturn("INT");
-        when(result.getTableName(1)).thenReturn("order");
-        when(result.getColumnType(1)).thenReturn(Types.INTEGER);
-        when(result.getColumnDisplaySize(1)).thenReturn(10);
-        when(result.getScale(1)).thenReturn(0);
-        when(result.isSigned(1)).thenReturn(true);
-        when(result.isNullable(1)).thenReturn(ResultSetMetaData.columnNoNulls);
-        when(result.isAutoIncrement(1)).thenReturn(true);
-        return result;
-    }
-    
-    @Test
-    void assertGetColumnCount() throws SQLException {
-        assertThat(queryResultMetaData.getColumnCount(), is(1));
-    }
-    
-    @Test
-    void assertGetColumnName() throws SQLException {
-        assertThat(queryResultMetaData.getColumnName(1), is("order_id"));
-    }
-    
-    @Test
-    void assertGetColumnLabel() throws SQLException {
-        assertThat(queryResultMetaData.getColumnLabel(1), is("oid"));
-    }
-    
-    @Test
-    void assertGetColumnTypeName() throws SQLException {
-        assertThat(queryResultMetaData.getColumnTypeName(1), is("INT"));
-    }
-    
-    @Test
-    void assertGetTableName() throws SQLException {
-        assertThat(queryResultMetaData.getTableName(1), is("order"));
-    }
-    
-    @Test
-    void assertGetColumnType() throws SQLException {
-        assertThat(queryResultMetaData.getColumnType(1), is(Types.INTEGER));
-    }
-    
-    @Test
-    void assertGetColumnLength() throws SQLException {
-        assertThat(queryResultMetaData.getColumnLength(1), is(10));
-    }
-    
-    @Test
-    void assertGetDecimals() throws SQLException {
-        assertThat(queryResultMetaData.getDecimals(1), is(0));
-    }
-    
-    @Test
-    void assertIsSigned() throws SQLException {
-        assertTrue(queryResultMetaData.isSigned(1));
-    }
-    
-    @Test
-    void assertIsNotNull() throws SQLException {
-        assertTrue(queryResultMetaData.isNotNull(1));
-    }
-    
-    @Test
-    void assertIsAutoIncrement() throws SQLException {
-        assertTrue(queryResultMetaData.isAutoIncrement(1));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/reachability-metadata/src/main/resources/META-INF/native-image/org.apache.shardingsphere.elasticjob/elasticjob-lite-core/3.0.4/reflect-config.json b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/reachability-metadata/src/main/resources/META-INF/native-image/org.apache.shardingsphere.elasticjob/elasticjob-lite-core/3.0.4/reflect-config.json
deleted file mode 100644
index ee1b6fda..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/reachability-metadata/src/main/resources/META-INF/native-image/org.apache.shardingsphere.elasticjob/elasticjob-lite-core/3.0.4/reflect-config.json
+++ /dev/null
@@ -1,55 +0,0 @@
-[
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.internal.instance.InstanceNode"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.handler.sharding.JobInstance",
-  "allDeclaredFields":true,
-  "methods":[{"name":"getJobInstanceId","parameterTypes":[] }, {"name":"getLabels","parameterTypes":[] }, {"name":"getServerIp","parameterTypes":[] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.executor.ElasticJobExecutor"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "methods":[{"name":"setCron","parameterTypes":["java.lang.String"] }, {"name":"setProps","parameterTypes":["java.util.Properties"] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "allDeclaredFields":true,
-  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"setDescription","parameterTypes":["java.lang.String"] }, {"name":"setDisabled","parameterTypes":["boolean"] }, {"name":"setFailover","parameterTypes":["boolean"] }, {"name":"setJobName","parameterTypes":["java.lang.String"] }, {"name":"setJobParameter","parameterTypes":["java.lang.String"] }, {"name":"setMaxTimeDiffSeconds","parameterTypes":["int"] }, {"name":"setMisfire","parameterTypes":["boolean"] }, {"name":"setMonitorExecution","parameterTypes":["boolean"] }, {"name":"setOverwrite","parameterTypes":["boolean"] }, {"name":"setReconcileIntervalMinutes","parameterTypes":["int"] }, {"name":"setShardingItemParameters","parameterTypes":["java.lang.String"] }, {"name":"setShardingTotalCount","parameterTypes":["int"] }, {"name":"setStaticSharding","parameterTypes":["boolean"] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.api.bootstrap.impl.ScheduleJobBootstrap"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "methods":[{"name":"setCron","parameterTypes":["java.lang.String"] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.internal.config.ConfigurationService"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "allDeclaredFields":true,
-  "methods":[{"name":"getCron","parameterTypes":[] }, {"name":"getDescription","parameterTypes":[] }, {"name":"getJobErrorHandlerType","parameterTypes":[] }, {"name":"getJobExecutorServiceHandlerType","parameterTypes":[] }, {"name":"getJobExtraConfigurations","parameterTypes":[] }, {"name":"getJobListenerTypes","parameterTypes":[] }, {"name":"getJobName","parameterTypes":[] }, {"name":"getJobParameter","parameterTypes":[] }, {"name":"getJobShardingStrategyType","parameterTypes":[] }, {"name":"getLabel","parameterTypes":[] }, {"name":"getMaxTimeDiffSeconds","parameterTypes":[] }, {"name":"getProps","parameterTypes":[] }, {"name":"getReconcileIntervalMinutes","parameterTypes":[] }, {"name":"getShardingItemParameters","parameterTypes":[] }, {"name":"getShardingTotalCount","parameterTypes":[] }, {"name":"getTimeZone","parameterTypes":[] }, {"name":"isDisabled","parameterTypes":[] }, {"name":"isFailover","parameterTypes":[] }, {"name":"isMisfire","parameterTypes":[] }, {"name":"isMonitorExecution","parameterTypes":[] }, {"name":"isOverwrite","parameterTypes":[] }, {"name":"isStaticSharding","parameterTypes":[] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.internal.failover.FailoverListenerManager"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "methods":[{"name":"setCron","parameterTypes":["java.lang.String"] }, {"name":"setProps","parameterTypes":["java.util.Properties"] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.internal.reconcile.ReconcileService"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "methods":[{"name":"setCron","parameterTypes":["java.lang.String"] }, {"name":"setProps","parameterTypes":["java.util.Properties"] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingListenerManager$ListenServersChangedJobListener"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "methods":[{"name":"setCron","parameterTypes":["java.lang.String"] }, {"name":"setProps","parameterTypes":["java.util.Properties"] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.internal.sharding.ShardingListenerManager$ShardingTotalCountChangedJobListener"},
-  "name":"org.apache.shardingsphere.elasticjob.infra.pojo.JobConfigurationPOJO",
-  "methods":[{"name":"setCron","parameterTypes":["java.lang.String"] }, {"name":"setProps","parameterTypes":["java.util.Properties"] }]
-},
-{
-  "condition":{"typeReachable":"org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobScheduler"},
-  "name":"org.apache.shardingsphere.elasticjob.lite.internal.schedule.JobShutdownHookPlugin",
-  "methods":[{"name":"<init>","parameterTypes":[] }, {"name":"setCleanShutdown","parameterTypes":["boolean"] }]
-}
-]
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/rewrite/src/test/java/org/apache/shardingsphere/infra/rewrite/token/generator/keygen/GeneratedKeyForUseDefaultInsertColumnsTokenGeneratorTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/rewrite/src/test/java/org/apache/shardingsphere/infra/rewrite/token/generator/keygen/GeneratedKeyForUseDefaultInsertColumnsTokenGeneratorTest.java
deleted file mode 100644
index cead9b74..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/infra/rewrite/src/test/java/org/apache/shardingsphere/infra/rewrite/token/generator/keygen/GeneratedKeyForUseDefaultInsertColumnsTokenGeneratorTest.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.infra.rewrite.token.generator.keygen;
-
-import org.apache.shardingsphere.infra.binder.context.segment.insert.keygen.GeneratedKeyContext;
-import org.apache.shardingsphere.infra.binder.context.statement.dml.InsertStatementContext;
-import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.column.InsertColumnsSegment;
-import org.junit.jupiter.api.Test;
-
-import java.util.Collections;
-import java.util.Optional;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-class GeneratedKeyForUseDefaultInsertColumnsTokenGeneratorTest {
-    
-    @Test
-    void assertGenerateSQLToken() {
-        InsertColumnsSegment insertColumnsSegment = mock(InsertColumnsSegment.class);
-        final int testStopIndex = 4;
-        when(insertColumnsSegment.getStopIndex()).thenReturn(testStopIndex);
-        InsertStatementContext insertStatementContext = mock(InsertStatementContext.class, RETURNS_DEEP_STUBS);
-        when(insertStatementContext.getSqlStatement().getInsertColumns()).thenReturn(Optional.of(insertColumnsSegment));
-        GeneratedKeyContext generatedKeyContext = mock(GeneratedKeyContext.class);
-        final String testColumnName = "TEST_COLUMN_NAME";
-        when(generatedKeyContext.getColumnName()).thenReturn(testColumnName);
-        when(insertStatementContext.getGeneratedKeyContext()).thenReturn(Optional.of(generatedKeyContext));
-        when(insertStatementContext.getColumnNames()).thenReturn(Collections.emptyList());
-        GeneratedKeyForUseDefaultInsertColumnsTokenGenerator generatedKeyForUseDefaultInsertColumnsTokenGenerator = new GeneratedKeyForUseDefaultInsertColumnsTokenGenerator();
-        assertThat(generatedKeyForUseDefaultInsertColumnsTokenGenerator.generateSQLToken(insertStatementContext).toString(), is(("(" + testColumnName) + ")"));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/authority/core/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.yaml.config.swapper.rule.NewYamlGlobalRuleConfigurationSwapper b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/authority/core/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.yaml.config.swapper.rule.NewYamlGlobalRuleConfigurationSwapper
deleted file mode 100644
index 1084e91c..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/authority/core/src/main/resources/META-INF/services/org.apache.shardingsphere.infra.yaml.config.swapper.rule.NewYamlGlobalRuleConfigurationSwapper
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.authority.yaml.swapper.NewYamlAuthorityRuleConfigurationSwapper
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/job/progress/config/yaml/config/YamlPipelineWriteConfiguration.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/job/progress/config/yaml/config/YamlPipelineWriteConfiguration.java
deleted file mode 100644
index ea632dc4..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/job/progress/config/yaml/config/YamlPipelineWriteConfiguration.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.core.job.progress.config.yaml.config;
-
-import lombok.Getter;
-import lombok.Setter;
-import org.apache.shardingsphere.infra.util.yaml.YamlConfiguration;
-import org.apache.shardingsphere.infra.algorithm.core.yaml.YamlAlgorithmConfiguration;
-
-/**
- * YAML pipeline write configuration.
- */
-@Getter
-@Setter
-public final class YamlPipelineWriteConfiguration implements YamlConfiguration {
-    
-    private static final Integer DEFAULT_WORKER_THREAD = 20;
-    
-    private static final Integer DEFAULT_BATCH_SIZE = 1000;
-    
-    private Integer workerThread;
-    
-    private Integer batchSize;
-    
-    private YamlAlgorithmConfiguration rateLimiter;
-    
-    /**
-     * Build with default value.
-     *
-     * @return write configuration
-     */
-    public static YamlPipelineWriteConfiguration buildWithDefaultValue() {
-        YamlPipelineWriteConfiguration result = new YamlPipelineWriteConfiguration();
-        result.workerThread = DEFAULT_WORKER_THREAD;
-        result.batchSize = DEFAULT_BATCH_SIZE;
-        return result;
-    }
-    
-    /**
-     * Fill in null fields with default value.
-     */
-    public void fillInNullFieldsWithDefaultValue() {
-        if (null == workerThread) {
-            workerThread = DEFAULT_WORKER_THREAD;
-        }
-        if (null == batchSize) {
-            batchSize = DEFAULT_BATCH_SIZE;
-        }
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/metadata/node/config/processor/JobConfigurationChangedProcessor.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/metadata/node/config/processor/JobConfigurationChangedProcessor.java
deleted file mode 100644
index 75ef340e..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/metadata/node/config/processor/JobConfigurationChangedProcessor.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.core.metadata.node.config.processor;
-
-import org.apache.shardingsphere.data.pipeline.core.job.PipelineJob;
-import org.apache.shardingsphere.data.pipeline.core.job.config.PipelineJobConfiguration;
-import org.apache.shardingsphere.elasticjob.api.JobConfiguration;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPI;
-
-/**
- * Job configuration changed processor.
- * 
- * @param <T> type of pipeline job configuration
- */
-public interface JobConfigurationChangedProcessor<T extends PipelineJobConfiguration> extends TypedSPI {
-    
-    /**
-     * Create pipeline job.
-     *
-     * @param jobConfig pipeline job configuration
-     * @return pipeline job
-     */
-    PipelineJob createJob(T jobConfig);
-    
-    /**
-     * Clean pipeline job.
-     * 
-     * @param jobConfig pipeline job configuration
-     */
-    default void clean(final JobConfiguration jobConfig) {
-    }
-    
-    @Override
-    String getType();
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/metadata/node/event/handler/PipelineMetaDataChangedEventHandler.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/metadata/node/event/handler/PipelineMetaDataChangedEventHandler.java
deleted file mode 100644
index bfa8b438..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/metadata/node/event/handler/PipelineMetaDataChangedEventHandler.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.core.metadata.node.event.handler;
-
-import org.apache.shardingsphere.infra.spi.annotation.SingletonSPI;
-import org.apache.shardingsphere.mode.event.DataChangedEvent;
-
-import java.util.regex.Pattern;
-
-/**
- * Pipeline meta data changed event handler.
- */
-@SingletonSPI
-public interface PipelineMetaDataChangedEventHandler {
-    
-    /**
-     * Get key pattern.
-     *
-     * @return key pattern
-     */
-    Pattern getKeyPattern();
-    
-    /**
-     * Handle meta data changed event.
-     *
-     * @param jobId job id
-     * @param event changed event
-     */
-    void handle(String jobId, DataChangedEvent event);
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/registrycenter/elasticjob/CoordinatorRegistryCenterInitializer.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/registrycenter/elasticjob/CoordinatorRegistryCenterInitializer.java
deleted file mode 100644
index 038df611..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/main/java/org/apache/shardingsphere/data/pipeline/core/registrycenter/elasticjob/CoordinatorRegistryCenterInitializer.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.core.registrycenter.elasticjob;
-
-import org.apache.shardingsphere.elasticjob.reg.base.CoordinatorRegistryCenter;
-import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperConfiguration;
-import org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter;
-import org.apache.shardingsphere.infra.config.mode.ModeConfiguration;
-import org.apache.shardingsphere.mode.repository.cluster.ClusterPersistRepositoryConfiguration;
-import org.apache.shardingsphere.mode.repository.cluster.zookeeper.props.ZookeeperProperties;
-import org.apache.shardingsphere.mode.repository.cluster.zookeeper.props.ZookeeperPropertyKey;
-
-import java.util.Properties;
-
-/**
- * {@linkplain CoordinatorRegistryCenter} initializer.
- */
-public final class CoordinatorRegistryCenterInitializer {
-    
-    /**
-     * Create ZooKeeper registry center instance.
-     *
-     * @param modeConfig mode configuration
-     * @param namespaceRelativePath namespace relative path
-     * @return registry center instance
-     */
-    public CoordinatorRegistryCenter createZookeeperRegistryCenter(final ModeConfiguration modeConfig, final String namespaceRelativePath) {
-        ClusterPersistRepositoryConfiguration repositoryConfig = (ClusterPersistRepositoryConfiguration) modeConfig.getRepository();
-        // TODO Add registry center cache. Refer to RegistryCenterFactory.createCoordinatorRegistryCenter
-        CoordinatorRegistryCenter result = new ZookeeperRegistryCenter(getZookeeperConfig(repositoryConfig, namespaceRelativePath));
-        result.init();
-        return result;
-    }
-    
-    private ZookeeperConfiguration getZookeeperConfig(final ClusterPersistRepositoryConfiguration repositoryConfig, final String namespaceRelativePath) {
-        // TODO Merge registry center code in ElasticJob and ShardingSphere mode; Use SPI to load impl
-        Properties props = repositoryConfig.getProps();
-        ZookeeperProperties zookeeperProps = new ZookeeperProperties(props);
-        String namespace = repositoryConfig.getNamespace() + (null != namespaceRelativePath ? namespaceRelativePath : "");
-        ZookeeperConfiguration result = new ZookeeperConfiguration(repositoryConfig.getServerLists(), namespace);
-        int retryIntervalMilliseconds = zookeeperProps.getValue(ZookeeperPropertyKey.RETRY_INTERVAL_MILLISECONDS);
-        result.setBaseSleepTimeMilliseconds(retryIntervalMilliseconds);
-        int maxRetries = zookeeperProps.getValue(ZookeeperPropertyKey.MAX_RETRIES);
-        result.setMaxRetries(maxRetries);
-        result.setMaxSleepTimeMilliseconds(retryIntervalMilliseconds * maxRetries);
-        int timeToLiveSeconds = zookeeperProps.getValue(ZookeeperPropertyKey.TIME_TO_LIVE_SECONDS);
-        if (0 != timeToLiveSeconds) {
-            result.setSessionTimeoutMilliseconds(timeToLiveSeconds * 1000);
-        }
-        int operationTimeoutMilliseconds = zookeeperProps.getValue(ZookeeperPropertyKey.OPERATION_TIMEOUT_MILLISECONDS);
-        if (0 != operationTimeoutMilliseconds) {
-            result.setConnectionTimeoutMilliseconds(operationTimeoutMilliseconds);
-        }
-        result.setDigest(zookeeperProps.getValue(ZookeeperPropertyKey.DIGEST));
-        return result;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/java/org/apache/shardingsphere/data/pipeline/core/ingest/position/type/pk/type/StringPrimaryKeyIngestPositionTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/java/org/apache/shardingsphere/data/pipeline/core/ingest/position/type/pk/type/StringPrimaryKeyIngestPositionTest.java
deleted file mode 100644
index 0b0a9a2d..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/java/org/apache/shardingsphere/data/pipeline/core/ingest/position/type/pk/type/StringPrimaryKeyIngestPositionTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.core.ingest.position.type.pk.type;
-
-import org.apache.shardingsphere.data.pipeline.core.ingest.position.type.pk.PrimaryKeyIngestPositionFactory;
-import org.junit.jupiter.api.Test;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertNull;
-
-class StringPrimaryKeyIngestPositionTest {
-    
-    @Test
-    void assertInit() {
-        StringPrimaryKeyIngestPosition position = (StringPrimaryKeyIngestPosition) PrimaryKeyIngestPositionFactory.newInstance("s,hi,jk");
-        assertThat(position.getBeginValue(), is("hi"));
-        assertThat(position.getEndValue(), is("jk"));
-    }
-    
-    @Test
-    void assertToString() {
-        assertThat(new StringPrimaryKeyIngestPosition("hi", "jk").toString(), is("s,hi,jk"));
-    }
-    
-    @Test
-    void assertEmptyToNull() {
-        StringPrimaryKeyIngestPosition actual = (StringPrimaryKeyIngestPosition) PrimaryKeyIngestPositionFactory.newInstance("s,,");
-        assertNull(actual.getBeginValue());
-        assertNull(actual.getEndValue());
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.ingest.position.DialectIngestPositionManager b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.ingest.position.DialectIngestPositionManager
deleted file mode 100644
index af39b04d..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.ingest.position.DialectIngestPositionManager
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.data.pipeline.core.ingest.position.FixtureIngestPositionManager
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.sqlbuilder.dialect.DialectPipelineSQLBuilder b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.sqlbuilder.dialect.DialectPipelineSQLBuilder
deleted file mode 100644
index 369965d8..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/core/src/test/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.sqlbuilder.dialect.DialectPipelineSQLBuilder
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.data.pipeline.core.sqlbuilder.fixture.FixturePipelineSQLBuilder
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/impl/MySQLUnsignedSmallintHandler.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/impl/MySQLUnsignedSmallintHandler.java
deleted file mode 100644
index 2fa41e24..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/impl/MySQLUnsignedSmallintHandler.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value.impl;
-
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value.MySQLDataTypeHandler;
-
-import java.io.Serializable;
-
-/**
- * MySQL unsigned smallint handler.
- */
-public final class MySQLUnsignedSmallintHandler implements MySQLDataTypeHandler {
-    
-    private static final int SMALLINT_MODULO = 65536;
-    
-    @Override
-    public Serializable handle(final Serializable value) {
-        if (null == value) {
-            return null;
-        }
-        short shortValue = (short) value;
-        return 0 > shortValue ? SMALLINT_MODULO + shortValue : shortValue;
-    }
-    
-    @Override
-    public String getType() {
-        return "SMALLINT UNSIGNED";
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/impl/MySQLUnsignedTinyintHandler.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/impl/MySQLUnsignedTinyintHandler.java
deleted file mode 100644
index 0fa7a707..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/impl/MySQLUnsignedTinyintHandler.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value.impl;
-
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value.MySQLDataTypeHandler;
-
-import java.io.Serializable;
-
-/**
- * MySQL unsigned tinyint handler.
- */
-public final class MySQLUnsignedTinyintHandler implements MySQLDataTypeHandler {
-    
-    private static final int TINYINT_MODULO = 256;
-    
-    @Override
-    public Serializable handle(final Serializable value) {
-        if (null == value) {
-            return null;
-        }
-        byte byteValue = (byte) value;
-        return 0 > byteValue ? TINYINT_MODULO + byteValue : byteValue;
-    }
-    
-    @Override
-    public String getType() {
-        return "TINYINT UNSIGNED";
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.query.DialectJDBCStreamQueryBuilder b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.query.DialectJDBCStreamQueryBuilder
deleted file mode 100644
index 85a34cbb..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/main/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.query.DialectJDBCStreamQueryBuilder
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.data.pipeline.mysql.query.MySQLJDBCStreamQueryBuilder
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/client/netty/MySQLBinlogEventPacketDecoderTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/client/netty/MySQLBinlogEventPacketDecoderTest.java
deleted file mode 100644
index 3aa102d5..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/client/netty/MySQLBinlogEventPacketDecoderTest.java
+++ /dev/null
@@ -1,223 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.mysql.ingest.client.netty;
-
-import com.google.common.collect.Lists;
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.ByteBufAllocator;
-import io.netty.buffer.Unpooled;
-import io.netty.channel.ChannelHandlerContext;
-import io.netty.util.internal.StringUtil;
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.binlog.BinlogContext;
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.binlog.event.DeleteRowsEvent;
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.binlog.event.QueryEvent;
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.binlog.event.UpdateRowsEvent;
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.binlog.event.WriteRowsEvent;
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.binlog.event.XidEvent;
-import org.apache.shardingsphere.db.protocol.constant.CommonConstants;
-import org.apache.shardingsphere.db.protocol.mysql.constant.MySQLBinaryColumnType;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.MySQLBinlogTableMapEventPacket;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.MySQLBinlogColumnDef;
-import org.apache.shardingsphere.db.protocol.mysql.packet.binlog.row.column.value.string.MySQLBinaryString;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Answers;
-import org.mockito.Mock;
-import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.io.Serializable;
-import java.nio.charset.StandardCharsets;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.concurrent.ConcurrentHashMap;
-
-import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertInstanceOf;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.jupiter.api.Assertions.assertTrue;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLBinlogEventPacketDecoderTest {
-    
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
-    private ChannelHandlerContext channelHandlerContext;
-    
-    @Mock
-    private MySQLBinlogTableMapEventPacket tableMapEventPacket;
-    
-    private BinlogContext binlogContext;
-    
-    private MySQLBinlogEventPacketDecoder binlogEventPacketDecoder;
-    
-    private List<MySQLBinlogColumnDef> columnDefs;
-    
-    @BeforeEach
-    void setUp() throws NoSuchFieldException, IllegalAccessException {
-        binlogEventPacketDecoder = new MySQLBinlogEventPacketDecoder(4, new ConcurrentHashMap<>(), true);
-        binlogContext = (BinlogContext) Plugins.getMemberAccessor().get(MySQLBinlogEventPacketDecoder.class.getDeclaredField("binlogContext"), binlogEventPacketDecoder);
-        when(channelHandlerContext.channel().attr(CommonConstants.CHARSET_ATTRIBUTE_KEY).get()).thenReturn(StandardCharsets.UTF_8);
-        columnDefs = Lists.newArrayList(new MySQLBinlogColumnDef(MySQLBinaryColumnType.LONGLONG), new MySQLBinlogColumnDef(MySQLBinaryColumnType.LONG),
-                new MySQLBinlogColumnDef(MySQLBinaryColumnType.VARCHAR), new MySQLBinlogColumnDef(MySQLBinaryColumnType.NEWDECIMAL));
-    }
-    
-    @Test
-    void assertDecodeWithPacketError() {
-        ByteBuf byteBuf = Unpooled.buffer();
-        byteBuf.writeByte(1);
-        byteBuf.writeByte(255);
-        byteBuf.writeBytes(new byte[20]);
-        assertThrows(RuntimeException.class, () -> binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, null));
-    }
-    
-    @Test
-    void assertDecodeRotateEvent() {
-        ByteBuf byteBuf = Unpooled.buffer();
-        byteBuf.writeBytes(StringUtil.decodeHexDump("000000000004010000002c0000000000000020001a9100000000000062696e6c6f672e3030303032394af65c24"));
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertTrue(decodedEvents.isEmpty());
-        assertThat(binlogContext.getFileName(), is("binlog.000029"));
-    }
-    
-    @Test
-    void assertDecodeFormatDescriptionEvent() {
-        ByteBuf byteBuf = Unpooled.buffer();
-        byteBuf.writeBytes(StringUtil.decodeHexDump("00513aa8620f01000000790000000000000000000400382e302e323700000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
-                + "000000000013000d0008000000000400040000006100041a08000000080808020000000a0a0a2a2a001234000a280140081396"));
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertTrue(decodedEvents.isEmpty());
-        assertThat(binlogContext.getChecksumLength(), is(4));
-    }
-    
-    @Test
-    void assertDecodeQueryEvent() {
-        ByteBuf byteBuf = Unpooled.buffer();
-        byteBuf.writeBytes(StringUtil.decodeHexDump("00f3e25665020100000087000000c2740f0a0400c9150000000000000400002d000000000000012000a045000000000603737464042d002d00e0000c0164735f3000116df40b00000"
-                + "0000012ff0064735f300044524f50205441424c452060745f70726f76696e636560202f2a2067656e65726174656420627920736572766572202a2fcefe4ec6"));
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertFalse(decodedEvents.isEmpty());
-        Object actual = decodedEvents.get(0);
-        assertInstanceOf(QueryEvent.class, actual);
-        assertThat(((QueryEvent) actual).getTimestamp(), is(1700193011L));
-        assertThat(((QueryEvent) actual).getPosition(), is(168785090L));
-    }
-    
-    @Test
-    void assertDecodeTableMapEvent() {
-        ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();
-        // the hex data is from binlog data, The first event used in Row Based Replication
-        byteBuf.writeBytes(StringUtil.decodeHexDump("00cb38a962130100000041000000be7d000000007b000000000001000464735f310009745f6f726465725f31000408030ff604c8000a020c0101000201e0ff0a9b3a"));
-        binlogContext.getTableMap().put(123L, tableMapEventPacket);
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertThat(binlogContext.getTableMap().size(), is(1));
-        assertThat(binlogContext.getTableMap().get(123L), instanceOf(MySQLBinlogTableMapEventPacket.class));
-    }
-    
-    @Test
-    void assertDecodeWriteRowEvent() {
-        ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();
-        // the hex data is from INSERT INTO t_order(order_id, user_id, status, t_numeric) VALUES (1, 1, 'SUCCESS',null);
-        byteBuf.writeBytes(StringUtil.decodeHexDump("007a36a9621e0100000038000000bb7c000000007b00000000000100020004ff08010000000000000001000000075355434345535365eff9ff"));
-        byteBuf.writeBytes(StringUtil.decodeHexDump("006acb656410010000001f000000fa29000000001643000000000000b13f8340"));
-        binlogContext.getTableMap().put(123L, tableMapEventPacket);
-        when(tableMapEventPacket.getColumnDefs()).thenReturn(columnDefs);
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertThat(decodedEvents.size(), is(1));
-        LinkedList<?> actualEventList = (LinkedList<?>) decodedEvents.get(0);
-        assertThat(actualEventList.get(0), instanceOf(WriteRowsEvent.class));
-        WriteRowsEvent actual = (WriteRowsEvent) actualEventList.get(0);
-        assertThat(actual.getAfterRows().get(0), is(new Serializable[]{1L, 1, new MySQLBinaryString("SUCCESS".getBytes()), null}));
-    }
-    
-    @Test
-    void assertDecodeUpdateRowEvent() {
-        ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();
-        // the hex data is from update t_order set status = 'updated' where order_id = 1;
-        byteBuf.writeBytes(StringUtil.decodeHexDump("00cb38a9621f010000004e0000000c7e000000007b00000000000100020004ffff08010000000000000001000000075355434345535308010000000000000001000000077570"
-                + "6461746564e78cee6c"));
-        byteBuf.writeBytes(StringUtil.decodeHexDump("006acb656410010000001f000000fa29000000001643000000000000b13f8340"));
-        binlogContext.getTableMap().put(123L, tableMapEventPacket);
-        when(tableMapEventPacket.getColumnDefs()).thenReturn(columnDefs);
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertThat(decodedEvents.size(), is(1));
-        LinkedList<?> actualEventList = (LinkedList<?>) decodedEvents.get(0);
-        assertThat(actualEventList.get(0), instanceOf(UpdateRowsEvent.class));
-        UpdateRowsEvent actual = (UpdateRowsEvent) actualEventList.get(0);
-        assertThat(actual.getBeforeRows().get(0), is(new Serializable[]{1L, 1, new MySQLBinaryString("SUCCESS".getBytes()), null}));
-        assertThat(actual.getAfterRows().get(0), is(new Serializable[]{1L, 1, new MySQLBinaryString("updated".getBytes()), null}));
-    }
-    
-    @Test
-    void assertDecodeDeleteRowEvent() {
-        ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();
-        // delete from t_order where order_id = 1;
-        byteBuf.writeBytes(StringUtil.decodeHexDump("002a80a862200100000038000000c569000000007400000000000100020004ff0801000000000000000100000007535543434553531c9580c5"));
-        byteBuf.writeBytes(StringUtil.decodeHexDump("006acb656410010000001f000000fa29000000001643000000000000b13f8340"));
-        binlogContext.getTableMap().put(116L, tableMapEventPacket);
-        when(tableMapEventPacket.getColumnDefs()).thenReturn(columnDefs);
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertThat(decodedEvents.size(), is(1));
-        LinkedList<?> actualEventList = (LinkedList<?>) decodedEvents.get(0);
-        assertThat(actualEventList.get(0), instanceOf(DeleteRowsEvent.class));
-        assertThat(actualEventList.get(1), instanceOf(XidEvent.class));
-        DeleteRowsEvent actual = (DeleteRowsEvent) actualEventList.get(0);
-        assertThat(actual.getBeforeRows().get(0), is(new Serializable[]{1L, 1, new MySQLBinaryString("SUCCESS".getBytes()), null}));
-    }
-    
-    @Test
-    void assertBinlogEventHeaderIncomplete() {
-        ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();
-        byte[] completeData = StringUtil.decodeHexDump("002a80a862200100000038000000c569000000007400000000000100020004ff0801000000000000000100000007535543434553531c9580c5");
-        byteBuf.writeBytes(completeData);
-        byteBuf.writeBytes(StringUtil.decodeHexDump("006acb656410010000001f000000fa29000000001643000000000000b13f8340"));
-        // write incomplete event data
-        byteBuf.writeBytes(StringUtil.decodeHexDump("3400"));
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogContext.getTableMap().put(116L, tableMapEventPacket);
-        when(tableMapEventPacket.getColumnDefs()).thenReturn(columnDefs);
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertThat(decodedEvents.size(), is(1));
-    }
-    
-    @Test
-    void assertBinlogEventBodyIncomplete() {
-        ByteBuf byteBuf = ByteBufAllocator.DEFAULT.buffer();
-        byte[] completeData = StringUtil.decodeHexDump("002a80a862200100000038000000c569000000007400000000000100020004ff0801000000000000000100000007535543434553531c9580c5");
-        byteBuf.writeBytes(completeData);
-        byteBuf.writeBytes(StringUtil.decodeHexDump("006acb656410010000001f000000fa29000000001643000000000000b13f8340"));
-        byte[] notCompleteData = StringUtil.decodeHexDump("00cb38a962130100000041000000be7d000000007b000000000001000464735f310009745f6f726465725f31000408030f");
-        byteBuf.writeBytes(notCompleteData);
-        List<Object> decodedEvents = new LinkedList<>();
-        binlogContext.getTableMap().put(116L, tableMapEventPacket);
-        when(tableMapEventPacket.getColumnDefs()).thenReturn(columnDefs);
-        binlogEventPacketDecoder.decode(channelHandlerContext, byteBuf, decodedEvents);
-        assertThat(decodedEvents.size(), is(1));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/client/netty/MySQLNegotiatePackageDecoderTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/client/netty/MySQLNegotiatePackageDecoderTest.java
deleted file mode 100644
index 2a0d8fe1..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/client/netty/MySQLNegotiatePackageDecoderTest.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.mysql.ingest.client.netty;
-
-import io.netty.buffer.ByteBuf;
-import io.netty.buffer.ByteBufUtil;
-import io.netty.buffer.Unpooled;
-import io.netty.channel.ChannelHandlerContext;
-import org.apache.shardingsphere.db.protocol.constant.CommonConstants;
-import org.apache.shardingsphere.db.protocol.mysql.packet.handshake.MySQLAuthMoreDataPacket;
-import org.apache.shardingsphere.db.protocol.mysql.packet.handshake.MySQLAuthSwitchRequestPacket;
-import org.apache.shardingsphere.db.protocol.mysql.packet.handshake.MySQLHandshakePacket;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Answers;
-import org.mockito.Mock;
-import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.nio.charset.StandardCharsets;
-import java.util.LinkedList;
-import java.util.List;
-
-import static org.hamcrest.CoreMatchers.instanceOf;
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class MySQLNegotiatePackageDecoderTest {
-    
-    @Mock(answer = Answers.RETURNS_DEEP_STUBS)
-    private ChannelHandlerContext channelHandlerContext;
-    
-    @Mock
-    private ByteBuf byteBuf;
-    
-    @BeforeEach
-    void setup() {
-        when(channelHandlerContext.channel().attr(CommonConstants.CHARSET_ATTRIBUTE_KEY).get()).thenReturn(StandardCharsets.UTF_8);
-    }
-    
-    @Test
-    void assertDecodeUnsupportedProtocolVersion() {
-        MySQLNegotiatePackageDecoder commandPacketDecoder = new MySQLNegotiatePackageDecoder();
-        assertThrows(IllegalArgumentException.class, () -> commandPacketDecoder.decode(channelHandlerContext, byteBuf, null));
-    }
-    
-    @Test
-    void assertDecodeHandshakePacket() {
-        MySQLNegotiatePackageDecoder commandPacketDecoder = new MySQLNegotiatePackageDecoder();
-        List<Object> actual = new LinkedList<>();
-        commandPacketDecoder.decode(channelHandlerContext, mockHandshakePacket(), actual);
-        assertHandshakePacket(actual);
-    }
-    
-    private ByteBuf mockHandshakePacket() {
-        String handshakePacket = "0a352e372e32312d6c6f6700090000004a592a1f725a0d0900fff7210200ff8115000000000000000000001a437b30323a4d2b514b5870006d"
-                + "7973716c5f6e61746976655f70617373776f72640000000002000000";
-        byte[] handshakePacketBytes = ByteBufUtil.decodeHexDump(handshakePacket);
-        ByteBuf result = Unpooled.buffer(handshakePacketBytes.length);
-        result.writeBytes(handshakePacketBytes);
-        return result;
-    }
-    
-    private void assertHandshakePacket(final List<Object> actual) {
-        assertThat(actual.size(), is(1));
-        assertThat(actual.get(0), instanceOf(MySQLHandshakePacket.class));
-        MySQLHandshakePacket actualPacket = (MySQLHandshakePacket) actual.get(0);
-        assertThat(actualPacket.getProtocolVersion(), is(0x0a));
-        assertThat(actualPacket.getServerVersion(), is("5.7.21-log"));
-        assertThat(actualPacket.getConnectionId(), is(9));
-        assertThat(actualPacket.getCharacterSet(), is(33));
-        assertThat(actualPacket.getStatusFlag().getValue(), is(2));
-        assertThat(actualPacket.getCapabilityFlagsLower(), is(63487));
-        assertThat(actualPacket.getCapabilityFlagsUpper(), is(33279));
-        assertThat(actualPacket.getAuthPluginName(), is("mysql_native_password"));
-    }
-    
-    @Test
-    void assertDecodeAuthSwitchRequestPacket() throws ReflectiveOperationException {
-        MySQLNegotiatePackageDecoder negotiatePackageDecoder = new MySQLNegotiatePackageDecoder();
-        Plugins.getMemberAccessor().set(MySQLNegotiatePackageDecoder.class.getDeclaredField("handshakeReceived"), negotiatePackageDecoder, true);
-        List<Object> actual = new LinkedList<>();
-        negotiatePackageDecoder.decode(channelHandlerContext, authSwitchRequestPacket(), actual);
-        assertPacketByType(actual, MySQLAuthSwitchRequestPacket.class);
-    }
-    
-    private ByteBuf authSwitchRequestPacket() {
-        when(byteBuf.readUnsignedByte()).thenReturn((short) MySQLAuthSwitchRequestPacket.HEADER);
-        when(byteBuf.getByte(0)).thenReturn((byte) MySQLAuthSwitchRequestPacket.HEADER);
-        when(byteBuf.bytesBefore((byte) 0)).thenReturn(20);
-        return byteBuf;
-    }
-    
-    @Test
-    void assertDecodeAuthMoreDataPacket() throws ReflectiveOperationException {
-        MySQLNegotiatePackageDecoder negotiatePackageDecoder = new MySQLNegotiatePackageDecoder();
-        Plugins.getMemberAccessor().set(MySQLNegotiatePackageDecoder.class.getDeclaredField("handshakeReceived"), negotiatePackageDecoder, true);
-        List<Object> actual = new LinkedList<>();
-        negotiatePackageDecoder.decode(channelHandlerContext, authMoreDataPacket(), actual);
-        assertPacketByType(actual, MySQLAuthMoreDataPacket.class);
-    }
-    
-    private ByteBuf authMoreDataPacket() {
-        when(byteBuf.readUnsignedByte()).thenReturn((short) MySQLAuthMoreDataPacket.HEADER);
-        when(byteBuf.getByte(0)).thenReturn((byte) MySQLAuthMoreDataPacket.HEADER);
-        return byteBuf;
-    }
-    
-    private void assertPacketByType(final List<Object> actual, final Class<?> clazz) {
-        assertThat(actual.size(), is(1));
-        assertThat(actual.get(0), instanceOf(clazz));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/MySQLUnsignedMediumintHandlerTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/MySQLUnsignedMediumintHandlerTest.java
deleted file mode 100644
index 74805313..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/MySQLUnsignedMediumintHandlerTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value;
-
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value.impl.MySQLUnsignedMediumintHandler;
-import org.junit.jupiter.api.Test;
-
-import java.io.Serializable;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-
-class MySQLUnsignedMediumintHandlerTest {
-    
-    private final MySQLUnsignedMediumintHandler handler = new MySQLUnsignedMediumintHandler();
-    
-    @Test
-    void assertHandle() {
-        Serializable actual = handler.handle(1);
-        assertThat(actual, is(1));
-        actual = handler.handle(-1);
-        assertThat(actual, is(16777215));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/MySQLUnsignedSmallintHandlerTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/MySQLUnsignedSmallintHandlerTest.java
deleted file mode 100644
index 735d0994..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/mysql/src/test/java/org/apache/shardingsphere/data/pipeline/mysql/ingest/column/value/MySQLUnsignedSmallintHandlerTest.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value;
-
-import org.apache.shardingsphere.data.pipeline.mysql.ingest.column.value.impl.MySQLUnsignedSmallintHandler;
-import org.junit.jupiter.api.Test;
-
-import java.io.Serializable;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-
-class MySQLUnsignedSmallintHandlerTest {
-    
-    private final MySQLUnsignedSmallintHandler handler = new MySQLUnsignedSmallintHandler();
-    
-    @Test
-    void assertHandle() {
-        Serializable actual = handler.handle((short) 1);
-        assertThat(actual, is(1));
-        actual = handler.handle((short) -1);
-        assertThat(actual, is(65535));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/opengauss/src/main/java/org/apache/shardingsphere/data/pipeline/opengauss/ingest/wal/decode/OpenGaussLogSequenceNumber.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/opengauss/src/main/java/org/apache/shardingsphere/data/pipeline/opengauss/ingest/wal/decode/OpenGaussLogSequenceNumber.java
deleted file mode 100644
index 893b64f5..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/opengauss/src/main/java/org/apache/shardingsphere/data/pipeline/opengauss/ingest/wal/decode/OpenGaussLogSequenceNumber.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.opengauss.ingest.wal.decode;
-
-import lombok.RequiredArgsConstructor;
-import lombok.ToString;
-import org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal.decode.BaseLogSequenceNumber;
-import org.opengauss.replication.LogSequenceNumber;
-
-/**
- * Log sequence number of openGauss.
- */
-@RequiredArgsConstructor
-@ToString
-public final class OpenGaussLogSequenceNumber implements BaseLogSequenceNumber {
-    
-    private final LogSequenceNumber logSequenceNumber;
-    
-    @Override
-    public String asString() {
-        return logSequenceNumber.asString();
-    }
-    
-    @Override
-    public Object get() {
-        return logSequenceNumber;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/opengauss/src/main/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.checker.DialectDataSourceChecker b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/opengauss/src/main/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.checker.DialectDataSourceChecker
deleted file mode 100644
index ace6b9ed..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/opengauss/src/main/resources/META-INF/services/org.apache.shardingsphere.data.pipeline.core.checker.DialectDataSourceChecker
+++ /dev/null
@@ -1,18 +0,0 @@
-#
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-org.apache.shardingsphere.data.pipeline.opengauss.check.datasource.OpenGaussDataSourceChecker
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/main/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/wal/decode/PostgreSQLTimestampUtils.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/main/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/wal/decode/PostgreSQLTimestampUtils.java
deleted file mode 100644
index d13394fb..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/main/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/wal/decode/PostgreSQLTimestampUtils.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal.decode;
-
-import lombok.RequiredArgsConstructor;
-import org.postgresql.jdbc.TimestampUtils;
-
-import java.sql.SQLException;
-import java.sql.Time;
-import java.sql.Timestamp;
-import java.util.Calendar;
-
-/**
- * Timestamp utility class of PostgreSQL.
- */
-@RequiredArgsConstructor
-public final class PostgreSQLTimestampUtils implements BaseTimestampUtils {
-    
-    private final TimestampUtils timestampUtils;
-    
-    @Override
-    public Time toTime(final Calendar cal, final String input) throws SQLException {
-        return timestampUtils.toTime(cal, input);
-    }
-    
-    @Override
-    public Timestamp toTimestamp(final Calendar cal, final String input) throws SQLException {
-        return timestampUtils.toTimestamp(cal, input);
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/PostgreSQLIngestPositionManagerTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/PostgreSQLIngestPositionManagerTest.java
deleted file mode 100644
index b7e7122b..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/PostgreSQLIngestPositionManagerTest.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.postgresql.ingest;
-
-import lombok.SneakyThrows;
-import org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal.WALPosition;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-import org.mockito.junit.jupiter.MockitoSettings;
-import org.mockito.quality.Strictness;
-import org.postgresql.replication.LogSequenceNumber;
-
-import javax.sql.DataSource;
-import java.sql.Connection;
-import java.sql.DatabaseMetaData;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-@MockitoSettings(strictness = Strictness.LENIENT)
-class PostgreSQLIngestPositionManagerTest {
-    
-    private static final String POSTGRESQL_96_LSN = "0/14EFDB8";
-    
-    private static final String POSTGRESQL_10_LSN = "0/1634520";
-    
-    @Mock(extraInterfaces = AutoCloseable.class)
-    private DataSource dataSource;
-    
-    @Mock
-    private Connection connection;
-    
-    @Mock
-    private DatabaseMetaData databaseMetaData;
-    
-    @BeforeEach
-    void setUp() throws SQLException {
-        when(dataSource.getConnection()).thenReturn(connection);
-        when(connection.getCatalog()).thenReturn("sharding_db");
-        when(connection.getMetaData()).thenReturn(databaseMetaData);
-        PreparedStatement lsn96PreparedStatement = mockPostgreSQL96LSN();
-        when(connection.prepareStatement(String.format("SELECT * FROM pg_create_logical_replication_slot('%s', '%s')", PostgreSQLIngestPositionManager.getUniqueSlotName(connection, ""),
-                "test_decoding"))).thenReturn(mock(PreparedStatement.class));
-        when(connection.prepareStatement("SELECT PG_CURRENT_XLOG_LOCATION()")).thenReturn(lsn96PreparedStatement);
-        PreparedStatement lsn10PreparedStatement = mockPostgreSQL10LSN();
-        when(connection.prepareStatement("SELECT PG_CURRENT_WAL_LSN()")).thenReturn(lsn10PreparedStatement);
-    }
-    
-    @Test
-    void assertGetCurrentPositionOnPostgreSQL96() throws SQLException {
-        mockSlotExistsOrNot(false);
-        when(databaseMetaData.getDatabaseMajorVersion()).thenReturn(9);
-        when(databaseMetaData.getDatabaseMinorVersion()).thenReturn(6);
-        WALPosition actual = new PostgreSQLIngestPositionManager().init(dataSource, "");
-        assertThat(actual.getLogSequenceNumber().get(), is(LogSequenceNumber.valueOf(POSTGRESQL_96_LSN)));
-    }
-    
-    @Test
-    void assertGetCurrentPositionOnPostgreSQL10() throws SQLException {
-        mockSlotExistsOrNot(false);
-        when(databaseMetaData.getDatabaseMajorVersion()).thenReturn(10);
-        WALPosition actual = new PostgreSQLIngestPositionManager().init(dataSource, "");
-        assertThat(actual.getLogSequenceNumber().get(), is(LogSequenceNumber.valueOf(POSTGRESQL_10_LSN)));
-    }
-    
-    @Test
-    void assertGetCurrentPositionThrowException() throws SQLException {
-        mockSlotExistsOrNot(false);
-        when(databaseMetaData.getDatabaseMajorVersion()).thenReturn(9);
-        when(databaseMetaData.getDatabaseMinorVersion()).thenReturn(4);
-        assertThrows(RuntimeException.class, () -> new PostgreSQLIngestPositionManager().init(dataSource, ""));
-    }
-    
-    @SneakyThrows(SQLException.class)
-    private PreparedStatement mockPostgreSQL96LSN() {
-        PreparedStatement result = mock(PreparedStatement.class);
-        ResultSet resultSet = mock(ResultSet.class);
-        when(result.executeQuery()).thenReturn(resultSet);
-        when(resultSet.next()).thenReturn(true, false);
-        when(resultSet.getString(1)).thenReturn(POSTGRESQL_96_LSN);
-        return result;
-    }
-    
-    @SneakyThrows(SQLException.class)
-    private PreparedStatement mockPostgreSQL10LSN() {
-        PreparedStatement result = mock(PreparedStatement.class);
-        ResultSet resultSet = mock(ResultSet.class);
-        when(result.executeQuery()).thenReturn(resultSet);
-        when(resultSet.next()).thenReturn(true, false);
-        when(resultSet.getString(1)).thenReturn(POSTGRESQL_10_LSN);
-        return result;
-    }
-    
-    @SneakyThrows(SQLException.class)
-    private void mockSlotExistsOrNot(final boolean exists) {
-        PreparedStatement preparedStatement = mock(PreparedStatement.class);
-        when(connection.prepareStatement("SELECT slot_name FROM pg_replication_slots WHERE slot_name=? AND plugin=?")).thenReturn(preparedStatement);
-        ResultSet resultSet = mock(ResultSet.class);
-        when(preparedStatement.executeQuery()).thenReturn(resultSet);
-        when(resultSet.next()).thenReturn(exists);
-    }
-    
-    @Test
-    void assertDestroyWhenSlotExists() throws SQLException {
-        mockSlotExistsOrNot(true);
-        PreparedStatement preparedStatement = mock(PreparedStatement.class);
-        when(connection.prepareStatement("SELECT pg_drop_replication_slot(?)")).thenReturn(preparedStatement);
-        new PostgreSQLIngestPositionManager().destroy(dataSource, "");
-        verify(preparedStatement).execute();
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/wal/PostgreSQLLogicalReplicationTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/wal/PostgreSQLLogicalReplicationTest.java
deleted file mode 100644
index 96b4df14..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/ingest/wal/PostgreSQLLogicalReplicationTest.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal;
-
-import org.apache.shardingsphere.data.pipeline.api.type.StandardPipelineDataSourceConfiguration;
-import org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal.decode.BaseLogSequenceNumber;
-import org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal.decode.PostgreSQLLogSequenceNumber;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.Mock;
-import org.mockito.junit.jupiter.MockitoExtension;
-import org.postgresql.PGConnection;
-import org.postgresql.jdbc.PgConnection;
-import org.postgresql.replication.LogSequenceNumber;
-import org.postgresql.replication.PGReplicationConnection;
-import org.postgresql.replication.fluent.ChainedStreamBuilder;
-import org.postgresql.replication.fluent.logical.ChainedLogicalStreamBuilder;
-
-import java.sql.Connection;
-import java.sql.SQLException;
-
-import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(MockitoExtension.class)
-class PostgreSQLLogicalReplicationTest {
-    
-    @Mock
-    private PgConnection connection;
-    
-    @Mock
-    private PGReplicationConnection pgReplicationConnection;
-    
-    @Mock
-    private ChainedStreamBuilder chainedStreamBuilder;
-    
-    @Mock
-    private ChainedLogicalStreamBuilder chainedLogicalStreamBuilder;
-    
-    private PostgreSQLLogicalReplication logicalReplication;
-    
-    @BeforeEach
-    void setUp() {
-        logicalReplication = new PostgreSQLLogicalReplication();
-    }
-    
-    @Test
-    void assertCreatePgConnectionSuccess() throws SQLException {
-        Connection connection = logicalReplication.createConnection(
-                new StandardPipelineDataSourceConfiguration("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=PostgreSQL", "root", "root"));
-        assertFalse(connection.isClosed());
-    }
-    
-    @Test
-    void assertCreateReplicationStreamSuccess() throws SQLException {
-        LogSequenceNumber startPosition = LogSequenceNumber.valueOf(100L);
-        when(connection.unwrap(PGConnection.class)).thenReturn(connection);
-        when(connection.getReplicationAPI()).thenReturn(pgReplicationConnection);
-        when(pgReplicationConnection.replicationStream()).thenReturn(chainedStreamBuilder);
-        when(chainedStreamBuilder.logical()).thenReturn(chainedLogicalStreamBuilder);
-        when(chainedLogicalStreamBuilder.withStartPosition(startPosition)).thenReturn(chainedLogicalStreamBuilder);
-        when(chainedLogicalStreamBuilder.withSlotName("")).thenReturn(chainedLogicalStreamBuilder);
-        when(chainedLogicalStreamBuilder.withSlotOption(anyString(), eq(true))).thenReturn(chainedLogicalStreamBuilder, chainedLogicalStreamBuilder);
-        BaseLogSequenceNumber basePosition = new PostgreSQLLogSequenceNumber(startPosition);
-        logicalReplication.createReplicationStream(connection, "", basePosition);
-        verify(chainedLogicalStreamBuilder).start();
-    }
-    
-    @Test
-    void assertCreateReplicationStreamFailure() throws SQLException {
-        when(connection.unwrap(PGConnection.class)).thenThrow(new SQLException(""));
-        assertThrows(SQLException.class, () -> logicalReplication.createReplicationStream(connection, "", new PostgreSQLLogSequenceNumber(LogSequenceNumber.valueOf(100L))));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/sqlbuilder/PostgreSQLPipelineSQLBuilderTest.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/sqlbuilder/PostgreSQLPipelineSQLBuilderTest.java
deleted file mode 100644
index 7c052a47..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/dialect/postgresql/src/test/java/org/apache/shardingsphere/data/pipeline/postgresql/sqlbuilder/PostgreSQLPipelineSQLBuilderTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.postgresql.sqlbuilder;
-
-import org.apache.shardingsphere.data.pipeline.core.constant.PipelineSQLOperationType;
-import org.apache.shardingsphere.data.pipeline.core.ingest.record.Column;
-import org.apache.shardingsphere.data.pipeline.core.ingest.record.DataRecord;
-import org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal.WALPosition;
-import org.apache.shardingsphere.data.pipeline.postgresql.ingest.wal.decode.PostgreSQLLogSequenceNumber;
-import org.junit.jupiter.api.Test;
-import org.postgresql.replication.LogSequenceNumber;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.hamcrest.MatcherAssert.assertThat;
-
-class PostgreSQLPipelineSQLBuilderTest {
-    
-    private final PostgreSQLPipelineSQLBuilder sqlBuilder = new PostgreSQLPipelineSQLBuilder();
-    
-    @Test
-    void assertBuildInsertSQLOnDuplicateClause() {
-        String actual = sqlBuilder.buildInsertOnDuplicateClause(mockDataRecord()).orElse(null);
-        assertThat(actual, is("ON CONFLICT (order_id) DO UPDATE SET user_id=EXCLUDED.user_id,status=EXCLUDED.status"));
-    }
-    
-    private DataRecord mockDataRecord() {
-        DataRecord result = new DataRecord(PipelineSQLOperationType.INSERT, "t_order", new WALPosition(new PostgreSQLLogSequenceNumber(LogSequenceNumber.valueOf(100L))), 2);
-        result.addColumn(new Column("order_id", 1, true, true));
-        result.addColumn(new Column("user_id", 2, true, false));
-        result.addColumn(new Column("status", "ok", true, false));
-        return result;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/distsql/handler/query/ShowStreamingJobStatusExecutor.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/distsql/handler/query/ShowStreamingJobStatusExecutor.java
deleted file mode 100644
index ca408b4e..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/distsql/handler/query/ShowStreamingJobStatusExecutor.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.cdc.distsql.handler.query;
-
-import org.apache.shardingsphere.data.pipeline.cdc.api.CDCJobAPI;
-import org.apache.shardingsphere.data.pipeline.cdc.core.pojo.CDCJobItemInfo;
-import org.apache.shardingsphere.data.pipeline.cdc.distsql.statement.queryable.ShowStreamingStatusStatement;
-import org.apache.shardingsphere.data.pipeline.core.job.api.TransmissionJobAPI;
-import org.apache.shardingsphere.data.pipeline.core.job.progress.TransmissionJobItemProgress;
-import org.apache.shardingsphere.data.pipeline.core.pojo.TransmissionJobItemInfo;
-import org.apache.shardingsphere.distsql.handler.engine.query.DistSQLQueryExecutor;
-import org.apache.shardingsphere.infra.merge.result.impl.local.LocalDataQueryResultRow;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Optional;
-import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
-
-/**
- * Show streaming job status executor.
- */
-public final class ShowStreamingJobStatusExecutor implements DistSQLQueryExecutor<ShowStreamingStatusStatement> {
-    
-    private final CDCJobAPI jobAPI = (CDCJobAPI) TypedSPILoader.getService(TransmissionJobAPI.class, "STREAMING");
-    
-    @Override
-    public Collection<String> getColumnNames(final ShowStreamingStatusStatement sqlStatement) {
-        return Arrays.asList("item", "data_source", "status", "active", "processed_records_count", "inventory_finished_percentage", "incremental_idle_seconds", "confirmed_position",
-                "current_position", "error_message");
-    }
-    
-    @Override
-    public Collection<LocalDataQueryResultRow> getRows(final ShowStreamingStatusStatement sqlStatement, final ContextManager contextManager) {
-        Collection<CDCJobItemInfo> jobItemInfos = jobAPI.getJobItemInfos(sqlStatement.getJobId());
-        long currentTimeMillis = System.currentTimeMillis();
-        return jobItemInfos.stream().map(each -> getRow(each, currentTimeMillis)).collect(Collectors.toList());
-    }
-    
-    private LocalDataQueryResultRow getRow(final CDCJobItemInfo cdcJobItemInfo, final long currentTimeMillis) {
-        TransmissionJobItemInfo transmissionJobItemInfo = cdcJobItemInfo.getTransmissionJobItemInfo();
-        TransmissionJobItemProgress jobItemProgress = transmissionJobItemInfo.getJobItemProgress();
-        if (null == jobItemProgress) {
-            return new LocalDataQueryResultRow(transmissionJobItemInfo.getShardingItem(), "", "", "", "", "", "", "", "", transmissionJobItemInfo.getErrorMessage());
-        }
-        return new LocalDataQueryResultRow(transmissionJobItemInfo.getShardingItem(), jobItemProgress.getDataSourceName(), jobItemProgress.getStatus(), jobItemProgress.isActive(),
-                jobItemProgress.getProcessedRecordsCount(), transmissionJobItemInfo.getInventoryFinishedPercentage(),
-                getIncrementalIdleSeconds(jobItemProgress, transmissionJobItemInfo, currentTimeMillis), cdcJobItemInfo.getConfirmedPosition(), cdcJobItemInfo.getCurrentPosition(),
-                transmissionJobItemInfo.getErrorMessage());
-    }
-    
-    private static Optional<Long> getIncrementalIdleSeconds(final TransmissionJobItemProgress jobItemProgress, final TransmissionJobItemInfo transmissionJobItemInfo, final long currentTimeMillis) {
-        if (jobItemProgress.getIncremental().getIncrementalLatestActiveTimeMillis() > 0) {
-            long latestActiveTimeMillis = Math.max(transmissionJobItemInfo.getStartTimeMillis(), jobItemProgress.getIncremental().getIncrementalLatestActiveTimeMillis());
-            return Optional.of(TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis - latestActiveTimeMillis));
-        }
-        return Optional.empty();
-    }
-    
-    @Override
-    public Class<ShowStreamingStatusStatement> getType() {
-        return ShowStreamingStatusStatement.class;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/query/ShowMigrationListExecutor.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/query/ShowMigrationListExecutor.java
deleted file mode 100644
index a6bff7ad..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/query/ShowMigrationListExecutor.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.migration.distsql.handler.query;
-
-import org.apache.shardingsphere.data.pipeline.core.context.PipelineContextKey;
-import org.apache.shardingsphere.data.pipeline.core.job.service.PipelineJobManager;
-import org.apache.shardingsphere.data.pipeline.migration.distsql.statement.queryable.ShowMigrationListStatement;
-import org.apache.shardingsphere.data.pipeline.scenario.migration.MigrationJobType;
-import org.apache.shardingsphere.distsql.handler.engine.query.DistSQLQueryExecutor;
-import org.apache.shardingsphere.infra.instance.metadata.InstanceType;
-import org.apache.shardingsphere.infra.merge.result.impl.local.LocalDataQueryResultRow;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.stream.Collectors;
-
-/**
- * Show migration list executor.
- */
-public final class ShowMigrationListExecutor implements DistSQLQueryExecutor<ShowMigrationListStatement> {
-    
-    private final PipelineJobManager pipelineJobManager = new PipelineJobManager(new MigrationJobType());
-    
-    @Override
-    public Collection<String> getColumnNames(final ShowMigrationListStatement sqlStatement) {
-        return Arrays.asList("id", "tables", "job_item_count", "active", "create_time", "stop_time");
-    }
-    
-    @Override
-    public Collection<LocalDataQueryResultRow> getRows(final ShowMigrationListStatement sqlStatement, final ContextManager contextManager) {
-        return pipelineJobManager.getJobInfos(new PipelineContextKey(InstanceType.PROXY)).stream().map(each -> new LocalDataQueryResultRow(each.getJobMetaData().getJobId(), each.getTableName(),
-                each.getJobMetaData().getJobItemCount(), each.getJobMetaData().isActive(), each.getJobMetaData().getCreateTime(), each.getJobMetaData().getStopTime())).collect(Collectors.toList());
-    }
-    
-    @Override
-    public Class<ShowMigrationListStatement> getType() {
-        return ShowMigrationListStatement.class;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/query/ShowMigrationRuleExecutor.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/query/ShowMigrationRuleExecutor.java
deleted file mode 100644
index fa2defa4..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/query/ShowMigrationRuleExecutor.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.migration.distsql.handler.query;
-
-import org.apache.shardingsphere.data.pipeline.distsql.handler.query.ShowTransmissionRuleQueryResult;
-import org.apache.shardingsphere.data.pipeline.migration.distsql.statement.queryable.ShowMigrationRuleStatement;
-import org.apache.shardingsphere.distsql.handler.engine.query.DistSQLQueryExecutor;
-import org.apache.shardingsphere.infra.merge.result.impl.local.LocalDataQueryResultRow;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-
-import java.util.Collection;
-
-/**
- * Show migration rule executor.
- */
-public final class ShowMigrationRuleExecutor implements DistSQLQueryExecutor<ShowMigrationRuleStatement> {
-    
-    private final ShowTransmissionRuleQueryResult queryResult = new ShowTransmissionRuleQueryResult("MIGRATION");
-    
-    @Override
-    public Collection<String> getColumnNames(final ShowMigrationRuleStatement sqlStatement) {
-        return queryResult.getColumnNames();
-    }
-    
-    @Override
-    public Collection<LocalDataQueryResultRow> getRows(final ShowMigrationRuleStatement sqlStatement, final ContextManager contextManager) {
-        return queryResult.getRows();
-    }
-    
-    @Override
-    public Class<ShowMigrationRuleStatement> getType() {
-        return ShowMigrationRuleStatement.class;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/update/CommitMigrationExecutor.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/update/CommitMigrationExecutor.java
deleted file mode 100644
index 0f3bc3ed..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/handler/src/main/java/org/apache/shardingsphere/data/pipeline/migration/distsql/handler/update/CommitMigrationExecutor.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.migration.distsql.handler.update;
-
-import org.apache.shardingsphere.data.pipeline.core.job.api.TransmissionJobAPI;
-import org.apache.shardingsphere.data.pipeline.migration.distsql.statement.updatable.CommitMigrationStatement;
-import org.apache.shardingsphere.distsql.handler.engine.update.DistSQLUpdateExecutor;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
-import org.apache.shardingsphere.mode.manager.ContextManager;
-
-import java.sql.SQLException;
-
-/**
- * Commit migration executor.
- */
-public final class CommitMigrationExecutor implements DistSQLUpdateExecutor<CommitMigrationStatement> {
-    
-    @Override
-    public void executeUpdate(final CommitMigrationStatement sqlStatement, final ContextManager contextManager) throws SQLException {
-        TypedSPILoader.getService(TransmissionJobAPI.class, "MIGRATION").commit(sqlStatement.getJobId());
-    }
-    
-    @Override
-    public Class<CommitMigrationStatement> getType() {
-        return CommitMigrationStatement.class;
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/statement/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/distsql/statement/updatable/DropStreamingStatement.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/statement/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/distsql/statement/updatable/DropStreamingStatement.java
deleted file mode 100644
index b737b4b1..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/distsql/statement/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/distsql/statement/updatable/DropStreamingStatement.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.cdc.distsql.statement.updatable;
-
-import lombok.Getter;
-import lombok.RequiredArgsConstructor;
-
-/**
- * Drop streaming statement.
- */
-@RequiredArgsConstructor
-@Getter
-public final class DropStreamingStatement extends UpdatableCDCRALStatement {
-    
-    private final String jobId;
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/scenario/cdc/core/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/config/yaml/swapper/YamlCDCJobConfigurationSwapper.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/scenario/cdc/core/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/config/yaml/swapper/YamlCDCJobConfigurationSwapper.java
deleted file mode 100644
index be52c147..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/scenario/cdc/core/src/main/java/org/apache/shardingsphere/data/pipeline/cdc/config/yaml/swapper/YamlCDCJobConfigurationSwapper.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.cdc.config.yaml.swapper;
-
-import org.apache.shardingsphere.data.pipeline.api.type.ShardingSpherePipelineDataSourceConfiguration;
-import org.apache.shardingsphere.data.pipeline.cdc.config.job.CDCJobConfiguration;
-import org.apache.shardingsphere.data.pipeline.cdc.config.job.CDCJobConfiguration.SinkConfiguration;
-import org.apache.shardingsphere.data.pipeline.cdc.config.yaml.config.YamlCDCJobConfiguration;
-import org.apache.shardingsphere.data.pipeline.cdc.constant.CDCSinkType;
-import org.apache.shardingsphere.data.pipeline.cdc.config.yaml.config.YamlCDCJobConfiguration.YamlSinkConfiguration;
-import org.apache.shardingsphere.data.pipeline.core.datanode.JobDataNodeLine;
-import org.apache.shardingsphere.data.pipeline.core.datasource.yaml.swapper.YamlPipelineDataSourceConfigurationSwapper;
-import org.apache.shardingsphere.data.pipeline.core.job.config.yaml.swapper.YamlPipelineJobConfigurationSwapper;
-import org.apache.shardingsphere.infra.database.core.type.DatabaseType;
-import org.apache.shardingsphere.infra.spi.type.typed.TypedSPILoader;
-import org.apache.shardingsphere.infra.util.yaml.YamlEngine;
-
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
-
-/**
- * YAML CDC job configuration swapper.
- */
-public final class YamlCDCJobConfigurationSwapper implements YamlPipelineJobConfigurationSwapper<YamlCDCJobConfiguration, CDCJobConfiguration> {
-    
-    private final YamlPipelineDataSourceConfigurationSwapper dataSourceConfigSwapper = new YamlPipelineDataSourceConfigurationSwapper();
-    
-    @Override
-    public YamlCDCJobConfiguration swapToYamlConfiguration(final CDCJobConfiguration data) {
-        YamlCDCJobConfiguration result = new YamlCDCJobConfiguration();
-        result.setJobId(data.getJobId());
-        result.setDatabaseName(data.getDatabaseName());
-        result.setSchemaTableNames(data.getSchemaTableNames());
-        result.setFull(data.isFull());
-        result.setSourceDatabaseType(data.getSourceDatabaseType().getType());
-        result.setDataSourceConfiguration(dataSourceConfigSwapper.swapToYamlConfiguration(data.getDataSourceConfig()));
-        result.setTablesFirstDataNodes(null == data.getTablesFirstDataNodes() ? null : data.getTablesFirstDataNodes().marshal());
-        List<String> jobShardingDataNodes = null == data.getJobShardingDataNodes() ? null : data.getJobShardingDataNodes().stream().map(JobDataNodeLine::marshal).collect(Collectors.toList());
-        result.setJobShardingDataNodes(jobShardingDataNodes);
-        result.setDecodeWithTX(data.isDecodeWithTX());
-        result.setSinkConfig(swapToYamlSinkConfiguration(data.getSinkConfig()));
-        result.setConcurrency(data.getConcurrency());
-        result.setRetryTimes(data.getRetryTimes());
-        return result;
-    }
-    
-    private YamlSinkConfiguration swapToYamlSinkConfiguration(final SinkConfiguration sinkConfig) {
-        YamlSinkConfiguration result = new YamlSinkConfiguration();
-        result.setSinkType(sinkConfig.getSinkType().name());
-        result.setProps(sinkConfig.getProps());
-        return result;
-    }
-    
-    @Override
-    public CDCJobConfiguration swapToObject(final YamlCDCJobConfiguration yamlConfig) {
-        List<JobDataNodeLine> jobShardingDataNodes = null == yamlConfig.getJobShardingDataNodes()
-                ? Collections.emptyList()
-                : yamlConfig.getJobShardingDataNodes().stream().map(JobDataNodeLine::unmarshal).collect(Collectors.toList());
-        YamlSinkConfiguration yamlSinkConfig = yamlConfig.getSinkConfig();
-        SinkConfiguration sinkConfig = new SinkConfiguration(CDCSinkType.valueOf(yamlSinkConfig.getSinkType()), yamlSinkConfig.getProps());
-        JobDataNodeLine tablesFirstDataNodes = null == yamlConfig.getTablesFirstDataNodes() ? null : JobDataNodeLine.unmarshal(yamlConfig.getTablesFirstDataNodes());
-        return new CDCJobConfiguration(yamlConfig.getJobId(), yamlConfig.getDatabaseName(), yamlConfig.getSchemaTableNames(), yamlConfig.isFull(),
-                TypedSPILoader.getService(DatabaseType.class, yamlConfig.getSourceDatabaseType()),
-                (ShardingSpherePipelineDataSourceConfiguration) dataSourceConfigSwapper.swapToObject(yamlConfig.getDataSourceConfiguration()), tablesFirstDataNodes,
-                jobShardingDataNodes, yamlConfig.isDecodeWithTX(), sinkConfig, yamlConfig.getConcurrency(), yamlConfig.getRetryTimes());
-    }
-    
-    @Override
-    public CDCJobConfiguration swapToObject(final String jobParam) {
-        return null == jobParam ? null : swapToObject(YamlEngine.unmarshal(jobParam, YamlCDCJobConfiguration.class, true));
-    }
-}
diff --git a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/scenario/consistencycheck/src/main/java/org/apache/shardingsphere/data/pipeline/scenario/consistencycheck/ConsistencyCheckJobId.java b/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/scenario/consistencycheck/src/main/java/org/apache/shardingsphere/data/pipeline/scenario/consistencycheck/ConsistencyCheckJobId.java
deleted file mode 100644
index 96236921..00000000
--- a/C:/Users/hiran/OneDrive/Desktop/bugs/CS527-Project/Bugs/BugSwarm/shardingsphere-15043584565/Buggy-version/kernel/data-pipeline/scenario/consistencycheck/src/main/java/org/apache/shardingsphere/data/pipeline/scenario/consistencycheck/ConsistencyCheckJobId.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.data.pipeline.scenario.consistencycheck;
-
-import lombok.Getter;
-import org.apache.shardingsphere.data.pipeline.core.context.PipelineContextKey;
-import org.apache.shardingsphere.data.pipeline.core.job.id.PipelineJobId;
-import org.apache.shardingsphere.data.pipeline.core.job.type.PipelineJobType;
-import org.apache.shardingsphere.data.pipeline.scenario.consistencycheck.util.ConsistencyCheckSequence;
-
-/**
- * Consistency check job id.
- */
-@Getter
-public final class ConsistencyCheckJobId implements PipelineJobId {
-    
-    private final PipelineJobType jobType = new ConsistencyCheckJobType();
-    
-    private final PipelineContextKey contextKey;
-    
-    private final String parentJobId;
-    
-    private final int sequence;
-    
-    public ConsistencyCheckJobId(final PipelineContextKey contextKey, final String parentJobId) {
-        this(contextKey, parentJobId, ConsistencyCheckSequence.MIN_SEQUENCE);
-    }
-    
-    public ConsistencyCheckJobId(final PipelineContextKey contextKey, final String parentJobId, final String latestCheckJobId) {
-        this(contextKey, parentJobId, ConsistencyCheckSequence.getNextSequence(parseSequence(latestCheckJobId)));
-    }
-    
-    public ConsistencyCheckJobId(final PipelineContextKey contextKey, final String parentJobId, final int sequence) {
-        this.contextKey = contextKey;
-        this.parentJobId = parentJobId;
-        this.sequence = sequence > ConsistencyCheckSequence.MAX_SEQUENCE ? ConsistencyCheckSequence.MIN_SEQUENCE : sequence;
-    }
-    
-    /**
-     * Parse consistency check sequence.
-     *
-     * @param checkJobId consistency check job id
-     * @return sequence
-     */
-    public static int parseSequence(final String checkJobId) {
-        return Integer.parseInt(checkJobId.substring(checkJobId.length() - 1));
-    }
-    
-    @Override
-    public String marshalSuffix() {
-        return parentJobId + sequence;
-    }
-}
