[<Line: +package cn.nukkit.tile;
>, <Line: +import cn.nukkit.Player;
>, <Line: +import cn.nukkit.inventory.BrewingInventory;
>, <Line: +import cn.nukkit.inventory.BrewingRecipe;
>, <Line: +import cn.nukkit.inventory.InventoryHolder;
>, <Line: +import cn.nukkit.item.Item;
>, <Line: +import cn.nukkit.level.format.FullChunk;
>, <Line: +import cn.nukkit.nbt.tag.CompoundTag;
>, <Line: +import cn.nukkit.nbt.tag.ListTag;
>, <Line: +import cn.nukkit.network.protocol.ContainerSetDataPacket;
>, <Line: +import cn.nukkit.Server;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +public class BrewingStand extends Spawnable implements InventoryHolder, Container, Nameable{
>, <Line: +    protected BrewingInventory inventory;
>, <Line: +    public static final int MAX_BREW_TIME = 400;
>, <Line: +    public static List<Integer> ingredients = new ArrayList<>();
>, <Line: +    public BrewingStand(FullChunk chunk, CompoundTag nbt){
>, <Line: +        super(chunk, nbt);
>, <Line: +        inventory = new BrewingInventory(this);
>, <Line: +        if(!namedTag.contains("Items") || !(namedTag.get("Items") instanceof ListTag)){
>, <Line: +            namedTag.putList(new ListTag<CompoundTag>("Items"));
>, <Line: +        }
>, <Line: +        for (int i = 0; i < getSize(); i++) {
>, <Line: +            inventory.setItem(i, this.getItem(i));
>, <Line: +        }
>, <Line: +        if(!namedTag.contains("BrewTime") || namedTag.getShort("BrewTime") > MAX_BREW_TIME){
>, <Line: +            namedTag.putShort("BrewTime", MAX_BREW_TIME);
>, <Line: +        }
>, <Line: +        if(namedTag.getShort("BrewTime")  < MAX_BREW_TIME){
>, <Line: +            this.scheduleUpdate();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public String getName(){
>, <Line: +        return this.hasName() ? this.namedTag.getString("CustomName") : "Furnace";
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public boolean hasName(){
>, <Line: +        return namedTag.contains("CustomName");
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void setName(String name){
>, <Line: +        if(name.equals("")){
>, <Line: +            namedTag.remove("CustomName");
>, <Line: +            return;
>, <Line: +        }
>, <Line: +        namedTag.putString("CustomName", name);
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void close() {
>, <Line: +        if (!closed) {
>, <Line: +            for (Player player : getInventory().getViewers()) {
>, <Line: +                player.removeWindow(getInventory());
>, <Line: +            }
>, <Line: +            super.close();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void saveNBT() {
>, <Line: +        namedTag.putList(new ListTag<CompoundTag>("Items"));
>, <Line: +        for (int index = 0; index < getSize(); index++) {
>, <Line: +            this.setItem(index, inventory.getItem(index));
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public int getSize(){
>, <Line: +        return 4;
>, <Line: +    }
>, <Line: +    protected int getSlotIndex(int index) {
>, <Line: +        ListTag<CompoundTag> list = this.namedTag.getList("Items", new ListTag<>());
>, <Line: +        for (int i = 0; i < list.size(); i++) {
>, <Line: +            if (list.get(i).getByte("Slot") == index) {
>, <Line: +                return i;
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return -1;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public Item getItem(int index) {
>, <Line: +        int i = this.getSlotIndex(index);
>, <Line: +        if (i < 0) {
>, <Line: +            return Item.get(Item.AIR, 0, 0);
>, <Line: +        } else {
>, <Line: +            CompoundTag data = (CompoundTag) this.namedTag.getList("Items").get(i);
>, <Line: +            return Item.get(data.getShort("id"), data.getShort("Damage"), data.getByte("Count"));
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public void setItem(int index, Item item) {
>, <Line: +        int i = this.getSlotIndex(index);
>, <Line: +        CompoundTag d = new CompoundTag()
>, <Line: +                .putByte("Count", (byte) item.getCount())
>, <Line: +                .putByte("Slot", (byte) index)
>, <Line: +                .putShort("id", item.getId())
>, <Line: +                .putShort("Damage", item.getDamage());
>, <Line: +        if (item.getId() == Item.AIR || item.getCount() <= 0) {
>, <Line: +            if (i >= 0) {
>, <Line: +                this.namedTag.getList("Items").getAll().remove(i);
>, <Line: +            }
>, <Line: +        } else if (i < 0) {
>, <Line: +            i = this.namedTag.getList("Items").getAll().size();
>, <Line: +            i = Math.max(i, this.getSize());
>, <Line: +            (this.namedTag.getList("Items", new ListTag<>())).add(i, d);
>, <Line: +        } else {
>, <Line: +            (this.namedTag.getList("Items", new ListTag<>())).add(i, d);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public BrewingInventory getInventory(){
>, <Line: +        return inventory;
>, <Line: +    }
>, <Line: +    protected boolean checkIngredient(Item ingredient){
>, <Line: +        return ingredients.contains(ingredient.getId());
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public boolean onUpdate(){
>, <Line: +        if(closed){
>, <Line: +            return false;
>, <Line: +        }
>, <Line: +        boolean ret = false;
>, <Line: +        Item ingredient = inventory.getIngredient();
>, <Line: +        boolean canBrew = false;
>, <Line: +        for(int i = 1; i <= 3; i++){
>, <Line: +            if(this.inventory.getItem(i).getId() == Item.POTION){
>, <Line: +                canBrew = true;
>, <Line: +            }
>, <Line: +        }
>, <Line: +        if(namedTag.getShort("BrewTime") <= MAX_BREW_TIME && canBrew && ingredient.getCount() > 0){
>, <Line: +            if(!this.checkIngredient(ingredient)){
>, <Line: +                canBrew = false;
>, <Line: +            }
>, <Line: +        }else{
>, <Line: +            canBrew = false;
>, <Line: +        }
>, <Line: +        if(canBrew){
>, <Line: +            namedTag.putShort("BrewTime", namedTag.getShort("BrewTime"));
>, <Line: +            if (namedTag.getShort("BrewTime") <= 0){ //20 seconds
>, <Line: +                for(int i = 1; i <= 3; i++){
>, <Line: +                    Item potion = this.inventory.getItem(i);
>, <Line: +                    BrewingRecipe recipe = Server.getInstance().getCraftingManager().matchBrewingRecipe(ingredient, potion);
>, <Line: +                    if(recipe != null){
>, <Line: +                        this.inventory.setItem(i, recipe.getResult());
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                ingredient.count--;
>, <Line: +                this.inventory.setIngredient(ingredient);
>, <Line: +                namedTag.putShort("BrewTime", namedTag.getShort("BrewTime"));
>, <Line: +            }
>, <Line: +            for(Player player : getInventory().getViewers()){
>, <Line: +                int windowId = player.getWindowId(getInventory());
>, <Line: +                if(windowId > 0){
>, <Line: +                    ContainerSetDataPacket pk = new ContainerSetDataPacket();
>, <Line: +                    pk.windowid = (byte) windowId;
>, <Line: +                    pk.property = 0; //Brewing
>, <Line: +                    pk.value = namedTag.getShort("BrewTime");
>, <Line: +                    player.dataPacket(pk);
>, <Line: +                }
>, <Line: +            }
>, <Line: +            ret = true;
>, <Line: +        }else {
>, <Line: +            namedTag.putShort("BrewTime", MAX_BREW_TIME);
>, <Line: +            ret = false;
>, <Line: +        }
>, <Line: +        lastUpdate = System.currentTimeMillis();
>, <Line: +        return ret;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public CompoundTag getSpawnCompound(){
>, <Line: +        CompoundTag nbt = new CompoundTag()
>, <Line: +                .putString("id", Tile.BREWING_STAND)
>, <Line: +                .putInt("x", (int) this.x)
>, <Line: +                .putInt("y", (int) this.y)
>, <Line: +                .putInt("z", (int) this.z)
>, <Line: +                .putShort("BrewTime", MAX_BREW_TIME);
>, <Line: +        if(this.hasName()){
>, <Line: +            nbt.put("CustomName", namedTag.get("CustomName"));
>, <Line: +        }
>, <Line: +        return nbt;
>, <Line: +    }
>, <Line: +}
>]
[]