[<Line: +public interface OntologyVocabulary extends ImmutableOntologyVocabulary {
>, <Line: +	 * declare class
>, <Line: +	 * @return class object
>, <Line: +	 * declare object property
>, <Line: +	 * @return property object
>, <Line: +	 * declare data property
>, <Line: +	 * @return property object
>, <Line: +	 * remove class from the vocabulary
>, <Line: +	 * @param uri property name
>, <Line: +	public void removeClass(String classname);
>, <Line: +	 * remove object property from the vocabulary
>, <Line: +	 * 
>, <Line: +	 * @param uri property name
>, <Line: +	public void removeObjectProperty(String property);
>, <Line: +	 * remove data property from the vocabulary
>, <Line: +	 * 
>, <Line: +	 * @param uri property name
>, <Line: +	public void removeDataProperty(String property);
>, <Line: +	 * copy all classes and properties from a given vocabulary 
>, <Line: +	 * 
>, <Line: +	 * @param v vocabulary to be copied from
>, <Line: +	public void merge(ImmutableOntologyVocabulary v);
>]
[<Line: -import java.util.Set;
>, <Line: -public interface OntologyVocabulary {
>, <Line: -	 * create and declare class
>, <Line: -	 * @return
>, <Line: -	 * check whether the class has been declared and return the class object
>, <Line: -	 * 
>, <Line: -	 * @param uri
>, <Line: -	 * @return
>, <Line: -	 * @throws RuntimeException if the class has not been declared
>, <Line: -	 */
>, <Line: -	public OClass getClass(String uri);
>, <Line: -	/**
>, <Line: -	 * create and declare object property
>, <Line: -	 * @return
>, <Line: -	 * check whether the object property has been declared and return the class object
>, <Line: -	 * 
>, <Line: -	 * @param uri
>, <Line: -	 * @return
>, <Line: -	 * @throws RuntimeException if the object property has not been declared
>, <Line: -	 */
>, <Line: -	public ObjectPropertyExpression getObjectProperty(String uri);
>, <Line: -	/**
>, <Line: -	 * create and declare data property
>, <Line: -	 * @return
>, <Line: -	 * check whether the data property has been declared and return the class object
>, <Line: -	 * @param uri
>, <Line: -	 * @return
>, <Line: -	 * @throws RuntimeException if the data property has not been declared
>, <Line: -	public DataPropertyExpression getDataProperty(String uri);
>, <Line: -	 * auxiliary properties result from NORMALIZATION
>, <Line: -	 * @param uri
>, <Line: -	public ObjectPropertyExpression createAuxiliaryObjectProperty();
>, <Line: -	 * auxiliary properties result from NORMALIZATION
>, <Line: -	 * @param uri
>, <Line: -	public DataPropertyExpression createAuxiliaryDataProperty();
>, <Line: -	public Set<OClass> getClasses();
>, <Line: -	public Set<ObjectPropertyExpression> getObjectProperties();
>, <Line: -	public Set<DataPropertyExpression> getDataProperties();
>, <Line: -	/**
>, <Line: -	 * auxiliary properties result from NORMALIZATION
>, <Line: -	 */
>, <Line: -	public Set<ObjectPropertyExpression> getAuxiliaryObjectProperties();
>, <Line: -	 * auxiliary properties result from NORMALIZATION
>, <Line: -	public Set<DataPropertyExpression> getAuxiliaryDataProperties();
>, <Line: -	public void merge(OntologyVocabulary v);
>, <Line: -	public boolean isEmpty();
>]