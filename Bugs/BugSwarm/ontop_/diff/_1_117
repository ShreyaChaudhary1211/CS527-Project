[]
[<Line: -package it.unibz.krdb.obda.reformulation.semindex.tests;
>, <Line: -/*
>, <Line: - * #%L
>, <Line: - * ontop-quest-owlapi3
>, <Line: - * %%
>, <Line: - * Copyright (C) 2009 - 2014 Free University of Bozen-Bolzano
>, <Line: - * %%
>, <Line: - * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: - * you may not use this file except in compliance with the License.
>, <Line: - * You may obtain a copy of the License at
>, <Line: - * 
>, <Line: - *      http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - * 
>, <Line: - * Unless required by applicable law or agreed to in writing, software
>, <Line: - * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - * See the License for the specific language governing permissions and
>, <Line: - * limitations under the License.
>, <Line: - * #L%
>, <Line: - */
>, <Line: -import java.util.Set;
>, <Line: -import it.unibz.krdb.obda.ontology.ClassExpression;
>, <Line: -import it.unibz.krdb.obda.ontology.OClass;
>, <Line: -import it.unibz.krdb.obda.ontology.ObjectPropertyExpression;
>, <Line: -import it.unibz.krdb.obda.ontology.ObjectSomeValuesFrom;
>, <Line: -import it.unibz.krdb.obda.ontology.Ontology;
>, <Line: -import it.unibz.krdb.obda.ontology.impl.OntologyFactoryImpl;
>, <Line: -import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.Equivalences;
>, <Line: -import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.EquivalencesDAG;
>, <Line: -import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.TBoxReasoner;
>, <Line: -import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.TBoxReasonerImpl;
>, <Line: -import it.unibz.krdb.obda.quest.dag.TestTBoxReasonerImpl_OnGraph;
>, <Line: -import junit.framework.TestCase;
>, <Line: -public class DAGChainTest extends TestCase {
>, <Line: -	private static <T> int sizeOf(Set<Equivalences<T>> set) {
>, <Line: -		int size = 0;
>, <Line: -		for(Equivalences<T> e: set){
>, <Line: -			size += e.size();
>, <Line: -		}
>, <Line: -		return size;
>, <Line: -	}
>, <Line: -	public void test_simple_isa() {
>, <Line: -		Ontology ontology = OntologyFactoryImpl.getInstance().createOntology();
>, <Line: -		OClass ac = ontology.getVocabulary().createClass("a");
>, <Line: -		OClass bc = ontology.getVocabulary().createClass("b");
>, <Line: -		OClass cc = ontology.getVocabulary().createClass("c");
>, <Line: -		ontology.addSubClassOfAxiom(bc, ac);
>, <Line: -		ontology.addSubClassOfAxiom(cc, bc);
>, <Line: -		TBoxReasonerImpl reasoner0 = new TBoxReasonerImpl(ontology);
>, <Line: -		TBoxReasoner reasoner = TBoxReasonerImpl.getChainReasoner(reasoner0);
>, <Line: -		EquivalencesDAG<ClassExpression> classes = reasoner.getClassDAG();
>, <Line: -		Equivalences<ClassExpression> ac0 = classes.getVertex(ac);
>, <Line: -		Equivalences<ClassExpression> bc0 = classes.getVertex(bc);
>, <Line: -		Equivalences<ClassExpression> cc0 = classes.getVertex(cc);
>, <Line: -		assertTrue(classes.getSub(ac0).contains(bc0));
>, <Line: -		assertTrue(classes.getSub(ac0).contains(cc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(ac0)), 3); // getDescendants is reflexive
>, <Line: -		assertTrue(classes.getSub(bc0).contains(cc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(bc0)), 2);  // getDescendants is reflexive
>, <Line: -		assertEquals(sizeOf(classes.getSub(cc0)), 1);  // getDescendants is reflexive
>, <Line: -	}
>, <Line: -	public void test_exists_simple() {
>, <Line: -		Ontology ontology = OntologyFactoryImpl.getInstance().createOntology();
>, <Line: -		ObjectPropertyExpression rprop = ontology.getVocabulary().createObjectProperty("r");
>, <Line: -		ObjectPropertyExpression riprop = rprop.getInverse();
>, <Line: -		OClass ac = ontology.getVocabulary().createClass("a");
>, <Line: -		ObjectSomeValuesFrom er = rprop.getDomain();
>, <Line: -		ObjectSomeValuesFrom ier = riprop.getDomain();
>, <Line: -		OClass cc = ontology.getVocabulary().createClass("c");
>, <Line: -		ontology.addSubClassOfAxiom(er, ac);
>, <Line: -		ontology.addSubClassOfAxiom(cc, ier);
>, <Line: -		//generate Graph
>, <Line: -		TBoxReasonerImpl res0 = new  TBoxReasonerImpl(ontology);
>, <Line: -		//DefaultDirectedGraph<Description,DefaultEdge> res1 = res0.getGraph();
>, <Line: -//		for (Description nodes: res.vertexSet()) {
>, <Line: -//			System.out.println("---- " + nodes);
>, <Line: -//		}
>, <Line: -		TestTBoxReasonerImpl_OnGraph reasoner = new TestTBoxReasonerImpl_OnGraph(res0);
>, <Line: -		reasoner.convertIntoChainDAG();
>, <Line: -		EquivalencesDAG<ClassExpression> classes = reasoner.getClassDAG();
>, <Line: -		Equivalences<ClassExpression> ac0 = classes.getVertex(ac);
>, <Line: -		Equivalences<ClassExpression> cc0 = classes.getVertex(cc);
>, <Line: -		Equivalences<ClassExpression> er0 = classes.getVertex(er);
>, <Line: -		Equivalences<ClassExpression> ier0 = classes.getVertex(ier);
>, <Line: -		assertTrue(classes.getSub(ac0).contains(er0));
>, <Line: -		assertTrue(classes.getSub(ac0).contains(ier0));
>, <Line: -		assertTrue(classes.getSub(ac0).contains(cc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(ac0)), 4);  // getDescendants is reflexive
>, <Line: -		assertTrue(classes.getSub(er0).contains(cc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(er0)), 2);  // getDescendants is reflexive
>, <Line: -		assertTrue(classes.getSub(ier0).contains(cc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(ier0)), 2);  // getDescendants is reflexive
>, <Line: -		assertEquals(sizeOf(classes.getSub(cc0)), 1);  // getDescendants is reflexive
>, <Line: -	}
>, <Line: -	public void test_exists_complex() {
>, <Line: -		Ontology ontology = OntologyFactoryImpl.getInstance().createOntology();
>, <Line: -		ObjectPropertyExpression rprop = ontology.getVocabulary().createObjectProperty("r");
>, <Line: -		ObjectPropertyExpression riprop = rprop.getInverse();
>, <Line: -		OClass ac = ontology.getVocabulary().createClass("a");
>, <Line: -		ObjectSomeValuesFrom er = rprop.getDomain();
>, <Line: -		ObjectSomeValuesFrom ier = riprop.getDomain();
>, <Line: -		OClass cc = ontology.getVocabulary().createClass("c");
>, <Line: -		OClass bc = ontology.getVocabulary().createClass("b");
>, <Line: -		OClass dc = ontology.getVocabulary().createClass("d");
>, <Line: -		ontology.addSubClassOfAxiom(er, ac);
>, <Line: -		ontology.addSubClassOfAxiom(cc, ier);
>, <Line: -		ontology.addSubClassOfAxiom(bc, er);
>, <Line: -		ontology.addSubClassOfAxiom(ier, dc);
>, <Line: -		//DAGImpl dag221 = DAGBuilder.getDAG(ontology);
>, <Line: -		//TBoxReasonerImpl reasoner221 = new TBoxReasonerImpl(dag221);
>, <Line: -		//DAGImpl dagChain221 = reasoner221.getChainDAG();
>, <Line: -		TBoxReasonerImpl resoner0 = new TBoxReasonerImpl(ontology);
>, <Line: -		TBoxReasoner reasoner = TBoxReasonerImpl.getChainReasoner(resoner0);
>, <Line: -		EquivalencesDAG<ClassExpression> classes = reasoner.getClassDAG();
>, <Line: -		Equivalences<ClassExpression> ac0 = classes.getVertex(ac);
>, <Line: -		Equivalences<ClassExpression> bc0 = classes.getVertex(bc);
>, <Line: -		Equivalences<ClassExpression> cc0 = classes.getVertex(cc);
>, <Line: -		Equivalences<ClassExpression> dc0 = classes.getVertex(dc);
>, <Line: -		Equivalences<ClassExpression> er0 = classes.getVertex(er);
>, <Line: -		Equivalences<ClassExpression> ier0 = classes.getVertex(ier);
>, <Line: -		assertTrue(classes.getSub(ac0).contains(er0));
>, <Line: -		assertTrue(classes.getSub(ac0).contains(ier0));
>, <Line: -		assertTrue(classes.getSub(ac0).contains(cc0));
>, <Line: -		assertTrue(classes.getSub(ac0).contains(bc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(ac0)), 5);  // getDescendants is reflexive
>, <Line: -		assertTrue(classes.getSub(dc0).contains(er0));
>, <Line: -		assertTrue(classes.getSub(dc0).contains(ier0));
>, <Line: -		assertTrue(classes.getSub(dc0).contains(cc0));
>, <Line: -		assertTrue(classes.getSub(dc0).contains(bc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(dc0)), 5);  // getDescendants is reflexive
>, <Line: -		assertTrue(classes.getSub(er0).contains(bc0));
>, <Line: -		assertTrue(classes.getSub(er0).contains(cc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(er0)), 3);  // getDescendants is reflexive
>, <Line: -		assertTrue(classes.getSub(ier0).contains(bc0));
>, <Line: -		assertTrue(classes.getSub(ier0).contains(cc0));
>, <Line: -		assertEquals(sizeOf(classes.getSub(ier0)), 3);  // getDescendants is reflexive
>, <Line: -		assertEquals(sizeOf(classes.getSub(bc0)), 1);  // getDescendants is reflexive
>, <Line: -		assertEquals(sizeOf(classes.getSub(cc0)), 1);  // getDescendants is reflexive
>, <Line: -	}
>, <Line: -}
>]