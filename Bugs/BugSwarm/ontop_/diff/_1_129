[<Line: +import it.unibz.krdb.obda.ontology.ClassExpression;
>, <Line: +import it.unibz.krdb.obda.ontology.ImmutableOntologyVocabulary;
>, <Line: +import it.unibz.krdb.obda.ontology.ObjectPropertyExpression;
>, <Line: +import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.EquivalencesDAG;
>, <Line: +import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.EquivalencesDAGImpl;
>, <Line: +		 * The ontology contains classes A1 = A2 = A3 >= B1 = B2 = B3 >= C1 = C2 = C3
>, <Line: +		Ontology ontology = OWLAPI3TranslatorUtility.loadOntologyFromFile(path + "test_401.owl");
>, <Line: +		TBoxReasoner simple = TBoxReasonerImpl.create(ontology, true);
>, <Line: +		EquivalencesDAGImpl<ClassExpression> classDAG = (EquivalencesDAGImpl<ClassExpression>)simple.getClassDAG();
>, <Line: +		EquivalencesDAGImpl<ObjectPropertyExpression> propDAG = (EquivalencesDAGImpl<ObjectPropertyExpression>)simple.getObjectPropertyDAG();
>, <Line: +		assertEquals(3, classDAG.vertexSetSize()); // A1, B1, C1
>, <Line: +		assertEquals(0, propDAG.vertexSetSize()); // no properties
>, <Line: +		assertEquals(2, classDAG.edgeSetSize());  // A1 <- B1 <- C1
>, <Line: +		assertEquals(0, propDAG.edgeSetSize());  // no properties
>, <Line: +		ImmutableOntologyVocabulary voc = ontology.getVocabulary();
>, <Line: +		ClassExpression A1 = voc.getClass(testURI + "A1");
>, <Line: +		ClassExpression B1 = voc.getClass(testURI + "B1");
>, <Line: +		ClassExpression C1 = voc.getClass(testURI + "C1");
>, <Line: +		ClassExpression A2 = voc.getClass(testURI + "A2");
>, <Line: +		ClassExpression A3 = voc.getClass(testURI + "A3");
>, <Line: +		ClassExpression B2 = voc.getClass(testURI + "B2");
>, <Line: +		ClassExpression B3 = voc.getClass(testURI + "B3");
>, <Line: +		ClassExpression C2 = voc.getClass(testURI + "C2");
>, <Line: +		ClassExpression C3 = voc.getClass(testURI + "C3");
>, <Line: +		EquivalencesDAG<ClassExpression> classes = simple.getClassDAG();
>, <Line: +		assertEquals(classes.getCanonicalForm(A1), A1);
>, <Line: +		assertEquals(classes.getCanonicalForm(B1), B1);
>, <Line: +		assertEquals(classes.getCanonicalForm(C1), C1);
>, <Line: +		assertEquals(classes.getCanonicalForm(A2), A1);
>, <Line: +		assertEquals(classes.getCanonicalForm(A3), A1);
>, <Line: +		assertEquals(classes.getCanonicalForm(B2), B1);
>, <Line: +		assertEquals(classes.getCanonicalForm(B3), B1);
>, <Line: +		assertEquals(classes.getCanonicalForm(C2), C1);
>, <Line: +		assertEquals(classes.getCanonicalForm(C3), C1);
>, <Line: +		 * The ontology contains object properties A1 = A2 = A3 >= B1 = B2 = B3 >= C1 = C2 = C3
>, <Line: +		Ontology ontology = OWLAPI3TranslatorUtility.loadOntologyFromFile(path + "test_402.owl");
>, <Line: +		TBoxReasoner simple = TBoxReasonerImpl.create(ontology, true);
>, <Line: +		EquivalencesDAGImpl<ClassExpression> classDAG = (EquivalencesDAGImpl<ClassExpression>)simple.getClassDAG();
>, <Line: +		EquivalencesDAGImpl<ObjectPropertyExpression> propDAG = (EquivalencesDAGImpl<ObjectPropertyExpression>)simple.getObjectPropertyDAG();
>, <Line: +		// \exists A1, \exists A1^-,  \exists B1, \exists B1^-,  \exists C1, \exists C1^-
>, <Line: +		assertEquals(6, classDAG.vertexSetSize()); 
>, <Line: +		assertEquals(6, propDAG.vertexSetSize()); // A1, A1^-, B1, B1^-, C1, C1^- 
>, <Line: +		// \exists A1 <- \exists B1 <- \exists C1, \exists A1^- <- \exists B1^- <- \exists C1^-
>, <Line: +		assertEquals(4, classDAG.edgeSetSize()); 
>, <Line: +		assertEquals(4, classDAG.edgeSetSize()); // A1 <- B1 <- C1, A1^- <- B1^- <- C1^-
>, <Line: +		ImmutableOntologyVocabulary voc = ontology.getVocabulary();
>, <Line: +		ObjectPropertyExpression A1 = voc.getObjectProperty(testURI + "A1");
>, <Line: +		ObjectPropertyExpression B1 = voc.getObjectProperty(testURI + "B1");
>, <Line: +		ObjectPropertyExpression C1 = voc.getObjectProperty(testURI + "C1");
>, <Line: +		ObjectPropertyExpression A2 = voc.getObjectProperty(testURI + "A2");
>, <Line: +		ObjectPropertyExpression A3 = voc.getObjectProperty(testURI + "A3");
>, <Line: +		ObjectPropertyExpression B2 = voc.getObjectProperty(testURI + "B2");
>, <Line: +		ObjectPropertyExpression B3 = voc.getObjectProperty(testURI + "B3");
>, <Line: +		ObjectPropertyExpression C2 = voc.getObjectProperty(testURI + "C2");
>, <Line: +		ObjectPropertyExpression C3 = voc.getObjectProperty(testURI + "C3");
>, <Line: +		EquivalencesDAG<ObjectPropertyExpression> ops = simple.getObjectPropertyDAG();
>, <Line: +		assertEquals(ops.getCanonicalForm(A1), A1);
>, <Line: +		assertEquals(ops.getCanonicalForm(B1), B1);
>, <Line: +		assertEquals(ops.getCanonicalForm(C1), C1);
>, <Line: +		assertEquals(ops.getCanonicalForm(A2), A1);
>, <Line: +		assertEquals(ops.getCanonicalForm(A3), A1);
>, <Line: +		assertEquals(ops.getCanonicalForm(B2), B1);
>, <Line: +		assertEquals(ops.getCanonicalForm(B3), B1); 
>, <Line: +		assertEquals(ops.getCanonicalForm(C2), C1);
>, <Line: +		assertEquals(ops.getCanonicalForm(C3), C1);
>, <Line: +		 * The ontology contains object properties M, R, S
>, <Line: +		 * and classes A1 = A3 = \exists R <= B1 = B3 = \exists S^- <= C1 = C3 = \exists M
>, <Line: +		Ontology ontology = OWLAPI3TranslatorUtility.loadOntologyFromFile(path + "test_403.owl");
>, <Line: +		TBoxReasoner simple = TBoxReasonerImpl.create(ontology, true);
>, <Line: +		EquivalencesDAGImpl<ClassExpression> classDAG = (EquivalencesDAGImpl<ClassExpression>)simple.getClassDAG();
>, <Line: +		EquivalencesDAGImpl<ObjectPropertyExpression> propDAG = (EquivalencesDAGImpl<ObjectPropertyExpression>)simple.getObjectPropertyDAG();
>, <Line: +		assertEquals(6, propDAG.vertexSetSize()); // M, M^-, R, R^-, S, S^-
>, <Line: +		assertEquals(6, classDAG.vertexSetSize()); // A1, B1, C1, \exists R^-, \exists S, \exists M^-
>, <Line: +		assertEquals(0, propDAG.edgeSetSize()); // 
>, <Line: +		assertEquals(2, classDAG.edgeSetSize()); // A1 <- B1 <- C1
>, <Line: +		ImmutableOntologyVocabulary voc = ontology.getVocabulary();
>, <Line: +		ClassExpression A1 = voc.getClass(testURI + "A1");
>, <Line: +		ClassExpression B1 = voc.getClass(testURI + "B1");
>, <Line: +		ClassExpression C1 = voc.getClass(testURI + "C1");
>, <Line: +		ClassExpression A3 = voc.getClass(testURI + "A3");
>, <Line: +		ClassExpression B3 = voc.getClass(testURI + "B3");
>, <Line: +		ClassExpression C3 = voc.getClass(testURI + "C3");
>, <Line: +		EquivalencesDAG<ClassExpression> classes = simple.getClassDAG();
>, <Line: +		assertEquals(classes.getCanonicalForm(A1), A1);
>, <Line: +		assertEquals(classes.getCanonicalForm(B1), B1);
>, <Line: +		assertEquals(classes.getCanonicalForm(C1), C1);
>, <Line: +		assertEquals(classes.getCanonicalForm(A3), A1);
>, <Line: +		assertEquals(classes.getCanonicalForm(B3), B1);
>, <Line: +		assertEquals(classes.getCanonicalForm(C3), C1);		
>, <Line: +		 * The ontology contains object properties A1 = A2^- = A3 >= B1 = B2^- = B3 >= C1 = C2^- = C3
>, <Line: +		Ontology ontology = OWLAPI3TranslatorUtility.loadOntologyFromFile(path + "test_404.owl");
>, <Line: +		TBoxReasoner simple = TBoxReasonerImpl.create(ontology, true);
>, <Line: +		EquivalencesDAGImpl<ClassExpression> classDAG = (EquivalencesDAGImpl<ClassExpression>)simple.getClassDAG();
>, <Line: +		EquivalencesDAGImpl<ObjectPropertyExpression> propDAG = (EquivalencesDAGImpl<ObjectPropertyExpression>)simple.getObjectPropertyDAG();
>, <Line: +		assertEquals(6, classDAG.vertexSetSize()); // A1, A1^-, B1, B1^-, C1, C1^-
>, <Line: +		assertEquals(6, propDAG.vertexSetSize()); // 
>, <Line: +		assertEquals(4, classDAG.edgeSetSize()); // A1 >= B1 >= C1, A1^- >= B1^- >= C1^-
>, <Line: +		assertEquals(4, propDAG.edgeSetSize()); //
>, <Line: +		ImmutableOntologyVocabulary voc = ontology.getVocabulary();
>, <Line: +		ObjectPropertyExpression A1 = voc.getObjectProperty(testURI + "A1");
>, <Line: +		ObjectPropertyExpression B1 = voc.getObjectProperty(testURI + "B1");
>, <Line: +		ObjectPropertyExpression C1 = voc.getObjectProperty(testURI + "C1");
>, <Line: +		ObjectPropertyExpression A2 = voc.getObjectProperty(testURI + "A2");
>, <Line: +		ObjectPropertyExpression A3 = voc.getObjectProperty(testURI + "A3");
>, <Line: +		ObjectPropertyExpression B2 = voc.getObjectProperty(testURI + "B2");
>, <Line: +		ObjectPropertyExpression B3 = voc.getObjectProperty(testURI + "B3");
>, <Line: +		ObjectPropertyExpression C2 = voc.getObjectProperty(testURI + "C2");
>, <Line: +		ObjectPropertyExpression C3 = voc.getObjectProperty(testURI + "C3");
>, <Line: +		EquivalencesDAG<ObjectPropertyExpression> ops = simple.getObjectPropertyDAG();
>, <Line: +		assertEquals(ops.getCanonicalForm(A1), A1);
>, <Line: +		assertEquals(ops.getCanonicalForm(B1), B1);
>, <Line: +		assertEquals(ops.getCanonicalForm(C1), C1);
>, <Line: +		assertEquals(ops.getCanonicalForm(A2), A1.getInverse());
>, <Line: +		assertEquals(ops.getCanonicalForm(A3), A1);
>, <Line: +		assertEquals(ops.getCanonicalForm(B2), B1.getInverse());
>, <Line: +		assertEquals(ops.getCanonicalForm(B3), B1); 
>, <Line: +		assertEquals(ops.getCanonicalForm(C2), C1.getInverse());
>, <Line: +		assertEquals(ops.getCanonicalForm(C3), C1);
>]
[<Line: -import it.unibz.krdb.obda.ontology.OntologyVocabulary;
>, <Line: -import it.unibz.krdb.obda.owlrefplatform.core.tboxprocessing.TBoxReasonerToOntology;
>, <Line: -import java.io.File;
>, <Line: -import org.semanticweb.owlapi.apibinding.OWLManager;
>, <Line: -import org.semanticweb.owlapi.model.OWLOntology;
>, <Line: -import org.semanticweb.owlapi.model.OWLOntologyManager;
>, <Line: -		 * The ontology contains A1 = A2 = A3, B1 ISA A1, B1 = B2 = B3, this
>, <Line: -		 * gives 9 inferences and R1 = R2 = R3, S1 ISA R1, S1 = S2 = S3, this
>, <Line: -		 * gives 36 inferences (counting inverse related inferences, and exist
>, <Line: -		 * related inferences. Total, 45 inferences
>, <Line: -		OWLOntologyManager man = OWLManager.createOWLOntologyManager();
>, <Line: -		File file = new File(path + "test_401.owl");
>, <Line: -		OWLOntology owlonto = man.loadOntologyFromOntologyDocument(file);
>, <Line: -		Ontology ontology = OWLAPI3TranslatorUtility.translate(owlonto);
>, <Line: -		TBoxReasoner reasoner = new TBoxReasonerImpl(ontology);
>, <Line: -		TBoxReasoner simple = TBoxReasonerImpl.getEquivalenceSimplifiedReasoner(reasoner);
>, <Line: -		Ontology simpleonto = TBoxReasonerToOntology.getOntology(simple);
>, <Line: -		assertEquals(3, simpleonto.getVocabulary().getClasses().size());
>, <Line: -		assertEquals(0, simpleonto.getVocabulary().getObjectProperties().size());
>, <Line: -		System.out.println(simpleonto.getSubClassAxioms());
>, <Line: -		System.out.println(simpleonto.getSubObjectPropertyAxioms());
>, <Line: -		System.out.println(simpleonto.getSubDataPropertyAxioms());
>, <Line: -		assertEquals(3, simpleonto.getSubClassAxioms().size() 
>, <Line: -					+ simpleonto.getSubObjectPropertyAxioms().size() 
>, <Line: -					+ simpleonto.getSubDataPropertyAxioms().size());
>, <Line: -//		assertEquals(3, simpleonto.getVocabulary().size());
>, <Line: -		OntologyVocabulary voc = ontology.getVocabulary();
>, <Line: -		//assertEquals(6, eqMap.keySetSize());
>, <Line: -		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "A1")) != null);
>, <Line: -		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "B1")) != null);
>, <Line: -		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "C1")) != null);
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "A2")) != null); // no A2 in the ontology
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "A3")) != null);
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "B2")) != null);
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "B3")) != null); // Roman: instead of B1
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "C2")) != null);
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "C3")) != null);
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "A1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "A2")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "A1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "A3")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "B1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "B2"))); // Roman: B3 -> B1
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "B1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "B3"))); // Roman: B3 <-> B1
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "C1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "C2")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "C1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "C3")));
>, <Line: -		 * The ontology contains A1 = A2 = A3, B1 ISA A1, B1 = B2 = B3, this
>, <Line: -		 * gives 9 inferences and R1 = R2 = R3, S1 ISA R1, S1 = S2 = S3, this
>, <Line: -		 * gives 36 inferences (counting inverse related inferences, and exist
>, <Line: -		 * related inferences. Total, 45 inferences
>, <Line: -		OWLOntologyManager man = OWLManager.createOWLOntologyManager();
>, <Line: -		File file = new File(path + "test_402.owl");
>, <Line: -		OWLOntology owlonto = man.loadOntologyFromOntologyDocument(file);
>, <Line: -		Ontology ontology = OWLAPI3TranslatorUtility.translate(owlonto);
>, <Line: -		TBoxReasoner reasoner = new TBoxReasonerImpl(ontology);
>, <Line: -		TBoxReasoner simple = TBoxReasonerImpl.getEquivalenceSimplifiedReasoner(reasoner);
>, <Line: -		Ontology simpleonto = TBoxReasonerToOntology.getOntology(simple);
>, <Line: -		assertEquals(0, simpleonto.getVocabulary().getClasses().size());
>, <Line: -		assertEquals(3, simpleonto.getVocabulary().getObjectProperties().size());
>, <Line: -		assertEquals(12,  simpleonto.getSubClassAxioms().size() 
>, <Line: -							+ simpleonto.getSubObjectPropertyAxioms().size() 
>, <Line: -							+ simpleonto.getSubDataPropertyAxioms().size());
>, <Line: -//		assertEquals(3, simpleonto.getVocabulary().size());
>, <Line: -		OntologyVocabulary voc = ontology.getVocabulary();
>, <Line: -		//assertEquals(6, eqMap.keySetSize());
>, <Line: -		assertFalse(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A1")) != null);
>, <Line: -		assertFalse(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B1")) != null);
>, <Line: -		assertFalse(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C1")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A2")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A3")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B2")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B3")) != null); // ROMAN: B1 and B3 ARE SYMMETRIC
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C2")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C3")) != null);
>, <Line: -		assertEquals(voc.getObjectProperty(testURI + "A1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A2")));
>, <Line: -		assertEquals(voc.getObjectProperty(testURI + "A1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A3")));
>, <Line: -		assertEquals(voc.getObjectProperty(testURI + "B1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B2"))); // ROMAN: B3 -> B1
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "B1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B3"))); // ROMAN: B3 <-> B1
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "C1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C2")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "C1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C3")));
>, <Line: -		 * The ontology contains A1 = A2 = A3, B1 ISA A1, B1 = B2 = B3, this
>, <Line: -		 * gives 9 inferences and R1 = R2 = R3, S1 ISA R1, S1 = S2 = S3, this
>, <Line: -		 * gives 36 inferences (counting inverse related inferences, and exist
>, <Line: -		 * related inferences. Total, 45 inferences
>, <Line: -		OWLOntologyManager man = OWLManager.createOWLOntologyManager();
>, <Line: -		File file = new File(path + "test_403.owl");
>, <Line: -		OWLOntology owlonto = man.loadOntologyFromOntologyDocument(file);
>, <Line: -		Ontology ontology = OWLAPI3TranslatorUtility.translate(owlonto);
>, <Line: -		TBoxReasoner reasoner = new TBoxReasonerImpl(ontology);
>, <Line: -		TBoxReasoner simple = TBoxReasonerImpl.getEquivalenceSimplifiedReasoner(reasoner);
>, <Line: -		Ontology simpleonto = TBoxReasonerToOntology.getOntology(simple);
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClasses().toString(), 3, simpleonto.getVocabulary().getClasses().size());
>, <Line: -		assertEquals(3, simpleonto.getVocabulary().getObjectProperties().size());
>, <Line: -		assertEquals(3, simpleonto.getVocabulary().getClasses().size());
>, <Line: -		assertEquals(9,  simpleonto.getSubClassAxioms().size() 
>, <Line: -							+ simpleonto.getSubObjectPropertyAxioms().size() 
>, <Line: -							+ simpleonto.getSubDataPropertyAxioms().size());
>, <Line: -//		assertEquals(6, simpleonto.getVocabulary().size());
>, <Line: -		OntologyVocabulary voc = ontology.getVocabulary();
>, <Line: -		//assertEquals(3, eqMap.keySetSize());
>, <Line: -		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "A1")) != null);
>, <Line: -		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "B1")) != null);
>, <Line: -		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "C1")) != null);
>, <Line: -//		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "B2")) != null); // Roman: no B2 in the ontology
>, <Line: -//		assertFalse(simple.getClassRepresentative(voc.getClass(testURI + "C2")) != null); // Roman: no C2 in the ontology
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "A3")) != null);
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "B3")) != null); // Roman: instead of B1
>, <Line: -		assertTrue(simple.getClassRepresentative(voc.getClass(testURI + "C3")) != null);
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "A1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "A3")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "B1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "B3"))); // Roman B1 <-> B3
>, <Line: -		assertEquals(simpleonto.getVocabulary().getClass(testURI + "C1"),
>, <Line: -					simple.getClassRepresentative(voc.getClass(testURI + "C3")));
>, <Line: -		 * The ontology contains A1 = A2 = A3, B1 ISA A1, B1 = B2 = B3, this
>, <Line: -		 * gives 9 inferences and R1 = R2 = R3, S1 ISA R1, S1 = S2 = S3, this
>, <Line: -		 * gives 36 inferences (counting inverse related inferences, and exist
>, <Line: -		 * related inferences. Total, 45 inferences
>, <Line: -		OWLOntologyManager man = OWLManager.createOWLOntologyManager();
>, <Line: -		File file = new File(path + "test_404.owl");
>, <Line: -		OWLOntology owlonto = man.loadOntologyFromOntologyDocument(file);
>, <Line: -		Ontology ontology = OWLAPI3TranslatorUtility.translate(owlonto);
>, <Line: -		TBoxReasoner reasoner = new TBoxReasonerImpl(ontology);
>, <Line: -		TBoxReasoner simple = TBoxReasonerImpl.getEquivalenceSimplifiedReasoner(reasoner);
>, <Line: -		Ontology simpleonto = TBoxReasonerToOntology.getOntology(simple);
>, <Line: -		assertEquals(12,  simpleonto.getSubClassAxioms().size() 
>, <Line: -								+ simpleonto.getSubObjectPropertyAxioms().size() 
>, <Line: -								+ simpleonto.getSubDataPropertyAxioms().size());
>, <Line: -		assertEquals(0, simpleonto.getVocabulary().getClasses().size());
>, <Line: -		assertEquals(3, simpleonto.getVocabulary().getObjectProperties().size());
>, <Line: -//		assertEquals(3, simpleonto.getVocabulary().size());
>, <Line: -		OntologyVocabulary voc = ontology.getVocabulary();
>, <Line: -		//assertEquals(6, eqMap.keySetSize());
>, <Line: -		assertFalse(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A1")) != null);
>, <Line: -		assertFalse(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B1")) != null);
>, <Line: -		assertFalse(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C1")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A2")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A3")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B2")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B3")) != null); // ROMAN: again, B1 and B3 are symmetric
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C2")) != null);
>, <Line: -		assertTrue(simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C3")) != null);
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "A1").getInverse(),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A2")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "A1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "A3")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "B1").getInverse(),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B2"))); // B3 -> B1
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "B1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "B3")));  //  B1 <-> B3
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "C1").getInverse(),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C2")));
>, <Line: -		assertEquals(simpleonto.getVocabulary().getObjectProperty(testURI + "C1"),
>, <Line: -				simple.getObjectPropertyRepresentative(voc.getObjectProperty(testURI + "C3")));
>]