[<Line: +import it.unibz.krdb.obda.ontology.AssertionFactory;
>, <Line: +import it.unibz.krdb.obda.ontology.InconsistentOntologyException;
>, <Line: +import it.unibz.krdb.obda.ontology.impl.AssertionFactoryImpl;
>, <Line: +	private AssertionFactory ofac = AssertionFactoryImpl.getInstance();
>, <Line: +			Assertion assertion;
>, <Line: +			try {
>, <Line: +				if (predicateName.equals(OBDAVocabulary.RDF_TYPE)) {
>, <Line: +					assertion = ofac.createClassAssertion(objectConstant.getValue(), subjectConstant);
>, <Line: +					if ((objectConstant instanceof URIConstant) || (objectConstant instanceof BNode)) 
>, <Line: +						assertion = ofac.createObjectPropertyAssertion(predicateName, 
>, <Line: +								subjectConstant, (ObjectConstant) objectConstant);
>, <Line: +					else 
>, <Line: +						assertion = ofac.createDataPropertyAssertion(predicateName, 
>, <Line: +									subjectConstant, (ValueConstant) objectConstant);
>, <Line: +				if (assertion != null)
>, <Line: +					tripleAssertions.add(assertion);
>, <Line: +			}
>, <Line: +			catch (InconsistentOntologyException e) {
>, <Line: +				throw new RuntimeException("InconsistentOntologyException: " + 
>, <Line: +							predicateName + " " + subjectConstant + " " + objectConstant);
>]
[<Line: -	private OntologyFactory ofac = OntologyFactoryImpl.getInstance();
>, <Line: -			if (predicateName.equals(OBDAVocabulary.RDF_TYPE)) {
>, <Line: -				OClass concept = ofac.createClass(objectConstant.getValue());
>, <Line: -				ClassAssertion ca = ofac.createClassAssertion(concept, subjectConstant);
>, <Line: -				tripleAssertions.add(ca);
>, <Line: -			} 
>, <Line: -			else {
>, <Line: -				if (objectConstant instanceof URIConstant) {
>, <Line: -					ObjectPropertyExpression prop = ofac.createObjectProperty(predicateName);
>, <Line: -					ObjectPropertyAssertion op = ofac
>, <Line: -							.createObjectPropertyAssertion(prop, subjectConstant,
>, <Line: -									(ObjectConstant) objectConstant);
>, <Line: -					tripleAssertions.add(op);
>, <Line: -				} 
>, <Line: -				else if (objectConstant instanceof BNode) {
>, <Line: -					ObjectPropertyExpression prop = ofac.createObjectProperty(predicateName);
>, <Line: -					ObjectPropertyAssertion op = ofac
>, <Line: -							.createObjectPropertyAssertion(prop, subjectConstant,
>, <Line: -									(ObjectConstant) objectConstant);
>, <Line: -					tripleAssertions.add(op);
>, <Line: -					DataPropertyExpression prop = ofac.createDataProperty(predicateName);
>, <Line: -					DataPropertyAssertion dp = ofac
>, <Line: -							.createDataPropertyAssertion(prop, subjectConstant,
>, <Line: -									(ValueConstant) objectConstant);
>, <Line: -					tripleAssertions.add(dp);
>]