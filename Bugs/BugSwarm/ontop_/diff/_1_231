[<Line: +import it.unibz.krdb.obda.ontology.OntologyVocabulary;
>, <Line: +	public void testSemanticContainment() throws Exception {
>, <Line: +	        OntologyVocabulary vb = dfac.createVocabulary();
>, <Line: +			OClass left = vb.createClass("A");
>, <Line: +			OClass right = vb.createClass("C");
>, <Line: +			Ontology sigma = dfac.createOntology(vb);
>, <Line: +			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(TBoxReasonerImpl.create(sigma), false);
>, <Line: +	        OntologyVocabulary vb = dfac.createVocabulary();
>, <Line: +	        OClass left = vb.createClass("A");
>, <Line: +			ObjectPropertyExpression pright = vb.createObjectProperty("R");
>, <Line: +			Ontology sigma = dfac.createOntology(vb);
>, <Line: +			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(TBoxReasonerImpl.create(sigma), false);
>, <Line: +	        OntologyVocabulary vb = dfac.createVocabulary();			
>, <Line: +			OClass left = vb.createClass("A");
>, <Line: +			ObjectPropertyExpression pright = vb.createObjectProperty("R").getInverse();
>, <Line: +			Ontology sigma = dfac.createOntology(vb);
>, <Line: +			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(TBoxReasonerImpl.create(sigma), false);
>, <Line: +	        OntologyVocabulary vb = dfac.createVocabulary();			
>, <Line: +			ObjectPropertyExpression pleft = vb.createObjectProperty("R");
>, <Line: +			OClass right = vb.createClass("A");
>, <Line: +			Ontology sigma = dfac.createOntology(vb);
>, <Line: +			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(TBoxReasonerImpl.create(sigma), false);
>, <Line: +	        OntologyVocabulary vb = dfac.createVocabulary();
>, <Line: +			OClass right = vb.createClass("A");
>, <Line: +			ObjectPropertyExpression pleft = vb.createObjectProperty("R").getInverse();
>, <Line: +			Ontology sigma = dfac.createOntology(vb);			
>, <Line: +			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(TBoxReasonerImpl.create(sigma), false);
>, <Line: +    public void testFacts() throws Exception {
>, <Line: +        OntologyVocabulary vb = dfac.createVocabulary();
>, <Line: +        OClass left = vb.createClass("A");
>, <Line: +        ObjectPropertyExpression pleft = vb.createObjectProperty("R");
>, <Line: +        Ontology sigma = dfac.createOntology(vb);
>, <Line: +		LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(TBoxReasonerImpl.create(sigma), false);
>]
[<Line: -	public void testSemanticContainment() {
>, <Line: -			Ontology sigma = dfac.createOntology();
>, <Line: -			OClass left = sigma.getVocabulary().createClass("A");
>, <Line: -			OClass right = sigma.getVocabulary().createClass("C");
>, <Line: -			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(new TBoxReasonerImpl(sigma), false);
>, <Line: -			Ontology sigma = OntologyFactoryImpl.getInstance().createOntology();
>, <Line: -			OClass left = sigma.getVocabulary().createClass("A");
>, <Line: -			ObjectPropertyExpression pright = sigma.getVocabulary().createObjectProperty("R");
>, <Line: -			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(new TBoxReasonerImpl(sigma), false);
>, <Line: -			Ontology sigma = OntologyFactoryImpl.getInstance().createOntology();
>, <Line: -			OClass left = sigma.getVocabulary().createClass("A");
>, <Line: -			ObjectPropertyExpression pright = sigma.getVocabulary().createObjectProperty("R").getInverse();
>, <Line: -			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(new TBoxReasonerImpl(sigma), false);
>, <Line: -			Ontology sigma = dfac.createOntology();
>, <Line: -			ObjectPropertyExpression pleft = sigma.getVocabulary().createObjectProperty("R");
>, <Line: -			OClass right = sigma.getVocabulary().createClass("A");
>, <Line: -			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(new TBoxReasonerImpl(sigma), false);
>, <Line: -			Ontology sigma = dfac.createOntology();
>, <Line: -			ObjectPropertyExpression pleft = sigma.getVocabulary().createObjectProperty("R").getInverse();
>, <Line: -			OClass right = sigma.getVocabulary().createClass("A");
>, <Line: -			LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(new TBoxReasonerImpl(sigma), false);
>, <Line: -    public void testFacts() {
>, <Line: -        Ontology sigma = dfac.createOntology();
>, <Line: -        OClass left = sigma.getVocabulary().createClass("A");
>, <Line: -        ObjectPropertyExpression pleft = sigma.getVocabulary().createObjectProperty("R");
>, <Line: -		LinearInclusionDependencies dep = LinearInclusionDependencies.getABoxDependencies(new TBoxReasonerImpl(sigma), false);
>]