[<Line: +import it.unibz.krdb.obda.ontology.impl.DatatypeImpl;
>, <Line: +			if (!concept.isBottom() && !concept.isTop()) {
>, <Line: +				DAGNode node = new DAGNode(concept);
>, <Line: +				// if (!concept.equals(thingConcept)) {
>, <Line: +				// addParent(node, thing);
>, <Line: +				classes.put(concept, node);
>, <Line: +				allnodes.put(concept, node);
>, <Line: +			}
>, <Line: +			if (!role.isBottom() && !role.isTop()) {
>, <Line: +				DAGNode rolenode = new DAGNode(role);
>, <Line: +				roles.put(role, rolenode);
>, <Line: +				ObjectPropertyExpression roleInv = role.getInverse();
>, <Line: +				DAGNode rolenodeinv = new DAGNode(roleInv);
>, <Line: +				roles.put(roleInv, rolenodeinv);
>, <Line: +				ObjectSomeValuesFrom existsRole = role.getDomain();
>, <Line: +				ObjectSomeValuesFrom existsRoleInv = roleInv.getDomain();
>, <Line: +				DAGNode existsNode = new DAGNode(existsRole);
>, <Line: +				DAGNode existsNodeInv = new DAGNode(existsRoleInv);
>, <Line: +				classes.put(existsRole, existsNode);
>, <Line: +				classes.put(existsRoleInv, existsNodeInv);
>, <Line: +				allnodes.put(role, rolenode);
>, <Line: +				allnodes.put(existsRole, existsNode);
>, <Line: +				allnodes.put(existsRoleInv, existsNodeInv);
>, <Line: +				allnodes.put(roleInv, rolenodeinv);
>, <Line: +			}
>, <Line: +			if (!role.isBottom() && !role.isTop()) {
>, <Line: +				DAGNode rolenode = new DAGNode(role);
>, <Line: +				roles.put(role, rolenode);
>, <Line: +				DataSomeValuesFrom existsRole = role.getDomainRestriction(DatatypeImpl.rdfsLiteral); 
>, <Line: +				DataPropertyRangeExpression existsRoleInv = role.getRange(); 
>, <Line: +				DAGNode existsNode = new DAGNode(existsRole);
>, <Line: +				DAGNode existsNodeInv = new DAGNode(existsRoleInv);
>, <Line: +				classes.put(existsRole, existsNode);
>, <Line: +				classes.put(existsRoleInv, existsNodeInv);
>, <Line: +				allnodes.put(role, rolenode);
>, <Line: +				allnodes.put(existsRole, existsNode);
>, <Line: +				allnodes.put(existsRoleInv, existsNodeInv);
>, <Line: +			}
>, <Line: +		DataSomeValuesFrom existsParent = parent.getDomainRestriction(DatatypeImpl.rdfsLiteral); // descFactory.createPropertySomeRestriction(parent);
>, <Line: +		DataSomeValuesFrom existChild = child.getDomainRestriction(DatatypeImpl.rdfsLiteral); // escFactory.createPropertySomeRestriction(child);
>]
[<Line: -			DAGNode node = new DAGNode(concept);
>, <Line: -			// if (!concept.equals(thingConcept)) {
>, <Line: -			// addParent(node, thing);
>, <Line: -			classes.put(concept, node);
>, <Line: -			allnodes.put(concept, node);
>, <Line: -			DAGNode rolenode = new DAGNode(role);
>, <Line: -			roles.put(role, rolenode);
>, <Line: -			ObjectPropertyExpression roleInv = role.getInverse();
>, <Line: -			DAGNode rolenodeinv = new DAGNode(roleInv);
>, <Line: -			roles.put(roleInv, rolenodeinv);
>, <Line: -			ObjectSomeValuesFrom existsRole = role.getDomain();
>, <Line: -			ObjectSomeValuesFrom existsRoleInv = roleInv.getDomain();
>, <Line: -			DAGNode existsNode = new DAGNode(existsRole);
>, <Line: -			DAGNode existsNodeInv = new DAGNode(existsRoleInv);
>, <Line: -			classes.put(existsRole, existsNode);
>, <Line: -			classes.put(existsRoleInv, existsNodeInv);
>, <Line: -			allnodes.put(role, rolenode);
>, <Line: -			allnodes.put(existsRole, existsNode);
>, <Line: -			allnodes.put(existsRoleInv, existsNodeInv);
>, <Line: -			allnodes.put(roleInv, rolenodeinv);
>, <Line: -			// addParent(existsNode, thing);
>, <Line: -			// addParent(existsNodeInv, thing);
>, <Line: -			DAGNode rolenode = new DAGNode(role);
>, <Line: -			roles.put(role, rolenode);
>, <Line: -			//DataPropertyExpression roleInv = role.getInverse();
>, <Line: -			//DAGNode rolenodeinv = new DAGNode(roleInv);
>, <Line: -			//roles.put(roleInv, rolenodeinv);
>, <Line: -			DataSomeValuesFrom existsRole = role.getDomain(); // descFactory.createPropertySomeRestriction(role);
>, <Line: -			DataPropertyRangeExpression existsRoleInv = role.getRange(); //descFactory.createDataPropertyRange(role);
>, <Line: -					//.createPropertySomeRestriction(roleInv);
>, <Line: -			DAGNode existsNode = new DAGNode(existsRole);
>, <Line: -			DAGNode existsNodeInv = new DAGNode(existsRoleInv);
>, <Line: -			classes.put(existsRole, existsNode);
>, <Line: -			classes.put(existsRoleInv, existsNodeInv);
>, <Line: -			allnodes.put(role, rolenode);
>, <Line: -			allnodes.put(existsRole, existsNode);
>, <Line: -			allnodes.put(existsRoleInv, existsNodeInv);
>, <Line: -			//allnodes.put(roleInv, rolenodeinv);
>, <Line: -			// addParent(existsNode, thing);
>, <Line: -			// addParent(existsNodeInv, thing);
>, <Line: -		DataSomeValuesFrom existsParent = parent.getDomain(); // descFactory.createPropertySomeRestriction(parent);
>, <Line: -		DataSomeValuesFrom existChild = child.getDomain(); // escFactory.createPropertySomeRestriction(child);
>]