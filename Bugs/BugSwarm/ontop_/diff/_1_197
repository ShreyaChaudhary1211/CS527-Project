[<Line: +import it.unibz.krdb.obda.ontology.InconsistentOntologyException;
>, <Line: +		try {
>, <Line: +			if (assertion instanceof ClassAssertion) {
>, <Line: +				ClassAssertion ca = (ClassAssertion) assertion;
>, <Line: +				OClass ce = (OClass)reasoner.getClassDAG().getCanonicalForm(ca.getConcept());
>, <Line: +				if (ce != null && !ce.equals(ca.getConcept())) {
>, <Line: +					ObjectConstant object = ca.getIndividual();
>, <Line: +					return ofac.createClassAssertion(ce, object);
>, <Line: +				}			
>, <Line: +			else if (assertion instanceof ObjectPropertyAssertion) {
>, <Line: +				ObjectPropertyAssertion opa = (ObjectPropertyAssertion) assertion;
>, <Line: +				ObjectPropertyExpression property = reasoner.getObjectPropertyDAG().getCanonicalForm(opa.getProperty());
>, <Line: +				if (property != null && !property.equals(opa.getProperty())) {
>, <Line: +					ObjectConstant object1 = opa.getSubject();
>, <Line: +					ObjectConstant object2 = opa.getObject();
>, <Line: +					return ofac.createObjectPropertyAssertion(property, object1, object2);
>, <Line: +				}
>, <Line: +			else if (assertion instanceof DataPropertyAssertion) {
>, <Line: +				DataPropertyAssertion dpa = (DataPropertyAssertion) assertion;
>, <Line: +				DataPropertyExpression property = reasoner.getDataPropertyDAG().getCanonicalForm(dpa.getProperty());
>, <Line: +				if (property != null && !property.equals(dpa.getProperty())) {
>, <Line: +					ObjectConstant object1 = dpa.getSubject();
>, <Line: +					ValueConstant constant = dpa.getValue();
>, <Line: +					return ofac.createDataPropertyAssertion(property, object1, constant);
>, <Line: +				}
>, <Line: +		catch (InconsistentOntologyException e) {
>, <Line: +			throw new RuntimeException("InconsistentOntologyException: " + assertion);
>, <Line: +		}					
>]
[<Line: -	// used in EquivalentTriplePredicateIterator
>, <Line: -		if (assertion instanceof ClassAssertion) {
>, <Line: -			ClassAssertion ca = (ClassAssertion) assertion;
>, <Line: -			OClass description = reasoner.getClassRepresentative(ca.getConcept());
>, <Line: -			if (description != null) {
>, <Line: -				ObjectConstant object = ca.getIndividual();
>, <Line: -				return ofac.createClassAssertion(description, object);
>, <Line: -		} 
>, <Line: -		else if (assertion instanceof ObjectPropertyAssertion) {
>, <Line: -			ObjectPropertyAssertion opa = (ObjectPropertyAssertion) assertion;
>, <Line: -			ObjectPropertyExpression property = reasoner.getObjectPropertyRepresentative(opa.getProperty());
>, <Line: -			if (property != null) {
>, <Line: -				ObjectConstant object1 = opa.getSubject();
>, <Line: -				ObjectConstant object2 = opa.getObject();
>, <Line: -				return ofac.createObjectPropertyAssertion(property, object1, object2);
>, <Line: -		} 
>, <Line: -		else if (assertion instanceof DataPropertyAssertion) {
>, <Line: -			DataPropertyAssertion opa = (DataPropertyAssertion) assertion;
>, <Line: -			DataPropertyExpression property = reasoner.getDataPropertyRepresentative(opa.getProperty());
>, <Line: -			if (property != null) {
>, <Line: -				ObjectConstant object1 = opa.getSubject();
>, <Line: -				ValueConstant constant = opa.getValue();
>, <Line: -				return ofac.createDataPropertyAssertion(property, object1, constant);					
>]