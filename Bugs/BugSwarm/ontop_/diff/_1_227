[]
[<Line: -package it.unibz.krdb.obda.owlrefplatform.core.tboxprocessing;
>, <Line: -import it.unibz.krdb.obda.ontology.DataPropertyExpression;
>, <Line: -import it.unibz.krdb.obda.ontology.DataRangeExpression;
>, <Line: -import it.unibz.krdb.obda.ontology.ObjectPropertyExpression;
>, <Line: -import it.unibz.krdb.obda.ontology.ClassExpression;
>, <Line: -import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.Equivalences;
>, <Line: -import it.unibz.krdb.obda.owlrefplatform.core.dagjgrapht.TBoxReasoner;
>, <Line: -public class TBoxTraversal {
>, <Line: -	public static void traverse(TBoxReasoner reasoner, TBoxTraverseListener listener) {
>, <Line: -		for (Equivalences<ObjectPropertyExpression> nodes : reasoner.getObjectPropertyDAG()) {
>, <Line: -			ObjectPropertyExpression node = nodes.getRepresentative();
>, <Line: -			for (Equivalences<ObjectPropertyExpression> descendants : reasoner.getObjectPropertyDAG().getSub(nodes)) {
>, <Line: -				ObjectPropertyExpression descendant = descendants.getRepresentative();
>, <Line: -				listener.onInclusion(descendant, node);
>, <Line: -			}
>, <Line: -			for (ObjectPropertyExpression equivalent : nodes) {
>, <Line: -				if (!equivalent.equals(node)) {
>, <Line: -					listener.onInclusion(node, equivalent);
>, <Line: -					listener.onInclusion(equivalent, node);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}
>, <Line: -		for (Equivalences<DataPropertyExpression> nodes : reasoner.getDataPropertyDAG()) {
>, <Line: -			DataPropertyExpression node = nodes.getRepresentative();
>, <Line: -			for (Equivalences<DataPropertyExpression> descendants : reasoner.getDataPropertyDAG().getSub(nodes)) {
>, <Line: -				DataPropertyExpression descendant = descendants.getRepresentative();
>, <Line: -				listener.onInclusion(descendant, node);
>, <Line: -			}
>, <Line: -			for (DataPropertyExpression equivalent : nodes) {
>, <Line: -				if (!equivalent.equals(node)) {
>, <Line: -					listener.onInclusion(node, equivalent);
>, <Line: -					listener.onInclusion(equivalent, node);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}
>, <Line: -		for (Equivalences<ClassExpression> nodes : reasoner.getClassDAG()) {
>, <Line: -			ClassExpression node = nodes.getRepresentative();
>, <Line: -			for (Equivalences<ClassExpression> descendants : reasoner.getClassDAG().getSub(nodes)) {
>, <Line: -				ClassExpression descendant = descendants.getRepresentative();
>, <Line: -				listener.onInclusion(descendant, node);
>, <Line: -			}
>, <Line: -			for (ClassExpression equivalent : nodes) {
>, <Line: -				if (!equivalent.equals(node)) {
>, <Line: -					listener.onInclusion(equivalent, node);
>, <Line: -					listener.onInclusion(node, equivalent);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}	
>, <Line: -		for (Equivalences<DataRangeExpression> nodes : reasoner.getDataRangeDAG()) {
>, <Line: -			DataRangeExpression node = nodes.getRepresentative();
>, <Line: -			for (Equivalences<DataRangeExpression> descendants : reasoner.getDataRangeDAG().getSub(nodes)) {
>, <Line: -				DataRangeExpression descendant = descendants.getRepresentative();
>, <Line: -				listener.onInclusion(descendant, node);				
>, <Line: -			}
>, <Line: -			for (DataRangeExpression equivalent : nodes) {
>, <Line: -				if (!equivalent.equals(node)) {
>, <Line: -					listener.onInclusion(node, equivalent);
>, <Line: -					listener.onInclusion(equivalent, node);
>, <Line: -				}
>, <Line: -			}
>, <Line: -		}	
>, <Line: -	}
>, <Line: -}
>]