[<Line: +		long count = 0;
>, <Line: +				obdaModel.getOntologyVocabulary().merge(onto.getVocabulary());
>, <Line: +					count = materializer.getTriplesCount();
>, <Line: +					try (OWLAPI3Materializer materializer = new OWLAPI3Materializer(
>, <Line: +							obdaModel, onto, DO_STREAM_RESULTS)) {
>, <Line: +						Iterator<OWLIndividualAxiom> iterator = materializer.getIterator();
>, <Line: +						while (iterator.hasNext())
>, <Line: +							manager.addAxiom(ontology, iterator.next());
>, <Line: +						manager.saveOntology(ontology, new OWLXMLOntologyFormat(),
>, <Line: +								new WriterDocumentTarget(fileWriter));
>, <Line: +						count = materializer.getTriplesCount();
>, <Line: +						vocab = materializer.getVocabularySize();
>, <Line: +					}
>]
[<Line: -		int count = 0;
>, <Line: -				obdaModel.declareAll(onto.getVocabulary());
>, <Line: -					count = (int) materializer.getTriplesCount();
>, <Line: -					OWLAPI3Materializer materializer = new OWLAPI3Materializer(
>, <Line: -							obdaModel, onto, DO_STREAM_RESULTS);
>, <Line: -					Iterator<OWLIndividualAxiom> iterator = materializer.getIterator();
>, <Line: -					while (iterator.hasNext())
>, <Line: -						manager.addAxiom(ontology, iterator.next());
>, <Line: -					manager.saveOntology(ontology, new OWLXMLOntologyFormat(),
>, <Line: -							new WriterDocumentTarget(fileWriter));
>, <Line: -					count = (int) materializer.getTriplesCount();
>, <Line: -					vocab = materializer.getVocabularySize();
>, <Line: -					materializer.disconnect();
>]