[<Line: +package it.unibz.krdb.obda.ontology.impl;
>, <Line: +/*
>, <Line: + * #%L
>, <Line: + * ontop-obdalib-core
>, <Line: + * %%
>, <Line: + * Copyright (C) 2009 - 2014 Free University of Bozen-Bolzano
>, <Line: + * %%
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + * 
>, <Line: + *      http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + * 
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + * #L%
>, <Line: + */
>, <Line: +import it.unibz.krdb.obda.model.ObjectConstant;
>, <Line: +import it.unibz.krdb.obda.model.ValueConstant;
>, <Line: +import it.unibz.krdb.obda.ontology.AssertionFactory;
>, <Line: +import it.unibz.krdb.obda.ontology.ClassAssertion;
>, <Line: +import it.unibz.krdb.obda.ontology.DataPropertyAssertion;
>, <Line: +import it.unibz.krdb.obda.ontology.DataPropertyExpression;
>, <Line: +import it.unibz.krdb.obda.ontology.InconsistentOntologyException;
>, <Line: +import it.unibz.krdb.obda.ontology.OClass;
>, <Line: +import it.unibz.krdb.obda.ontology.ObjectPropertyAssertion;
>, <Line: +import it.unibz.krdb.obda.ontology.ObjectPropertyExpression;
>, <Line: +import it.unibz.krdb.obda.ontology.OntologyFactory;
>, <Line: +/**
>, <Line: + * factory for ABox assertions 
>, <Line: + * 
>, <Line: + * IMPORTANT: this factory does NOT check whether the class / property has been declared
>, <Line: + * 
>, <Line: + * USES: OntologyFactoryImpl (and so, checks for top / bottom concept / property
>, <Line: +* 			@see rules [C4], [O4], [D4]) 
>, <Line: +  * 
>, <Line: + * @author Roman Kontchakov
>, <Line: + *
>, <Line: + */
>, <Line: +public class AssertionFactoryImpl implements AssertionFactory {
>, <Line: +	private static final AssertionFactoryImpl instance = new AssertionFactoryImpl();
>, <Line: +	private final OntologyFactory ofac = OntologyFactoryImpl.getInstance();
>, <Line: +	private AssertionFactoryImpl() {
>, <Line: +		// NO-OP to make the default constructor private
>, <Line: +	}
>, <Line: +	public static AssertionFactory getInstance() {
>, <Line: +		return instance;
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * creates a class assertion (without checking any vocabulary)
>, <Line: +	 * 
>, <Line: +	 * @return null if it is top class ([C4], @see OntologyFactoryImpl)
>, <Line: +	 * @throws InconsistentOntologyException if it is the bottom class ([C4], @see OntologyFactoryImpl)
>, <Line: +	 */
>, <Line: +	@Override
>, <Line: +	public ClassAssertion createClassAssertion(String className, ObjectConstant o) throws InconsistentOntologyException {
>, <Line: +		OClass oc = new ClassImpl(className);
>, <Line: +		return ofac.createClassAssertion(oc, o);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * creates an object property assertion (without checking any vocabulary)
>, <Line: +	 * 
>, <Line: +	 * @return null if it is top object property ([O4], @see OntologyFactoryImpl)
>, <Line: +	 * @throws InconsistentOntologyException if it is the bottom object property ([O4], @see OntologyFactoryImpl)
>, <Line: +	 */
>, <Line: +	@Override
>, <Line: +	public ObjectPropertyAssertion createObjectPropertyAssertion(String propertyName, ObjectConstant o1, ObjectConstant o2) throws InconsistentOntologyException {
>, <Line: +		ObjectPropertyExpression ope = new ObjectPropertyExpressionImpl(propertyName);
>, <Line: +		return ofac.createObjectPropertyAssertion(ope, o1, o2);
>, <Line: +	}
>, <Line: +	/**
>, <Line: +	 * creates a data property assertion (without checking any vocabulary)
>, <Line: +	 * 
>, <Line: +	 * @return null if it is top data property ([D4], @see OntologyFactoryImpl)
>, <Line: +	 * @throws InconsistentOntologyException if it is the bottom data property ([D4], @see OntologyFactoryImpl)
>, <Line: +	 */
>, <Line: +	@Override
>, <Line: +	public DataPropertyAssertion createDataPropertyAssertion(String propertyName, ObjectConstant o1, ValueConstant o2) throws InconsistentOntologyException {
>, <Line: +		DataPropertyExpression dpe = new DataPropertyExpressionImpl(propertyName);
>, <Line: +		return ofac.createDataPropertyAssertion(dpe, o1, o2);
>, <Line: +	}
>, <Line: +}
>]
[]