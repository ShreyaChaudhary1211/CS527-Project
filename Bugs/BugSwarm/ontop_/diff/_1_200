[<Line: +import it.unibz.krdb.obda.ontology.ImmutableOntologyVocabulary;
>, <Line: +import it.unibz.krdb.obda.ontology.OntologyVocabulary;
>, <Line: +import it.unibz.krdb.obda.ontology.impl.OntologyImpl;
>, <Line: +	private final ImmutableOntologyVocabulary voc;
>, <Line: +	public RDBMSSIRepositoryManager(TBoxReasoner reasonerDag, ImmutableOntologyVocabulary voc) {
>, <Line: +		this.voc = voc;
>, <Line: +			OClass c = voc.getClass(iri);
>, <Line: +			if (voc.containsObjectProperty(iri)) { // reasonerDag.getObjectPropertyDAG().getVertex(ope) != null
>, <Line: +				ObjectPropertyExpression ope = voc.getObjectProperty(iri);
>, <Line: +					DataPropertyExpression dpe = voc.getDataProperty(iri);
>, <Line: +				DataPropertyExpression dpe = voc.getDataProperty(iri);
>, <Line: +			OClass c = voc.getClass(iri);
>, <Line: +				ObjectPropertyExpression ope = voc.getObjectProperty(iri);
>, <Line: +				DataPropertyExpression dpe = voc.getDataProperty(iri);
>, <Line: +			// no mappings for auxiliary roles, which are introduced by the ontology translation process
>, <Line: +			if (!voc.containsObjectProperty(ope.getName())) 
>, <Line: +			// no mappings for auxiliary roles, which are introduced by the ontology translation process
>, <Line: +			if (!voc.containsDataProperty(dpe.getName())) 
>, <Line: +					stm.setString(1, concept.getKey().getName());
>, <Line: +					stm.setString(1, role.getKey().getName());
>, <Line: +					stm.setString(1, role.getKey().getName());
>, <Line: +						stm.setString(1, concept.getKey().getName());
>, <Line: +						stm.setString(1, role.getKey().getName());
>, <Line: +						stm.setString(1, role.getKey().getName());
>]
[<Line: -import it.unibz.krdb.obda.ontology.impl.OntologyVocabularyImpl;
>, <Line: -	private static final OntologyFactory ofac = OntologyFactoryImpl.getInstance();
>, <Line: -	public RDBMSSIRepositoryManager(TBoxReasoner reasonerDag) {
>, <Line: -			OClass c = ofac.createClass(iri);
>, <Line: -			ObjectPropertyExpression ope = ofac.createObjectProperty(iri);
>, <Line: -			if (reasonerDag.getObjectPropertyDAG().getVertex(ope) != null) {
>, <Line: -					DataPropertyExpression dpe = ofac.createDataProperty(iri);
>, <Line: -				DataPropertyExpression dpe = ofac.createDataProperty(iri);
>, <Line: -			OClass c = ofac.createClass(iri);
>, <Line: -				ObjectPropertyExpression ope = ofac.createObjectProperty(iri);
>, <Line: -				DataPropertyExpression dpe = ofac.createDataProperty(iri);
>, <Line: -			// We need to make sure we make no mappings for Auxiliary roles
>, <Line: -			// introduced by the Ontology translation process.
>, <Line: -			if (OntologyVocabularyImpl.isAuxiliaryProperty(ope)) 
>, <Line: -			// We need to make sure we make no mappings for Auxiliary roles
>, <Line: -			// introduced by the Ontology translation process.
>, <Line: -			if (OntologyVocabularyImpl.isAuxiliaryProperty(dpe)) 
>, <Line: -					stm.setString(1, concept.getKey().getPredicate().getName());
>, <Line: -					stm.setString(1, role.getKey().getPredicate().getName());
>, <Line: -					stm.setString(1, role.getKey().getPredicate().getName());
>, <Line: -						stm.setString(1, concept.getKey().getPredicate().getName());
>, <Line: -						stm.setString(1, role.getKey().getPredicate().getName());
>, <Line: -						stm.setString(1, role.getKey().getPredicate().getName());
>]