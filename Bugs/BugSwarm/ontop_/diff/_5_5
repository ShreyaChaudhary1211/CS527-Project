[<Line: +package it.unibz.krdb.sql;
>, <Line: +        import it.unibz.krdb.obda.io.ModelIOManager;
>, <Line: +        import it.unibz.krdb.obda.model.OBDADataFactory;
>, <Line: +        import it.unibz.krdb.obda.model.OBDAModel;
>, <Line: +        import it.unibz.krdb.obda.model.impl.OBDADataFactoryImpl;
>, <Line: +        import it.unibz.krdb.obda.owlrefplatform.core.QuestConstants;
>, <Line: +        import it.unibz.krdb.obda.owlrefplatform.core.QuestPreferences;
>, <Line: +        import it.unibz.krdb.obda.owlrefplatform.owlapi3.*;
>, <Line: +        import org.junit.Test;
>, <Line: +        import org.semanticweb.owlapi.apibinding.OWLManager;
>, <Line: +        import org.semanticweb.owlapi.model.OWLObject;
>, <Line: +        import org.semanticweb.owlapi.model.OWLOntology;
>, <Line: +        import org.semanticweb.owlapi.model.OWLOntologyManager;
>, <Line: +        import org.semanticweb.owlapi.reasoner.SimpleConfiguration;
>, <Line: +        import java.io.File;
>, <Line: +public class MonetDBTest {
>, <Line: +        final String owlfile = "src/test/resources/example/booktutorial.owl";
>, <Line: +        final String obdafile = "src/test/resources/example/booktutorial.obda";
>, <Line: +//    final String owlfile = "src/test/resources/example/exampleBooks.owl";
>, <Line: +//    final String obdafile = "src/test/resources/example/exampleBooks.obda";
>, <Line: +        @Test
>, <Line: +        public void runQuery() throws Exception {
>, <Line: +            /* 
>, <Line: +             * Load the ontology from an external .owl file. 
>, <Line: +            */
>, <Line: +            OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +            OWLOntology ontology = manager.loadOntologyFromOntologyDocument(new File(owlfile));
>, <Line: +            /* 
>, <Line: +            * Load the OBDA model from an external .obda file 
>, <Line: +            */
>, <Line: +            OBDADataFactory fac = OBDADataFactoryImpl.getInstance();
>, <Line: +            OBDAModel obdaModel = fac.getOBDAModel();
>, <Line: +            ModelIOManager ioManager = new ModelIOManager(obdaModel);
>, <Line: +            ioManager.load(obdafile);
>, <Line: +            /* 
>, <Line: +            * * Prepare the configuration for the Quest instance. The example below shows the setup for 
>, <Line: +            * * "Virtual ABox" mode 
>, <Line: +            */
>, <Line: +            QuestPreferences preference = new QuestPreferences();
>, <Line: +            preference.setCurrentValueOf(QuestPreferences.ABOX_MODE, QuestConstants.VIRTUAL);
>, <Line: +            /* 
>, <Line: +            * Create the instance of Quest OWL reasoner. 
>, <Line: +            */
>, <Line: +            QuestOWLFactory factory = new QuestOWLFactory();
>, <Line: +            factory.setOBDAController(obdaModel);
>, <Line: +            factory.setPreferenceHolder(preference);
>, <Line: +            QuestOWL reasoner = (QuestOWL) factory.createReasoner(ontology, new SimpleConfiguration());
>, <Line: +            /* 
>, <Line: +            * Prepare the data connection for querying. 
>, <Line: +            */
>, <Line: +            QuestOWLConnection conn = reasoner.getConnection();
>, <Line: +            QuestOWLStatement st = conn.createStatement();
>, <Line: +            /* 
>, <Line: +            * Get the book information that is stored in the database 
>, <Line: +            */
>, <Line: +            String sparqlQuery =
>, <Line: +                    "PREFIX : <http://meraka/moss/exampleBooks.owl#>\n" +
>, <Line: +                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
>, <Line: +                    "select ?x ?y where {?x rdf:type :Author. ?x :name ?y. FILTER regex(?y,\"Carr\")}";
>, <Line: +//                    "PREFIX : <http://meraka/moss/exampleBooks.owl#>\n" +
>, <Line: +//                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n" +
>, <Line: +//                    "select ?title ?author ?genre ?edition where {\n" +
>, <Line: +//                    "?x a :Book; :title ?title; :genre ?genre; :writtenBy ?y; :hasEdition ?z.\n" +
>, <Line: +//                            "?y a :Author; :name ?author.\n"+
>, <Line: +//                        "?z a :Edition; :editionNumber ?edition}";
>, <Line: +//                    "PREFIX : <http://meraka/moss/exampleBooks.owl#>\n"+
>, <Line: +//                    "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"+
>, <Line: +//                    "select ?x ?y ?z where {?x rdf:type :SpecialEdition. ?x :dateOfPublication ?y. ?x :editionNumber ?z}";
>, <Line: +            try {
>, <Line: +                long t1 = System.currentTimeMillis();
>, <Line: +                QuestOWLResultSet rs = st.executeTuple(sparqlQuery);
>, <Line: +                int columnSize = rs.getColumnCount();
>, <Line: +                while (rs.nextRow()) {
>, <Line: +                    for (int idx = 1; idx <= columnSize; idx++) {
>, <Line: +                        OWLObject binding = rs.getOWLObject(idx);
>, <Line: +                        System.out.print(binding.toString() + ", ");
>, <Line: +                    }
>, <Line: +                    System.out.print("\n");
>, <Line: +                }
>, <Line: +                rs.close();
>, <Line: +                long t2 = System.currentTimeMillis();
>, <Line: +                /* 
>, <Line: +                * Print the query summary 
>, <Line: +                */
>, <Line: +                QuestOWLStatement qst = (QuestOWLStatement) st;
>, <Line: +                String sqlQuery = qst.getUnfolding(sparqlQuery);
>, <Line: +                System.out.println();
>, <Line: +                System.out.println("The input SPARQL query:");
>, <Line: +                System.out.println("=======================");
>, <Line: +                System.out.println(sparqlQuery);
>, <Line: +                System.out.println();
>, <Line: +                System.out.println("The output SQL query:");
>, <Line: +                System.out.println("=====================");
>, <Line: +                System.out.println(sqlQuery);
>, <Line: +                System.out.println("Query Execution Time:");
>, <Line: +                System.out.println("=====================");
>, <Line: +                System.out.println((t2-t1) + "ms");
>, <Line: +            } finally {
>, <Line: +            /* 
>, <Line: +            * Close connection and resources 
>, <Line: +            * */
>, <Line: +                if (st != null && !st.isClosed()) {
>, <Line: +                    st.close();
>, <Line: +                }
>, <Line: +            if (conn != null && !conn.isClosed()) {
>, <Line: +                conn.close();
>, <Line: +            }
>, <Line: +            reasoner.dispose();
>, <Line: +        }
>, <Line: +        }
>, <Line: +/** 
>, <Line: +* Main client program 
>, <Line: + * */
>, <Line: +public static void main(String[] args) {
>, <Line: +    try {
>, <Line: +        MonetDBTest example = new MonetDBTest();
>, <Line: +        example.runQuery();
>, <Line: +    } catch (Exception e) {
>, <Line: +        e.printStackTrace();
>, <Line: +    }
>, <Line: +}
>, <Line: +}
>]
[]