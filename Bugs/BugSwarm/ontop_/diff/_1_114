[<Line: +import com.google.common.collect.ImmutableSet;
>, <Line: +		this.objectPropertyDAG = new EquivalencesDAGImplOnGraph<ObjectPropertyExpression>(reasoner.getObjectPropertyGraph());
>, <Line: +		this.dataPropertyDAG = new EquivalencesDAGImplOnGraph<DataPropertyExpression>(reasoner.getDataPropertyGraph());
>, <Line: +		this.classDAG = new EquivalencesDAGImplOnGraph<ClassExpression>(reasoner.getClassGraph());
>, <Line: +		this.dataRangeDAG = new EquivalencesDAGImplOnGraph<DataRangeExpression>(reasoner.getDataRangeGraph());
>, <Line: +						return new Equivalences<T>(ImmutableSet.copyOf(equivalenceSet), equivalenceSet.iterator().next(), false);
>, <Line: +			return new Equivalences<T>(ImmutableSet.of(desc), desc, false);
>, <Line: +				result.add(new Equivalences<T>(ImmutableSet.of(node)));
>, <Line: +				result.add(new Equivalences<T>(ImmutableSet.of(node)));
>, <Line: +		@Override
>, <Line: +		public T getCanonicalForm(T v) {
>, <Line: +			// TODO Auto-generated method stub
>, <Line: +			return null;
>, <Line: +		return objectPropertyDAG.graph.vertexSet().size() + dataPropertyDAG.graph.vertexSet().size() + classDAG.graph.vertexSet().size();
>, <Line: +		return objectPropertyDAG.graph.edgeSet().size() + dataPropertyDAG.graph.edgeSet().size() +  classDAG.graph.edgeSet().size();
>, <Line: +		return objectPropertyDAG.graph;
>, <Line: +		return dataPropertyDAG.graph;
>, <Line: +		return classDAG.graph;
>]
[<Line: -import it.unibz.krdb.obda.ontology.OClass;
>, <Line: -import it.unibz.krdb.obda.ontology.ObjectSomeValuesFrom;
>, <Line: -import java.util.Collection;
>, <Line: -import java.util.HashSet;
>, <Line: -	private final DefaultDirectedGraph<ObjectPropertyExpression,DefaultEdge> objectPropertyGraph;
>, <Line: -	private final DefaultDirectedGraph<DataPropertyExpression,DefaultEdge> dataPropertyGraph;
>, <Line: -	private final DefaultDirectedGraph<ClassExpression,DefaultEdge> classGraph;
>, <Line: -	private final DefaultDirectedGraph<DataRangeExpression,DefaultEdge> dataRangeGraph;
>, <Line: -		this.objectPropertyGraph = reasoner.getObjectPropertyGraph();
>, <Line: -		this.dataPropertyGraph = reasoner.getDataPropertyGraph();
>, <Line: -		this.classGraph = reasoner.getClassGraph();
>, <Line: -		this.dataRangeGraph = reasoner.getDataRangeGraph();
>, <Line: -		this.objectPropertyDAG = new EquivalencesDAGImplOnGraph<ObjectPropertyExpression>(objectPropertyGraph);
>, <Line: -		this.dataPropertyDAG = new EquivalencesDAGImplOnGraph<DataPropertyExpression>(dataPropertyGraph);
>, <Line: -		this.classDAG = new EquivalencesDAGImplOnGraph<ClassExpression>(classGraph);
>, <Line: -		this.dataRangeDAG = new EquivalencesDAGImplOnGraph<DataRangeExpression>(dataRangeGraph);
>, <Line: -						return new Equivalences<T>(equivalenceSet, equivalenceSet.iterator().next());
>, <Line: -			return new Equivalences<T>(Collections.singleton(desc), desc);
>, <Line: -				Set<T> sources = new HashSet<T>();
>, <Line: -				sources.add(node);
>, <Line: -				result.add(new Equivalences<T>(sources));
>, <Line: -				Set<T> sources = new HashSet<T>();
>, <Line: -				sources.add(node);
>, <Line: -				result.add(new Equivalences<T>(sources));
>, <Line: -	}
>, <Line: -	/***
>, <Line: -	 * Modifies the DAG so that \exists R = \exists R-, so that the reachability
>, <Line: -	 * relation of the original DAG gets extended to the reachability relation
>, <Line: -	 * of T and Sigma chains.
>, <Line: -	 * 
>, <Line: -	 */
>, <Line: -	public void convertIntoChainDAG() {
>, <Line: -		Collection<ClassExpression> nodes = new HashSet<ClassExpression>(classGraph.vertexSet());
>, <Line: -		HashSet<ClassExpression> processedNodes = new HashSet<ClassExpression>();
>, <Line: -		for (ClassExpression node : nodes) {
>, <Line: -			if ((!(node instanceof ObjectSomeValuesFrom) /*&& !(node instanceof DataSomeValuesFrom)*/)
>, <Line: -					|| processedNodes.contains(node)) {
>, <Line: -				continue;
>, <Line: -			}
>, <Line: -			/*
>, <Line: -			 * Adding a cycle between exists R and exists R- for each R.
>, <Line: -			 */
>, <Line: -			ClassExpression existsRin;
>, <Line: -			//if (node instanceof ObjectSomeValuesFrom) {
>, <Line: -				ObjectSomeValuesFrom existsR = (ObjectSomeValuesFrom) node;
>, <Line: -				ObjectPropertyExpression exists = existsR.getProperty();
>, <Line: -				existsRin = exists.getInverse().getDomain();
>, <Line: -			//}
>, <Line: -/*				
>, <Line: -			else {
>, <Line: -				DataSomeValuesFrom existsR = (DataSomeValuesFrom) node;
>, <Line: -				DataPropertyExpression exists = existsR.getProperty();
>, <Line: -				existsRin = fac.createPropertySomeRestriction(exists.getInverse());
>, <Line: -					// TODO: fix DataRange
>, <Line: -//					existsRin = fac.createDataPropertyRange((DataPropertyExpression)exists);
>, <Line: -			}
>, <Line: -*/				
>, <Line: -//			ClassExpression existsR = node;
>, <Line: -			Equivalences<ClassExpression> existsNode = classDAG.getVertex(existsR);
>, <Line: -			Equivalences<ClassExpression> existsInvNode = classDAG.getVertex(existsRin);
>, <Line: -			Set<Equivalences<ClassExpression>> childrenExist 
>, <Line: -					= new HashSet<Equivalences<ClassExpression>>(classDAG.getDirectSub(existsNode));
>, <Line: -			Set<Equivalences<ClassExpression>> childrenExistInv 
>, <Line: -					= new HashSet<Equivalences<ClassExpression>>(classDAG.getDirectSub(existsInvNode));
>, <Line: -			for (Equivalences<ClassExpression> children : childrenExist) {
>, <Line: -				for (ClassExpression child : children) 
>, <Line: -					classGraph.addEdge(child, existsRin);
>, <Line: -			}
>, <Line: -			for (Equivalences<ClassExpression> children : childrenExistInv) {
>, <Line: -				for (ClassExpression child : children) 
>, <Line: -					classGraph.addEdge(child, existsR);
>, <Line: -			}
>, <Line: -			Set<Equivalences<ClassExpression>> parentExist 
>, <Line: -					= new HashSet<Equivalences<ClassExpression>>(classDAG.getDirectSuper(existsNode));
>, <Line: -			Set<Equivalences<ClassExpression>> parentsExistInv 
>, <Line: -					= new HashSet<Equivalences<ClassExpression>>(classDAG.getDirectSuper(existsInvNode));
>, <Line: -			for (Equivalences<ClassExpression> parents : parentExist) {
>, <Line: -				for (ClassExpression parent : parents) 
>, <Line: -					classGraph.addEdge(existsRin, parent);
>, <Line: -			}
>, <Line: -			for (Equivalences<ClassExpression> parents : parentsExistInv) {
>, <Line: -				for (ClassExpression parent : parents) 
>, <Line: -					classGraph.addEdge(existsR, parent);
>, <Line: -			}
>, <Line: -			processedNodes.add(existsRin);
>, <Line: -			processedNodes.add(existsR);
>, <Line: -		return objectPropertyGraph.vertexSet().size() + dataPropertyGraph.vertexSet().size() + classGraph.vertexSet().size();
>, <Line: -		return objectPropertyGraph.edgeSet().size() + dataPropertyGraph.edgeSet().size() +  classGraph.edgeSet().size();
>, <Line: -		return objectPropertyGraph;
>, <Line: -		return dataPropertyGraph;
>, <Line: -		return classGraph;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public OClass getClassRepresentative(OClass p) {
>, <Line: -		// TODO Auto-generated method stub
>, <Line: -		return null;
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	public ObjectPropertyExpression getObjectPropertyRepresentative(ObjectPropertyExpression p) {
>, <Line: -		// TODO Auto-generated method stub
>, <Line: -		return null;
>, <Line: -	}	
>, <Line: -	@Override
>, <Line: -	public DataPropertyExpression getDataPropertyRepresentative(DataPropertyExpression p) {
>, <Line: -		// TODO Auto-generated method stub
>, <Line: -		return null;
>]