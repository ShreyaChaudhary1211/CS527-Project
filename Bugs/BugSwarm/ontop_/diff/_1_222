[<Line: +import it.unibz.krdb.obda.ontology.ImmutableOntologyVocabulary;
>, <Line: +	private TreeWitnessSet(QueryConnectedComponent cc, TBoxReasoner reasoner, ImmutableOntologyVocabulary voc, Collection<TreeWitnessGenerator> allTWgenerators) {
>, <Line: +		this.cache = new QueryConnectedComponentCache(reasoner, voc);
>, <Line: +	public static TreeWitnessSet getTreeWitnesses(QueryConnectedComponent cc, TBoxReasoner reasoner, ImmutableOntologyVocabulary voc, Collection<TreeWitnessGenerator> generators) {		
>, <Line: +		TreeWitnessSet treewitnesses = new TreeWitnessSet(cc, reasoner, voc, generators);
>, <Line: +		private final Map<TermOrderedPair, Intersection<ObjectPropertyExpression>> propertiesCache = new HashMap<>();
>, <Line: +		private final Map<Term, Intersection<ClassExpression>> conceptsCache = new HashMap<>();
>, <Line: +		private final ImmutableOntologyVocabulary voc;
>, <Line: +		private QueryConnectedComponentCache(TBoxReasoner reasoner, ImmutableOntologyVocabulary voc) {
>, <Line: +			this.voc = voc;
>, <Line: +				 if (voc.containsClass(pred.getName())) 
>, <Line: +					 subc.intersectWith(voc.getClass(pred.getName()));
>, <Line: +				 else
>, <Line: +					 subc.setToBottom();
>, <Line: +						if (voc.containsObjectProperty(a.getFunctionSymbol().getName())) {
>, <Line: +							ObjectPropertyExpression prop = voc.getObjectProperty(a.getFunctionSymbol().getName());
>, <Line: +							if (!root.equals(a.getTerm(0)))
>, <Line: +									prop = prop.getInverse();
>, <Line: +							properties.intersectWith(prop);
>, <Line: +						}
>, <Line: +						else
>, <Line: +							properties.setToBottom();
>]
[<Line: -	private TreeWitnessSet(QueryConnectedComponent cc, TBoxReasoner reasoner, Collection<TreeWitnessGenerator> allTWgenerators) {
>, <Line: -		this.cache = new QueryConnectedComponentCache(reasoner);
>, <Line: -	public static TreeWitnessSet getTreeWitnesses(QueryConnectedComponent cc, TBoxReasoner reasoner, Collection<TreeWitnessGenerator> generators) {		
>, <Line: -		TreeWitnessSet treewitnesses = new TreeWitnessSet(cc, reasoner, generators);
>, <Line: -		private final Map<TermOrderedPair, Intersection<ObjectPropertyExpression>> propertiesCache = new HashMap<TermOrderedPair, Intersection<ObjectPropertyExpression>>();
>, <Line: -		private final Map<Term, Intersection<ClassExpression>> conceptsCache = new HashMap<Term, Intersection<ClassExpression>>();
>, <Line: -		private QueryConnectedComponentCache(TBoxReasoner reasoner) {
>, <Line: -				 subc.intersectWith(ontFactory.createClass(pred.getName()));
>, <Line: -						ObjectPropertyExpression prop = ontFactory.createObjectProperty(a.getFunctionSymbol().getName());
>, <Line: -						if (!root.equals(a.getTerm(0)))
>, <Line: -								prop = prop.getInverse();
>, <Line: -						properties.intersectWith(prop);
>]