[<Line: +/*
>, <Line: + * #%L
>, <Line: + * ontop-obdalib-core
>, <Line: + * %%
>, <Line: + * Copyright (C) 2009 - 2014 Free University of Bozen-Bolzano
>, <Line: + * %%
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + * 
>, <Line: + *      http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + * 
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + * #L%
>, <Line: + */
>, <Line: +import java.util.Collection;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.Map;
>, <Line: +import it.unibz.krdb.obda.ontology.Datatype;
>, <Line: +/**
>, <Line: + * Represents DataPropertyExpression from the OWL 2 QL Specification
>, <Line: + * 
>, <Line: + * DataPropertyExpression := DataProperty
>, <Line: + * 
>, <Line: + * Support for owl:topDataProperty and owl:bottomDataProperty
>, <Line: + * 
>, <Line: + * @author Roman Kontchakov
>, <Line: + *
>, <Line: + */
>, <Line: +	private final String name;
>, <Line: +	private final boolean isTop, isBottom;
>, <Line: +	private final Map<Datatype, DataSomeValuesFrom> domains = new HashMap<>();
>, <Line: +	private static final OBDADataFactory ofac = OBDADataFactoryImpl.getInstance();
>, <Line: +    public static final DataPropertyExpression owlTopDataProperty = new DataPropertyExpressionImpl(owlTopDataPropertyIRI);
>, <Line: +    public static final DataPropertyExpression owlBottomDataProperty = new DataPropertyExpressionImpl(owlBottomDataPropertyIRI);
>, <Line: +	DataPropertyExpressionImpl(String name) {
>, <Line: +		this.predicate = ofac.getDataPropertyPredicate(name);
>, <Line: +		this.name = name;		
>, <Line: +		this.isTop = name.equals(owlTopDataPropertyIRI);
>, <Line: +		this.isBottom = name.equals(owlBottomDataPropertyIRI);
>, <Line: +		this.domains.put(DatatypeImpl.rdfsLiteral, new DataSomeValuesFromImpl(this, DatatypeImpl.rdfsLiteral));
>, <Line: +	public String getName() {
>, <Line: +		return name;
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	public DataSomeValuesFrom getDomainRestriction(Datatype datatype) {
>, <Line: +		DataSomeValuesFrom domain = domains.get(datatype);
>, <Line: +		if (domain == null) {
>, <Line: +			domain = new DataSomeValuesFromImpl(this, datatype);
>, <Line: +			domains.put(datatype, domain);
>, <Line: +		}
>, <Line: +	@Override
>, <Line: +	public Collection<DataSomeValuesFrom> getAllDomainRestrictions() {
>, <Line: +		return domains.values();
>, <Line: +	}
>, <Line: +		return isBottom;
>, <Line: +		return isTop;
>, <Line: +		if (obj == this)
>, <Line: +			return true;
>, <Line: +			return name.equals(other.name);
>, <Line: +		// object and data properties share the same name space	
>, <Line: +			return (false == other.isInverse()) && name.equals(other.getName());
>, <Line: +		return name.hashCode();
>, <Line: +		return name;
>]
[<Line: -	private final String string;
>, <Line: -	private final DataSomeValuesFromImpl domain;
>, <Line: -    static final DataPropertyExpression owlTopDataProperty = initialize(owlTopDataPropertyIRI); 
>, <Line: -    static final DataPropertyExpression owlBottomDataProperty = initialize(owlBottomDataPropertyIRI); 
>, <Line: -    private static DataPropertyExpression initialize(String uri) {
>, <Line: -    	final OBDADataFactory ofac = OBDADataFactoryImpl.getInstance();
>, <Line: -		Predicate prop = ofac.getDataPropertyPredicate(uri);
>, <Line: -		return new DataPropertyExpressionImpl(prop);  	
>, <Line: -    }
>, <Line: -	DataPropertyExpressionImpl(Predicate p) {
>, <Line: -		this.predicate = p;
>, <Line: -		this.string = predicate.toString();
>, <Line: -		this.domain = new DataSomeValuesFromImpl(this);
>, <Line: -	public DataSomeValuesFrom getDomain() {
>, <Line: -		return predicate.getName().equals(owlBottomDataPropertyIRI);
>, <Line: -		return predicate.getName().equals(owlTopDataPropertyIRI);
>, <Line: -			return predicate.equals(other.predicate);
>, <Line: -		// the two types of properties share the same name space
>, <Line: -			return (false == other.isInverse()) && predicate.equals(other.getPredicate());
>, <Line: -		return string.hashCode();
>, <Line: -		return string;
>]