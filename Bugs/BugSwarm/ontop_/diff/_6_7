[]
[<Line: -package it.unibz.inf.ontop.test.sparql;
>, <Line: -/*
>, <Line: - * #%L
>, <Line: - * ontop-sparql-compliance
>, <Line: - * %%
>, <Line: - * Copyright (C) 2009 - 2014 Free University of Bozen-Bolzano
>, <Line: - * %%
>, <Line: - * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: - * you may not use this file except in compliance with the License.
>, <Line: - * You may obtain a copy of the License at
>, <Line: - * 
>, <Line: - *      http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - * 
>, <Line: - * Unless required by applicable law or agreed to in writing, software
>, <Line: - * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - * See the License for the specific language governing permissions and
>, <Line: - * limitations under the License.
>, <Line: - * #L%
>, <Line: - */
>, <Line: -import com.google.common.collect.ImmutableSet;
>, <Line: -import it.unibz.inf.ontop.rdf4j.repository.OntopRepository;
>, <Line: -import it.unibz.inf.ontop.si.OntopSemanticIndexLoader;
>, <Line: -import it.unibz.inf.ontop.si.SemanticIndexException;
>, <Line: -import junit.framework.Test;
>, <Line: -import org.eclipse.rdf4j.query.Dataset;
>, <Line: -import org.eclipse.rdf4j.repository.Repository;
>, <Line: -import org.junit.Ignore;
>, <Line: -import java.util.Properties;
>, <Line: -import java.util.Set;
>, <Line: -// Test of SPARQL 1.0 compliance
>, <Line: -@Ignore("We are testing the modified version MemorySPARQLOntopQueryTest")
>, <Line: -public class MemorySPARQLQueryTest extends SPARQLQueryParent {
>, <Line: -	/* List of UNSUPPORTED QUERIES */
>, <Line: -	private static final String algebraManifest = "http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#";
>, <Line: -	private static final String basicManifest = "http://www.w3.org/2001/sw/DataAccess/tests/data-r2/basic/manifest#";
>, <Line: -	private static final String booleanManifest = "http://www.w3.org/2001/sw/DataAccess/tests/data-r2/boolean-effective-value/manifest#";
>, <Line: -	private static final String castManifest = "http://www.w3.org/2001/sw/DataAccess/tests/data-r2/cast/manifest#";
>, <Line: -	private static final String constructManifest = "http://www.w3.org/2001/sw/DataAccess/tests/data-r2/construct/manifest#";
>, <Line: -    private static final String datasetManifest = "http://www.w3.org/2001/sw/DataAccess/tests/data-r2/dataset/manifest#";
>, <Line: -	private static final String distinctManifest = "http://www.w3.org/2001/sw/DataAccess/tests/data-r2/distinct/manifest#";
>, <Line: -	private static final String exprBuiltInManifest ="http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-builtin/manifest#";
>, <Line: -	private static final String exprEqualsManifest ="http://www.w3.org/2001/sw/DataAccess/tests/data-r2/expr-equals/manifest#";
>, <Line: -    private static final String graphManifest ="http://www.w3.org/2001/sw/DataAccess/tests/data-r2/graph/manifest#";
>, <Line: -	private static final String openWorldManifest ="http://www.w3.org/2001/sw/DataAccess/tests/data-r2/open-world/manifest#";
>, <Line: -	private static final String regexManifest ="http://www.w3.org/2001/sw/DataAccess/tests/data-r2/regex/manifest#";
>, <Line: -	private static final String sortManifest ="http://www.w3.org/2001/sw/DataAccess/tests/data-r2/sort/manifest#";
>, <Line: -	private static final String typePromotionManifest ="http://www.w3.org/2001/sw/DataAccess/tests/data-r2/type-promotion/manifest#";
>, <Line: -	private static Set<String> IGNORE = ImmutableSet.of(
>, <Line: -			/* DATA-R2: ALGEBRA
>, <Line: -			not well designed queries actually return correct results :
>, <Line: -			:nested-opt-1
>, <Line: -			:nested-opt-2
>, <Line: -			:opt-filter-1
>, <Line: -			:opt-filter-2 */
>, <Line: -			//Unexpected exception: Unbounded variable: v2 Problem already appears in the filter datalog translation (missing variable v)
>, <Line: -			//LeftJoin(http://example/q(URI1(0),w),http://example/p(URI1(0),v2),EQ("null",http://www.w3.org/2001/XMLSchema#integer(1)))
>, <Line: -			algebraManifest + "filter-scope-1",
>, <Line: -			//Empty results. WON'T FIX: GRAPH issue Problem already appears in the datalog  translation
>, <Line: -			algebraManifest + "join-combo-2",
>, <Line: -			//error, missing a result, null equalities
>, <Line: -			algebraManifest + "join-combo-1",
>, <Line: -			//Unexpected exception: Unbounded variable: v2 Problem already appears in the filter datalog translation (missing variable v) # ?v is not in scope so ?v2 never set
>, <Line: -			//expected empty ripTesult
>, <Line: -			algebraManifest + "opt-filter-3",
>, <Line: -			/* DATA-R2: BASIC*/
>, <Line: -			//error, empty query instead of solution. UNIX line end conventions is ignored
>, <Line: -			basicManifest + "quotes-4",
>, <Line: -			//missing result "." is not considered as part of the decimal (error is already in the sparql algebra)
>, <Line: -			basicManifest + "term-6",
>, <Line: -			//MalformedQueryException SPARQL Parser Encountered "."  "." is not considered as part of the decimal (error is already in the sparql algebra)
>, <Line: -			basicManifest + "term-7",
>, <Line: -			/* DATA-R2: BOOLEAN EFFECTIVE VALUE */
>, <Line: -			//Cannot return the SQL type for: w
>, <Line: -			booleanManifest + "dawg-bev-5",
>, <Line: -			/* DATA-R2: CAST
>, <Line: -			Cast with function call on the datatype is not yet supported e.g. FILTER(datatype(xsd:double(?v)) = xsd:double) . */
>, <Line: -			castManifest + "cast-str",
>, <Line: -			castManifest + "cast-flt",
>, <Line: -			castManifest + "cast-dbl",
>, <Line: -			castManifest + "cast-dec",
>, <Line: -			castManifest + "cast-int",
>, <Line: -			castManifest + "cast-dT",
>, <Line: -			castManifest + "cast-bool",
>, <Line: -			/* DATA-R2: CONSTRUCT Null pointer exception */
>, <Line: -			constructManifest + "construct-3",
>, <Line: -			constructManifest + "construct-4",
>, <Line: -            /* DATA-R2: DATASET NullPointerException
>, <Line: -            loading unsupported  */
>, <Line: -            datasetManifest + "dawg-dataset-01",
>, <Line: -            datasetManifest + "dawg-dataset-02",
>, <Line: -            datasetManifest + "dawg-dataset-03",
>, <Line: -            datasetManifest + "dawg-dataset-04",
>, <Line: -            datasetManifest + "dawg-dataset-05",
>, <Line: -            datasetManifest + "dawg-dataset-06",
>, <Line: -            datasetManifest + "dawg-dataset-07",
>, <Line: -            datasetManifest + "dawg-dataset-08",
>, <Line: -            datasetManifest + "dawg-dataset-09",
>, <Line: -            datasetManifest + "dawg-dataset-10",
>, <Line: -            datasetManifest + "dawg-dataset-11",
>, <Line: -            datasetManifest + "dawg-dataset-12",
>, <Line: -            datasetManifest + "dawg-dataset-09b",
>, <Line: -            datasetManifest + "dawg-dataset-10b",
>, <Line: -            datasetManifest + "dawg-dataset-12b",
>, <Line: -			/* DATA-R2: DISTINCT Missing and unexpected bindings  */
>, <Line: -			distinctManifest + "no-distinct-9",
>, <Line: -			distinctManifest + "distinct-9",
>, <Line: -			/* DATA-R2: EXPR-BUILTIN   */
>, <Line: -			//unknown datatype are not supported, so missing type
>, <Line: -			exprBuiltInManifest + "dawg-isLiteral-1",
>, <Line: -			//Illegal subject value: ""^^<http://www.w3.org/2001/XMLSchema#integer>
>, <Line: -			exprBuiltInManifest + "dawg-langMatches-2",
>, <Line: -			//missing and unexpected bindings:
>, <Line: -			exprBuiltInManifest + "sameTerm-eq",
>, <Line: -			//Missing bindings:
>, <Line: -			exprBuiltInManifest + "sameTerm-not-eq",
>, <Line: -			//missing and unexpected bindings:
>, <Line: -			// The reason is because DBMS may modify the string representation
>, <Line: -			// of the original data no support for custom datatype
>, <Line: -			exprBuiltInManifest + "sameTerm-simple",
>, <Line: -			//Missing bindings The reason is because DBMS may modify the string representation
>, <Line: -			//  of the original data, i.e., "1"^^xsd:double --> 1.0
>, <Line: -			exprBuiltInManifest + "dawg-str-1",
>, <Line: -			//Illegal subject value: ""^^<http://www.w3.org/2001/XMLSchema#integer>
>, <Line: -			exprBuiltInManifest + "dawg-str-2",
>, <Line: -			//java.lang.NumberFormatException: For input string: "zzz" no support for custom datatype.
>, <Line: -			exprBuiltInManifest + "dawg-str-3",
>, <Line: -			//NumberFormatException: For input string: "" (it should not be considered as a number)
>, <Line: -			exprBuiltInManifest + "dawg-str-4",
>, <Line: -            //unknownType not supported, custom datatype
>, <Line: -            exprBuiltInManifest + "dawg-datatype-2",
>, <Line: -            exprBuiltInManifest + "dawg-lang-1",
>, <Line: -            exprBuiltInManifest + "dawg-lang-2",
>, <Line: -			/* DATA-R2: EXPR-EQUALS   */
>, <Line: -			//never ends don't manage to get the result from the sql query
>, <Line: -			exprEqualsManifest + "eq-2-1",
>, <Line: -			//missing and unexpected bindings, no custom datatypes supported
>, <Line: -			exprEqualsManifest + "eq-2-2",
>, <Line: -			//missing bindings  equality between different
>, <Line: -			//      #    numerical datatypes is not recognized.
>, <Line: -			exprEqualsManifest + "eq-1",
>, <Line: -			exprEqualsManifest + "eq-2",
>, <Line: -			//Data conversion error converting "zzz" Bad datatype handling by the classic mode.
>, <Line: -			exprEqualsManifest + "eq-4",
>, <Line: -            /* DATA-R2: GRAPH   */
>, <Line: -            //Unexpected bindings: it should not return results
>, <Line: -            graphManifest + "dawg-graph-02",
>, <Line: -            //Problem with graph transaltion in SPARQL Projection source of ProjectionElem "g"  not found in Join
>, <Line: -            graphManifest + "dawg-graph-03",
>, <Line: -            graphManifest + "dawg-graph-04",
>, <Line: -            //Unexpected bindings: one result more from dataset2
>, <Line: -            graphManifest + "dawg-graph-05",
>, <Line: -            //Problem with graph transaltion in SPARQL Projection source of ProjectionElem "g"  not found in Join
>, <Line: -            graphManifest + "dawg-graph-06",
>, <Line: -            graphManifest + "dawg-graph-07",
>, <Line: -            graphManifest + "dawg-graph-08",
>, <Line: -            graphManifest + "dawg-graph-09",
>, <Line: -            graphManifest + "dawg-graph-10",
>, <Line: -            graphManifest + "dawg-graph-10b",
>, <Line: -            graphManifest + "dawg-graph-11",
>, <Line: -			/* DATA-R2: OPEN_WORLD   */
>, <Line: -			//missing and unexpected bindings, different time in the unexpected datetime result
>, <Line: -			openWorldManifest +"date-2",
>, <Line: -			openWorldManifest +"date-3",
>, <Line: -			//Missing bindings no result while searching for xsd:date datatype
>, <Line: -			openWorldManifest +"date-4",
>, <Line: -			//Data conversion error converting "v2" data conversion error in sql
>, <Line: -			openWorldManifest +"open-cmp-01",
>, <Line: -			openWorldManifest +"open-cmp-02",
>, <Line: -			//Unexpected bindings: we return values that do not strictly match 001
>, <Line: -			openWorldManifest +"open-eq-01",
>, <Line: -			//Missing bindings: unsupported user-defined datatype
>, <Line: -			openWorldManifest +"open-eq-02",
>, <Line: -            openWorldManifest +"open-eq-05",
>, <Line: -			//Unexpected bindings: should return empty result, we cannot know what is different from an unknown datatype
>, <Line: -			openWorldManifest +"open-eq-06",
>, <Line: -			//Missing bindings eaulity between variables
>, <Line: -			openWorldManifest +"open-eq-07",
>, <Line: -			//Missing bindings: problem handling language tags
>, <Line: -			openWorldManifest +"open-eq-08",
>, <Line: -			openWorldManifest +"open-eq-10",
>, <Line: -			openWorldManifest +"open-eq-11",
>, <Line: -			//Data conversion error converting "xyz"
>, <Line: -			openWorldManifest +"open-eq-12",
>, <Line: -			/* DATA-R2: REGEX
>, <Line: -			Missing bindings #string operation over URI is not supported in SI mode*/
>, <Line: -			regexManifest + "dawg-regex-004",
>, <Line: -			/* DATA-R2: SORT
>, <Line: -			 * Problem with SPARQL translation
>, <Line: -			  * Error translating ORDER BY.
>, <Line: -			   * The current implementation can only sort by variables. This query has a more complex expression*/
>, <Line: -			sortManifest + "dawg-sort-numbers",
>, <Line: -			sortManifest + "dawg-sort-builtin",
>, <Line: -			sortManifest + "dawg-sort-function",
>, <Line: -			/* DATA-R2: TYPE-PROMOTION
>, <Line: -			 * all removed because of unsupported types */
>, <Line: -			typePromotionManifest + "type-promotion-13",
>, <Line: -			typePromotionManifest + "type-promotion-11",
>, <Line: -			typePromotionManifest + "type-promotion-07",
>, <Line: -			typePromotionManifest + "type-promotion-10",
>, <Line: -			typePromotionManifest + "type-promotion-09",
>, <Line: -			typePromotionManifest + "type-promotion-14",
>, <Line: -			typePromotionManifest + "type-promotion-08",
>, <Line: -			typePromotionManifest + "type-promotion-19",
>, <Line: -			typePromotionManifest + "type-promotion-22",
>, <Line: -			typePromotionManifest + "type-promotion-20",
>, <Line: -			typePromotionManifest + "type-promotion-21",
>, <Line: -			typePromotionManifest + "type-promotion-12",
>, <Line: -			typePromotionManifest + "type-promotion-18",
>, <Line: -			typePromotionManifest + "type-promotion-15",
>, <Line: -			typePromotionManifest + "type-promotion-16",
>, <Line: -			typePromotionManifest + "type-promotion-17"
>, <Line: -	);
>, <Line: -	public static Test suite() throws Exception{
>, <Line: -		return suite(true);
>, <Line: -	}
>, <Line: -	public static Test suite(boolean ignoreFailures) throws Exception {
>, <Line: -		return ManifestTestUtils.suite(new Factory() {
>, <Line: -			public MemorySPARQLQueryTest createSPARQLQueryTest(
>, <Line: -					String testURI, String name, String queryFileURL,
>, <Line: -					String resultFileURL, Dataset dataSet,
>, <Line: -					boolean laxCardinality, boolean checkOrder) {
>, <Line: -				if(ignoreFailures && !IGNORE.contains(testURI)) {
>, <Line: -					return new MemorySPARQLQueryTest(testURI, name,
>, <Line: -							queryFileURL, resultFileURL, dataSet, laxCardinality,
>, <Line: -							checkOrder);
>, <Line: -				}
>, <Line: -				return null;
>, <Line: -			}
>, <Line: -		}, "/testcases-dawg/data-r2/manifest-evaluation.ttl");
>, <Line: -	}
>, <Line: -	protected MemorySPARQLQueryTest(String testURI, String name,
>, <Line: -									String queryFileURL, String resultFileURL, Dataset dataSet,
>, <Line: -									boolean laxCardinality, boolean checkOrder) {
>, <Line: -		super(testURI, name, queryFileURL, resultFileURL, dataSet,
>, <Line: -				laxCardinality, checkOrder);
>, <Line: -	}
>, <Line: -	@Override
>, <Line: -	protected Repository newRepository() throws SemanticIndexException {
>, <Line: -		try(OntopSemanticIndexLoader loader = OntopSemanticIndexLoader.loadRDFGraph(dataset, new Properties())) {
>, <Line: -			Repository repository = OntopRepository.defaultRepository(loader.getConfiguration());
>, <Line: -			repository.initialize();
>, <Line: -			return repository;
>, <Line: -		}
>, <Line: -	}
>, <Line: -}>]