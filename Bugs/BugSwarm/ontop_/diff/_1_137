[<Line: +package it.unibz.krdb.obda.reformulation.tests;
>, <Line: +import it.unibz.krdb.obda.ontology.BinaryAxiom;
>, <Line: +import it.unibz.krdb.obda.ontology.ClassExpression;
>, <Line: +import it.unibz.krdb.obda.ontology.DataPropertyExpression;
>, <Line: +import it.unibz.krdb.obda.ontology.DataRangeExpression;
>, <Line: +import it.unibz.krdb.obda.ontology.DataSomeValuesFrom;
>, <Line: +import it.unibz.krdb.obda.ontology.ImmutableOntologyVocabulary;
>, <Line: +import it.unibz.krdb.obda.ontology.NaryAxiom;
>, <Line: +import it.unibz.krdb.obda.ontology.OClass;
>, <Line: +import it.unibz.krdb.obda.ontology.ObjectPropertyExpression;
>, <Line: +import it.unibz.krdb.obda.ontology.ObjectSomeValuesFrom;
>, <Line: +import it.unibz.krdb.obda.ontology.Ontology;
>, <Line: +import it.unibz.krdb.obda.ontology.OntologyFactory;
>, <Line: +import it.unibz.krdb.obda.ontology.OntologyVocabulary;
>, <Line: +import it.unibz.krdb.obda.ontology.impl.OntologyFactoryImpl;
>, <Line: +import it.unibz.krdb.obda.owlapi3.OWLAPI3TranslatorUtility;
>, <Line: +import java.util.Collection;
>, <Line: +import java.util.HashSet;
>, <Line: +import java.util.Iterator;
>, <Line: +import java.util.Set;
>, <Line: +import junit.framework.TestCase;
>, <Line: +import org.junit.Test;
>, <Line: +import org.semanticweb.owlapi.apibinding.OWLManager;
>, <Line: +import org.semanticweb.owlapi.model.IRI;
>, <Line: +import org.semanticweb.owlapi.model.OWLClass;
>, <Line: +import org.semanticweb.owlapi.model.OWLClassExpression;
>, <Line: +import org.semanticweb.owlapi.model.OWLDataFactory;
>, <Line: +import org.semanticweb.owlapi.model.OWLDataProperty;
>, <Line: +import org.semanticweb.owlapi.model.OWLDataRange;
>, <Line: +import org.semanticweb.owlapi.model.OWLDatatype;
>, <Line: +import org.semanticweb.owlapi.model.OWLObjectProperty;
>, <Line: +import org.semanticweb.owlapi.model.OWLOntology;
>, <Line: +import org.semanticweb.owlapi.model.OWLOntologyManager;
>, <Line: +import org.semanticweb.owlapi.vocab.OWL2Datatype;
>, <Line: +import com.google.common.collect.UnmodifiableIterator;
>, <Line: +/**
>, <Line: + * Test for OWLAPI3TranslatorOWL2QL
>, <Line: + * 
>, <Line: + * @author Roman Kontchakov
>, <Line: + * 
>, <Line: + */
>, <Line: +public class OWL2QLTranslatorTest extends TestCase {
>, <Line: +	private static final String owl = "http://www.w3.org/2002/07/owl#";
>, <Line: +	private static final String xsd = "http://www.w3.org/2001/XMLSchema#";
>, <Line: +	private static final String rdfs = "http://www.w3.org/2000/01/rdf-schema#";	
>, <Line: +	@Test
>, <Line: +	public void test_R1_2() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass class1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLClass class2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		OWLClass class3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class3));
>, <Line: +		manager.addAxiom(onto, factory.getOWLEquivalentClassesAxiom(class1, class2, class3));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(3, axs.size());
>, <Line: +		for (BinaryAxiom<ClassExpression> a : axs) {
>, <Line: +			OClass subC = (OClass)a.getSub();
>, <Line: +			OClass superC = (OClass)a.getSuper();
>, <Line: +			if (subC.getName().equals("http://example/A"))
>, <Line: +				assertEquals("http://example/B", superC.getName());				
>, <Line: +			else if (subC.getName().equals("http://example/B"))
>, <Line: +				assertEquals("http://example/C", superC.getName());				
>, <Line: +			else { 
>, <Line: +				assertEquals("http://example/C", subC.getName());				
>, <Line: +				assertEquals("http://example/A", superC.getName());				
>, <Line: +			}
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R1_6() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty class1 = factory.getOWLObjectProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLObjectProperty class2 = factory.getOWLObjectProperty(IRI.create("http://example/Q"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		OWLObjectProperty class3 = factory.getOWLObjectProperty(IRI.create("http://example/R"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class3));
>, <Line: +		manager.addAxiom(onto, factory.getOWLEquivalentObjectPropertiesAxiom(class1, class2, class3));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(3, axs.size());
>, <Line: +		for (BinaryAxiom<ObjectPropertyExpression> a : axs) {
>, <Line: +			ObjectPropertyExpression subC = a.getSub();
>, <Line: +			ObjectPropertyExpression superC = a.getSuper();
>, <Line: +			if (subC.getName().equals("http://example/P"))
>, <Line: +				assertEquals("http://example/Q", superC.getName());				
>, <Line: +			else if (subC.getName().equals("http://example/Q"))
>, <Line: +				assertEquals("http://example/R", superC.getName());				
>, <Line: +			else { 
>, <Line: +				assertEquals("http://example/R", subC.getName());				
>, <Line: +				assertEquals("http://example/P", superC.getName());				
>, <Line: +			}
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R1_8() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty class1 = factory.getOWLObjectProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLObjectProperty class2 = factory.getOWLObjectProperty(IRI.create("http://example/Q"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		manager.addAxiom(onto, factory.getOWLInverseObjectPropertiesAxiom(class1, class2));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(2, axs.size());
>, <Line: +		for (BinaryAxiom<ObjectPropertyExpression> a : axs) {
>, <Line: +			ObjectPropertyExpression subC = a.getSub();
>, <Line: +			ObjectPropertyExpression superC = a.getSuper();
>, <Line: +			if (subC.getName().equals("http://example/P")) {
>, <Line: +				assertEquals("http://example/Q", superC.getName());
>, <Line: +				assertEquals(true, superC.isInverse() != subC.isInverse());
>, <Line: +			}
>, <Line: +			else { 
>, <Line: +				assertEquals("http://example/Q", subC.getName());				
>, <Line: +				assertEquals("http://example/P", superC.getName());				
>, <Line: +				assertEquals(true, superC.isInverse() != subC.isInverse());
>, <Line: +			}
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R1_17() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLDataProperty class1 = factory.getOWLDataProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLDataProperty class2 = factory.getOWLDataProperty(IRI.create("http://example/Q"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		OWLDataProperty class3 = factory.getOWLDataProperty(IRI.create("http://example/R"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class3));
>, <Line: +		manager.addAxiom(onto, factory.getOWLEquivalentDataPropertiesAxiom(class1, class2, class3));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<DataPropertyExpression>> axs = dlliteonto.getSubDataPropertyAxioms();
>, <Line: +		assertEquals(3, axs.size());
>, <Line: +		for (BinaryAxiom<DataPropertyExpression> a : axs) {
>, <Line: +			DataPropertyExpression subC = a.getSub();
>, <Line: +			DataPropertyExpression superC = a.getSuper();
>, <Line: +			if (subC.getName().equals("http://example/P"))
>, <Line: +				assertEquals("http://example/Q", superC.getName());				
>, <Line: +			else if (subC.getName().equals("http://example/Q"))
>, <Line: +				assertEquals("http://example/R", superC.getName());				
>, <Line: +			else { 
>, <Line: +				assertEquals("http://example/R", subC.getName());				
>, <Line: +				assertEquals("http://example/P", superC.getName());				
>, <Line: +			}
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R2_9() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty class1 = factory.getOWLObjectProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLClass class2 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		manager.addAxiom(onto, factory.getOWLObjectPropertyDomainAxiom(class1, class2));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(1, axs.size());
>, <Line: +		for (BinaryAxiom<ClassExpression> a : axs) {
>, <Line: +			ObjectSomeValuesFrom subC = (ObjectSomeValuesFrom) a.getSub();
>, <Line: +			OClass superC = (OClass) a.getSuper();
>, <Line: +			assertEquals("http://example/P", subC.getProperty().getName());				
>, <Line: +			assertEquals(false, subC.getProperty().isInverse());				
>, <Line: +			assertEquals("http://example/A", superC.getName());				
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R2_10() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty class1 = factory.getOWLObjectProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLClass class2 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		manager.addAxiom(onto, factory.getOWLObjectPropertyRangeAxiom(class1, class2));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(1, axs.size());
>, <Line: +		for (BinaryAxiom<ClassExpression> a : axs) {
>, <Line: +			ObjectSomeValuesFrom subC = (ObjectSomeValuesFrom) a.getSub();
>, <Line: +			OClass superC = (OClass) a.getSuper();
>, <Line: +			assertEquals("http://example/P", subC.getProperty().getName());				
>, <Line: +			assertEquals(true, subC.getProperty().isInverse());				
>, <Line: +			assertEquals("http://example/A", superC.getName());				
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R2_19() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLDataProperty class1 = factory.getOWLDataProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLClass class2 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDataPropertyDomainAxiom(class1, class2));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(1, axs.size());
>, <Line: +		for (BinaryAxiom<ClassExpression> a : axs) {
>, <Line: +			DataSomeValuesFrom subC = (DataSomeValuesFrom) a.getSub();
>, <Line: +			OClass superC = (OClass) a.getSuper();
>, <Line: +			assertEquals("http://example/P", subC.getProperty().getName());				
>, <Line: +			assertEquals("http://example/A", superC.getName());				
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R3_13() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty class1 = factory.getOWLObjectProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSymmetricObjectPropertyAxiom(class1));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(1, axs.size());
>, <Line: +		for (BinaryAxiom<ObjectPropertyExpression> a : axs) {
>, <Line: +			ObjectPropertyExpression subC = a.getSub();
>, <Line: +			ObjectPropertyExpression superC = a.getSuper();
>, <Line: +			assertEquals("http://example/P", subC.getName());				
>, <Line: +			assertEquals("http://example/P", superC.getName());				
>, <Line: +			assertEquals(true, subC.isInverse() != superC.isInverse());				
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R3_14() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty class1 = factory.getOWLObjectProperty(IRI.create("http://example/P"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		manager.addAxiom(onto, factory.getOWLAsymmetricObjectPropertyAxiom(class1));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<NaryAxiom<ObjectPropertyExpression>> axs = dlliteonto.getDisjointObjectPropertiesAxioms();
>, <Line: +		assertEquals(1, axs.size());
>, <Line: +		for (NaryAxiom<ObjectPropertyExpression> a : axs) {
>, <Line: +			assertEquals(2, a.getComponents().size());						
>, <Line: +			Iterator<ObjectPropertyExpression> it = a.getComponents().iterator();
>, <Line: +			ObjectPropertyExpression subC = it.next();
>, <Line: +			ObjectPropertyExpression superC = it.next();
>, <Line: +			assertEquals("http://example/P", subC.getName());				
>, <Line: +			assertEquals("http://example/P", superC.getName());				
>, <Line: +			assertEquals(true, subC.isInverse() != superC.isInverse());				
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R4() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass class1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLClass class2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		OWLClass class3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class3));
>, <Line: +		OWLClass class4 = factory.getOWLClass(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class4));
>, <Line: +		OWLClassExpression expr = factory.getOWLObjectIntersectionOf(class2, 
>, <Line: +				factory.getOWLObjectIntersectionOf(class3, class4));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(class1, expr));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(3, axs.size());
>, <Line: +		Set<String> classNames = new HashSet<String>();
>, <Line: +		for (BinaryAxiom<ClassExpression> a : axs) {
>, <Line: +			OClass subC = (OClass)a.getSub();
>, <Line: +			OClass superC = (OClass)a.getSuper();
>, <Line: +			assertEquals("http://example/A", subC.getName());
>, <Line: +			String name = superC.getName();
>, <Line: +			classNames.add(name);
>, <Line: +			assertTrue(name.equals("http://example/B") || name.equals("http://example/C") || name.equals("http://example/D"));				
>, <Line: +		}
>, <Line: +		assertEquals(3, classNames.size());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R5() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass class1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLClass class2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		OWLClass class3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class3));
>, <Line: +		OWLClass class4 = factory.getOWLClass(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class4));
>, <Line: +		OWLClassExpression expr = factory.getOWLObjectIntersectionOf(class2, 
>, <Line: +				factory.getOWLObjectIntersectionOf(factory.getOWLObjectComplementOf(class3), class4));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(class1, expr));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(2, axs.size());
>, <Line: +		Set<String> classNames = new HashSet<String>();
>, <Line: +		for (BinaryAxiom<ClassExpression> a : axs) {
>, <Line: +			OClass subC = (OClass)a.getSub();
>, <Line: +			OClass superC = (OClass)a.getSuper();
>, <Line: +			assertEquals("http://example/A", subC.getName());
>, <Line: +			String name = superC.getName();
>, <Line: +			classNames.add(name);
>, <Line: +			assertTrue(name.equals("http://example/B") || name.equals("http://example/D"));				
>, <Line: +		}
>, <Line: +		assertEquals(2, classNames.size());
>, <Line: +		Collection<NaryAxiom<ClassExpression>> axs2 = dlliteonto.getDisjointClassesAxioms();
>, <Line: +		assertEquals(1, axs2.size());
>, <Line: +		for (NaryAxiom<ClassExpression> a : axs2) {
>, <Line: +			assertEquals(2, a.getComponents().size());						
>, <Line: +			Iterator<ClassExpression> it = a.getComponents().iterator();
>, <Line: +			OClass subC = (OClass) it.next();
>, <Line: +			OClass superC = (OClass) it.next();
>, <Line: +			assertEquals("http://example/A", subC.getName());				
>, <Line: +			assertEquals("http://example/C", superC.getName());				
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_R6() throws Exception {
>, <Line: +		OntologyFactory factory = OntologyFactoryImpl.getInstance(); 
>, <Line: +		OntologyVocabulary voc = factory.createVocabulary();
>, <Line: +		ObjectPropertyExpression top = voc.createObjectProperty("http://www.w3.org/2002/07/owl#topObjectProperty");
>, <Line: +		ObjectPropertyExpression topInv = top.getInverse();
>, <Line: +		ObjectPropertyExpression topInvInv = topInv.getInverse();
>, <Line: +		assertTrue(topInv == topInvInv);
>, <Line: +		ObjectPropertyExpression top2 = voc.createObjectProperty("http://www.w3.org/2002/07/owl#topObjectProperty");
>, <Line: +		assertEquals(top2, topInv);
>, <Line: +		ObjectPropertyExpression bot = voc.createObjectProperty("http://www.w3.org/2002/07/owl#bottomObjectProperty");
>, <Line: +		ObjectPropertyExpression botInv = bot.getInverse();
>, <Line: +		ObjectPropertyExpression botInvInv = botInv.getInverse();
>, <Line: +		assertTrue(botInv == botInvInv);
>, <Line: +		ObjectPropertyExpression bot2 = voc.createObjectProperty("http://www.w3.org/2002/07/owl#bottomObjectProperty");
>, <Line: +		assertEquals(bot2, botInv);		
>, <Line: +		assertFalse(bot.equals(top));
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_DT() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLDatatype dt2 = factory.getOWLDatatype(IRI.create("http://example/datatype2"));
>, <Line: +		OWLDataRange dr2 = factory.getOWLDataIntersectionOf(factory.getIntegerOWLDatatype(), OWL2Datatype.XSD_NON_NEGATIVE_INTEGER.getDatatype(factory));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDatatypeDefinitionAxiom(dt2, dr2));
>, <Line: +		OWLDatatype dt = factory.getOWLDatatype(IRI.create("http://example/datatype"));
>, <Line: +		OWLDataRange dr = factory.getOWLDataIntersectionOf(factory.getIntegerOWLDatatype(), dt2);
>, <Line: +		OWLDataRange drp = factory.getOWLDataIntersectionOf(dr, OWL2Datatype.XSD_STRING.getDatatype(factory));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDatatypeDefinitionAxiom(dt, drp));
>, <Line: +		OWLDatatype dt3 = factory.getOWLDatatype(IRI.create("http://example/datatype3"));
>, <Line: +		OWLDataRange dr3 = factory.getOWLDataIntersectionOf(OWL2Datatype.XSD_DECIMAL.XSD_INTEGER.getDatatype(factory), OWL2Datatype.OWL_REAL.getDatatype(factory));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDatatypeDefinitionAxiom(dt3, dr3));
>, <Line: +		OWLDatatype dt4 = factory.getOWLDatatype(IRI.create("http://example/datatype3"));
>, <Line: +		OWLDataRange dr4 = factory.getOWLDataIntersectionOf(OWL2Datatype.XSD_DECIMAL.XSD_INTEGER.getDatatype(factory), OWL2Datatype.XSD_BOOLEAN.getDatatype(factory));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDatatypeDefinitionAxiom(dt4, dr4));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);		
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void test_C1() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass class1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class1));
>, <Line: +		OWLClass class2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class2));
>, <Line: +		OWLClass class3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(class3));
>, <Line: +		OWLClass owlThing = factory.getOWLClass(IRI.create(owl + "Thing"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlThing));
>, <Line: +		OWLClass owlNothing = factory.getOWLClass(IRI.create(owl + "Nothing"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlNothing));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(owlNothing, class1));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(class2, owlThing));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(class3, owlNothing));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<ClassExpression>> axs1 = dlliteonto.getDisjointClassesAxioms();
>, <Line: +		assertEquals(1, axs1.size());
>, <Line: +		NaryAxiom<ClassExpression> ax = axs1.iterator().next();
>, <Line: +		assertEquals(2, ax.getComponents().size());
>, <Line: +		Iterator<ClassExpression> it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/C", it.next().toString());
>, <Line: +		assertEquals("http://example/C", it.next().toString());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_D1() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLDataProperty dpe1 = factory.getOWLDataProperty(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe1));
>, <Line: +		OWLDataProperty dpe2 = factory.getOWLDataProperty(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe2));
>, <Line: +		OWLDataProperty dpe3 = factory.getOWLDataProperty(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe3));
>, <Line: +		OWLDataProperty owlTop = factory.getOWLDataProperty(IRI.create(owl + "topDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLDataProperty owlBottom = factory.getOWLDataProperty(IRI.create(owl + "bottomDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubDataPropertyOfAxiom(owlBottom, dpe1));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubDataPropertyOfAxiom(dpe2, owlTop));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubDataPropertyOfAxiom(dpe3, owlBottom));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<DataPropertyExpression>> axs = dlliteonto.getSubDataPropertyAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<DataPropertyExpression>> axs1 = dlliteonto.getDisjointDataPropertiesAxioms();
>, <Line: +		assertEquals(1, axs1.size());
>, <Line: +		NaryAxiom<DataPropertyExpression> ax = axs1.iterator().next();
>, <Line: +		assertEquals(2, ax.getComponents().size());
>, <Line: +		UnmodifiableIterator<DataPropertyExpression> it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/C", it.next().toString());
>, <Line: +		assertEquals("http://example/C", it.next().toString());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_O1() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty ope1 = factory.getOWLObjectProperty(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope1));
>, <Line: +		OWLObjectProperty ope2 = factory.getOWLObjectProperty(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope2));
>, <Line: +		OWLObjectProperty ope3 = factory.getOWLObjectProperty(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope3));
>, <Line: +		OWLObjectProperty owlTop = factory.getOWLObjectProperty(IRI.create(owl + "topObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLObjectProperty owlBottom = factory.getOWLObjectProperty(IRI.create(owl + "bottomObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubObjectPropertyOfAxiom(owlBottom, ope1));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubObjectPropertyOfAxiom(ope2, owlTop));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubObjectPropertyOfAxiom(ope3, owlBottom));
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<ObjectPropertyExpression>> axs1 = dlliteonto.getDisjointObjectPropertiesAxioms();
>, <Line: +		assertEquals(1, axs1.size());
>, <Line: +		NaryAxiom<ObjectPropertyExpression> ax = axs1.iterator().next();
>, <Line: +		assertEquals(2, ax.getComponents().size());
>, <Line: +		UnmodifiableIterator<ObjectPropertyExpression> it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/C", it.next().toString());
>, <Line: +		assertEquals("http://example/C", it.next().toString());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_D2() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLDataProperty dpe1 = factory.getOWLDataProperty(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe1));
>, <Line: +		OWLDataProperty dpe2 = factory.getOWLDataProperty(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe2));
>, <Line: +		OWLDataProperty dpe3 = factory.getOWLDataProperty(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe3));
>, <Line: +		OWLDataProperty dpe4 = factory.getOWLDataProperty(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe4));
>, <Line: +		OWLDataProperty dpe5 = factory.getOWLDataProperty(IRI.create("http://example/E"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe5));
>, <Line: +		OWLDataProperty owlTop = factory.getOWLDataProperty(IRI.create(owl + "topDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLDataProperty owlBottom = factory.getOWLDataProperty(IRI.create(owl + "bottomDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointDataPropertiesAxiom(owlBottom, dpe1)); // nothing
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointDataPropertiesAxiom(dpe2, owlTop, owlBottom)); // empty
>, <Line: +		//manager.addAxiom(onto, factory.getOWLDisjointDataPropertiesAxiom(dpe3, owlBottom, owlTop, owlTop)); // inconsistent
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointDataPropertiesAxiom(dpe4, owlBottom, dpe5)); // normal
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<DataPropertyExpression>> axs = dlliteonto.getSubDataPropertyAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<DataPropertyExpression>> axs1 = dlliteonto.getDisjointDataPropertiesAxioms();
>, <Line: +		assertEquals(2, axs1.size());
>, <Line: +		Iterator<NaryAxiom<DataPropertyExpression>> axIt = axs1.iterator();
>, <Line: +		NaryAxiom<DataPropertyExpression> ax = axIt.next();
>, <Line: +		assertEquals(2, ax.getComponents().size()); // dpe2 (B) is empty
>, <Line: +		Iterator<DataPropertyExpression> it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/D", it.next().toString());
>, <Line: +		assertEquals("http://example/E", it.next().toString());
>, <Line: +		ax = axIt.next();
>, <Line: +		assertEquals(2, ax.getComponents().size()); // dpe4, dpe5 (D, E) are disjoint
>, <Line: +		it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/B", it.next().toString());
>, <Line: +		assertEquals("http://example/B", it.next().toString());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_O2() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty dpe1 = factory.getOWLObjectProperty(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe1));
>, <Line: +		OWLObjectProperty dpe2 = factory.getOWLObjectProperty(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe2));
>, <Line: +		OWLObjectProperty dpe3 = factory.getOWLObjectProperty(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe3));
>, <Line: +		OWLObjectProperty dpe4 = factory.getOWLObjectProperty(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe4));
>, <Line: +		OWLObjectProperty dpe5 = factory.getOWLObjectProperty(IRI.create("http://example/E"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe5));
>, <Line: +		OWLObjectProperty owlTop = factory.getOWLObjectProperty(IRI.create(owl + "topObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLObjectProperty owlBottom = factory.getOWLObjectProperty(IRI.create(owl + "bottomObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointObjectPropertiesAxiom(owlBottom, dpe1)); // nothing
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointObjectPropertiesAxiom(dpe2, owlTop, owlBottom)); // empty
>, <Line: +		//manager.addAxiom(onto, factory.getOWLDisjointDataPropertiesAxiom(dpe3, owlBottom, owlTop, owlTop)); // inconsistent
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointObjectPropertiesAxiom(dpe4, owlBottom, dpe5)); // normal
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<ObjectPropertyExpression>> axs1 = dlliteonto.getDisjointObjectPropertiesAxioms();
>, <Line: +		assertEquals(2, axs1.size());
>, <Line: +		Iterator<NaryAxiom<ObjectPropertyExpression>> axIt = axs1.iterator();
>, <Line: +		NaryAxiom<ObjectPropertyExpression> ax = axIt.next();
>, <Line: +		assertEquals(2, ax.getComponents().size()); // dpe2 (B) is empty
>, <Line: +		Iterator<ObjectPropertyExpression> it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/D", it.next().toString());
>, <Line: +		assertEquals("http://example/E", it.next().toString());
>, <Line: +		ax = axIt.next();
>, <Line: +		assertEquals(2, ax.getComponents().size()); // dpe4, dpe5 (D, E) are disjoint
>, <Line: +		it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/B", it.next().toString());
>, <Line: +		assertEquals("http://example/B", it.next().toString());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_C2() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass dpe1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe1));
>, <Line: +		OWLClass dpe2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe2));
>, <Line: +		OWLClass dpe3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe3));
>, <Line: +		OWLClass dpe4 = factory.getOWLClass(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe4));
>, <Line: +		OWLClass dpe5 = factory.getOWLClass(IRI.create("http://example/E"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe5));
>, <Line: +		OWLClass owlTop = factory.getOWLClass(IRI.create(owl + "Thing"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLClass owlBottom = factory.getOWLClass(IRI.create(owl + "Nothing"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointClassesAxiom(owlBottom, dpe1)); // nothing
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointClassesAxiom(dpe2, owlTop, owlBottom)); // empty
>, <Line: +		//manager.addAxiom(onto, factory.getOWLDisjointDataPropertiesAxiom(dpe3, owlBottom, owlTop, owlTop)); // inconsistent
>, <Line: +		manager.addAxiom(onto, factory.getOWLDisjointClassesAxiom(dpe4, owlBottom, dpe5)); // normal
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<ClassExpression>> axs1 = dlliteonto.getDisjointClassesAxioms();
>, <Line: +		assertEquals(2, axs1.size());
>, <Line: +		Iterator<NaryAxiom<ClassExpression>> axIt = axs1.iterator();
>, <Line: +		NaryAxiom<ClassExpression> ax = axIt.next();
>, <Line: +		assertEquals(2, ax.getComponents().size()); // dpe2 (B) is empty
>, <Line: +		Iterator<ClassExpression> it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/D", it.next().toString());
>, <Line: +		assertEquals("http://example/E", it.next().toString());
>, <Line: +		ax = axIt.next();
>, <Line: +		assertEquals(2, ax.getComponents().size()); // dpe4, dpe5 (D, E) are disjoint
>, <Line: +		it = ax.getComponents().iterator();
>, <Line: +		assertEquals("http://example/B", it.next().toString());
>, <Line: +		assertEquals("http://example/B", it.next().toString());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_D3() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLDataProperty dpe1 = factory.getOWLDataProperty(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(dpe1));
>, <Line: +		OWLDataProperty owlTop = factory.getOWLDataProperty(IRI.create(owl + "topDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLDataProperty owlBottom = factory.getOWLDataProperty(IRI.create(owl + "bottomDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		OWLDataRange integer = factory.getOWLDatatype(IRI.create(xsd + "integer"));
>, <Line: +		OWLDataRange literal = factory.getOWLDatatype(IRI.create(rdfs + "Literal"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDataPropertyRangeAxiom(owlBottom, integer)); // nothing
>, <Line: +		manager.addAxiom(onto, factory.getOWLDataPropertyRangeAxiom(dpe1, literal)); // empty
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<DataRangeExpression>> axs = dlliteonto.getSubDataRangeAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_D5() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass ce1 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce2 = factory.getOWLClass(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLDataProperty owlTop = factory.getOWLDataProperty(IRI.create(owl + "topDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLDataProperty owlBottom = factory.getOWLDataProperty(IRI.create(owl + "bottomDataProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		OWLDataRange literal = factory.getOWLDatatype(IRI.create(rdfs + "Literal"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(ce1, 
>, <Line: +							factory.getOWLDataSomeValuesFrom(owlTop, literal))); 
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(
>, <Line: +							factory.getOWLDataSomeValuesFrom(owlBottom, literal), ce2)); 
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<ClassExpression>> axs1 = dlliteonto.getDisjointClassesAxioms();
>, <Line: +		assertEquals(0, axs1.size());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_O3() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLObjectProperty owlTop = factory.getOWLObjectProperty(IRI.create(owl + "topObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLObjectProperty owlBottom = factory.getOWLObjectProperty(IRI.create(owl + "bottomObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		manager.addAxiom(onto, factory.getOWLReflexiveObjectPropertyAxiom(owlTop)); // nothing
>, <Line: +		manager.addAxiom(onto, factory.getOWLIrreflexiveObjectPropertyAxiom(owlBottom)); // nothing
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<ObjectPropertyExpression> axs = dlliteonto.getReflexiveObjectPropertyAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<ObjectPropertyExpression> axs1 = dlliteonto.getIrreflexiveObjectPropertyAxioms();
>, <Line: +		assertEquals(0, axs1.size());
>, <Line: +		{
>, <Line: +			boolean flag = false;
>, <Line: +			try {
>, <Line: +				manager.addAxiom(onto, factory.getOWLReflexiveObjectPropertyAxiom(owlBottom)); 
>, <Line: +				OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +			}
>, <Line: +			catch (RuntimeException e) {
>, <Line: +				if (e.getMessage().startsWith("Incon"))
>, <Line: +					flag = true;
>, <Line: +			}
>, <Line: +			assertTrue(flag);
>, <Line: +		}
>, <Line: +		{
>, <Line: +			boolean flag = false;
>, <Line: +			try {
>, <Line: +				OWLOntology onto2 = manager.createOntology(IRI.create("http://example/testonto2"));
>, <Line: +				manager.addAxiom(onto2, factory.getOWLIrreflexiveObjectPropertyAxiom(owlTop)); 
>, <Line: +				OWLAPI3TranslatorUtility.translate(onto2);
>, <Line: +			}
>, <Line: +			catch (RuntimeException e) {
>, <Line: +				if (e.getMessage().startsWith("Incon"))
>, <Line: +					flag = true;
>, <Line: +			}
>, <Line: +			assertTrue(flag);
>, <Line: +		}
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_O5() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass ce1 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce2 = factory.getOWLClass(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLObjectProperty owlTop = factory.getOWLObjectProperty(IRI.create(owl + "topObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlTop));
>, <Line: +		OWLObjectProperty owlBottom = factory.getOWLObjectProperty(IRI.create(owl + "bottomObjectProperty"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(owlBottom));
>, <Line: +		OWLClass thing = factory.getOWLClass(IRI.create(owl + "Thing"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(ce1, 
>, <Line: +							factory.getOWLObjectSomeValuesFrom(owlTop, thing))); 
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(
>, <Line: +							factory.getOWLObjectSomeValuesFrom(owlBottom, thing), ce2)); 
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(0, axs.size());
>, <Line: +		Collection<NaryAxiom<ClassExpression>> axs1 = dlliteonto.getDisjointClassesAxioms();
>, <Line: +		assertEquals(0, axs1.size());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_O0() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass ce1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce3));
>, <Line: +		OWLObjectProperty ope1 = factory.getOWLObjectProperty(IRI.create("http://example/R"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope1));
>, <Line: +		OWLObjectProperty ope2 = factory.getOWLObjectProperty(IRI.create("http://example/S"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope2));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(ce1, 
>, <Line: +							factory.getOWLObjectSomeValuesFrom(factory.getOWLObjectInverseOf(ope1), ce2))); 
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(ce3, 
>, <Line: +				factory.getOWLObjectSomeValuesFrom(factory.getOWLObjectInverseOf(ope1), ce2))); 
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		ImmutableOntologyVocabulary voc = dlliteonto.getVocabulary();
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		//System.out.println(axs);
>, <Line: +		assertEquals(3, axs.size()); // surrogates for existential restrictions are re-used
>, <Line: +		Iterator<BinaryAxiom<ClassExpression>> it = axs.iterator();
>, <Line: +		BinaryAxiom<ClassExpression> ax = it.next();
>, <Line: +		assertEquals(ax.getSuper(), voc.getClass("http://example/B"));
>, <Line: +		assertEquals(ax.getSub() instanceof ObjectSomeValuesFrom, true);
>, <Line: +		ObjectSomeValuesFrom e = (ObjectSomeValuesFrom)ax.getSub();
>, <Line: +		ObjectPropertyExpression ope = e.getProperty();
>, <Line: +		assertEquals(ope.isInverse(), false);
>, <Line: +		ax = it.next();
>, <Line: +		assertEquals(ax.getSub(), voc.getClass("http://example/C"));
>, <Line: +		assertEquals(ax.getSuper(), ope.getInverse().getDomain());
>, <Line: +		ax = it.next();
>, <Line: +		assertEquals(ax.getSub(), voc.getClass("http://example/A"));
>, <Line: +		assertEquals(ax.getSuper(), ope.getInverse().getDomain());
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs1 = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(1, axs1.size());
>, <Line: +		BinaryAxiom<ObjectPropertyExpression> ax1 = axs1.iterator().next();
>, <Line: +		assertEquals(ax1.getSub(), ope.getInverse());
>, <Line: +		assertEquals(ax1.getSuper(), voc.getObjectProperty("http://example/R").getInverse());
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_O0nested() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass ce1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce3));
>, <Line: +		OWLClass ce4 = factory.getOWLClass(IRI.create("http://example/D"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce4));
>, <Line: +		OWLObjectProperty ope1 = factory.getOWLObjectProperty(IRI.create("http://example/R"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope1));
>, <Line: +		OWLObjectProperty ope2 = factory.getOWLObjectProperty(IRI.create("http://example/S"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope2));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(ce1, 
>, <Line: +							factory.getOWLObjectSomeValuesFrom(factory.getOWLObjectInverseOf(ope1), 
>, <Line: +									factory.getOWLObjectIntersectionOf(
>, <Line: +											factory.getOWLObjectSomeValuesFrom(ope2, ce2), 
>, <Line: +											factory.getOWLObjectComplementOf(ce3), ce4)))); 
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		ImmutableOntologyVocabulary voc = dlliteonto.getVocabulary();
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		assertEquals(4, axs.size()); // surrogates for existential restrictions are re-used
>, <Line: +		Iterator<BinaryAxiom<ClassExpression>> it = axs.iterator();
>, <Line: +		BinaryAxiom<ClassExpression> ax = it.next();
>, <Line: +		assertEquals(ax.getSuper(), voc.getClass("http://example/B"));
>, <Line: +		assertEquals(ax.getSub() instanceof ObjectSomeValuesFrom, true);
>, <Line: +		ObjectPropertyExpression opep = ((ObjectSomeValuesFrom)ax.getSub()).getProperty(); // aux1^-
>, <Line: +		assertEquals(opep.isInverse(), true);
>, <Line: +		ax = it.next();
>, <Line: +		assertEquals(ax.getSub() instanceof ObjectSomeValuesFrom, true);
>, <Line: +		ObjectPropertyExpression ope = ((ObjectSomeValuesFrom)ax.getSub()).getProperty(); // aux
>, <Line: +		assertEquals(ope.isInverse(), false);
>, <Line: +		assertEquals(ax.getSuper(), opep.getInverse().getDomain());
>, <Line: +		ax = it.next();
>, <Line: +		assertEquals(ax.getSub(), ope.getDomain());
>, <Line: +		assertEquals(ax.getSuper(), voc.getClass("http://example/D"));
>, <Line: +		ax = it.next();
>, <Line: +		assertEquals(ax.getSub(), voc.getClass("http://example/A"));
>, <Line: +		assertEquals(ax.getSuper(), ope.getInverse().getDomain());
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs1 = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(2, axs1.size());
>, <Line: +		Iterator<BinaryAxiom<ObjectPropertyExpression>> it1 = axs1.iterator();
>, <Line: +		BinaryAxiom<ObjectPropertyExpression> ax1 = it1.next();
>, <Line: +		assertEquals(ax1.getSub(), opep.getInverse());
>, <Line: +		assertEquals(ax1.getSuper(), voc.getObjectProperty("http://example/S"));
>, <Line: +		ax1 = it1.next();
>, <Line: +		assertEquals(ax1.getSub(), ope.getInverse());
>, <Line: +		assertEquals(ax1.getSuper(), voc.getObjectProperty("http://example/R").getInverse());
>, <Line: +		Collection<NaryAxiom<ClassExpression>> axs2 = dlliteonto.getDisjointClassesAxioms();
>, <Line: +		assertEquals(axs2.size(), 1);
>, <Line: +	}	
>, <Line: +	@Test
>, <Line: +	public void test_O0min() throws Exception {
>, <Line: +		OWLOntologyManager manager = OWLManager.createOWLOntologyManager();
>, <Line: +		OWLDataFactory factory = manager.getOWLDataFactory(); 
>, <Line: +		OWLOntology onto = manager.createOntology(IRI.create("http://example/testonto"));
>, <Line: +		OWLClass ce1 = factory.getOWLClass(IRI.create("http://example/A"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce2 = factory.getOWLClass(IRI.create("http://example/B"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce1));
>, <Line: +		OWLClass ce3 = factory.getOWLClass(IRI.create("http://example/C"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ce3));
>, <Line: +		OWLObjectProperty ope1 = factory.getOWLObjectProperty(IRI.create("http://example/R"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope1));
>, <Line: +		OWLObjectProperty ope2 = factory.getOWLObjectProperty(IRI.create("http://example/S"));
>, <Line: +		manager.addAxiom(onto, factory.getOWLDeclarationAxiom(ope2));
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(ce1, 
>, <Line: +							factory.getOWLObjectSomeValuesFrom(factory.getOWLObjectInverseOf(ope1), ce2))); 
>, <Line: +		manager.addAxiom(onto, factory.getOWLSubClassOfAxiom(ce3, 
>, <Line: +				factory.getOWLObjectMinCardinality(1, factory.getOWLObjectInverseOf(ope1), ce2))); 
>, <Line: +		Ontology dlliteonto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		ImmutableOntologyVocabulary voc = dlliteonto.getVocabulary();
>, <Line: +		Collection<BinaryAxiom<ClassExpression>> axs = dlliteonto.getSubClassAxioms();
>, <Line: +		//System.out.println(axs);
>, <Line: +		assertEquals(3, axs.size()); // surrogates for existential restrictions are re-used
>, <Line: +		Iterator<BinaryAxiom<ClassExpression>> it = axs.iterator();
>, <Line: +		BinaryAxiom<ClassExpression> ax = it.next();
>, <Line: +		assertEquals(ax.getSuper(), voc.getClass("http://example/B"));
>, <Line: +		assertEquals(ax.getSub() instanceof ObjectSomeValuesFrom, true);
>, <Line: +		ObjectSomeValuesFrom e = (ObjectSomeValuesFrom)ax.getSub();
>, <Line: +		ObjectPropertyExpression ope = e.getProperty();
>, <Line: +		assertEquals(ope.isInverse(), false);
>, <Line: +		ax = it.next();
>, <Line: +		assertEquals(ax.getSub(), voc.getClass("http://example/C"));
>, <Line: +		assertEquals(ax.getSuper(), ope.getInverse().getDomain());
>, <Line: +		ax = it.next();
>, <Line: +		assertEquals(ax.getSub(), voc.getClass("http://example/A"));
>, <Line: +		assertEquals(ax.getSuper(), ope.getInverse().getDomain());
>, <Line: +		Collection<BinaryAxiom<ObjectPropertyExpression>> axs1 = dlliteonto.getSubObjectPropertyAxioms();
>, <Line: +		assertEquals(1, axs1.size());
>, <Line: +		BinaryAxiom<ObjectPropertyExpression> ax1 = axs1.iterator().next();
>, <Line: +		assertEquals(ax1.getSub(), ope.getInverse());
>, <Line: +		assertEquals(ax1.getSuper(), voc.getObjectProperty("http://example/R").getInverse());
>, <Line: +	}	
>, <Line: +}
>]
[]