[<Line: +package it.unibz.krdb.obda.ontology;
>, <Line: +/*
>, <Line: + * #%L
>, <Line: + * ontop-obdalib-core
>, <Line: + * %%
>, <Line: + * Copyright (C) 2009 - 2014 Free University of Bozen-Bolzano
>, <Line: + * %%
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + * 
>, <Line: + *      http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + * 
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + * #L%
>, <Line: + */
>, <Line: +import it.unibz.krdb.obda.model.ObjectConstant;
>, <Line: +import it.unibz.krdb.obda.model.ValueConstant;
>, <Line: +/**
>, <Line: + * factory for ABox assertions 
>, <Line: + * 
>, <Line: + * IMPORTANT: this factory does NOT check whether the class / property has been declared
>, <Line: + *
>, <Line: + * (the implementation relies on OntologyFactory and so, it checks for top / bottom concept / property, 
>, <Line: + * 			@see rules [C4], [O4], [D4]) 
>, <Line: + *
>, <Line: + * @author Roman Kontchakov
>, <Line: + *
>, <Line: + */
>, <Line: +public interface AssertionFactory {
>, <Line: +	/**
>, <Line: +	 * creates a class assertion 
>, <Line: +	 * 
>, <Line: +	 * @param className
>, <Line: +	 * @param o
>, <Line: +	 * @return
>, <Line: +	 * @return null if it is top class ([C4])
>, <Line: +	 * @throws InconsistentOntologyException if it is the bottom class ([C4])
>, <Line: +	 */
>, <Line: +	public ClassAssertion createClassAssertion(String className, ObjectConstant o) throws InconsistentOntologyException;
>, <Line: +	/**
>, <Line: +	 * creates an object property assertion 
>, <Line: +	 * 
>, <Line: +	 * @param propertyName
>, <Line: +	 * @param o1
>, <Line: +	 * @param o2
>, <Line: +	 * @return null if it is top object property ([O4])
>, <Line: +	 * @throws InconsistentOntologyException if it is the bottom data property ([O4])
>, <Line: +	 */
>, <Line: +	public ObjectPropertyAssertion createObjectPropertyAssertion(String propertyName, ObjectConstant o1, ObjectConstant o2) throws InconsistentOntologyException;
>, <Line: +	/**
>, <Line: +	 * creates a data property assertion (without checking any vocabulary)
>, <Line: +	 * 
>, <Line: +	 * @param propertyName
>, <Line: +	 * @param o
>, <Line: +	 * @param v
>, <Line: +	 * @return null if it is top data property ([D4])
>, <Line: +	 * @throws InconsistentOntologyException if it is the bottom data property ([D4])
>, <Line: +	 */
>, <Line: +	public DataPropertyAssertion createDataPropertyAssertion(String propertyName, ObjectConstant o, ValueConstant v) throws InconsistentOntologyException;
>, <Line: +}
>]
[]