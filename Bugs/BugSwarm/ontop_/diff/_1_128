[<Line: +import com.google.common.collect.ImmutableSet;
>, <Line: +import junit.framework.TestCase;
>, <Line: +		Ontology onto =  OWLAPI3TranslatorUtility.loadOntologyFromFile(inputFile1);
>, <Line: +		TBoxReasoner dag = TBoxReasonerImpl.create(onto);
>, <Line: +		assertTrue(descendants.contains(new Equivalences<ClassExpression>(ImmutableSet.of(C, D)))); // getDescendants is reflexive
>, <Line: +		assertTrue(descendants.contains(new Equivalences<ClassExpression>(ImmutableSet.of(E, F)))); // getDescendants is reflexive
>, <Line: +		Ontology onto =  OWLAPI3TranslatorUtility.loadOntologyFromFile(inputFile1);
>, <Line: +		TBoxReasoner dag = TBoxReasonerImpl.create(onto);
>, <Line: +		assertTrue(ancestors.contains(new Equivalences<ClassExpression>(ImmutableSet.of(C, D)))); // ancestor is reflexive now
>, <Line: +		assertTrue(ancestors.contains(new Equivalences<ClassExpression>(ImmutableSet.of(E, F))));// ancestor is reflexive now
>, <Line: +		Ontology onto =  OWLAPI3TranslatorUtility.loadOntologyFromFile(inputFile2);
>, <Line: +		TBoxReasoner dag = TBoxReasonerImpl.create(onto);
>, <Line: +		assertTrue(descendants.contains(new Equivalences<ObjectPropertyExpression>(ImmutableSet.of(R, S)))); // getDescendants is reflexive
>, <Line: +		assertTrue(descendants.contains(new Equivalences<ObjectPropertyExpression>(ImmutableSet.of(T, U))));// getDescendants is reflexive
>, <Line: +		Ontology onto =  OWLAPI3TranslatorUtility.loadOntologyFromFile(inputFile2);
>, <Line: +		TBoxReasoner dag = TBoxReasonerImpl.create(onto);
>, <Line: +		assertTrue(ancestors.contains(new Equivalences<ObjectPropertyExpression>(ImmutableSet.of(R, S)))); // ancestor is reflexive now
>, <Line: +		assertTrue(ancestors.contains(new Equivalences<ObjectPropertyExpression>(ImmutableSet.of(T, U))));		// ancestor is reflexive now
>]
[<Line: -import java.io.File;
>, <Line: -import junit.framework.TestCase;
>, <Line: -import org.semanticweb.owlapi.apibinding.OWLManager;
>, <Line: -import org.semanticweb.owlapi.model.OWLOntology;
>, <Line: -import org.semanticweb.owlapi.model.OWLOntologyManager;
>, <Line: -	private static Ontology loadOntology(String filename) throws Exception  {
>, <Line: -		OWLOntologyManager man = OWLManager.createOWLOntologyManager();
>, <Line: -		OWLOntology owlonto = man.loadOntologyFromOntologyDocument(new File(filename));
>, <Line: -		Ontology onto = OWLAPI3TranslatorUtility.translate(owlonto);
>, <Line: -		return onto;
>, <Line: -	}
>, <Line: -		Ontology onto = loadOntology(inputFile1);
>, <Line: -		TBoxReasoner dag = new TBoxReasonerImpl(onto);
>, <Line: -		Set<ClassExpression> equivalents = new HashSet<ClassExpression>();
>, <Line: -		equivalents.add(C);
>, <Line: -		equivalents.add(D); // getDescendants is reflexive
>, <Line: -		assertTrue(descendants.contains(new Equivalences<ClassExpression>(equivalents)));
>, <Line: -		equivalents = new HashSet<ClassExpression>();
>, <Line: -		equivalents.add(E);
>, <Line: -		equivalents.add(F); // getDescendants is reflexive
>, <Line: -		assertTrue(descendants.contains(new Equivalences<ClassExpression>(equivalents)));
>, <Line: -		Ontology onto = loadOntology(inputFile1);
>, <Line: -		TBoxReasoner dag = new TBoxReasonerImpl(onto);
>, <Line: -		Set<ClassExpression> equivalents = new HashSet<ClassExpression>();
>, <Line: -		equivalents.add(C);
>, <Line: -		equivalents.add(D);  // ancestor is reflexive now
>, <Line: -		assertTrue(ancestors.contains(new Equivalences<ClassExpression>(equivalents)));
>, <Line: -		equivalents = new HashSet<ClassExpression>();
>, <Line: -		equivalents.add(E);
>, <Line: -		equivalents.add(F);  // ancestor is reflexive now
>, <Line: -		assertTrue(ancestors.contains(new Equivalences<ClassExpression>(equivalents)));
>, <Line: -		Ontology onto = loadOntology(inputFile2);
>, <Line: -		TBoxReasoner dag = new TBoxReasonerImpl(onto);
>, <Line: -		Set<ObjectPropertyExpression> equivalents = new HashSet<ObjectPropertyExpression>();
>, <Line: -		equivalents.add(R);
>, <Line: -		equivalents.add(S); // getDescendants is reflexive
>, <Line: -		assertTrue(descendants.contains(new Equivalences<ObjectPropertyExpression>(equivalents)));
>, <Line: -		equivalents = new HashSet<ObjectPropertyExpression>();
>, <Line: -		equivalents.add(T);													// role
>, <Line: -		equivalents.add(U); // getDescendants is reflexive
>, <Line: -		assertTrue(descendants.contains(new Equivalences<ObjectPropertyExpression>(equivalents)));
>, <Line: -		Ontology onto = loadOntology(inputFile2);
>, <Line: -		TBoxReasoner dag = new TBoxReasonerImpl(onto);
>, <Line: -		Set<ObjectPropertyExpression> equivalents = new HashSet<ObjectPropertyExpression>();
>, <Line: -		equivalents.add(R);
>, <Line: -		equivalents.add(S); // ancestor is reflexive now
>, <Line: -		assertTrue(ancestors.contains(new Equivalences<ObjectPropertyExpression>(equivalents)));
>, <Line: -		equivalents = new HashSet<ObjectPropertyExpression>();
>, <Line: -		equivalents.add(T); 
>, <Line: -		equivalents.add(U); // ancestor is reflexive now
>, <Line: -		assertTrue(ancestors.contains(new Equivalences<ObjectPropertyExpression>(equivalents)));		
>]