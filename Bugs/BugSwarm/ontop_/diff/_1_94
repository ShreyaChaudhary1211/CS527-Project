[<Line: +	private List<Predicate> emptyConcepts = new ArrayList<>();
>, <Line: +	private List<Predicate> emptyRoles = new ArrayList<>();
>, <Line: +		this.onto = OWLAPI3TranslatorUtility.translate(onto);
>, <Line: +		for (OClass cl : onto.getVocabulary().getClasses()) 
>, <Line: +			if (!cl.isTop() && !cl.isBottom()) {
>, <Line: +				Predicate concept = cl.getPredicate();
>, <Line: +				if (!runSPARQLConceptsQuery("<" + concept.getName() + ">")) {
>, <Line: +					emptyConcepts.add(concept);
>, <Line: +				}
>, <Line: +		for (ObjectPropertyExpression prop : onto.getVocabulary().getObjectProperties()) 
>, <Line: +			if (!prop.isBottom() && !prop.isTop()) {
>, <Line: +				Predicate role = prop.getPredicate();
>, <Line: +				if (!runSPARQLRolesQuery("<" + role.getName() + ">")) {
>, <Line: +					emptyRoles.add(role);
>, <Line: +				}
>, <Line: +		for (DataPropertyExpression prop : onto.getVocabulary().getDataProperties()) 		
>, <Line: +			if (!prop.isBottom() && !prop.isTop()) {
>, <Line: +				Predicate role = prop.getPredicate();
>, <Line: +				if (!runSPARQLRolesQuery("<" + role.getName() + ">")) {
>, <Line: +					emptyRoles.add(role);
>, <Line: +				}
>]
[<Line: -	private List<Predicate> emptyConcepts = new ArrayList<Predicate>();
>, <Line: -	private List<Predicate> emptyRoles = new ArrayList<Predicate>();
>, <Line: -		OWLAPI3TranslatorUtility translator = new OWLAPI3TranslatorUtility();
>, <Line: -		this.onto = translator.translate(onto);
>, <Line: -		for (OClass cl : onto.getVocabulary().getClasses()) {
>, <Line: -			Predicate concept = cl.getPredicate();
>, <Line: -			if (!runSPARQLConceptsQuery("<" + concept.getName() + ">")) {
>, <Line: -				emptyConcepts.add(concept);
>, <Line: -		}
>, <Line: -		for (ObjectPropertyExpression prop : onto.getVocabulary().getObjectProperties()) {
>, <Line: -			Predicate role = prop.getPredicate();
>, <Line: -			if (!runSPARQLRolesQuery("<" + role.getName() + ">")) {
>, <Line: -				emptyRoles.add(role);
>, <Line: -		}
>, <Line: -		for (DataPropertyExpression prop : onto.getVocabulary().getDataProperties()) {
>, <Line: -			Predicate role = prop.getPredicate();
>, <Line: -			if (!runSPARQLRolesQuery("<" + role.getName() + ">")) {
>, <Line: -				emptyRoles.add(role);
>, <Line: -		}
>]