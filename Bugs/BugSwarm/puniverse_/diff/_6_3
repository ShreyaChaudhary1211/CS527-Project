[<Line: +        Fiber fiber = new Fiber(scheduler, new SuspendableRunnable() {
>, <Line: +            @Override
>, <Line: +            public void run() throws SuspendExecution {
>, <Line: +                Fiber.park(100, TimeUnit.MILLISECONDS);
>, <Line: +        }).start();
>, <Line: +        try {
>, <Line: +            fiber.join(50, TimeUnit.MILLISECONDS);
>, <Line: +            fail();
>, <Line: +        } catch (java.util.concurrent.TimeoutException e) {
>, <Line: +        fiber.join(200, TimeUnit.MILLISECONDS);
>]
[<Line: -import co.paralleluniverse.vtime.ScaledClock;
>, <Line: -import co.paralleluniverse.vtime.SystemClock;
>, <Line: -import co.paralleluniverse.vtime.VirtualClock;
>, <Line: -        VirtualClock.setGlobal(Debug.isCI() ? new ScaledClock(0.3) : SystemClock.instance());
>, <Line: -        System.out.println("Using clock: " + VirtualClock.get());
>, <Line: -        try {
>, <Line: -            Fiber fiber = new Fiber(scheduler, new SuspendableRunnable() {
>, <Line: -                @Override
>, <Line: -                public void run() throws SuspendExecution {
>, <Line: -                    Fiber.park(100, TimeUnit.MILLISECONDS);
>, <Line: -                }
>, <Line: -            }).start();
>, <Line: -            try {
>, <Line: -                fiber.join(50, TimeUnit.MILLISECONDS);
>, <Line: -                fail();
>, <Line: -            } catch (java.util.concurrent.TimeoutException e) {
>, <Line: -            fiber.join(200, TimeUnit.MILLISECONDS);
>, <Line: -        } finally {
>, <Line: -            VirtualClock.setGlobal(SystemClock.instance());
>]