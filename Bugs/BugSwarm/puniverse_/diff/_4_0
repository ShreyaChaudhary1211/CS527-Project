[]
[<Line: -/*
>, <Line: - * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
>, <Line: - * 
>, <Line: - * This program and the accompanying materials are dual-licensed under
>, <Line: - * either the terms of the Eclipse Public License v1.0 as published by
>, <Line: - * the Eclipse Foundation
>, <Line: - *  
>, <Line: - *   or (per the licensee's choosing)
>, <Line: - *  
>, <Line: - * under the terms of the GNU Lesser General Public License version 3.0
>, <Line: - * as published by the Free Software Foundation.
>, <Line: - */
>, <Line: -package co.paralleluniverse.common.util;
>, <Line: -import java.util.Objects;
>, <Line: -/**
>, <Line: - * @author circlespainter
>, <Line: - */
>, <Line: -public final class Box<T> extends Tuple<Object> {
>, <Line: -    private final T value;
>, <Line: -    public Box(T value) {
>, <Line: -        this.value = value;
>, <Line: -    }
>, <Line: -    public T get() {
>, <Line: -        return value;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public int size() {
>, <Line: -        return 1;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public Object get(int index) {
>, <Line: -        switch(index) {
>, <Line: -            case 0:
>, <Line: -                return value;
>, <Line: -            default:
>, <Line: -                throw new IndexOutOfBoundsException("" + index);
>, <Line: -        }
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public boolean equals(Object obj) {
>, <Line: -        if (obj == null)
>, <Line: -            return false;
>, <Line: -        if (getClass() != obj.getClass())
>, <Line: -            return false;
>, <Line: -        final Box<T> other = (Box<T>) obj;
>, <Line: -        if (this.value != other.value && (this.value == null || !this.value.equals(other.value)))
>, <Line: -            return false;
>, <Line: -        return true;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public int hashCode() {
>, <Line: -        int hash = 7;
>, <Line: -        hash = 71 * hash + Objects.hashCode(this.value);
>, <Line: -        return hash;
>, <Line: -    }
>, <Line: -    @Override
>, <Line: -    public String toString() {
>, <Line: -        return "(" + value + ")";
>, <Line: -    }
>, <Line: -}
>]