[<Line: +/*
>, <Line: + * Quasar: lightweight threads and actors for the JVM.
>, <Line: + * Copyright (c) 2013-2015, Parallel Universe Software Co. All rights reserved.
>, <Line: + * 
>, <Line: + * This program and the accompanying materials are dual-licensed under
>, <Line: + * either the terms of the Eclipse Public License v1.0 as published by
>, <Line: + * the Eclipse Foundation
>, <Line: + *  
>, <Line: + *   or (per the licensee's choosing)
>, <Line: + *  
>, <Line: + * under the terms of the GNU Lesser General Public License version 3.0
>, <Line: + * as published by the Free Software Foundation.
>, <Line: + */
>, <Line: +package co.paralleluniverse.strands.channels;
>, <Line: +import co.paralleluniverse.fibers.DefaultFiberFactory;
>, <Line: +import co.paralleluniverse.fibers.SuspendExecution;
>, <Line: +import co.paralleluniverse.strands.StrandFactory;
>, <Line: +import co.paralleluniverse.strands.SuspendableRunnable;
>, <Line: +import co.paralleluniverse.strands.SuspendableUtils;
>, <Line: +/**
>, <Line: + * Receive transformer that will forward messages it receives to a target {@link SendPort}. Concrete subclasses will need to implement {@code select} yielding
>, <Line: + * {@link SendPort} to forward the message to.
>, <Line: + * <p/>
>, <Line: + * @author circlespainter
>, <Line: + */
>, <Line: +abstract class TapSendPort<Message> extends SendPortTransformer<Message, Message> implements SendPort<Message> {
>, <Line: +    private static final StrandFactory strandFactoryDefault = DefaultFiberFactory.instance();
>, <Line: +    private final StrandFactory strandFactory;
>, <Line: +    /**
>, <Line: +     * Subclasses will implement this method to select the target 
>, <Line: +     * 
>, <Line: +     * @param m
>, <Line: +     * @return 
>, <Line: +     */
>, <Line: +    protected abstract SendPort<? super Message> select(Message m);
>, <Line: +    /**
>, <Line: +     * Creates a new {@code TapSendPort} that will tap into {@code target} and forward its messages to some {@link SendPort}.
>, <Line: +     * It will not block if immediate forwarding is not possible but will rather create a new strand from {@code strandFactory}.
>, <Line: +     * <p/>
>, <Line: +     * @param target        The transformed send port.
>, <Line: +     * @param strandFactory The {@link StrandFactory} that will create forwarding strands when immediate forwarding is not possible.
>, <Line: +     */
>, <Line: +    public TapSendPort(final SendPort<Message> target, final StrandFactory strandFactory) {
>, <Line: +        super(target);
>, <Line: +        this.strandFactory = strandFactory;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Creates a new {@code TapReceiverPort} that will tap into {@code target} and forward its messages to some {@link SendPort}.
>, <Line: +     * It will not block if immediate forwarding is not possible but will rather create a new fiber from the {@link DefaultFiberFactory}.
>, <Line: +     * <p/>
>, <Line: +     * @param target        The transformed send port.
>, <Line: +     */
>, <Line: +    public TapSendPort(final SendPort<Message> target) {
>, <Line: +        this(target, strandFactoryDefault);
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected Message transform(final Message m) {
>, <Line: +        final SendPort<? super Message> actualForwardTo = select(m);
>, <Line: +        if (actualForwardTo != null && !actualForwardTo.trySend(m))
>, <Line: +            strandFactory.newStrand(SuspendableUtils.runnableToCallable(new SuspendableRunnable() {
>, <Line: +                @Override
>, <Line: +                public void run() throws SuspendExecution, InterruptedException {
>, <Line: +                    actualForwardTo.send(m);
>, <Line: +                }
>, <Line: +            })).start();
>, <Line: +        return m;
>, <Line: +    }
>, <Line: +}
>]
[]