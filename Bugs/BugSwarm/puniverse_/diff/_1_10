[<Line: +    public static <T> ReceivePort<T> subscribe(int bufferSize, OverflowPolicy policy, Publisher<T> publisher) {
>, <Line: +        final ChannelSubscriber<T> sub = new ChannelSubscriber<>(channel, false);
>, <Line: +    public static <T, R> Processor<T, R> toProcessor(FiberFactory ff, int bufferSize, OverflowPolicy policy, SuspendableAction2<? extends ReceivePort<? super T>, ? extends SendPort<? extends R>> transformer) {
>, <Line: +        return new ChannelProcessor<T, R>(ff, false, in, out, transformer);
>, <Line: +     * {@link #toProcessor(FiberFactory, int, OverflowPolicy, boolean, SuspendableAction2) toProcessor(null, bufferSize, policy, transformer)
>, <Line: +        return toProcessor(null, bufferSize, policy, transformer);
>]
[<Line: -     * @param batch      if the channel has a bounded buffer, whether to request further elements from the publisher in batches
>, <Line: -     *                   whenever the channel's buffer is depleted, or after consuming each element.
>, <Line: -    public static <T> ReceivePort<T> subscribe(int bufferSize, OverflowPolicy policy, boolean batch, Publisher<T> publisher) {
>, <Line: -        final ChannelSubscriber<T> sub = new ChannelSubscriber<>(channel, batch);
>, <Line: -    public static <T, R> Processor<T, R> toProcessor(FiberFactory ff, int bufferSize, OverflowPolicy policy, boolean batch, SuspendableAction2<? extends ReceivePort<? super T>, ? extends SendPort<? extends R>> transformer) {
>, <Line: -        return new ChannelProcessor<T, R>(ff, batch, in, out, transformer);
>, <Line: -     * {@link #toProcessor(FiberFactory, int, OverflowPolicy, boolean, SuspendableAction2) toProcessor(null, bufferSize, policy, false, transformer)
>, <Line: -        final Channel<T> in = Channels.newChannel(bufferSize, policy, true, true);
>, <Line: -        final Channel<R> out = Channels.newChannel(bufferSize, policy, true, true);
>, <Line: -        return new ChannelProcessor<T, R>(null, false, in, out, transformer);
>]