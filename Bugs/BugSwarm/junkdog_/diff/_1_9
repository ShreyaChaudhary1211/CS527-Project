[]
[<Line: -package com.artemis.weaver.optimizer;
>, <Line: -import org.objectweb.asm.ClassReader;
>, <Line: -import org.objectweb.asm.ClassWriter;
>, <Line: -import org.objectweb.asm.Label;
>, <Line: -import org.objectweb.asm.MethodVisitor;
>, <Line: -import org.objectweb.asm.Opcodes;
>, <Line: -import com.artemis.meta.ClassMetadata;
>, <Line: -import com.artemis.meta.ClassMetadata.OptimizationType;
>, <Line: -public final class ProcessSystemInjector implements Opcodes {
>, <Line: -	private final ClassReader cr;
>, <Line: -	private final ClassMetadata meta;
>, <Line: -	private final ClassWriter cw;
>, <Line: -	public ProcessSystemInjector(ClassReader cr, ClassMetadata meta) {
>, <Line: -		this.cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
>, <Line: -		this.cr = cr;
>, <Line: -		this.meta = meta;
>, <Line: -	}
>, <Line: -	public ClassReader transform() {
>, <Line: -		return new ClassReader(injectMethods());
>, <Line: -	}
>, <Line: -	private byte[] injectMethods() {
>, <Line: -		injectProcessEntities();
>, <Line: -		cr.accept(cw, 0);
>, <Line: -		return cw.toByteArray();
>, <Line: -	}
>, <Line: -	private void injectProcessEntities() {
>, <Line: -		String owner = meta.type.getInternalName();
>, <Line: -		MethodVisitor mv = cw.visitMethod(ACC_PROTECTED | ACC_FINAL,
>, <Line: -				"processSystem", "()V", null, null);
>, <Line: -		mv.visitCode();
>, <Line: -		Label l0 = new Label();
>, <Line: -		mv.visitLabel(l0);
>, <Line: -		mv.visitLabel(l0);
>, <Line: -		mv.visitVarInsn(ALOAD, 0);
>, <Line: -		mv.visitFieldInsn(GETFIELD, owner, "actives", "Lcom/artemis/utils/IntBag;");
>, <Line: -		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "getData", "()[I");
>, <Line: -		mv.visitVarInsn(ASTORE, 1);
>, <Line: -		Label l1 = new Label();
>, <Line: -		mv.visitLabel(l1);
>, <Line: -		mv.visitVarInsn(ALOAD, 0);
>, <Line: -		mv.visitFieldInsn(GETFIELD, owner, "flyweight", "Lcom/artemis/Entity;");
>, <Line: -		mv.visitVarInsn(ASTORE, 2);
>, <Line: -		Label l2 = new Label();
>, <Line: -		mv.visitLabel(l2);
>, <Line: -		mv.visitInsn(ICONST_0);
>, <Line: -		mv.visitVarInsn(ISTORE, 3);
>, <Line: -		Label l3 = new Label();
>, <Line: -		mv.visitLabel(l3);
>, <Line: -		mv.visitVarInsn(ALOAD, 0);
>, <Line: -		mv.visitFieldInsn(GETFIELD, owner, "actives", "Lcom/artemis/utils/IntBag;");
>, <Line: -		mv.visitMethodInsn(INVOKEVIRTUAL, "com/artemis/utils/IntBag", "size", "()I");
>, <Line: -		mv.visitVarInsn(ISTORE, 4);
>, <Line: -		Label l4 = new Label();
>, <Line: -		mv.visitLabel(l4);
>, <Line: -		Label l5 = new Label();
>, <Line: -		mv.visitJumpInsn(GOTO, l5);
>, <Line: -		Label l6 = new Label();
>, <Line: -		mv.visitLabel(l6);
>, <Line: -		mv.visitFrame(Opcodes.F_FULL, 5, new Object[] {
>, <Line: -				owner,
>, <Line: -				"[I", "com/artemis/Entity",
>, <Line: -				Opcodes.INTEGER, Opcodes.INTEGER},
>, <Line: -				0, new Object[] {});
>, <Line: -		mv.visitVarInsn(ALOAD, 2);
>, <Line: -		mv.visitVarInsn(ALOAD, 1);
>, <Line: -		mv.visitVarInsn(ILOAD, 3);
>, <Line: -		mv.visitInsn(IALOAD);
>, <Line: -		mv.visitFieldInsn(PUTFIELD, "com/artemis/Entity", "id", "I");
>, <Line: -		Label l7 = new Label();
>, <Line: -		mv.visitLabel(l7);
>, <Line: -		mv.visitVarInsn(ALOAD, 0);
>, <Line: -		mv.visitVarInsn(ALOAD, 2);
>, <Line: -		mv.visitMethodInsn(invocation(meta.sysetemOptimizable),
>, <Line: -				owner, "process", "(Lcom/artemis/Entity;)V");
>, <Line: -		Label l8 = new Label();
>, <Line: -		mv.visitLabel(l8);
>, <Line: -		mv.visitIincInsn(3, 1);
>, <Line: -		mv.visitLabel(l5);
>, <Line: -		mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
>, <Line: -		mv.visitVarInsn(ILOAD, 4);
>, <Line: -		mv.visitVarInsn(ILOAD, 3);
>, <Line: -		mv.visitJumpInsn(IF_ICMPGT, l6);
>, <Line: -		Label l9 = new Label();
>, <Line: -		mv.visitLabel(l9);
>, <Line: -		mv.visitInsn(RETURN);
>, <Line: -		Label l10 = new Label();
>, <Line: -		mv.visitLabel(l10);
>, <Line: -		mv.visitLocalVariable("this", meta.type.toString(), null, l0, l10, 0);
>, <Line: -		mv.visitLocalVariable("array", "[I", null, l1, l10, 1);
>, <Line: -		mv.visitLocalVariable("e", "Lcom/artemis/Entity;", null, l2, l10, 2);
>, <Line: -		mv.visitLocalVariable("i", "I", null, l3, l9, 3);
>, <Line: -		mv.visitLocalVariable("s", "I", null, l4, l9, 4);
>, <Line: -		mv.visitEnd();
>, <Line: -	}
>, <Line: -	private static int invocation(OptimizationType systemOptimization) {
>, <Line: -		switch (systemOptimization) {
>, <Line: -		case FULL:
>, <Line: -			return INVOKESPECIAL; 
>, <Line: -		case SAFE:
>, <Line: -			return INVOKEVIRTUAL;
>, <Line: -		case NOT_OPTIMIZABLE:
>, <Line: -			assert false;
>, <Line: -		default:
>, <Line: -			throw new RuntimeException("Missing case: " + systemOptimization);
>, <Line: -		}
>, <Line: -	}
>, <Line: -}
>]