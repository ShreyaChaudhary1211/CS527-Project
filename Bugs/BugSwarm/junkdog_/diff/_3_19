[]
[<Line: -package com.artemis;
>, <Line: -import com.artemis.annotations.Mapper;
>, <Line: -import com.artemis.annotations.Wire;
>, <Line: -import com.artemis.utils.reflect.ClassReflection;
>, <Line: -import com.artemis.utils.reflect.Field;
>, <Line: -import com.artemis.utils.reflect.ReflectionException;
>, <Line: -import java.util.HashMap;
>, <Line: -import java.util.IdentityHashMap;
>, <Line: -import java.util.Map;
>, <Line: -/**
>, <Line: - * Injects {@link com.artemis.ComponentMapper}, {@link com.artemis.BaseSystem} and {@link com.artemis.Manager} types into systems and
>, <Line: - * managers. Can also inject arbitrary types if registered through {@link com.artemis.WorldConfiguration#register}.
>, <Line: - */
>, <Line: -final class Injector {
>, <Line: -	private final World world;
>, <Line: -	private final Map<Class<?>, Class<?>> systems;
>, <Line: -	private final Map<Class<?>, Class<?>> managers;
>, <Line: -	private final Map<String, Object> pojos;
>, <Line: -	Injector(World world, WorldConfiguration config) {
>, <Line: -		this.world = world;
>, <Line: -		systems = new IdentityHashMap<Class<?>, Class<?>>();
>, <Line: -		managers = new IdentityHashMap<Class<?>, Class<?>>();
>, <Line: -		pojos = new HashMap<String, Object>(config.injectables);
>, <Line: -	}
>, <Line: -	void update() {
>, <Line: -		for (BaseSystem es : world.getSystems()) {
>, <Line: -			Class<?> origin = es.getClass();
>, <Line: -			Class<?> clazz = origin;
>, <Line: -			do {
>, <Line: -				systems.put(clazz, origin);
>, <Line: -			} while ((clazz = clazz.getSuperclass()) != Object.class);
>, <Line: -		}
>, <Line: -		for (Manager manager : world.getManagers()) {
>, <Line: -			Class<?> origin = manager.getClass();
>, <Line: -			Class<?> clazz = origin;
>, <Line: -			do {
>, <Line: -				managers.put(clazz, origin);
>, <Line: -			} while ((clazz = clazz.getSuperclass()) != Object.class);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	public void inject(Object target) throws RuntimeException {
>, <Line: -		try {
>, <Line: -			Class<?> clazz = target.getClass();
>, <Line: -			if (ClassReflection.isAnnotationPresent(clazz, Wire.class)) {
>, <Line: -				Wire wire = ClassReflection.getAnnotation(clazz, Wire.class);
>, <Line: -				if (wire != null) {
>, <Line: -					injectValidFields(target, clazz, wire.failOnNull(), wire.injectInherited());
>, <Line: -				}
>, <Line: -			} else {
>, <Line: -				injectAnnotatedFields(target, clazz);
>, <Line: -			}
>, <Line: -		} catch (ReflectionException e) {
>, <Line: -			throw new MundaneWireException("Error while wiring", e);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void injectValidFields(Object target, Class<?> clazz, boolean failOnNull, boolean injectInherited)
>, <Line: -			throws ReflectionException {
>, <Line: -		Field[] declaredFields = ClassReflection.getDeclaredFields(clazz);
>, <Line: -		for (int i = 0, s = declaredFields.length; s > i; i++) {
>, <Line: -			injectField(target, declaredFields[i], failOnNull);
>, <Line: -		}
>, <Line: -		// should bail earlier, but it's just one more round.
>, <Line: -		while (injectInherited && (clazz = clazz.getSuperclass()) != Object.class) {
>, <Line: -			injectValidFields(target, clazz, failOnNull, injectInherited);
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private void injectAnnotatedFields(Object target, Class<?> clazz)
>, <Line: -		throws ReflectionException {
>, <Line: -		injectClass(target, clazz);
>, <Line: -	}
>, <Line: -	@SuppressWarnings("deprecation")
>, <Line: -	private void injectClass(Object target, Class<?> clazz) throws ReflectionException {
>, <Line: -		Field[] declaredFields = ClassReflection.getDeclaredFields(clazz);
>, <Line: -		for (int i = 0, s = declaredFields.length; s > i; i++) {
>, <Line: -			Field field = declaredFields[i];
>, <Line: -			if (field.isAnnotationPresent(Mapper.class) || field.isAnnotationPresent(Wire.class)) {
>, <Line: -				injectField(target, field, field.isAnnotationPresent(Wire.class));
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@SuppressWarnings("unchecked")
>, <Line: -	private void injectField(Object target, Field field, boolean failOnNotInjected)
>, <Line: -		throws ReflectionException {
>, <Line: -		field.setAccessible(true);
>, <Line: -		Class<?> fieldType;
>, <Line: -		try {
>, <Line: -			fieldType = field.getType();
>, <Line: -		} catch (RuntimeException ignore) {
>, <Line: -			// Swallow exception caused by missing typedata on gwt platfString.format("Failed to inject %s into %s: %s not registered with world.")orm.
>, <Line: -			// @todo Workaround, awaiting junkdog-ification. Silently failing injections might be undesirable for users failing to add systems/components to gwt reflection inclusion config.
>, <Line: -			return;
>, <Line: -		}
>, <Line: -		if (ClassReflection.isAssignableFrom(ComponentMapper.class, fieldType)) {
>, <Line: -			ComponentMapper<?> mapper = world.getMapper(field.getElementType(0));
>, <Line: -			if (failOnNotInjected && mapper == null)
>, <Line: -				throw onFailedInjection("ComponentMapper", field);
>, <Line: -			field.set(target, mapper);
>, <Line: -		} else if (ClassReflection.isAssignableFrom(BaseSystem.class, fieldType)) {
>, <Line: -			BaseSystem system = world.getSystem((Class<BaseSystem>)systems.get(fieldType));
>, <Line: -			if (failOnNotInjected && system == null)
>, <Line: -				throw onFailedInjection("BaseSystem", field);
>, <Line: -			field.set(target, system);
>, <Line: -		} else if (ClassReflection.isAssignableFrom(Manager.class, fieldType)) {
>, <Line: -			Manager manager = world.getManager((Class<Manager>)managers.get(fieldType));
>, <Line: -			if (failOnNotInjected && manager == null)
>, <Line: -				throw onFailedInjection("Manager", field);
>, <Line: -			field.set(target, manager);
>, <Line: -		} else if (ClassReflection.isAssignableFrom(EntityFactory.class, fieldType)) {
>, <Line: -			EntityFactory<?> factory = (EntityFactory<?>)world.createFactory(fieldType);
>, <Line: -			if (failOnNotInjected && factory == null)
>, <Line: -				throw onFailedInjection("EntityFactory", field);
>, <Line: -			field.set(target, factory);
>, <Line: -		} else if (field.isAnnotationPresent(Wire.class)) {
>, <Line: -			final Wire wire = field.getAnnotation(Wire.class);
>, <Line: -			String key = wire.name();
>, <Line: -			if ("".equals(key))
>, <Line: -				key = field.getType().getName();
>, <Line: -			if (pojos.containsKey(key))
>, <Line: -				field.set(target, pojos.get(key));
>, <Line: -		}
>, <Line: -	}
>, <Line: -	private MundaneWireException onFailedInjection(String typeName, Field failedInjection) {
>, <Line: -		String error = new StringBuilder()
>, <Line: -			.append("Failed to inject ").append(failedInjection.getType().getName())
>, <Line: -			.append(" into ").append(failedInjection.getDeclaringClass().getName()).append(": ")
>, <Line: -			.append(typeName).append(" not registered with world.")
>, <Line: -			.toString();
>, <Line: -		return new MundaneWireException(error);
>, <Line: -	}
>, <Line: -}
>]