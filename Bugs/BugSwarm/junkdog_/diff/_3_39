[<Line: +package com.artemis;
>, <Line: +import com.artemis.annotations.Wire;
>, <Line: +import com.artemis.injection.CachedInjector;
>, <Line: +import com.artemis.injection.FieldHandler;
>, <Line: +import com.artemis.injection.FieldResolver;
>, <Line: +import com.artemis.injection.InjectionCache;
>, <Line: +import com.artemis.injection.Injector;
>, <Line: +import com.artemis.utils.reflect.ClassReflection;
>, <Line: +import com.artemis.utils.reflect.Field;
>, <Line: +import com.artemis.utils.reflect.ReflectionException;
>, <Line: +import org.junit.Test;
>, <Line: +import static org.junit.Assert.assertNotNull;
>, <Line: +import static org.junit.Assert.assertNull;
>, <Line: +/**
>, <Line: + *
>, <Line: + * @author Snorre E. Brekke
>, <Line: + */
>, <Line: +public class FieldHandlerTest {
>, <Line: +    @Test
>, <Line: +    public void default_field_handler_injects_correct_core_fields() throws Exception {
>, <Line: +        WorldConfiguration worldConfiguration = new WorldConfiguration()
>, <Line: +                .setSystem(new SomeSystem())
>, <Line: +                .setManager(new SomeManager())
>, <Line: +                .register(new Object());
>, <Line: +        World world = new World(worldConfiguration);
>, <Line: +        ObjectWithCoreFields withCoreFields = new ObjectWithCoreFields();
>, <Line: +        world.inject(withCoreFields);
>, <Line: +        assertNotNull(withCoreFields.cm);
>, <Line: +        assertNotNull(withCoreFields.system);
>, <Line: +        assertNotNull(withCoreFields.manager);
>, <Line: +        assertNotNull(withCoreFields.injectedObject);
>, <Line: +        assertNull(withCoreFields.notInjected);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void custom_field_handler_should_not_inject_wire_fields() throws Exception {
>, <Line: +        FieldHandler fieldHandler = new FieldHandler(new InjectionCache());
>, <Line: +        Injector injector = new CachedInjector().setFieldHandler(fieldHandler);
>, <Line: +        WorldConfiguration worldConfiguration = new WorldConfiguration()
>, <Line: +                .setInjector(injector)
>, <Line: +                .setSystem(new SomeSystem())
>, <Line: +                .setManager(new SomeManager())
>, <Line: +                .register(new Object());
>, <Line: +        World world = new World(worldConfiguration);
>, <Line: +        ObjectWithCoreFields withCoreFields = new ObjectWithCoreFields();
>, <Line: +        world.inject(withCoreFields);
>, <Line: +        assertNotNull(withCoreFields.cm);
>, <Line: +        assertNotNull(withCoreFields.system);
>, <Line: +        assertNotNull(withCoreFields.manager);
>, <Line: +        assertNull(withCoreFields.injectedObject);
>, <Line: +        assertNull(withCoreFields.notInjected);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void custom_field_resolver_injects_fields() throws Exception {
>, <Line: +        FieldHandler fieldHandler = new FieldHandler(new InjectionCache());
>, <Line: +        fieldHandler.addFieldResolver(new AllFieldsResolver());
>, <Line: +        Injector injector = new CachedInjector().setFieldHandler(fieldHandler);
>, <Line: +        World world = new World(new WorldConfiguration().setInjector(injector));
>, <Line: +        ObjectWithNoArgsConstructorFields objectsInjected = new ObjectWithNoArgsConstructorFields();
>, <Line: +        world.inject(objectsInjected);
>, <Line: +        assertNotNull(objectsInjected.object);
>, <Line: +        assertNotNull(objectsInjected.string);
>, <Line: +    }
>, <Line: +    @Wire
>, <Line: +    private static class ObjectWithNoArgsConstructorFields{
>, <Line: +        private Object object;
>, <Line: +        private String string;
>, <Line: +    }
>, <Line: +    @Wire
>, <Line: +    private static class ObjectWithCoreFields{
>, <Line: +        private ComponentMapper<SomeComponent> cm;
>, <Line: +        private SomeSystem system;
>, <Line: +        private SomeManager manager;
>, <Line: +        @Wire
>, <Line: +        private Object injectedObject;
>, <Line: +        private Object notInjected;
>, <Line: +    }
>, <Line: +    private static class SomeComponent extends Component{
>, <Line: +    }
>, <Line: +    private static class SomeSystem extends BaseSystem{
>, <Line: +        @Override
>, <Line: +        protected void processSystem() {
>, <Line: +        }
>, <Line: +    }
>, <Line: +    private static class SomeManager extends Manager{
>, <Line: +    }
>, <Line: +    private static class AllFieldsResolver implements FieldResolver {
>, <Line: +        @Override
>, <Line: +        public void initialize(World world) {
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public Object resolve(Class<?> fieldType, Field field) {
>, <Line: +            try {
>, <Line: +                return ClassReflection.newInstance(fieldType);
>, <Line: +            } catch (ReflectionException e) {
>, <Line: +                throw new RuntimeException(e);
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +}
>]
[]