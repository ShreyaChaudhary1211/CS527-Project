[<Line: +/*
>, <Line: + * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
>, <Line: + *
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + *
>, <Line: + *         http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + *
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + */
>, <Line: +package com.github.rinde.rinsim.experiment.base;
>, <Line: +/*
>, <Line: + * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
>, <Line: + *
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + *
>, <Line: + *         http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + *
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + */
>, <Line: +import javax.annotation.Nullable;
>, <Line: +import com.google.common.base.Joiner;
>, <Line: +import com.google.common.base.Optional;
>, <Line: +class SimArgs {
>, <Line: +  final Scenario scenario;
>, <Line: +  final Configuration masConfig;
>, <Line: +  final long randomSeed;
>, <Line: +  final Object objectiveFunction;
>, <Line: +  final boolean showGui;
>, <Line: +  final Optional<? extends PostProcessor<?, ?>> postProcessor;
>, <Line: +  // final Optional<UICreator> uiCreator;
>, <Line: +  SimArgs(Scenario s, Configuration m, long seed,
>, <Line: +      Object obj, boolean gui, @Nullable PostProcessor<?, ?> pp
>, <Line: +      /* , @Nullable UICreator uic */) {
>, <Line: +    scenario = s;
>, <Line: +    masConfig = m;
>, <Line: +    randomSeed = seed;
>, <Line: +    objectiveFunction = obj;
>, <Line: +    showGui = gui;
>, <Line: +    postProcessor = Optional.fromNullable(pp);
>, <Line: +    // uiCreator = Optional.fromNullable(uic);
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  public String toString() {
>, <Line: +    return Joiner.on(",").join(scenario.getClass().getName(),
>, <Line: +        scenario /* .getProblemClass() */,
>, <Line: +        scenario/* .getProblemInstanceId() */, masConfig, randomSeed,
>, <Line: +        objectiveFunction, showGui, postProcessor);
>, <Line: +  }
>, <Line: +}
>]
[]