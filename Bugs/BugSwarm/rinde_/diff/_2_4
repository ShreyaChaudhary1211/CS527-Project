[<Line: +   * @deprecated Use {@link #equal(Graph, Graph)} instead.
>, <Line: +  @Deprecated
>, <Line: +    return equal(g1, g2);
>, <Line: +  }
>, <Line: +  /**
>, <Line: +   * Basic equals method.
>, <Line: +   * @param g1 A graph.
>, <Line: +   * @param g2 Another graph.
>, <Line: +   * @param <E> The type of connection data.
>, <Line: +   * @return <code>true</code> if the provided graphs are equal,
>, <Line: +   *         <code>false</code> otherwise.
>, <Line: +   */
>, <Line: +  public static <E extends ConnectionData> boolean equal(
>, <Line: +      Graph<? extends E> g1, Graph<? extends E> g2) {
>, <Line: +    public int compareTo(@Nullable ObjectWithDistance<T> o) {
>, <Line: +      return Double.compare(dist, checkNotNull(o).dist);
>, <Line: +      return other instanceof Graph ? Graphs.equal(this, (Graph<E>) other)
>, <Line: +    public void addConnection(Point from, Point to, @Nullable E edgeData) {
>, <Line: +    @Nullable
>, <Line: +    public E setConnectionData(Point from, Point to, @Nullable E edgeData) {
>]
[<Line: -    public int compareTo(ObjectWithDistance<T> o) {
>, <Line: -      return Double.compare(dist, o.dist);
>, <Line: -      return other instanceof Graph ? Graphs.equals(this, (Graph<E>) other)
>, <Line: -    public void addConnection(Point from, Point to, E edgeData) {
>, <Line: -    public E setConnectionData(Point from, Point to, E edgeData) {
>]