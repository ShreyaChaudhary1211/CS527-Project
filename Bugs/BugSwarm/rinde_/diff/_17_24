[<Line: +import com.google.common.base.Optional;
>, <Line: +    final Optional<E> connData = connectionData(from, to);
>, <Line: +    return connData.isPresent() && connData.get().getLength().isPresent()
>, <Line: +        ? connData.get().getLength().get()
>, <Line: +        : Point.distance(from, to);
>, <Line: +    addConnection(from, to, Optional.<E> absent());
>, <Line: +    addConnection(c.from(), c.to(), c.data());
>, <Line: +  public void addConnection(Point from, Point to, E connData) {
>, <Line: +    addConnection(from, to, Optional.of(connData));
>, <Line: +  }
>, <Line: +  /**
>, <Line: +   * Adds a connection.
>, <Line: +   * @param from Start of the connection.
>, <Line: +   * @param to End of the connection.
>, <Line: +   * @param connData The connection data wrapped in an optional.
>, <Line: +   */
>, <Line: +  protected void addConnection(Point from, Point to, Optional<E> connData) {
>, <Line: +      Optional<E> connData);
>, <Line: +    return Connection.create(from, to, connectionData(from, to));
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  public Optional<E> setConnectionData(Point from, Point to, E connData) {
>, <Line: +    return changeConnectionData(from, to, Optional.of(connData));
>, <Line: +  @Override
>, <Line: +  public Optional<E> removeConnectionData(Point from, Point to) {
>, <Line: +    return changeConnectionData(from, to, Optional.<E> absent());
>, <Line: +  }
>, <Line: +  /**
>, <Line: +   * Change connection data. Precondition: connection from -&gt; to exists.
>, <Line: +   * @param from Start point of connection.
>, <Line: +   * @param to End point of connection.
>, <Line: +   * @param connData The edge data used for the connection.
>, <Line: +   * @return old edge data or {@link Optional#absent()} if there was no edge
>, <Line: +   *         data.
>, <Line: +   * @throws IllegalArgumentException if the connection between the nodes does
>, <Line: +   *           not exist.
>, <Line: +   */
>, <Line: +  protected Optional<E> changeConnectionData(Point from, Point to,
>, <Line: +      Optional<E> connData) {
>, <Line: +    checkArgument(hasConnection(from, to),
>, <Line: +        "The connection %s->%s does not exist.", from, to);
>, <Line: +    return doChangeConnectionData(from, to, connData);
>, <Line: +  }
>, <Line: +  /**
>, <Line: +   * Change connection data. It can be assumed that the connection exists.
>, <Line: +   * @param from Start point of connection.
>, <Line: +   * @param to End point of connection.
>, <Line: +   * @param connData The edge data used for the connection.
>, <Line: +   * @return old edge data or {@link Optional#absent()} if there was no edge
>, <Line: +   *         data.
>, <Line: +   */
>, <Line: +  protected abstract Optional<E> doChangeConnectionData(Point from, Point to,
>, <Line: +      Optional<E> connData);
>]
[<Line: -  @SuppressWarnings("null")
>, <Line: -    @Nullable
>, <Line: -    final E connData = connectionData(from, to);
>, <Line: -    return !isEmptyConnectionData(connData) ? connData.getLength() : Point
>, <Line: -        .distance(from, to);
>, <Line: -  }
>, <Line: -  /**
>, <Line: -   * Determines whether a connection data is 'empty'. Default only
>, <Line: -   * <code>null</code> is considered as an empty connection data. This can be
>, <Line: -   * overridden to include a specific instance of connection data to be the
>, <Line: -   * 'empty' instance.
>, <Line: -   * @param connData The connection data to check.
>, <Line: -   * @return <code>true</code> if the specified connection data is considered
>, <Line: -   *         empty, <code>false</code> otherwise.
>, <Line: -   */
>, <Line: -  protected boolean isEmptyConnectionData(@Nullable E connData) {
>, <Line: -    return connData == null;
>, <Line: -    addConnection(from, to, null);
>, <Line: -    addConnection(c.from, c.to, c.getData());
>, <Line: -  public void addConnection(Point from, Point to, @Nullable E connData) {
>, <Line: -      @Nullable E connData);
>, <Line: -    return new Connection<>(from, to, connectionData(from, to));
>]