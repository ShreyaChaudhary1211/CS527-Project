[]
[<Line: -/*
>, <Line: - * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
>, <Line: - *
>, <Line: - * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: - * you may not use this file except in compliance with the License.
>, <Line: - * You may obtain a copy of the License at
>, <Line: - *
>, <Line: - *         http://www.apache.org/licenses/LICENSE-2.0
>, <Line: - *
>, <Line: - * Unless required by applicable law or agreed to in writing, software
>, <Line: - * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: - * See the License for the specific language governing permissions and
>, <Line: - * limitations under the License.
>, <Line: - */
>, <Line: -package com.github.rinde.rinsim.geom;
>, <Line: -import static org.junit.Assert.assertEquals;
>, <Line: -import static org.junit.Assert.assertFalse;
>, <Line: -import static org.junit.Assert.assertNull;
>, <Line: -import static org.junit.Assert.assertTrue;
>, <Line: -import java.util.Arrays;
>, <Line: -import java.util.List;
>, <Line: -import java.util.Map;
>, <Line: -import org.junit.Test;
>, <Line: -/**
>, <Line: - * @author Rinde van Lon (rinde.vanlon@cs.kuleuven.be)
>, <Line: - * 
>, <Line: - */
>, <Line: -public class ConnectionTest {
>, <Line: -  private static final double DELTA = 0.0001;
>, <Line: -  @Test
>, <Line: -  public void unmodifiableConnection() {
>, <Line: -    final Connection<LengthData> original = new Connection<>(
>, <Line: -        new Point(2, 2), new Point(3, 3), null);
>, <Line: -    final Connection<LengthData> unmod = Graphs
>, <Line: -        .unmodifiableConnection(original);
>, <Line: -    assertEquals(unmod, original);
>, <Line: -    assertEquals(original, unmod);
>, <Line: -    original.setData(new LengthData(300));
>, <Line: -    assertFalse(original.getData().equals(null));
>, <Line: -    assertEquals(original.getData(), unmod.getData());
>, <Line: -    assertEquals(original.getData().hashCode(), unmod.getData().hashCode());
>, <Line: -    assertEquals(original.getData().getLength(), unmod.getData().getLength(),
>, <Line: -        DELTA);
>, <Line: -    assertEquals(original.hashCode(), unmod.hashCode());
>, <Line: -    assertEquals(original.toString(), unmod.toString());
>, <Line: -    assertEquals(unmod, original);
>, <Line: -    assertEquals(original, unmod);
>, <Line: -    original.setData(null);
>, <Line: -    assertEquals(unmod, original);
>, <Line: -    assertEquals(original, unmod);
>, <Line: -  }
>, <Line: -  @Test
>, <Line: -  public void unmodifiableMultiAttributeEdgeData() {
>, <Line: -    final Connection<MultiAttributeData> original = new Connection<>(
>, <Line: -        new Point(2, 2), new Point(3, 3), null);
>, <Line: -    final Connection<MultiAttributeData> unmod = Graphs
>, <Line: -        .unmodifiableConnection(original);
>, <Line: -    assertEquals(unmod, original);
>, <Line: -    assertEquals(original, unmod);
>, <Line: -    original.setData(new MultiAttributeData(10, 20d));
>, <Line: -    assertEquals(unmod, original);
>, <Line: -    assertEquals(original, unmod);
>, <Line: -    original.getData().put("test", Arrays.asList(1, 2, 3));
>, <Line: -    assertEquals(unmod, original);
>, <Line: -    assertEquals(original, unmod);
>, <Line: -    assertEquals(Arrays.asList(1, 2, 3), unmod.getData()
>, <Line: -        .get("test", Object.class));
>, <Line: -    assertEquals(Arrays.asList(1, 2, 3), unmod.getData()
>, <Line: -        .get("test", List.class));
>, <Line: -    assertNull(unmod.getData().get("test", Map.class));
>, <Line: -    assertNull(unmod.getData().get("test2", Map.class));
>, <Line: -    assertEquals(original.getData().getLength(), unmod.getData().getLength(),
>, <Line: -        DELTA);
>, <Line: -    // both are null
>, <Line: -    assertEquals(original.getData().getMaxSpeed(), unmod.getData()
>, <Line: -        .getMaxSpeed(), DELTA);
>, <Line: -    assertTrue(original.getData().equals(unmod.getData()));
>, <Line: -    assertTrue(unmod.getData().equals(unmod.getData()));
>, <Line: -    assertEquals(unmod.getData().hashCode(), unmod.getData().hashCode());
>, <Line: -    assertEquals(original.hashCode(), unmod.hashCode());
>, <Line: -    original.getData().put(MultiAttributeData.KEY_LENGTH, new Object());
>, <Line: -    assertEquals(original, unmod);
>, <Line: -    original.getData().put(MultiAttributeData.KEY_MAX_SPEED, new Object());
>, <Line: -    assertEquals(original, unmod);
>, <Line: -    assertTrue(Double.isNaN(original.getData().getMaxSpeed()));
>, <Line: -    assertTrue(Double.isNaN(original.getData().getLength()));
>, <Line: -    assertTrue(Double.isNaN(original.getData().setMaxSpeed(100)));
>, <Line: -    assertEquals(100d, original.getData().setMaxSpeed(200), DELTA);
>, <Line: -    assertEquals(original, unmod);
>, <Line: -  }
>, <Line: -  @Test(expected = UnsupportedOperationException.class)
>, <Line: -  public void unmodMultiAttED() {
>, <Line: -    Graphs.unmodifiableConnectionData(new MultiAttributeData(10, 20d))
>, <Line: -        .setMaxSpeed(-1);
>, <Line: -  }
>, <Line: -  @Test(expected = UnsupportedOperationException.class)
>, <Line: -  public void unmodMultiAttED2() {
>, <Line: -    Graphs.unmodifiableConnectionData(new MultiAttributeData(10, 20d))
>, <Line: -        .put("", null);
>, <Line: -  }
>, <Line: -  @Test
>, <Line: -  public void equalsTest() {
>, <Line: -    final Connection<LengthData> c1 = new Connection<LengthData>(
>, <Line: -        new Point(2, 2), new Point(3, 3), null);
>, <Line: -    final Connection<LengthData> c2 = new Connection<LengthData>(
>, <Line: -        new Point(2, 2), new Point(2, 3), null);
>, <Line: -    final Connection<LengthData> c3 = new Connection<LengthData>(
>, <Line: -        new Point(3, 2), new Point(2, 3), null);
>, <Line: -    final Connection<LengthData> c4 = new Connection<LengthData>(
>, <Line: -        new Point(2, 2), new Point(3, 3), new LengthData(30));
>, <Line: -    assertFalse(c1.equals(new Object()));
>, <Line: -    assertFalse(c1.equals(c2));
>, <Line: -    assertFalse(c1.equals(c3));
>, <Line: -    assertFalse(c1.equals(c4));
>, <Line: -  }
>, <Line: -  @Test(expected = UnsupportedOperationException.class)
>, <Line: -  public void unmodifiableConnSetEdgeData() {
>, <Line: -    Graphs.unmodifiableConnection(new Connection<LengthData>(new Point(2, 2),
>, <Line: -        new Point(3, 3), null)).setData(null);
>, <Line: -  }
>, <Line: -}
>]