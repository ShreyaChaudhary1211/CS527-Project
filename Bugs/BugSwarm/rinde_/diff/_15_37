[<Line: +    return Arrays.asList(new Object[][] { { MultimapGraph.class },
>, <Line: +        { TableGraph.class } });
>, <Line: +    graph.setConnectionData(a, c, LengthData.create(1d));
>, <Line: +    graph.setConnectionData(c, b, LengthData.create(1d));
>, <Line: +      assertSame(connections.get(i - 1).from(), points.get(i - 1));
>, <Line: +      assertSame(connections.get(i - 1).to(), points.get(i));
>, <Line: +  public void connDataUsage() {
>, <Line: +    graph.addConnection(Connection.create(B, A, LengthData.create(1.5)));
>, <Line: +    graph.addConnection(B, C, LengthData.create(2));
>, <Line: +    // explicit empty value
>, <Line: +    graph.addConnection(A, C, LengthData.empty());
>, <Line: +    assertFalse("existing but empty", graph.connectionData(A, B).isPresent());
>, <Line: +    assertFalse("non existing", graph.connectionData(C, A).isPresent());
>, <Line: +    assertTrue("existing B->A", graph.connectionData(B, A).isPresent());
>, <Line: +    assertTrue("existing B->C", graph.connectionData(B, C).isPresent());
>, <Line: +    // use of the connection data
>, <Line: +    final Graph<LengthData> g1 = new TableGraph<>();
>, <Line: +    final Graph<LengthData> g2 = new MultimapGraph<>();
>, <Line: +    graph.addConnection(N, E, LengthData.create(10));
>, <Line: +    final Graph<LengthData> g3 = new TableGraph<>();
>, <Line: +    g3.addConnection(N, E, LengthData.create(9));
>, <Line: +      assertEquals(graph.connectionLength(c.from(), c.to()),
>, <Line: +          g.connectionLength(c.from(), c.to()), DELTA);
>, <Line: +    final MultimapGraph<LengthData> testGraph = new MultimapGraph<>();
>, <Line: +    final MultimapGraph<LengthData> newGraph = new MultimapGraph<>(
>, <Line: +    assertFalse(graph.setConnectionData(N, E, LengthData.create(100))
>, <Line: +        .isPresent());
>, <Line: +    assertEquals(LengthData.create(100),
>, <Line: +        graph.removeConnectionData(N, E).get());
>]
[<Line: -import static org.junit.Assert.assertNotNull;
>, <Line: -import static org.junit.Assert.assertNull;
>, <Line: -    return Arrays.asList(new Object[][] { { TestMultimapGraph.class },
>, <Line: -        { TestTableGraph.class } });
>, <Line: -    graph.setConnectionData(a, c, new LengthData(1d));
>, <Line: -    graph.setConnectionData(c, b, new LengthData(1d));
>, <Line: -      assertSame(connections.get(i - 1).from, points.get(i - 1));
>, <Line: -      assertSame(connections.get(i - 1).to, points.get(i));
>, <Line: -  public void edgeDataUsage() {
>, <Line: -    graph.addConnection(new Connection<LengthData>(B, A, new LengthData(1.5)));
>, <Line: -    graph.addConnection(B, C, new LengthData(2));
>, <Line: -    graph.addConnection(A, C, new LengthData(Double.NaN)); // explicit
>, <Line: -    // empty
>, <Line: -    // value
>, <Line: -    assertNull("existing but empty", graph.connectionData(A, B));
>, <Line: -    assertNull("non existing", graph.connectionData(C, A));
>, <Line: -    // assertNull("explicit null A->C", graph.connectionData(A, C)); //
>, <Line: -    // works only for TableGraph
>, <Line: -    assertNotNull("existing B->A", graph.connectionData(B, A));
>, <Line: -    assertNotNull("existing B->C", graph.connectionData(B, C));
>, <Line: -    // use of the edge data
>, <Line: -    final Graph<LengthData> g1 = new TableGraph<LengthData>(LengthData.EMPTY);
>, <Line: -    final Graph<LengthData> g2 = new MultimapGraph<LengthData>();
>, <Line: -    graph.addConnection(N, E, new LengthData(10));
>, <Line: -    final Graph<LengthData> g3 = new TableGraph<LengthData>(LengthData.EMPTY);
>, <Line: -    g3.addConnection(N, E, new LengthData(9));
>, <Line: -      assertEquals(graph.connectionLength(c.from, c.to),
>, <Line: -          g.connectionLength(c.from, c.to), DELTA);
>, <Line: -    final MultimapGraph<LengthData> testGraph = new MultimapGraph<LengthData>();
>, <Line: -    final MultimapGraph<LengthData> newGraph = new MultimapGraph<LengthData>(
>, <Line: -    assertNull(graph.setConnectionData(N, E, new LengthData(100)));
>, <Line: -    assertEquals(new LengthData(100), graph.setConnectionData(N, E, null));
>, <Line: -    if (graph instanceof TableGraph) {
>, <Line: -    }
>, <Line: -  }
>, <Line: -  @Test(expected = IllegalArgumentException.class)
>, <Line: -  public void setNonExistingEdgeData() {
>, <Line: -    graph.setConnectionData(new Point(1, 1), new Point(2, 3), null);
>, <Line: -  @Test
>, <Line: -  public void isEmptyConnectionData() {
>, <Line: -    final AbstractGraph<?> g = (AbstractGraph<?>) graph;
>, <Line: -    assertTrue(g.isEmptyConnectionData(null));
>, <Line: -    final TableGraph<MultiAttributeData> tg = new TableGraph<MultiAttributeData>(
>, <Line: -        MultiAttributeData.EMPTY);
>, <Line: -    assertTrue(tg.isEmptyConnectionData(MultiAttributeData.EMPTY));
>, <Line: -  }
>]