[<Line: +import static java.util.Arrays.asList;
>, <Line: +import java.util.LinkedHashSet;
>, <Line: +import java.util.Set;
>, <Line: +import com.github.rinde.rinsim.event.EventDispatcher;
>, <Line: +  /**
>, <Line: +   * The types of events this model can dispatch.
>, <Line: +   * @author Rinde van Lon
>, <Line: +   */
>, <Line: +  public enum RoadEventType {
>, <Line: +    /**
>, <Line: +     * Indicates that a {@link MovingRoadUser} has moved.
>, <Line: +     */
>, <Line: +    MOVE,
>, <Line: +    /**
>, <Line: +     * Is dispatched when a new {@link RoadUser} has been added to the model and
>, <Line: +     * has a position.
>, <Line: +     */
>, <Line: +    ADD_ROAD_USER,
>, <Line: +    /**
>, <Line: +     * Is dispatched when a {@link RoadUser} has been removed from the model.
>, <Line: +     */
>, <Line: +    REMOVE_ROAD_USER
>, <Line: +  }
>, <Line: +  // TODO event dispatching has to be tested
>, <Line: +  /**
>, <Line: +   * The {@link EventDispatcher} that dispatches all event for this model.
>, <Line: +   */
>, <Line: +  protected final EventDispatcher eventDispatcher;
>, <Line: +  /**
>, <Line: +   * Initializes the model, optionally adding more event types to the
>, <Line: +   * {@link EventDispatcher}.
>, <Line: +   * @param additionalEventTypes Additional event types (may be empty).
>, <Line: +   */
>, <Line: +  protected GenericRoadModel(Enum<?>... additionalEventTypes) {
>, <Line: +    final Set<Enum<?>> events = new LinkedHashSet<>();
>, <Line: +    events.addAll(asList(additionalEventTypes));
>, <Line: +    events.addAll(asList(RoadEventType.values()));
>, <Line: +    eventDispatcher = new EventDispatcher(events);
>, <Line: +  }
>]
[]