[<Line: +import com.google.common.base.Optional;
>, <Line: + * which are represented as {@link Point}s and connections are represented by
>, <Line: + * @author Bartosz Michalik - added connection data handling
>, <Line: + * @param <E> The type of {@link ConnectionData} that is used in the
>, <Line: + *          connections.
>, <Line: +   * @return connection data or {@link Optional#absent()} if there is no data or
>, <Line: +  Optional<E> connectionData(Point from, Point to);
>, <Line: +   * @param connectionData data associated with the connection
>, <Line: +  void addConnection(Point from, Point to, E connectionData);
>, <Line: +   * @param from Start point of connection.
>, <Line: +   * @param to End point of connection.
>, <Line: +   * @param connectionData The connection data used for the connection.
>, <Line: +   * @return old connection data or {@link Optional#absent()} if there was no
>, <Line: +   *         connection data.
>, <Line: +   * @throws IllegalArgumentException when the connection between nodes do not
>, <Line: +   *           exist.
>, <Line: +   */
>, <Line: +  Optional<E> setConnectionData(Point from, Point to, E connectionData);
>, <Line: +  /**
>, <Line: +   * Remove connection data. Precondition: connection from -&gt; to exists.
>, <Line: +   * @param from Start point of connection.
>, <Line: +   * @param to End point of connection.
>, <Line: +   * @return old connection data or {@link Optional#absent()} if there was no
>, <Line: +   *         connection data.
>, <Line: +   *           exist.
>, <Line: +  Optional<E> removeConnectionData(Point from, Point to);
>]
[<Line: -import javax.annotation.Nullable;
>, <Line: - * which are represented as {@link Point}s and edges are represented by
>, <Line: - * TODO should be split up in an ImmutableGraph and Graph. Graphs should be
>, <Line: - * created using the builder pattern?
>, <Line: - * 
>, <Line: - * @author Bartosz Michalik - added edge data handling
>, <Line: - * @param <E> The type of {@link ConnectionData} that is used in the edges.
>, <Line: -   * @return connection data or <code>null</code> if there is no data or
>, <Line: -  @Nullable
>, <Line: -  E connectionData(Point from, Point to);
>, <Line: -   * @param edgeData data associated with the edge
>, <Line: -  void addConnection(Point from, Point to, @Nullable E edgeData);
>, <Line: -   * @param from Start point of connection
>, <Line: -   * @param to End point of connection
>, <Line: -   * @param edgeData The edge data used for the connection
>, <Line: -   * @return old edge data or <code>null</code> if there was no edge
>, <Line: -   *           exists
>, <Line: -  @Nullable
>, <Line: -  E setConnectionData(Point from, Point to, @Nullable E edgeData);
>]