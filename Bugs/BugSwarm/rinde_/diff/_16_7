[<Line: +import static com.github.rinde.rinsim.geom.ListenableGraph.EventTypes.ADD_CONNECTION;
>, <Line: +import static com.github.rinde.rinsim.geom.ListenableGraph.EventTypes.CHANGE_CONNECTION_DATA;
>, <Line: +import static com.github.rinde.rinsim.geom.ListenableGraph.EventTypes.REMOVE_CONNECTION;
>, <Line: +import static java.util.Arrays.asList;
>, <Line: +import static org.junit.Assert.assertEquals;
>, <Line: +import static org.junit.Assert.assertFalse;
>, <Line: +import static org.junit.Assert.assertTrue;
>, <Line: +import java.util.Arrays;
>, <Line: +import com.github.rinde.rinsim.event.Event;
>, <Line: +import com.github.rinde.rinsim.event.Listener;
>, <Line: +import com.github.rinde.rinsim.geom.ListenableGraph.EventTypes;
>, <Line: +import com.github.rinde.rinsim.geom.ListenableGraph.GraphEvent;
>, <Line: +/**
>, <Line: + * Tests for {@link ListenableGraph}.
>, <Line: + * @author Rinde van Lon
>, <Line: + */
>, <Line: +  /**
>, <Line: +   * Test whether the correct events are dispatched for all modifications.
>, <Line: +   */
>, <Line: +  public void testModifications() {
>, <Line: +    ListenableGraph<LengthData> graph = new ListenableGraph<>(
>, <Line: +        new MultimapGraph<LengthData>());
>, <Line: +    graph.getEventAPI().addListener(history, EventTypes.values());
>, <Line: +    graph.getEventAPI().addListener(new GraphModificationChecker());
>, <Line: +    assertEquals(asList(ADD_CONNECTION), history.getEventTypeHistory());
>, <Line: +    graph.addConnection(b, a, null);
>, <Line: +    assertEquals(asList(ADD_CONNECTION, ADD_CONNECTION),
>, <Line: +        history.getEventTypeHistory());
>, <Line: +    graph.addConnections(Arrays.<Connection<LengthData>> asList(
>, <Line: +        new Connection<>(a, d, new LengthData(10d)),
>, <Line: +        new Connection<>(d, e, new LengthData(7d))));
>, <Line: +    assertEquals(
>, <Line: +        asList(ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION),
>, <Line: +        history.getEventTypeHistory());
>, <Line: +    graph.removeConnection(d, e);
>, <Line: +    assertEquals(
>, <Line: +        asList(ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION,
>, <Line: +            REMOVE_CONNECTION),
>, <Line: +        history.getEventTypeHistory());
>, <Line: +    graph.setConnectionData(a, d, new LengthData(16d));
>, <Line: +    assertEquals(
>, <Line: +        asList(ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION,
>, <Line: +            REMOVE_CONNECTION, CHANGE_CONNECTION_DATA),
>, <Line: +        history.getEventTypeHistory());
>, <Line: +    graph.removeNode(a);
>, <Line: +    assertEquals(
>, <Line: +        asList(ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION, ADD_CONNECTION,
>, <Line: +            REMOVE_CONNECTION, CHANGE_CONNECTION_DATA, REMOVE_CONNECTION,
>, <Line: +            REMOVE_CONNECTION, REMOVE_CONNECTION),
>, <Line: +        history.getEventTypeHistory());
>, <Line: +    assertTrue(graph.isEmpty());
>, <Line: +  }
>, <Line: +  /**
>, <Line: +   * Tests that merging two graphs generates correct modification events.
>, <Line: +   */
>, <Line: +  @Test
>, <Line: +  public void testMerge() {
>, <Line: +    ListenableGraph<LengthData> graph1 = new ListenableGraph<>(
>, <Line: +        new MultimapGraph<LengthData>());
>, <Line: +    ListenableGraph<LengthData> graph2 = new ListenableGraph<>(
>, <Line: +        new MultimapGraph<LengthData>());
>, <Line: +    graph1.addConnection(a, b);
>, <Line: +    graph1.addConnection(b, a);
>, <Line: +    graph2.addConnection(a, c);
>, <Line: +    graph2.addConnection(c, a);
>, <Line: +    graph1.getEventAPI().addListener(new GraphModificationChecker());
>, <Line: +    ListenerEventHistory history = new ListenerEventHistory();
>, <Line: +    graph1.getEventAPI().addListener(history);
>, <Line: +    graph1.merge(graph2);
>, <Line: +    assertEquals(asList(ADD_CONNECTION, ADD_CONNECTION),
>, <Line: +        history.getEventTypeHistory());
>, <Line: +    assertEquals(2, history.getHistory().size());
>, <Line: +    assertEquals(new GraphEvent(ADD_CONNECTION, graph1, a, c, null), history
>, <Line: +        .getHistory().get(0));
>, <Line: +    assertEquals(new GraphEvent(ADD_CONNECTION, graph1, c, a, null), history
>, <Line: +        .getHistory().get(1));
>, <Line: +  }
>, <Line: +  /**
>, <Line: +   * Tests that modifications can not be applied directly to a connection.
>, <Line: +   */
>, <Line: +  @Test(expected = UnsupportedOperationException.class)
>, <Line: +  public void testUnmodifiableConnection() {
>, <Line: +    ListenableGraph<LengthData> graph = new ListenableGraph<>(
>, <Line: +        new MultimapGraph<LengthData>());
>, <Line: +    graph.addConnection(a, b);
>, <Line: +    graph.getConnection(a, b).setData(null);
>, <Line: +  }
>, <Line: +  /**
>, <Line: +   * Tests that modifications can not be applied directly to a connection.
>, <Line: +   */
>, <Line: +  @Test(expected = UnsupportedOperationException.class)
>, <Line: +  public void testUnmodifiableConnections() {
>, <Line: +    ListenableGraph<LengthData> graph = new ListenableGraph<>(
>, <Line: +        new MultimapGraph<LengthData>());
>, <Line: +    graph.addConnection(a, b);
>, <Line: +    graph.getConnections().iterator().next().setData(null);
>, <Line: +  }
>, <Line: +  static class GraphModificationChecker implements Listener {
>, <Line: +    @Override
>, <Line: +    public void handleEvent(Event e) {
>, <Line: +      GraphEvent ge = (GraphEvent) e;
>, <Line: +      if (e.getEventType() == ADD_CONNECTION) {
>, <Line: +        assertTrue(ge.getGraph().hasConnection(ge.getFrom(), ge.getTo()));
>, <Line: +        assertEquals(ge.getConnData(),
>, <Line: +            ge.getGraph().getConnection(ge.getFrom(), ge.getTo()).getData());
>, <Line: +      } else if (e.getEventType() == REMOVE_CONNECTION) {
>, <Line: +        assertFalse(ge.getGraph().hasConnection(ge.getFrom(), ge.getTo()));
>, <Line: +      } else if (e.getEventType() == CHANGE_CONNECTION_DATA) {
>, <Line: +        assertTrue(ge.getGraph().hasConnection(ge.getFrom(), ge.getTo()));
>, <Line: +        assertEquals(ge.getConnData(),
>, <Line: +            ge.getGraph().getConnection(ge.getFrom(), ge.getTo()).getData());
>, <Line: +      }
>, <Line: +    }
>]
[<Line: -  public void test() {
>, <Line: -    ListenableGraph<ConnectionData> graph = new ListenableGraph<>(
>, <Line: -        new MultimapGraph<>());
>, <Line: -    graph.getEventAPI().addListener(history,
>, <Line: -        ListenableGraph.EventTypes.values());
>, <Line: -    System.out.println(history.getHistory());
>]