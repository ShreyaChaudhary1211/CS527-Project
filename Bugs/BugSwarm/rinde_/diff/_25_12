[<Line: +/*
>, <Line: + * Copyright (C) 2011-2014 Rinde van Lon, iMinds DistriNet, KU Leuven
>, <Line: + *
>, <Line: + * Licensed under the Apache License, Version 2.0 (the "License");
>, <Line: + * you may not use this file except in compliance with the License.
>, <Line: + * You may obtain a copy of the License at
>, <Line: + *
>, <Line: + *         http://www.apache.org/licenses/LICENSE-2.0
>, <Line: + *
>, <Line: + * Unless required by applicable law or agreed to in writing, software
>, <Line: + * distributed under the License is distributed on an "AS IS" BASIS,
>, <Line: + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
>, <Line: + * See the License for the specific language governing permissions and
>, <Line: + * limitations under the License.
>, <Line: + */
>, <Line: +package com.github.rinde.rinsim.ui.renderers;
>, <Line: +import java.util.Map;
>, <Line: +import java.util.Map.Entry;
>, <Line: +import javax.annotation.Nullable;
>, <Line: +import org.eclipse.swt.SWT;
>, <Line: +import org.eclipse.swt.graphics.GC;
>, <Line: +import org.inferred.freebuilder.FreeBuilder;
>, <Line: +import com.github.rinde.rinsim.core.model.ModelProvider;
>, <Line: +import com.github.rinde.rinsim.core.model.road.CollisionGraphRoadModel;
>, <Line: +import com.github.rinde.rinsim.core.model.road.RoadUser;
>, <Line: +import com.github.rinde.rinsim.geom.Connection;
>, <Line: +import com.github.rinde.rinsim.geom.Point;
>, <Line: +import com.github.rinde.rinsim.ui.Factory;
>, <Line: +import com.github.rinde.rinsim.ui.IBuilder;
>, <Line: +import com.github.rinde.rinsim.ui.renderers.AGVRenderer.AGVRendererFactory.Builder;
>, <Line: +import com.google.common.base.Optional;
>, <Line: +/**
>, <Line: + * @author Rinde van Lon
>, <Line: + *
>, <Line: + */
>, <Line: +public final class AGVRenderer implements CanvasRenderer {
>, <Line: +  CollisionGraphRoadModel model;
>, <Line: +  RenderHelper helper;
>, <Line: +  AGVRenderer(CollisionGraphRoadModel m, AGVRendererFactory factory) {
>, <Line: +    model = m;
>, <Line: +    helper = new RenderHelper();
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  public void renderStatic(GC gc, ViewPort vp) {}
>, <Line: +  @Override
>, <Line: +  public void renderDynamic(GC gc, ViewPort vp, long time) {
>, <Line: +    helper.adapt(gc, vp);
>, <Line: +    final Map<RoadUser, Point> obs = model.getObjectsAndPositions();
>, <Line: +    for (final Entry<RoadUser, Point> entry : obs.entrySet()) {
>, <Line: +      final Optional<? extends Connection<?>> conn = model.getConnection(entry
>, <Line: +          .getKey());
>, <Line: +      if (conn.isPresent()) {
>, <Line: +        final double angle = PointUtil.angle(conn.get());
>, <Line: +        final Point back = PointUtil
>, <Line: +            .pointInDir(entry.getValue(), angle, -model.getVehicleLength());
>, <Line: +        helper.setBackgroundSysCol(SWT.COLOR_RED);
>, <Line: +        helper.drawArrow(back, entry.getValue(), model.getVehicleLength() / 2d,
>, <Line: +            model.getVehicleLength() / 2d);
>, <Line: +        helper.setBackgroundSysCol(SWT.COLOR_BLUE);
>, <Line: +      }
>, <Line: +      else {
>, <Line: +        helper.fillCircle(entry.getValue(), model.getVehicleLength() / 4d);
>, <Line: +      }
>, <Line: +    }
>, <Line: +  }
>, <Line: +  @Override
>, <Line: +  @Nullable
>, <Line: +  public ViewRect getViewRect() {
>, <Line: +    return null;
>, <Line: +  }
>, <Line: +  public static Builder builder() {
>, <Line: +    return new Builder();
>, <Line: +  }
>, <Line: +  @FreeBuilder
>, <Line: +  public abstract static class AGVRendererFactory implements
>, <Line: +      Factory<AGVRenderer, ModelProvider> {
>, <Line: +    AGVRendererFactory() {}
>, <Line: +    @Override
>, <Line: +    public AGVRenderer create(ModelProvider argument) {
>, <Line: +      return new AGVRenderer(argument.getModel(CollisionGraphRoadModel.class),
>, <Line: +          this);
>, <Line: +    }
>, <Line: +    public static class Builder extends AGVRenderer_AGVRendererFactory_Builder
>, <Line: +        implements IBuilder<Factory<AGVRenderer, ModelProvider>> {}
>, <Line: +  }
>, <Line: +}
>]
[]