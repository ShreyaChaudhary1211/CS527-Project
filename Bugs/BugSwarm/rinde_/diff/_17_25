[<Line: +import com.google.auto.value.AutoValue;
>, <Line: +import com.google.common.base.Optional;
>, <Line: + * Immutable value object representing a directed connection (link/edge) in a
>, <Line: + * graph.
>, <Line: +@AutoValue
>, <Line: +public abstract class Connection<E extends ConnectionData> {
>, <Line: +  Connection() {}
>, <Line: +   * @return The starting point of the connection.
>, <Line: +  public abstract Point from();
>, <Line: +   * @return The end point of the connection.
>, <Line: +  public abstract Point to();
>, <Line: +   * @return The data associated to this connection wrapped in an
>, <Line: +   *         {@link Optional}.
>, <Line: +  public abstract Optional<E> data();
>, <Line: +  /**
>, <Line: +   * @return The length of this connection as specified by the data or
>, <Line: +   *         alternatively by the euclidean distance between the two points.
>, <Line: +   */
>, <Line: +  public double getLength() {
>, <Line: +    if (data().isPresent() && data().get().getLength().isPresent()) {
>, <Line: +      return data().get().getLength().get();
>, <Line: +    return Point.distance(from(), to());
>, <Line: +   * Create a new connection without any connection data associated to it.
>, <Line: +   * @param from The starting point of the connection.
>, <Line: +   * @param to The end point of the connection.
>, <Line: +   * @param <E> The type of {@link ConnectionData}.
>, <Line: +   * @return A new {@link Connection} instance.
>, <Line: +  public static <E extends ConnectionData> Connection<E> create(Point from,
>, <Line: +      Point to) {
>, <Line: +    return create(from, to, Optional.<E> absent());
>, <Line: +   * Create a new connection.
>, <Line: +   * @param from The starting point of the connection.
>, <Line: +   * @param to The end point of the connection.
>, <Line: +   * @param data The data associated to the connection.
>, <Line: +   * @param <E> The type of {@link ConnectionData}.
>, <Line: +   * @return A new {@link Connection} instance.
>, <Line: +  public static <E extends ConnectionData> Connection<E> create(Point from,
>, <Line: +      Point to, E data) {
>, <Line: +    return create(from, to, Optional.of(data));
>, <Line: +  /**
>, <Line: +   * Create a new connection.
>, <Line: +   * @param from The starting point of the connection.
>, <Line: +   * @param to The end point of the connection.
>, <Line: +   * @param data The data associated to the connection.
>, <Line: +   * @param <E> The type of {@link ConnectionData}.
>, <Line: +   * @return A new {@link Connection} instance.
>, <Line: +   */
>, <Line: +  public static <E extends ConnectionData> Connection<E> create(Point from,
>, <Line: +      Point to, Optional<E> data) {
>, <Line: +    return new AutoValue_Connection<>(from, to, data);
>]
[<Line: -import javax.annotation.Nullable;
>, <Line: -import com.google.common.base.MoreObjects;
>, <Line: -import com.google.common.base.Objects;
>, <Line: - * Class representing a directed connection (link/edge) in a graph.
>, <Line: -public class Connection<E extends ConnectionData> {
>, <Line: -   * The starting point of the connection.
>, <Line: -  public final Point from;
>, <Line: -   * The end point of the connection.
>, <Line: -  public final Point to;
>, <Line: -  @Nullable
>, <Line: -  private E data;
>, <Line: -  private final int hashCode;
>, <Line: -   * Instantiates a new connection.
>, <Line: -   * @param pFrom The starting point of the connection.
>, <Line: -   * @param pTo The end point of the connection.
>, <Line: -   * @param pData The data that is associated to this connection.
>, <Line: -  public Connection(Point pFrom, Point pTo, @Nullable E pData) {
>, <Line: -    this.from = pFrom;
>, <Line: -    this.to = pTo;
>, <Line: -    this.data = pData;
>, <Line: -    if (pData != null) {
>, <Line: -      hashCode = Objects.hashCode(from, to, data);
>, <Line: -    } else {
>, <Line: -      hashCode = Objects.hashCode(from, to);
>, <Line: -   * Sets the data associated to this connection to the specified value.
>, <Line: -   * @param pData The new data to be associated to this connection.
>, <Line: -  public void setData(@Nullable E pData) {
>, <Line: -    this.data = pData;
>, <Line: -   * @return The data that is associated to this connection.
>, <Line: -  @Nullable
>, <Line: -  public E getData() {
>, <Line: -    return data;
>, <Line: -  }
>, <Line: -  @Override
>, <Line: -  public int hashCode() {
>, <Line: -    return hashCode;
>, <Line: -  @Override
>, <Line: -  public boolean equals(@Nullable Object obj) {
>, <Line: -    if (!(obj instanceof Connection)) {
>, <Line: -      return false;
>, <Line: -    }
>, <Line: -    @SuppressWarnings("rawtypes")
>, <Line: -    final Connection other = (Connection) obj;
>, <Line: -    if (!from.equals(other.from)) {
>, <Line: -      return false;
>, <Line: -    }
>, <Line: -    if (!to.equals(other.to)) {
>, <Line: -      return false;
>, <Line: -    }
>, <Line: -    final E d = data;
>, <Line: -    if (d == null) {
>, <Line: -      return other.data == null;
>, <Line: -    }
>, <Line: -    return d.equals(other.getData());
>, <Line: -  }
>, <Line: -  @Override
>, <Line: -  public String toString() {
>, <Line: -    return MoreObjects.toStringHelper(this).add("from", from).add("to", to)
>, <Line: -        .add("data", data).omitNullValues().toString();
>]