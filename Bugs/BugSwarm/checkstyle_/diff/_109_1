[<Line: + * Checks for non public class constructor and enum constructor redundant modifier.
>, <Line: + *
>, <Line: + * <p>Examples:</p>
>, <Line: + *
>, <Line: + * <pre>
>, <Line: + * {@code
>, <Line: + * public class PublicClass {
>, <Line: + *     public PublicClass() {} // OK
>, <Line: + * }
>, <Line: + *
>, <Line: + * class PackagePrivateClass {
>, <Line: + *     public PackagePrivateClass() {} // violation expected
>, <Line: + * }
>, <Line: + * }
>, <Line: + * </pre>
>, <Line: + *
>, <Line: + * <pre>
>, <Line: + * {@code
>, <Line: + * package a;
>, <Line: + * public class ClassWithProtectedInnerClass {
>, <Line: + *     protected class ProtectedClass {
>, <Line: + *         public ProtectedClass () {} // OK
>, <Line: + *     }
>, <Line: + * }
>, <Line: + * }
>, <Line: + * </pre>
>, <Line: + * <p>
>, <Line: + * in this example is no violation because removing public from
>, <Line: + * ProtectedClass constructor modifier will make this example
>, <Line: + * not compiling:
>, <Line: + * </p>
>, <Line: + * <pre>
>, <Line: + * {@code
>, <Line: + * package b;
>, <Line: + * import a.ClassWithProtectedInnerClass;
>, <Line: + * public class ClassExtending extends ClassWithProtectedInnerClass {
>, <Line: + *     ProtectedClass pc = new ProtectedClass();
>, <Line: + * }
>, <Line: + * }
>, <Line: + * </pre>
>, <Line: +        else if (ast.getType() == TokenTypes.CTOR_DEF) {
>, <Line: +            if (isEnumMember(ast)) {
>, <Line: +                checkEnumConstructorModifiers(ast);
>, <Line: +            }
>, <Line: +            else {
>, <Line: +                checkClassContructorModifiers(ast);
>, <Line: +            }
>, <Line: +    /**
>, <Line: +     * Check if class constructor has proper modifiers
>, <Line: +     * @param classCtorAst class constructor ast
>, <Line: +     */
>, <Line: +    private void checkClassContructorModifiers(DetailAST classCtorAst) {
>, <Line: +        final DetailAST classDef = classCtorAst.getParent().getParent();
>, <Line: +        if (!isClassPublic(classDef) && !isClassProtected(classDef)) {
>, <Line: +            checkForRedundantPublicModifier(classCtorAst);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Checks if given ast has redundant public modifier
>, <Line: +     * @param ast ast
>, <Line: +     */
>, <Line: +    private void checkForRedundantPublicModifier(DetailAST ast) {
>, <Line: +        final DetailAST astModifiers = ast.findFirstToken(TokenTypes.MODIFIERS);
>, <Line: +        DetailAST astModifier = astModifiers.getFirstChild();
>, <Line: +        while (astModifier != null) {
>, <Line: +            if (astModifier.getType() == TokenTypes.LITERAL_PUBLIC) {
>, <Line: +                log(astModifier.getLineNo(), astModifier.getColumnNo(),
>, <Line: +                        MSG_KEY, astModifier.getText());
>, <Line: +            }
>, <Line: +            astModifier = astModifier.getNextSibling();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Checks if given class ast has protected modifier
>, <Line: +     * @param classDef class ast
>, <Line: +     * @return true if class is protected, false otherwise
>, <Line: +     */
>, <Line: +    private static boolean isClassProtected(DetailAST classDef) {
>, <Line: +        final DetailAST classModifiers =
>, <Line: +                classDef.findFirstToken(TokenTypes.MODIFIERS);
>, <Line: +        return classModifiers.branchContains(TokenTypes.LITERAL_PROTECTED);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Checks if given class ast has public modifier
>, <Line: +     * @param classDef class ast
>, <Line: +     * @return true if class is public, false otherwise
>, <Line: +     */
>, <Line: +    private static boolean isClassPublic(DetailAST classDef) {
>, <Line: +        final DetailAST classModifiers =
>, <Line: +                classDef.findFirstToken(TokenTypes.MODIFIERS);
>, <Line: +        return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);
>, <Line: +    }
>]
[<Line: - * and redundant enum constructor modifier.
>, <Line: -        else if (ast.getType() == TokenTypes.CTOR_DEF
>, <Line: -                && isEnumMember(ast)) {
>, <Line: -            checkEnumConstructorModifiers(ast);
>]