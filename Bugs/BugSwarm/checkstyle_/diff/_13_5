[<Line: +      <p>
>, <Line: +      To start implementing your own Check create new class and extend AbstractJavadocCheck. It has two abstract methods:
>, <Line: +      </p>
>, <Line: +      <ul>
>, <Line: +        <li>getDefaultJavadocTokens() - return array of token types that your new Check requires to process (see "Token Types" section)</li>
>, <Line: +        <li>visitJavadocToken(DetailNode) - it's the place you should put tree nodes proccessing. The argument is Javadoc tree node of type you described 
>, <Line: +          before in getDefaultJavadocTokens() method.</li>
>, <Line: +      </ul>
>, <Line: +      <p>
>, <Line: +        Javadoc parser requires XHTML to be used in Javadoc comments, i.e. if there is some open tag(for example &lt;div&gt;) then there have to be its close tag &lt;/div&gt;.
>, <Line: +        This means that if Javadoc comment has incorrect XHTML structure then Javadoc Parser will fail processing the comment, therefore, your new Check can't get its parse tree and process anything from this Javadoc comment. For more details and examples go to "HTML code in Javadoc comments" section.
>, <Line: +      </p>
>, <Line: +      <p>
>, <Line: +        Java grammar parses java file due to language specifications. So, there are singleline comments and multiline/block comments in it. Java compiler doesn't know about Javadoc because it is just a multiline comment.
>, <Line: +        To parse multiline comment as a Javadoc comment, checkstyle has second grammar - Javadoc grammar. So, it's supposed to proccess block comments and parse them to Abstract Syntax Tree.
>, <Line: +        The problem is that Java grammar is old one and uses ANTLR v2, while Javadoc grammar uses ANTLR v4. Because of that, these two grammars and their trees are not compatible.
>, <Line: +        Java AST consists of DetailAST objects, while Javadoc AST consists of DetailNode objects.
>, <Line: +      </p>
>, <Line: +    <section name="HTML code in Javadoc comments">
>, <Line: +    </section>
>]
[]