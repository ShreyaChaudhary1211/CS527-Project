[<Line: +                    dist = getDistToVariableUsageInChildNode(currentAst, variableIdentAst, dist);
>, <Line: +    /**
>, <Line: +     * Returns the distance to variable usage for in the child node.
>, <Line: +     * @param childNode child node.
>, <Line: +     * @param varIdent variable variable identifier.
>, <Line: +     * @param currentDistToVarUsage current distance to the variable usage.
>, <Line: +     * @return the distance to variable usage for in the child node.
>, <Line: +     */
>, <Line: +    private static int getDistToVariableUsageInChildNode(DetailAST childNode, DetailAST varIdent,
>, <Line: +                                                         int currentDistToVarUsage) {
>, <Line: +        int resultDist = currentDistToVarUsage;
>, <Line: +        switch (childNode.getType()) {
>, <Line: +            case TokenTypes.VARIABLE_DEF:
>, <Line: +                resultDist++;
>, <Line: +                break;
>, <Line: +            case TokenTypes.SLIST:
>, <Line: +                resultDist = 0;
>, <Line: +                break;
>, <Line: +            case TokenTypes.LITERAL_FOR:
>, <Line: +            case TokenTypes.LITERAL_WHILE:
>, <Line: +            case TokenTypes.LITERAL_DO:
>, <Line: +            case TokenTypes.LITERAL_IF:
>, <Line: +            case TokenTypes.LITERAL_SWITCH:
>, <Line: +                if (isVariableInOperatorExpr(childNode, varIdent)) {
>, <Line: +                    resultDist++;
>, <Line: +                }
>, <Line: +                else {
>, <Line: +                    // variable usage is in inner scope
>, <Line: +                    // reset counters, because we can't determine distance
>, <Line: +                    resultDist = 0;
>, <Line: +                }
>, <Line: +                break;
>, <Line: +            default:
>, <Line: +                if (childNode.branchContains(TokenTypes.SLIST)) {
>, <Line: +                    resultDist = 0;
>, <Line: +                }
>, <Line: +                else {
>, <Line: +                    resultDist++;
>, <Line: +                }
>, <Line: +        }
>, <Line: +        return resultDist;
>, <Line: +    }
>]
[<Line: -                    switch (currentAst.getType()) {
>, <Line: -                        case TokenTypes.VARIABLE_DEF:
>, <Line: -                            dist++;
>, <Line: -                            break;
>, <Line: -                        case TokenTypes.SLIST:
>, <Line: -                            dist = 0;
>, <Line: -                            break;
>, <Line: -                        case TokenTypes.LITERAL_FOR:
>, <Line: -                        case TokenTypes.LITERAL_WHILE:
>, <Line: -                        case TokenTypes.LITERAL_DO:
>, <Line: -                        case TokenTypes.LITERAL_IF:
>, <Line: -                        case TokenTypes.LITERAL_SWITCH:
>, <Line: -                            if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {
>, <Line: -                                dist++;
>, <Line: -                            }
>, <Line: -                            else {
>, <Line: -                                // variable usage is in inner scope
>, <Line: -                                // reset counters, because we can't determine distance
>, <Line: -                                dist = 0;
>, <Line: -                            }
>, <Line: -                            break;
>, <Line: -                        default:
>, <Line: -                            if (currentAst.branchContains(TokenTypes.SLIST)) {
>, <Line: -                                dist = 0;
>, <Line: -                            }
>, <Line: -                            else {
>, <Line: -                                dist++;
>, <Line: -                            }
>, <Line: -                    }
>]