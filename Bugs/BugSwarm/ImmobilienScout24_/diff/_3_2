[<Line: +import javassist.ClassPath;
>, <Line: +import org.hamcrest.Matchers;
>, <Line: +	private ClassPath classPath;
>, <Line: +	@Test
>, <Line: +	public void silentlyFailsForMissingNestedClasses() throws NotFoundException {
>, <Line: +		CtClass clazz = loadCtClass(false, "ClassWithInnerClass");
>, <Line: +		trickJavassistByRemovingClassPath(clazz);
>, <Line: +		Iterable<CtClass> nestedClasses = CtClasses.getNestedClassesOf(clazz);
>, <Line: +		assertThat(nestedClasses, is(emptyIterable()));
>, <Line: +	}
>, <Line: +	@Test
>, <Line: +	public void silentlyFailsForMissingDeclaringClass() throws NotFoundException {
>, <Line: +		CtClass clazz = loadCtClass(false, "ClassWithInnerClass$InnerClass");
>, <Line: +		trickJavassistByRemovingClassPath(clazz);
>, <Line: +		Iterable<CtClass> declaringClasses = CtClasses.getDeclaringClassesOf(clazz);
>, <Line: +		assertThat(declaringClasses, is(Matchers.<CtClass>iterableWithSize(1)));
>, <Line: +	}
>, <Line: +	@Override
>, <Line: +	protected Class<?> getType() {
>, <Line: +		return CtClasses.class;
>, <Line: +	private CtClass loadCtClass(boolean useSystemClassPath, String className) throws NotFoundException {
>, <Line: +		ClassPool classPool = new ClassPool(useSystemClassPath);
>, <Line: +		classPath = classPool.appendClassPath(FileLoader.getFile(".").getAbsolutePath());
>, <Line: +		CtClass clazz = classPool.getOrNull(className);
>, <Line: +		assertThat(clazz, is(notNullValue()));
>, <Line: +		return clazz;
>, <Line: +	}
>, <Line: +	private void trickJavassistByRemovingClassPath(CtClass clazz)
>, <Line: +			throws NotFoundException {
>, <Line: +		clazz.getClassFile2(); // initialize inner cache for this class to prevent RuntimeException
>, <Line: +		clazz.getClassPool().removeClassPath(classPath);
>]
[<Line: -    private CtClass loadCtClass(boolean useSystemClassPath, String className) throws NotFoundException {
>, <Line: -        ClassPool classPool = new ClassPool(useSystemClassPath);
>, <Line: -        classPool.appendClassPath(FileLoader.getFile(".").getAbsolutePath());
>, <Line: -        CtClass clazz = classPool.getOrNull(className);
>, <Line: -        assertThat(clazz, is(notNullValue()));
>, <Line: -        return clazz;
>, <Line: -    @Override
>, <Line: -    protected Class<?> getType() {
>, <Line: -        return CtClasses.class;
>]