[<Line: +    verktyg.testsuite.test_http
>, <Line: +    ~~~~~~~~~~~~~~~~~~~~~~~~~~~
>, <Line: +    Tests for HTTP parsing utilities.
>, <Line: +from werkzeug._compat import wsgi_encoding_dance
>]
[<Line: -    verktyg.testsuite.http
>, <Line: -    ~~~~~~~~~~~~~~~~~~~~~~
>, <Line: -    HTTP parsing utilities.
>, <Line: -from werkzeug._compat import itervalues, wsgi_encoding_dance
>, <Line: -class AcceptTestCase(unittest.TestCase):
>, <Line: -    def test_accept_basic(self):
>, <Line: -        accept = http.Accept([
>, <Line: -            ('tinker', 0), ('tailor', 0.333),
>, <Line: -            ('soldier', 0.667), ('sailor', 1),
>, <Line: -        ])
>, <Line: -        # check __getitem__ on indices
>, <Line: -        self.assertEqual(accept[3], ('tinker', 0))
>, <Line: -        self.assertEqual(accept[2], ('tailor', 0.333))
>, <Line: -        self.assertEqual(accept[1], ('soldier', 0.667))
>, <Line: -        self.assertEqual(accept[0], ('sailor', 1))
>, <Line: -        # check __getitem__ on string
>, <Line: -        self.assertEqual(accept['tinker'], 0)
>, <Line: -        self.assertEqual(accept['tailor'], 0.333)
>, <Line: -        self.assertEqual(accept['soldier'], 0.667)
>, <Line: -        self.assertEqual(accept['sailor'], 1)
>, <Line: -        self.assertEqual(accept['spy'], 0)
>, <Line: -        # check quality method
>, <Line: -        self.assertEqual(accept.quality('tinker'), 0)
>, <Line: -        self.assertEqual(accept.quality('tailor'), 0.333)
>, <Line: -        self.assertEqual(accept.quality('soldier'), 0.667)
>, <Line: -        self.assertEqual(accept.quality('sailor'), 1)
>, <Line: -        self.assertEqual(accept.quality('spy'), 0)
>, <Line: -        # check __contains__
>, <Line: -        self.assertIn('sailor', accept)
>, <Line: -        self.assertNotIn('spy', accept)
>, <Line: -        # check index method
>, <Line: -        self.assertEqual(accept.index('tinker'), 3)
>, <Line: -        self.assertEqual(accept.index('tailor'), 2)
>, <Line: -        self.assertEqual(accept.index('soldier'), 1)
>, <Line: -        self.assertEqual(accept.index('sailor'), 0)
>, <Line: -        self.assertRaises(ValueError, accept.index, 'spy')
>, <Line: -        # check find method
>, <Line: -        self.assertEqual(accept.find('tinker'), 3)
>, <Line: -        self.assertEqual(accept.find('tailor'), 2)
>, <Line: -        self.assertEqual(accept.find('soldier'), 1)
>, <Line: -        self.assertEqual(accept.find('sailor'), 0)
>, <Line: -        self.assertEqual(accept.find('spy'), -1)
>, <Line: -        # check to_header method
>, <Line: -        self.assertEqual(
>, <Line: -            accept.to_header(),
>, <Line: -            'sailor,soldier;q=0.667,tailor;q=0.333,tinker;q=0'
>, <Line: -        )
>, <Line: -        # check best_match method
>, <Line: -        self.assertEqual(
>, <Line: -            accept.best_match(
>, <Line: -                ['tinker', 'tailor', 'soldier', 'sailor'], default=None
>, <Line: -            ),
>, <Line: -            'sailor'
>, <Line: -        )
>, <Line: -        self.assertEqual(
>, <Line: -            accept.best_match(['tinker', 'tailor', 'soldier'], default=None),
>, <Line: -            'soldier'
>, <Line: -        )
>, <Line: -        self.assertEqual(
>, <Line: -            accept.best_match(['tinker', 'tailor'], default=None),
>, <Line: -            'tailor'
>, <Line: -        )
>, <Line: -        self.assertIs(accept.best_match(['tinker'], default=None), None)
>, <Line: -        self.assertEqual(accept.best_match(['tinker'], default='x'), 'x')
>, <Line: -    def test_accept_wildcard(self):
>, <Line: -        accept = http.Accept([('*', 0), ('asterisk', 1)])
>, <Line: -        self.assertIn('*', accept)
>, <Line: -        self.assertEqual(
>, <Line: -            accept.best_match(['asterisk', 'star'], default=None),
>, <Line: -            'asterisk'
>, <Line: -        )
>, <Line: -        self.assertIs(accept.best_match(['star'], default=None), None)
>, <Line: -    def test_parse_accept(self):
>, <Line: -        a = http.parse_accept_header('en-us,ru;q=0.5')
>, <Line: -        self.assertEqual(list(itervalues(a)), ['en-us', 'ru'])
>, <Line: -        self.assertEqual(a.best, 'en-us')
>, <Line: -        self.assertEqual(a.find('ru'), 1)
>, <Line: -        self.assertRaises(ValueError, a.index, 'de')
>, <Line: -        self.assertEqual(a.to_header(), 'en-us,ru;q=0.5')
>, <Line: -    def test_parse_mime_accept(self):
>, <Line: -        a = http.parse_accept_header(
>, <Line: -            'text/xml,application/xml,'
>, <Line: -            'application/xhtml+xml,'
>, <Line: -            'application/foo;quiet=no; bar=baz;q=0.6,'
>, <Line: -            'text/html;q=0.9,text/plain;q=0.8,'
>, <Line: -            'image/png,*/*;q=0.5',
>, <Line: -            http.MIMEAccept
>, <Line: -        )
>, <Line: -        self.assertRaises(ValueError, lambda: a['missing'])
>, <Line: -        self.assertEqual(a['image/png'], 1)
>, <Line: -        self.assertEqual(a['text/plain'], 0.8)
>, <Line: -        self.assertEqual(a['foo/bar'], 0.5)
>, <Line: -        self.assertEqual(a['application/foo;quiet=no; bar=baz'], 0.6)
>, <Line: -        self.assertEqual(a[a.find('foo/bar')], ('*/*', 0.5))
>, <Line: -    def test_accept_matches(self):
>, <Line: -        a = http.parse_accept_header(
>, <Line: -            'text/xml,application/xml,application/xhtml+xml,'
>, <Line: -            'text/html;q=0.9,text/plain;q=0.8,'
>, <Line: -            'image/png', http.MIMEAccept
>, <Line: -        )
>, <Line: -        self.assertEqual(
>, <Line: -            a.best_match(['text/html', 'application/xhtml+xml']),
>, <Line: -            'application/xhtml+xml'
>, <Line: -        )
>, <Line: -        self.assertEqual(a.best_match(['text/html']), 'text/html')
>, <Line: -        self.assertIs(a.best_match(['foo/bar']), None)
>, <Line: -        self.assertEqual(
>, <Line: -            a.best_match(['foo/bar', 'bar/foo'], default='foo/bar'), 'foo/bar'
>, <Line: -        )
>, <Line: -        self.assertEqual(
>, <Line: -            a.best_match(['application/xml', 'text/xml']), 'application/xml'
>, <Line: -        )
>, <Line: -    def test_parse_charset_accept(self):
>, <Line: -        a = http.parse_accept_header(
>, <Line: -            'ISO-8859-1,utf-8;q=0.7,*;q=0.7', http.CharsetAccept
>, <Line: -        )
>, <Line: -        self.assertEqual(a['iso-8859-1'], a['iso8859-1'])
>, <Line: -        self.assertEqual(a['iso-8859-1'], 1)
>, <Line: -        self.assertEqual(a['UTF8'], 0.7)
>, <Line: -        self.assertEqual(a['ebcdic'], 0.7)
>, <Line: -    def test_parse_language_accept(self):
>, <Line: -        a = http.parse_accept_header(
>, <Line: -            'de-AT,de;q=0.8,en;q=0.5', http.LanguageAccept
>, <Line: -        )
>, <Line: -        self.assertEqual(a.best, 'de-AT')
>, <Line: -        self.assertIn('de_AT', a)
>, <Line: -        self.assertIn('en', a)
>, <Line: -        self.assertEqual(a['de-at'], 1)
>, <Line: -        self.assertEqual(a['en'], 0.5)
>, <Line: -class RegressionTestCase(unittest.TestCase):
>, <Line: -    def test_best_match_works(self):
>, <Line: -        # was a bug in 0.6
>, <Line: -        rv = http.parse_accept_header(
>, <Line: -            'foo=,application/xml,application/xhtml+xml,'
>, <Line: -            'text/html;q=0.9,text/plain;q=0.8,'
>, <Line: -            'image/png,*/*;q=0.5',
>, <Line: -            http.MIMEAccept
>, <Line: -        ).best_match(['foo/bar'])
>, <Line: -        self.assertEqual(rv, 'foo/bar')
>]