[<Line: +"""
>, <Line: +    verktyg.testsuite.test_http_accept
>, <Line: +    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
>, <Line: +    Tests for HTTP accept header parsing utilities.
>, <Line: +    :copyright:
>, <Line: +        (c) 2015 Ben Mather, based on Werkzeug, see AUTHORS for more details.
>, <Line: +    :license:
>, <Line: +        BSD, see LICENSE for more details.
>, <Line: +"""
>, <Line: +import unittest
>, <Line: +from verktyg import http
>, <Line: +from verktyg.exceptions import NotAcceptable
>, <Line: +class ContentTypeTestCase(unittest.TestCase):
>, <Line: +    def test_parse_accept_basic(self):
>, <Line: +        accept = http.parse_accept_header(
>, <Line: +            'text/xml'
>, <Line: +        )
>, <Line: +        range_ = next(iter(accept))
>, <Line: +        self.assertEqual('text', range_.type)
>, <Line: +        self.assertEqual('xml', range_.subtype)
>, <Line: +        self.assertEqual(1, range_.q)
>, <Line: +        self.assertEqual(0, len(range_.params))
>, <Line: +        with self.assertRaises(KeyError):
>, <Line: +            range_.params['q']
>, <Line: +    def test_parse_accept_params(self):
>, <Line: +        accept = http.parse_accept_header(
>, <Line: +            'application/foo;quiet=no; bar=baz;q=0.6'
>, <Line: +        )
>, <Line: +        range_ = next(iter(accept))
>, <Line: +        self.assertEqual('application', range_.type)
>, <Line: +        self.assertEqual('foo', range_.subtype)
>, <Line: +        self.assertEqual(0.6, range_.q)
>, <Line: +        self.assertEqual(2, len(range_.params))
>, <Line: +        self.assertEqual('no', range_.params['quiet'])
>, <Line: +        self.assertEqual('baz', range_.params['bar'])
>, <Line: +        with self.assertRaises(KeyError):
>, <Line: +            range_.params['no-such-param']
>, <Line: +        with self.assertRaises(KeyError):
>, <Line: +            range_.params['q']
>, <Line: +    def test_parse_accept_invalid_params(self):
>, <Line: +        # TODO
>, <Line: +        pass
>, <Line: +    def test_parse_accept_case(self):
>, <Line: +        # TODO
>, <Line: +        pass
>, <Line: +    def test_parse_accept_multiple(self):
>, <Line: +        accept = http.parse_accept_header(
>, <Line: +            'text/xml,'
>, <Line: +            'application/xml,'
>, <Line: +            'application/xhtml+xml,'
>, <Line: +            'application/foo;quiet=no; bar=baz;q=0.6,'
>, <Line: +            'text/html;q=0.9,'
>, <Line: +            'text/plain;q=0.8,'
>, <Line: +            'image/png,'
>, <Line: +            '*/*;q=0.5'
>, <Line: +        )
>, <Line: +        self.assertEqual(len(list(accept)), 8)
>, <Line: +    def test_parse(self):
>, <Line: +        content_type = http.parse_content_type_header('text/html')
>, <Line: +        self.assertEqual(content_type.type, 'text')
>, <Line: +        self.assertEqual(content_type.subtype, 'html')
>, <Line: +    def test_serialize(self):
>, <Line: +        content_type = http.ContentType('text/html', qs=0.5)
>, <Line: +        self.assertEqual('text/html', content_type.to_header())
>, <Line: +    def test_serialize_accept(self):
>, <Line: +        accept = http.ContentTypeAccept(['text/html'])
>, <Line: +        self.assertEqual(accept.to_header(), 'text/html')
>, <Line: +    def test_serialize_accept_q_before_params(self):
>, <Line: +        accept = http.ContentTypeAccept([
>, <Line: +            ('application/json', '0.5', {'speed': 'maximum'}),
>, <Line: +        ])
>, <Line: +        self.assertEqual(
>, <Line: +            accept.to_header(), 'application/json;q=0.5;speed=maximum'
>, <Line: +        )
>, <Line: +    def test_serialize_accept_redundant_q(self):
>, <Line: +        accept = http.ContentTypeAccept([('image/png', '1')])
>, <Line: +        self.assertEqual(accept.to_header(), 'image/png')
>, <Line: +    def test_serialize_accept_multiple(self):
>, <Line: +        accept = http.ContentTypeAccept([
>, <Line: +            'application/xhtml+xml',
>, <Line: +            ('text/plain', '0.8'),
>, <Line: +            'image/png',
>, <Line: +            ('*/*', '0.5'),
>, <Line: +        ])
>, <Line: +        self.assertEqual(
>, <Line: +            accept.to_header(),
>, <Line: +            (
>, <Line: +                'application/xhtml+xml,'
>, <Line: +                'text/plain;q=0.8,'
>, <Line: +                'image/png,'
>, <Line: +                '*/*;q=0.5'
>, <Line: +            )
>, <Line: +        )
>, <Line: +    def test_match_basic(self):
>, <Line: +        accept = http.ContentTypeAccept(['text/xml'])
>, <Line: +        acceptable = http.ContentType('text/xml')
>, <Line: +        unacceptable_type = http.ContentType('application/xml')
>, <Line: +        unacceptable_subtype = http.ContentType('text/html')
>, <Line: +        self.assertRaises(
>, <Line: +            NotAcceptable, unacceptable_type.acceptability, accept
>, <Line: +        )
>, <Line: +        self.assertRaises(
>, <Line: +            NotAcceptable, unacceptable_subtype.acceptability, accept
>, <Line: +        )
>, <Line: +        match = acceptable.acceptability(accept)
>, <Line: +        self.assertEqual(acceptable, match.content_type)
>, <Line: +        self.assertTrue(match.type_matches)
>, <Line: +        self.assertTrue(match.subtype_matches)
>, <Line: +        self.assertTrue(match.exact_match)
>, <Line: +    def test_match_wildcard(self):
>, <Line: +        accept = http.ContentTypeAccept(['*/*'])
>, <Line: +        content_type = http.ContentType('text/html')
>, <Line: +        match = content_type.acceptability(accept)
>, <Line: +        self.assertEqual(content_type, match.content_type)
>, <Line: +        self.assertFalse(match.type_matches)
>, <Line: +        self.assertFalse(match.subtype_matches)
>, <Line: +        self.assertFalse(match.exact_match)
>, <Line: +    def test_match_subtype_wildcard(self):
>, <Line: +        accept = http.ContentTypeAccept(['text/*'])
>, <Line: +        unacceptable = http.ContentType('image/jpeg')
>, <Line: +        acceptable = http.ContentType('text/html')
>, <Line: +        self.assertRaises(NotAcceptable, unacceptable.acceptability, accept)
>, <Line: +        match = acceptable.acceptability(accept)
>, <Line: +        self.assertEqual(acceptable, match.content_type)
>, <Line: +        self.assertTrue(match.type_matches)
>, <Line: +        self.assertFalse(match.subtype_matches)
>, <Line: +        self.assertFalse(match.exact_match)
>, <Line: +    def test_match_quality(self):
>, <Line: +        accept = http.ContentTypeAccept([('text/html', '0.5')])
>, <Line: +        no_qs = http.ContentType('text/html')
>, <Line: +        qs = http.ContentType('text/html', qs=0.5)
>, <Line: +        self.assertEqual(0.5, no_qs.acceptability(accept).quality)
>, <Line: +        self.assertEqual(0.25, qs.acceptability(accept).quality)
>, <Line: +    def test_match(self):
>, <Line: +        accept = http.ContentTypeAccept([
>, <Line: +            'text/xml',
>, <Line: +            'application/xml',
>, <Line: +            'application/xhtml+xml',
>, <Line: +            ('application/foo', '0.6', {'quiet': 'no', 'bar': 'baz'}),
>, <Line: +            ('text/html', '0.9'),
>, <Line: +            ('text/plain', '0.8'),
>, <Line: +            'image/png',
>, <Line: +            ('*/*', '0.5'),
>, <Line: +        ])
>, <Line: +        content_type = http.ContentType('image/png')
>, <Line: +        match = content_type.acceptability(accept)
>, <Line: +        self.assertEqual(match.quality, 1.0)
>, <Line: +        self.assertTrue(match.exact_match)
>, <Line: +        content_type = http.ContentType('text/plain')
>, <Line: +        match = content_type.acceptability(accept)
>, <Line: +        self.assertEqual(match.quality, 0.8)
>, <Line: +        self.assertTrue(match.exact_match)
>, <Line: +        content_type = http.ContentType('application/json')
>, <Line: +        match = content_type.acceptability(accept)
>, <Line: +        self.assertEqual(match.quality, 0.5)
>, <Line: +        self.assertFalse(match.exact_match)
>, <Line: +class LanguageTestCase(unittest.TestCase):
>, <Line: +    def test_parse_accept_basic(self):
>, <Line: +        accept = http.parse_accept_language_header('en-gb')
>, <Line: +        range_ = next(iter(accept))
>, <Line: +        self.assertEqual('en-gb', range_.value)
>, <Line: +        self.assertEqual(1, range_.q)
>, <Line: +    def test_parse_accept_params(self):
>, <Line: +        self.assertRaises(
>, <Line: +            ValueError, http.parse_accept_language_header, 'en;param=invalid'
>, <Line: +        )
>, <Line: +    def test_parse_accept_q(self):
>, <Line: +        accept = http.parse_accept_language_header('en; q=0.8')
>, <Line: +        range_ = next(iter(accept))
>, <Line: +        self.assertEqual(0.8, range_.q)
>, <Line: +    def test_parse_accept_multiple(self):
>, <Line: +        accept = http.parse_accept_language_header(
>, <Line: +            'da,en-gb;q=0.8,en;q=0.7,*;q=0.1'
>, <Line: +        )
>, <Line: +        self.assertEqual(len(list(accept)), 4)
>, <Line: +    def test_parse(self):
>, <Line: +        language = http.parse_language_header('en-gb')
>, <Line: +        self.assertEqual(language.value, 'en-gb')
>, <Line: +    def test_serialize(self):
>, <Line: +        language = http.Language('en-us', qs=0.5)
>, <Line: +        self.assertEqual('en-us', language.to_header())
>, <Line: +    def test_serialize_accept_redundant_q(self):
>, <Line: +        accept = http.LanguageAccept([('jp', '1')])
>, <Line: +        self.assertEqual(accept.to_header(), 'jp')
>, <Line: +    def test_serialize_accept_multiple(self):
>, <Line: +        accept = http.LanguageAccept([
>, <Line: +            'da', ('en-gb', 0.8), ('en', 0.7), ('*', 0.1)
>, <Line: +        ])
>, <Line: +        self.assertEqual(accept.to_header(), 'da,en-gb;q=0.8,en;q=0.7,*;q=0.1')
>, <Line: +    def test_match_basic(self):
>, <Line: +        accept = http.LanguageAccept(['en-gb'])
>, <Line: +        acceptable = http.Language('en-gb')
>, <Line: +        unacceptable = http.Language('fr')
>, <Line: +        self.assertRaises(NotAcceptable, unacceptable.acceptability, accept)
>, <Line: +        match = acceptable.acceptability(accept)
>, <Line: +        self.assertEqual(match.language, acceptable)
>, <Line: +        self.assertEqual(match.specificity, 2)
>, <Line: +        self.assertEqual(match.tail, 0)
>, <Line: +        self.assertTrue(match.exact_match)
>, <Line: +    def test_match_partial(self):
>, <Line: +        accept = http.LanguageAccept(['one-two'])
>, <Line: +        unacceptable = http.Language('one')
>, <Line: +        acceptable = http.Language('one-two-three')
>, <Line: +        self.assertRaises(NotAcceptable, unacceptable.acceptability, accept)
>, <Line: +        match = acceptable.acceptability(accept)
>, <Line: +        self.assertEqual(acceptable, match.language)
>, <Line: +        self.assertEqual(match.specificity, 2)
>, <Line: +        self.assertEqual(match.tail, 1)
>, <Line: +        self.assertFalse(match.exact_match)
>, <Line: +    def test_match_wildcard(self):
>, <Line: +        accept = http.LanguageAccept(['*'])
>, <Line: +        language = http.Language('en')
>, <Line: +        match = language.acceptability(accept)
>, <Line: +        self.assertEqual(match.language, language)
>, <Line: +        self.assertEqual(match.specificity, 0)
>, <Line: +        self.assertEqual(match.tail, 1)
>, <Line: +        self.assertFalse(match.exact_match)
>, <Line: +    def test_match_quality(self):
>, <Line: +        accept = http.LanguageAccept([('en', '0.5')])
>, <Line: +        no_qs = http.Language('en')
>, <Line: +        qs = http.Language('en', qs=0.5)
>, <Line: +        self.assertEqual(0.5, no_qs.acceptability(accept).quality)
>, <Line: +        self.assertEqual(0.25, qs.acceptability(accept).quality)
>, <Line: +    def test_match(self):
>, <Line: +        accept = http.LanguageAccept([
>, <Line: +            'fr', 'fr-be', ('en-gb', 0.8), ('en', 0.7), ('*', 0.1)
>, <Line: +        ])
>, <Line: +        fr = http.Language('fr')
>, <Line: +        fr_match = fr.acceptability(accept)
>, <Line: +        self.assertEqual(fr_match.quality, 1.0)
>, <Line: +        self.assertTrue(fr_match.exact_match)
>, <Line: +        fr_be = http.Language('fr-be')
>, <Line: +        fr_be_match = fr_be.acceptability(accept)
>, <Line: +        self.assertEqual(fr_be_match.quality, 1.0)
>, <Line: +        self.assertTrue(fr_be_match.exact_match)
>, <Line: +        # more specific first
>, <Line: +        self.assertGreater(fr_be_match, fr_match)
>, <Line: +        en_gb = http.Language('en-gb')
>, <Line: +        en_gb_match = en_gb.acceptability(accept)
>, <Line: +        self.assertEqual(en_gb_match.quality, 0.8)
>, <Line: +        self.assertTrue(en_gb_match.exact_match)
>, <Line: +        en_us = http.Language('en-us')
>, <Line: +        en_us_match = en_us.acceptability(accept)
>, <Line: +        self.assertEqual(en_us_match.quality, 0.7)
>, <Line: +        self.assertFalse(en_us_match.exact_match)
>, <Line: +        en = http.Language('en')
>, <Line: +        en_match = en.acceptability(accept)
>, <Line: +        self.assertEqual(en_match.quality, 0.7)
>, <Line: +        self.assertTrue(en_match.exact_match)
>, <Line: +        zu = http.Language('zu')
>, <Line: +        zu_match = zu.acceptability(accept)
>, <Line: +        self.assertEqual(zu_match.quality, 0.1)
>, <Line: +        self.assertFalse(zu_match.exact_match)
>, <Line: +class CharsetTestCase(unittest.TestCase):
>, <Line: +    def test_parse_accept_basic(self):
>, <Line: +        accept = http.parse_accept_charset_header(
>, <Line: +            'iso-8859-5'
>, <Line: +        )
>, <Line: +        range_ = next(iter(accept))
>, <Line: +        self.assertEqual('iso-8859-5', range_.value)
>, <Line: +        self.assertEqual(1, range_.q)
>, <Line: +    def test_parse_accept_q(self):
>, <Line: +        accept = http.parse_accept_charset_header(
>, <Line: +            'ascii;q=0.5',
>, <Line: +        )
>, <Line: +        range_ = next(iter(accept))
>, <Line: +        self.assertEqual('ascii', range_.value)
>, <Line: +        self.assertEqual(0.5, range_.q)
>, <Line: +    def test_parse_accept_params(self):
>, <Line: +        with self.assertRaises(ValueError):
>, <Line: +            http.parse_accept_charset_header(
>, <Line: +                'utf-8;orange=black'
>, <Line: +            )
>, <Line: +    def test_parse_accept_multiple(self):
>, <Line: +        accept = http.parse_accept_charset_header(
>, <Line: +            'utf-8,'
>, <Line: +            'ascii;q=0.5,'
>, <Line: +            '*;q=0.1'
>, <Line: +        )
>, <Line: +        self.assertEqual(3, len(list(accept)))
>, <Line: +    def test_parse(self):
>, <Line: +        charset = http.parse_charset_header('utf-8')
>, <Line: +        self.assertEqual('utf-8', charset.value)
>, <Line: +    def test_serialize(self):
>, <Line: +        charset = http.Charset('iso-8859-1', qs=0.5)
>, <Line: +        self.assertEqual('iso-8859-1', charset.to_header())
>, <Line: +    def test_serialize_accept(self):
>, <Line: +        accept = http.CharsetAccept(['ascii'])
>, <Line: +        self.assertEqual(accept.to_header(), 'ascii')
>, <Line: +    def test_serialize_accept_with_q(self):
>, <Line: +        accept = http.CharsetAccept([('utf-8', '0.5')])
>, <Line: +        self.assertEqual(accept.to_header(), 'utf-8;q=0.5')
>, <Line: +    def test_serialize_accept_redundant_q(self):
>, <Line: +        accept = http.CharsetAccept([('utf-8', '1')])
>, <Line: +        self.assertEqual(accept.to_header(), 'utf-8')
>, <Line: +    def test_serialize_accept_multiple(self):
>, <Line: +        accept = http.CharsetAccept([
>, <Line: +            'utf-8',
>, <Line: +            ('ascii', 0.5),
>, <Line: +            ('*', 0.1),
>, <Line: +        ])
>, <Line: +        self.assertEqual(
>, <Line: +            accept.to_header(),
>, <Line: +            (
>, <Line: +                'utf-8,'
>, <Line: +                'ascii;q=0.5,'
>, <Line: +                '*;q=0.1'
>, <Line: +            )
>, <Line: +        )
>, <Line: +    def test_match_basic(self):
>, <Line: +        accept = http.CharsetAccept(['utf-8'])
>, <Line: +        acceptable = http.Charset('utf-8')
>, <Line: +        unacceptable = http.Charset('latin-1')
>, <Line: +        self.assertRaises(NotAcceptable, unacceptable.acceptability, accept)
>, <Line: +        match = acceptable.acceptability(accept)
>, <Line: +        self.assertEqual(acceptable, match.charset)
>, <Line: +        self.assertTrue(match.exact_match)
>, <Line: +    def test_match_wildcard(self):
>, <Line: +        accept = http.CharsetAccept(['*'])
>, <Line: +        charset = http.Charset('iso-8859-8')
>, <Line: +        match = charset.acceptability(accept)
>, <Line: +        self.assertEqual(charset, match.charset)
>, <Line: +        self.assertFalse(match.exact_match)
>, <Line: +    def test_match_quality(self):
>, <Line: +        accept = http.CharsetAccept([('utf-8', '0.5')])
>, <Line: +        no_qs = http.Charset('utf-8')
>, <Line: +        qs = http.Charset('utf-8', qs=0.5)
>, <Line: +        self.assertEqual(0.5, no_qs.acceptability(accept).quality)
>, <Line: +        self.assertEqual(0.25, qs.acceptability(accept).quality)
>, <Line: +    def test_match(self):
>, <Line: +        accept = http.CharsetAccept([
>, <Line: +            'utf-8',
>, <Line: +            ('ascii', 0.5),
>, <Line: +            ('*', 0.1),
>, <Line: +        ])
>, <Line: +        charset = http.Charset('utf-8')
>, <Line: +        match = charset.acceptability(accept)
>, <Line: +        self.assertEqual(1.0, match.quality)
>, <Line: +        self.assertTrue(match.exact_match)
>, <Line: +        charset = http.Charset('ascii')
>, <Line: +        match = charset.acceptability(accept)
>, <Line: +        self.assertEqual(0.5, match.quality)
>, <Line: +        self.assertTrue(match.exact_match)
>, <Line: +        charset = http.Charset('latin-1')
>, <Line: +        match = charset.acceptability(accept)
>, <Line: +        self.assertEqual(0.1, match.quality)
>, <Line: +        self.assertFalse(match.exact_match)
>]
[]