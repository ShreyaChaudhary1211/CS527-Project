[<Line: +    parse_cache_control_header, parse_etags,
>, <Line: +    parse_date, parse_set_header, parse_authorization_header,
>, <Line: +    parse_options_header, parse_if_range_header, parse_cookie,
>, <Line: +    parse_range_header,
>, <Line: +    RequestCacheControl,
>, <Line: +class Request(BaseRequest, ETagRequestMixin,
>]
[<Line: -    MIMEAccept, CharsetAccept, LanguageAccept, RequestCacheControl,
>, <Line: -    parse_accept_header, parse_cache_control_header, parse_etags, parse_date,
>, <Line: -    parse_set_header, parse_authorization_header, parse_options_header,
>, <Line: -    parse_if_range_header, parse_cookie, parse_range_header,
>, <Line: -class AcceptMixin(object):
>, <Line: -    """A mixin for classes with an :attr:`~BaseRequest.environ` attribute
>, <Line: -    to get all the HTTP accept headers as
>, <Line: -    :class:`~verktyg.http.Accept` objects (or subclasses
>, <Line: -    thereof).
>, <Line: -    """
>, <Line: -    @cached_property
>, <Line: -    def accept_mimetypes(self):
>, <Line: -        """List of mimetypes this client supports as
>, <Line: -        :class:`~verktyg.http.MIMEAccept` object.
>, <Line: -        """
>, <Line: -        return parse_accept_header(self.environ.get('HTTP_ACCEPT'), MIMEAccept)
>, <Line: -    @cached_property
>, <Line: -    def accept_charsets(self):
>, <Line: -        """List of charsets this client supports as
>, <Line: -        :class:`~verktyg.http.CharsetAccept` object.
>, <Line: -        """
>, <Line: -        return parse_accept_header(self.environ.get('HTTP_ACCEPT_CHARSET'),
>, <Line: -                                   CharsetAccept)
>, <Line: -    @cached_property
>, <Line: -    def accept_encodings(self):
>, <Line: -        """List of encodings this client accepts.  Encodings in a HTTP term
>, <Line: -        are compression encodings such as gzip.  For charsets have a look at
>, <Line: -        :attr:`accept_charset`.
>, <Line: -        """
>, <Line: -        return parse_accept_header(self.environ.get('HTTP_ACCEPT_ENCODING'))
>, <Line: -    @cached_property
>, <Line: -    def accept_languages(self):
>, <Line: -        """List of languages this client accepts as
>, <Line: -        :class:`~verktyg.http.LanguageAccept` object.
>, <Line: -        """
>, <Line: -        return parse_accept_header(self.environ.get('HTTP_ACCEPT_LANGUAGE'),
>, <Line: -                                   LanguageAccept)
>, <Line: -class Request(BaseRequest, AcceptMixin, ETagRequestMixin,
>]