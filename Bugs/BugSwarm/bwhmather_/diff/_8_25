[<Line: +    :param name:
>, <Line: +        The dispatcher name to bind to the action to.
>, <Line: +    :param action:
>, <Line: +        A callable object that takes an
>, <Line: +        :class:`~verktyg.application.Application` and a
>, <Line: +        :class:`~verktyg.requests.Request` and returns a
>, <Line: +        :class:`~verktyg.responses.Response`
>, <Line: +    :param methods:
>, <Line: +        The http methods that this view can handle.  Can be a single method
>, <Line: +        represented by a string or an iterable of method strings.
>, <Line: +    :param content_type:
>, <Line: +        The mime type of the response generated by the action
>, <Line: +    :param language:
>, <Line: +    :param charset:
>, <Line: +    :param qs:
>, <Line: +    def __init__(
>, <Line: +                self, name, action, *, methods=None,
>, <Line: +                content_type=None, language=None, charset=None, qs=None
>, <Line: +            ):
>, <Line: +            self._methods = set(methods)
>, <Line: +        self._language = language
>, <Line: +        self._charset = charset
>, <Line: +            yield Binding(
>, <Line: +                self._name, self, method=method,
>, <Line: +                content_type=self._content_type, language=self._language,
>, <Line: +                charset=self._charset, qs=self._qs,
>, <Line: +            )
>]
[<Line: -    def __init__(self, name, action, *,
>, <Line: -                 methods=None, content_type=None, qs=None):
>, <Line: -            self._methods = methods
>, <Line: -            yield Binding(self._name, self,
>, <Line: -                          method=method,
>, <Line: -                          content_type=self._content_type)
>, <Line: -class TemplateView(View):
>, <Line: -    """ Like `View` but if the value returned from the action is not an
>, <Line: -    instance of `Response` it is rendered using the named template.
>, <Line: -    :param name:
>, <Line: -    :param action: called with environment, request and params to generate
>, <Line: -                   response.  See `View`.
>, <Line: -    :param template: either a string naming the template to be retrieved from
>, <Line: -                     the environment or a callable applied to the result to
>, <Line: -                     create an http `Response` object
>, <Line: -    """
>, <Line: -    def __init__(self, name, action, *,
>, <Line: -                 methods=None, template=None, content_type='text/html'):
>, <Line: -        super(TemplateView, self).__init__(
>, <Line: -            name, action,
>, <Line: -            methods=methods,
>, <Line: -            content_type=content_type)
>, <Line: -        self._template = template
>, <Line: -    def __call__(self, env, req, *args, **kwargs):
>, <Line: -        res = super(TemplateView, self).__call__(env, req, *args, **kwargs)
>, <Line: -        if isinstance(res, Response):
>, <Line: -            return res
>, <Line: -        renderer = env.get_renderer(self._template)
>, <Line: -        return renderer(res)
>, <Line: -def expose_html(dispatcher, name, *args, **kwargs):
>, <Line: -    def decorator(f):
>, <Line: -        dispatcher.add_bindings(TemplateView(name, f, *args, **kwargs))
>, <Line: -        return f
>, <Line: -    return decorator
>]