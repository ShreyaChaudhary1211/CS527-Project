[<Line: +        final HttpExecuteInterceptor signingInterceptor = request -> {
>, <Line: +            // Set timeouts
>, <Line: +            final int httpTimeout;
>, <Line: +            if (config.getTimeout() == null) {
>, <Line: +                httpTimeout = DefaultsConfigContext.DEFAULT_HTTP_TIMEOUT;
>, <Line: +            } else {
>, <Line: +                httpTimeout = config.getTimeout();
>, <Line: +            request.setReadTimeout(httpTimeout);
>, <Line: +            request.setConnectTimeout(httpTimeout);
>, <Line: +            // Sign request
>, <Line: +            httpSigner.signRequest(request);
>, <Line: +            // Load request ID into MDC so that it can be logged
>, <Line: +            final Object requestId = request.getHeaders().get(X_REQUEST_ID_HEADER);
>, <Line: +            if (requestId != null) {
>, <Line: +                MDC.put("mantaRequestId", requestId.toString());
>, <Line: +        final HttpResponseInterceptor responseInterceptor = response -> MDC.remove("mantaRequestId");
>, <Line: +        final HttpRequestInitializer initializer = request -> {
>, <Line: +            request.setInterceptor(signingInterceptor);
>, <Line: +            request.setResponseInterceptor(responseInterceptor);
>, <Line: +            request.setParser(new JsonObjectParser(JSON_FACTORY));
>]
[<Line: -import com.google.api.client.http.HttpRequest;
>, <Line: -import com.google.api.client.http.HttpResponse;
>, <Line: -        final HttpExecuteInterceptor signingInterceptor = new HttpExecuteInterceptor() {
>, <Line: -            @Override
>, <Line: -            public void intercept(final HttpRequest request) throws IOException {
>, <Line: -                // Set timeouts
>, <Line: -                final int httpTimeout;
>, <Line: -                if (config.getTimeout() == null) {
>, <Line: -                    httpTimeout = DefaultsConfigContext.DEFAULT_HTTP_TIMEOUT;
>, <Line: -                } else {
>, <Line: -                    httpTimeout = config.getTimeout();
>, <Line: -                }
>, <Line: -                request.setReadTimeout(httpTimeout);
>, <Line: -                request.setConnectTimeout(httpTimeout);
>, <Line: -                // Sign request
>, <Line: -                httpSigner.signRequest(request);
>, <Line: -                // Load request ID into MDC so that it can be logged
>, <Line: -                final Object requestId = request.getHeaders().get(X_REQUEST_ID_HEADER);
>, <Line: -                if (requestId != null) {
>, <Line: -                    MDC.put("mantaRequestId", requestId.toString());
>, <Line: -                }
>, <Line: -        };
>, <Line: -        final HttpResponseInterceptor responseInterceptor = new HttpResponseInterceptor() {
>, <Line: -            @Override
>, <Line: -            public void interceptResponse(final HttpResponse response) throws IOException {
>, <Line: -                MDC.remove("mantaRequestId");
>, <Line: -        final HttpRequestInitializer initializer = new HttpRequestInitializer() {
>, <Line: -            @Override
>, <Line: -            public void initialize(final HttpRequest request) throws IOException {
>, <Line: -                request.setInterceptor(signingInterceptor);
>, <Line: -                request.setResponseInterceptor(responseInterceptor);
>, <Line: -                request.setParser(new JsonObjectParser(JSON_FACTORY));
>, <Line: -            }
>]