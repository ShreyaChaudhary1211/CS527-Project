[<Line: +import com.joyent.manta.exception.MantaMultipartException;
>, <Line: +import java.util.concurrent.atomic.AtomicInteger;
>, <Line: +                                               final String contents)
>, <Line: +                                               final int partNumber,
>, <Line: +                                               final byte[] bytes)
>, <Line: +                                               final byte[] bytes)
>, <Line: +                                               final int partNumber,
>, <Line: +                                               final File file)
>, <Line: +                                               final File file)
>, <Line: +                                               final int partNumber,
>, <Line: +                                               final InputStream inputStream)
>, <Line: +                                               final InputStream inputStream)
>, <Line: +                                            final int partNumber)
>, <Line: +     * @param partsStream stream of multipart part objects
>, <Line: +     * @throws java.io.IOException thrown if there is a problem connecting to Manta
>, <Line: +    public void complete(final MantaMultipartUpload upload,
>, <Line: +                         final Stream<? extends MantaMultipartUploadTuple> partsStream)
>, <Line: +            throws IOException {
>, <Line: +        complete(upload.getId(), partsStream);
>, <Line: +     * @param partsStream stream of multipart part objects
>, <Line: +    public void complete(final UUID id,
>, <Line: +                         final Stream<? extends MantaMultipartUploadTuple> partsStream)
>, <Line: +            throws IOException {
>, <Line: +        final Map<String, MantaMultipartUploadPart> listing = new HashMap<>();
>, <Line: +        try (Stream<MantaMultipartUploadPart> listStream = listParts(id)
>, <Line: +                .limit(MAX_PARTS)) {
>, <Line: +            listStream.forEach(p -> listing.put(p.getEtag(), p));
>, <Line: +        }
>, <Line: +        List<MantaMultipartUploadTuple> missingTuples = new ArrayList<>();
>, <Line: +        final AtomicInteger count = new AtomicInteger(0);
>, <Line: +        partsStream.sorted().forEach(part -> {
>, <Line: +            if (count.incrementAndGet() > MAX_PARTS) {
>, <Line: +                String msg = String.format("Too many multipart parts specified [%d]. "
>, <Line: +                        + "The maximum number of parts is %d", MAX_PARTS, count.get());
>, <Line: +                throw new IllegalArgumentException(msg);
>, <Line: +            }
>, <Line: +            final MantaMultipartUploadPart o = listing.get(part.getEtag());
>, <Line: +            if (o != null) {
>, <Line: +                jobExecText.append(o.getObjectPath()).append(" ");
>, <Line: +            } else {
>, <Line: +                missingTuples.add(part);
>, <Line: +            }
>, <Line: +        });
>, <Line: +        if (!missingTuples.isEmpty()) {
>, <Line: +            final MantaMultipartException e = new MantaMultipartException(
>, <Line: +                    "Multipart part(s) specified couldn't be found");
>, <Line: +            int missingCount = 0;
>, <Line: +            for (MantaMultipartUploadTuple missingPart : missingTuples) {
>, <Line: +                String key = String.format("missing_part_%d", ++missingCount);
>, <Line: +                e.setContextValue(key, missingPart.toString());
>, <Line: +            }
>, <Line: +            throw e;
>]
[<Line: -                                                final String contents)
>, <Line: -                                                final int partNumber,
>, <Line: -                                                final byte[] bytes)
>, <Line: -                                                final byte[] bytes)
>, <Line: -                                                final int partNumber,
>, <Line: -                                                final File file)
>, <Line: -                                                final File file)
>, <Line: -                                                final int partNumber,
>, <Line: -                                                final InputStream inputStream)
>, <Line: -                                                final InputStream inputStream)
>, <Line: -                                             final int partNumber)
>, <Line: -     * @throws IOException thrown if there is a problem connecting to Manta
>, <Line: -    public void complete(final MantaMultipartUpload upload) throws IOException {
>, <Line: -        complete(upload.getId());
>, <Line: -    public void complete(final UUID id) throws IOException {
>, <Line: -        try (Stream<MantaMultipartUploadPart> parts = listParts(id).sorted()) {
>, <Line: -            parts.forEach(part ->
>, <Line: -                    jobExecText.append(part.getObjectPath())
>, <Line: -                            .append(" ")
>, <Line: -            );
>]