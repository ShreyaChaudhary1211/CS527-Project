[<Line: +     * Library configuration context reference.
>, <Line: +    private final ConfigContext config;
>, <Line: +     * @param config The configuration context that provides all of the configuration values.
>, <Line: +    public MantaClient(final ConfigContext config) throws IOException {
>, <Line: +        final String mantaURL = config.getMantaURL();
>, <Line: +        final String account = config.getMantaUser();
>, <Line: +        final String keyPath = config.getMantaKeyPath();
>, <Line: +        final String fingerprint = config.getMantaKeyId();
>, <Line: +        final int httpTimeout = config.getTimeout();
>, <Line: +        final String privateKeyContent = config.getPrivateKeyContent();
>, <Line: +        final String password = config.getPassword();
>, <Line: +        if (mantaURL == null) {
>, <Line: +        if (privateKeyContent != null && keyPath != null) {
>, <Line: +            throw new IllegalArgumentException("Private key content and key path can't be both set");
>, <Line: +        } else if (privateKeyContent == null && keyPath == null) {
>, <Line: +            throw new IllegalArgumentException("Manta key path or private key content must be specified");
>, <Line: +        }
>, <Line: +        this.url = mantaURL;
>, <Line: +        this.config = config;
>, <Line: +        final KeyPair keyPair;
>, <Line: +        if (keyPath != null) {
>, <Line: +            keyPair = HttpSignerUtils.getKeyPair(new File(keyPath).toPath());
>, <Line: +        } else {
>, <Line: +            final char[] charPassword;
>, <Line: +            if (password != null) {
>, <Line: +                charPassword = password.toCharArray();
>, <Line: +            } else {
>, <Line: +                charPassword = null;
>, <Line: +            }
>, <Line: +            keyPair = HttpSignerUtils.getKeyPair(privateKeyContent, charPassword);
>, <Line: +                config);
>, <Line: +        this.home = ConfigContext.deriveHomeDirectoryFromUser(account);
>, <Line: +        this.httpHelper = new HttpHelper(mantaURL, httpRequestFactoryProvider.getRequestFactory());
>]
[<Line: -import com.joyent.manta.config.DefaultsConfigContext;
>, <Line: -     * Creates a new instance of a Manta client.
>, <Line: -     *
>, <Line: -     * @param config The configuration context that provides all of the configuration values.
>, <Line: -     * @throws IOException If unable to instantiate the client.
>, <Line: -     */
>, <Line: -    public MantaClient(final ConfigContext config) throws IOException {
>, <Line: -        this(config.getMantaURL(), config.getMantaUser(), config.getMantaKeyPath(),
>, <Line: -                config.getMantaKeyId());
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Creates a new instance of a Manta client.
>, <Line: -     *
>, <Line: -     * @param url         The url of the Manta endpoint.
>, <Line: -     * @param account     The account used to login.
>, <Line: -     * @param keyPath     The path to the user rsa private key on disk.
>, <Line: -     * @param fingerPrint The fingerprint of the user rsa private key.
>, <Line: -     * @throws IOException If unable to instantiate the client.
>, <Line: -    public MantaClient(final String url, final String account, final String keyPath,
>, <Line: -                       final String fingerPrint) throws IOException {
>, <Line: -        this(url, account, keyPath, fingerPrint, DefaultsConfigContext.DEFAULT_HTTP_TIMEOUT);
>, <Line: -    }
>, <Line: -     * @param url               The url of the Manta endpoint.
>, <Line: -     * @param account     The account used to login.
>, <Line: -     * @param privateKeyContent The user's rsa private key as a string.
>, <Line: -     * @param fingerPrint       The fingerprint of the user rsa private key.
>, <Line: -     * @param password          The private key password (optional).
>, <Line: -    public MantaClient(final String url,
>, <Line: -                       final String account,
>, <Line: -                       final String privateKeyContent,
>, <Line: -                       final String fingerPrint,
>, <Line: -                       final char[] password) throws IOException {
>, <Line: -        this(url, account, privateKeyContent, fingerPrint, password,
>, <Line: -                DefaultsConfigContext.DEFAULT_HTTP_TIMEOUT);
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Instantiates a new Manta client instance.
>, <Line: -     *
>, <Line: -     * @param url         The url of the Manta endpoint.
>, <Line: -     * @param account     The account used to login.
>, <Line: -     * @param keyPath     The path to the user rsa private key on disk.
>, <Line: -     * @param fingerprint The fingerprint of the user rsa private key.
>, <Line: -     * @param httpTimeout The HTTP timeout in milliseconds.
>, <Line: -     * @throws IOException If unable to instantiate the client.
>, <Line: -     */
>, <Line: -    public MantaClient(final String url,
>, <Line: -                       final String account,
>, <Line: -                       final String keyPath,
>, <Line: -                       final String fingerprint,
>, <Line: -                       final int httpTimeout) throws IOException {
>, <Line: -        if (url == null) {
>, <Line: -        if (keyPath == null) {
>, <Line: -            throw new IllegalArgumentException("Manta key path must be specified");
>, <Line: -        }
>, <Line: -        this.url = url;
>, <Line: -        KeyPair keyPair = HttpSignerUtils.getKeyPair(new File(keyPath).toPath());
>, <Line: -        this.httpSigner = new HttpSigner(keyPair, account, fingerprint);
>, <Line: -        this.httpRequestFactoryProvider = new HttpRequestFactoryProvider(httpSigner,
>, <Line: -                httpTimeout);
>, <Line: -        this.home = ConfigContext.deriveHomeDirectoryFromUser(account);
>, <Line: -        this.httpHelper = new HttpHelper(url, httpRequestFactoryProvider.getRequestFactory());
>, <Line: -    }
>, <Line: -    /**
>, <Line: -     * Instantiates a new Manta client instance.
>, <Line: -     *
>, <Line: -     * @param url               The url of the Manta endpoint.
>, <Line: -     * @param account     The account used to login.
>, <Line: -     * @param privateKeyContent The private key as a string.
>, <Line: -     * @param fingerprint       The name of the key.
>, <Line: -     * @param password          The private key password (optional).
>, <Line: -     * @param httpTimeout       The HTTP timeout in milliseconds.
>, <Line: -     * @throws IOException If unable to instantiate the client.
>, <Line: -     */
>, <Line: -    public MantaClient(final String url,
>, <Line: -                       final String account,
>, <Line: -                       final String privateKeyContent,
>, <Line: -                       final String fingerprint,
>, <Line: -                       final char[] password,
>, <Line: -                       final int httpTimeout) throws IOException {
>, <Line: -        if (account == null) {
>, <Line: -            throw new IllegalArgumentException("Manta username must be specified");
>, <Line: -        }
>, <Line: -        if (url == null) {
>, <Line: -            throw new IllegalArgumentException("Manta URL must be specified");
>, <Line: -        }
>, <Line: -        if (fingerprint == null) {
>, <Line: -            throw new IllegalArgumentException("Manta fingerprint must be specified");
>, <Line: -        }
>, <Line: -        if (password == null) {
>, <Line: -            throw new IllegalArgumentException("Manta key password must be specified");
>, <Line: -        }
>, <Line: -        if (httpTimeout < 0) {
>, <Line: -            throw new IllegalArgumentException("Manta timeout must be 0 or greater");
>, <Line: -        this.url = url;
>, <Line: -        KeyPair keyPair = HttpSignerUtils.getKeyPair(privateKeyContent, password);
>, <Line: -        this.home = ConfigContext.deriveHomeDirectoryFromUser(account);
>, <Line: -                httpTimeout);
>, <Line: -        this.httpHelper = new HttpHelper(url, httpRequestFactoryProvider.getRequestFactory());
>]