[<Line: +package com.joyent.manta.benchmark;
>, <Line: +public final class Benchmark {
>, <Line: +    /**
>, <Line: +     * Logger instance.
>, <Line: +     */
>, <Line: +    private static final Logger LOG = LoggerFactory.getLogger(Benchmark.class);
>, <Line: +    /**
>, <Line: +     * Default object size.
>, <Line: +     */
>, <Line: +    private static final int DEFAULT_OBJ_SIZE_KB = 128;
>, <Line: +    /**
>, <Line: +     * Default number of iterations.
>, <Line: +     */
>, <Line: +    private static final int DEFAULT_ITERATIONS = 10;
>, <Line: +    /**
>, <Line: +     * Number of bytes to skip at one time when looping over streams.
>, <Line: +     */
>, <Line: +    private static final int SKIP_VALUE = 1024;
>, <Line: +    /**
>, <Line: +     * Configuration context that informs the Manta client about its settings.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Manta client library.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Unique test run id.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Test directory.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Use the main method and not the constructor.
>, <Line: +     */
>, <Line: +    private Benchmark() {
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Entrance to benchmark utility.
>, <Line: +     * @param argv first param is the size of object in kb, second param is the number of iterations
>, <Line: +     * @throws Exception when something goes wrong
>, <Line: +     */
>, <Line: +                sizeInKb = DEFAULT_OBJ_SIZE_KB;
>, <Line: +                iterations = DEFAULT_ITERATIONS;
>, <Line: +    /**
>, <Line: +     * Creates test directory.
>, <Line: +     *
>, <Line: +     * @throws IOException thrown when we can't access Manta over the network
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Cleans up the test directory.
>, <Line: +     */
>, <Line: +            client.deleteRecursive(testDirectory);
>, <Line: +    /**
>, <Line: +     * Adds a file (object) for testing.
>, <Line: +     *
>, <Line: +     * @param size size of object to add
>, <Line: +     * @return path to the object added
>, <Line: +     * @throws IOException thrown when we can't access Manta over the network
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Measures the total time to get an object from Manta.
>, <Line: +     *
>, <Line: +     * @param path path of the object to measure
>, <Line: +     * @return two durations - full time in the JVM, server time processing
>, <Line: +     * @throws IOException thrown when we can't access Manta over the network
>, <Line: +     */
>, <Line: +    @SuppressWarnings("emptyblock")
>, <Line: +        try (MantaObjectInputStream is = client.getAsInputStream(path)) {
>, <Line: +            while (is.skip(SKIP_VALUE) != 0) { }
>, <Line: +        return new Duration[] {fullLatency, serverLatency};
>]
[<Line: -package com.joyent.manta;
>, <Line: -public class Benchmark {
>, <Line: -    private static Logger LOG = LoggerFactory.getLogger(Benchmark.class);
>, <Line: -                sizeInKb = 128;
>, <Line: -                iterations = 10;
>, <Line: -//            client.deleteRecursive(testDirectory);
>, <Line: -                try (MantaObjectInputStream is = client.getAsInputStream(path)) {
>, <Line: -            while (is.skip(1024) != 0);
>, <Line: -        return new Duration[] { fullLatency, serverLatency };
>]