[<Line: +import com.google.api.client.http.ByteArrayContent;
>, <Line: +import com.google.api.client.http.EmptyContent;
>, <Line: +import com.google.api.client.http.GenericUrl;
>, <Line: +import com.google.api.client.http.HttpContent;
>, <Line: +import com.google.api.client.http.HttpHeaders;
>, <Line: +import com.google.api.client.http.HttpRequest;
>, <Line: +import com.google.api.client.http.HttpRequestFactory;
>, <Line: +import com.google.api.client.http.HttpResponse;
>, <Line: +import com.google.api.client.http.HttpResponseException;
>, <Line: +import com.google.api.client.http.InputStreamContent;
>, <Line: +     * <p>Get a stream of all of the input objects submitted for a job.</p>
>, <Line: +     *
>, <Line: +     * <p><strong>Make sure to close this stream when you are done with
>, <Line: +     * otherwise the HTTP socket will remain open.</strong></p>
>, <Line: +     * @return Stream of input objects associated with a job
>, <Line: +    public Stream<String> getJobInputs(final UUID jobId) throws IOException {
>, <Line: +        return responseAsStream(response);
>, <Line: +        final GenericUrl genericUrl = new GenericUrl(this.url + formatPath(path)
>, <Line: +                + query);
>, <Line: +        final Stream<String> responseStream = responseAsStream(response);
>, <Line: +        return responseStream.map(s -> {
>, <Line: +        return responseAsStream(response);
>, <Line: +     * @return stream of each job output as a string
>, <Line: +    /**
>, <Line: +     * <p>Returns the current "live" set of failures from a job. Think of this
>, <Line: +     * like tail -f. The objects are returned as a stream. The stream is
>, <Line: +     * composed of a list of object names on Manta that contain the output
>, <Line: +     * of the job.</p>
>, <Line: +     *
>, <Line: +     * <p><strong>Make sure to close this stream when you are done with
>, <Line: +     * otherwise the HTTP socket will remain open.</strong></p>
>, <Line: +     *
>, <Line: +     * @param jobId UUID of the Manta job
>, <Line: +     * @return stream of Manta object names containing failure data
>, <Line: +     * @throws IOException thrown when we can't get a list of failures over the network
>, <Line: +     */
>, <Line: +    public Stream<String> getJobFailures(final UUID jobId) throws IOException {
>, <Line: +        Objects.requireNonNull(jobId, "Job id must be present");
>, <Line: +        String path = String.format("%s/jobs/%s/live/fail", home, jobId);
>, <Line: +        final HttpResponse response = httpGet(path);
>, <Line: +        return responseAsStream(response);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * <p>Returns a stream of {@link InputStream} implementations for each
>, <Line: +     * failure returned from the Manta API for a job.</p>
>, <Line: +     *
>, <Line: +     * <p><strong>Make sure to close this stream when you are done with
>, <Line: +     * otherwise the HTTP socket will remain open.</strong></p>
>, <Line: +     *
>, <Line: +     * @param jobId UUID of the Manta job
>, <Line: +     * @return stream of each failure object's input stream
>, <Line: +     * @throws IOException thrown when we can't get a list of outputs over the network
>, <Line: +     */
>, <Line: +    public Stream<MantaObjectInputStream> getJobFailuresAsStreams(final UUID jobId) throws IOException {
>, <Line: +        Objects.requireNonNull(jobId, "Job id must be present");
>, <Line: +        return getJobFailures(jobId)
>, <Line: +                .map(obj -> {
>, <Line: +                    try {
>, <Line: +                        return getAsInputStream(obj);
>, <Line: +                    } catch (IOException e) {
>, <Line: +                        throw new UncheckedIOException(e);
>, <Line: +                    }
>, <Line: +                });
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * <p>Returns a stream of strings containing all of the
>, <Line: +     * output returned from the Manta API for a job's failures. Be careful,
>, <Line: +     * this method is not memory-efficient.</p>
>, <Line: +     *
>, <Line: +     * <p><strong>Make sure to close this stream when you are done with
>, <Line: +     * otherwise the HTTP socket will remain open.</strong></p>
>, <Line: +     *
>, <Line: +     * @param jobId UUID of the Manta job
>, <Line: +     * @return stream of each failure object as a string
>, <Line: +     * @throws IOException thrown when we can't get a list of outputs over the network
>, <Line: +     */
>, <Line: +    public Stream<String> getJobFailuresAsStrings(final UUID jobId) throws IOException {
>, <Line: +        Objects.requireNonNull(jobId, "Job id must be present");
>, <Line: +        return getJobFailures(jobId)
>, <Line: +                .map(obj -> {
>, <Line: +                    try {
>, <Line: +                        return getAsString(obj);
>, <Line: +                    } catch (IOException e) {
>, <Line: +                        throw new UncheckedIOException(e);
>, <Line: +                    }
>, <Line: +                });
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Parses a HTTP response's content as a Java 8 stream of strings.
>, <Line: +     *
>, <Line: +     * @param response HTTP response object
>, <Line: +     * @return stream of strings representing each line of the response
>, <Line: +     * @throws IOException thrown when we can't access the response over the network
>, <Line: +     */
>, <Line: +    protected Stream<String> responseAsStream(final HttpResponse response)
>, <Line: +            throws IOException {
>, <Line: +        final Reader reader = new InputStreamReader(response.getContent());
>, <Line: +        final BufferedReader br = new BufferedReader(reader);
>, <Line: +        return br.lines().onClose(() -> {
>, <Line: +            try {
>, <Line: +                br.close();
>, <Line: +                response.disconnect();
>, <Line: +            } catch (IOException e) {
>, <Line: +                throw new UncheckedIOException(e);
>, <Line: +            }
>, <Line: +        });
>, <Line: +    }
>]
[<Line: -import com.google.api.client.http.*;
>, <Line: -import java.util.Collections;
>, <Line: -import java.util.Scanner;
>, <Line: -     * Get a list of all of the input objects submitted for a job.
>, <Line: -     * @return List of input objects associated with a job
>, <Line: -    public List<String> getJobInputs(final UUID jobId) throws IOException {
>, <Line: -        try {
>, <Line: -            ArrayList<String> inputs = new ArrayList<>();
>, <Line: -            try (InputStream is = response.getContent();
>, <Line: -                 Scanner scanner = new Scanner(is, "UTF-8")) {
>, <Line: -                while (scanner.hasNextLine()) {
>, <Line: -                    inputs.add(scanner.nextLine());
>, <Line: -                }
>, <Line: -            }
>, <Line: -            return Collections.unmodifiableList(inputs);
>, <Line: -        } finally {
>, <Line: -            response.disconnect();
>, <Line: -        }
>, <Line: -        final GenericUrl genericUrl = new GenericUrl(this.url + formatPath(path) +
>, <Line: -            query);
>, <Line: -        final Reader reader = new InputStreamReader(response.getContent());
>, <Line: -        final BufferedReader br = new BufferedReader(reader);
>, <Line: -        return br.lines().map(s -> {
>, <Line: -        }).onClose(() -> {
>, <Line: -            try {
>, <Line: -                br.close();
>, <Line: -                response.disconnect();
>, <Line: -            } catch (IOException e) {
>, <Line: -                throw new UncheckedIOException(e);
>, <Line: -            }
>, <Line: -        final Reader reader = new InputStreamReader(response.getContent());
>, <Line: -        final BufferedReader br = new BufferedReader(reader);
>, <Line: -        return br.lines().onClose(() -> {
>, <Line: -            try {
>, <Line: -                br.close();
>, <Line: -                response.disconnect();
>, <Line: -            } catch (IOException e) {
>, <Line: -                throw new UncheckedIOException(e);
>, <Line: -            }
>, <Line: -        });
>, <Line: -     * @return stream of each output's input stream
>]