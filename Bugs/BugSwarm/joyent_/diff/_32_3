[<Line: +     * @param requestHeaders optional HTTP headers to include when getting an object
>, <Line: +    public MantaObjectInputStream getAsInputStream(final String path,
>, <Line: +                                                   final MantaHttpHeaders requestHeaders)
>, <Line: +            throws IOException {
>, <Line: +        final HttpResponse response = httpHelper.httpGet(path, null, requestHeaders);
>, <Line: +        final MantaHttpHeaders responseHeaders = new MantaHttpHeaders(response.getHeaders());
>, <Line: +        final MantaObjectResponse metadata = new MantaObjectResponse(path, responseHeaders);
>, <Line: +    /**
>, <Line: +     * Get a Manta object's data as an {@link InputStream}. This method allows you to
>, <Line: +     * stream data from the Manta storage service in a memory efficient manner to your
>, <Line: +     * application.
>, <Line: +     *
>, <Line: +     * @param path The fully qualified path of the object. i.e. /user/stor/foo/bar/baz
>, <Line: +     * @return {@link InputStream} that extends {@link MantaObjectResponse}.
>, <Line: +     * @throws IOException when there is a problem getting the object over the network
>, <Line: +     */
>, <Line: +    public MantaObjectInputStream getAsInputStream(final String path) throws IOException {
>, <Line: +        return getAsInputStream(path, null);
>, <Line: +    }
>]
[<Line: -    public MantaObjectInputStream getAsInputStream(final String path) throws IOException {
>, <Line: -        final HttpResponse response = httpHelper.httpGet(path);
>, <Line: -        final MantaHttpHeaders headers = new MantaHttpHeaders(response.getHeaders());
>, <Line: -        final MantaObjectResponse metadata = new MantaObjectResponse(path, headers);
>]