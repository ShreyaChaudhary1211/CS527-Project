[<Line: +/**
>, <Line: + * Copyright (c) 2015, Joyent, Inc. All rights reserved.
>, <Line: + */
>, <Line: +package com.joyent.manta.client;
>, <Line: +import com.joyent.manta.client.config.TestConfigContext;
>, <Line: +import com.joyent.manta.config.ConfigContext;
>, <Line: +import com.joyent.manta.exception.MantaCryptoException;
>, <Line: +import org.testng.annotations.AfterClass;
>, <Line: +import org.testng.annotations.BeforeClass;
>, <Line: +import org.testng.annotations.Optional;
>, <Line: +import org.testng.annotations.Parameters;
>, <Line: +import org.testng.annotations.Test;
>, <Line: +import java.io.IOException;
>, <Line: +import java.util.List;
>, <Line: +import java.util.UUID;
>, <Line: +import java.util.concurrent.atomic.AtomicInteger;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +/**
>, <Line: + * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
>, <Line: + */
>, <Line: +public class MantaJobBuilderIT {
>, <Line: +    private static final String TEST_DATA = "EPISODEII_IS_BEST_EPISODE";
>, <Line: +    private String testPathPrefix;
>, <Line: +    private AtomicInteger count = new AtomicInteger(0);
>, <Line: +    private MantaClient mantaClient;
>, <Line: +    @BeforeClass
>, <Line: +    @Parameters({"manta.url", "manta.user", "manta.key_path", "manta.key_id", "manta.timeout"})
>, <Line: +    public void beforeClass(@Optional String mantaUrl,
>, <Line: +                            @Optional String mantaUser,
>, <Line: +                            @Optional String mantaKeyPath,
>, <Line: +                            @Optional String mantaKeyId,
>, <Line: +                            @Optional Integer mantaTimeout)
>, <Line: +            throws IOException, MantaCryptoException {
>, <Line: +        // Let TestNG configuration take precedence over environment variables
>, <Line: +        ConfigContext config = new TestConfigContext(
>, <Line: +                mantaUrl, mantaUser, mantaKeyPath, mantaKeyId, mantaTimeout);
>, <Line: +        mantaClient = new MantaClient(config);
>, <Line: +        testPathPrefix = String.format("%s/stor/%s",
>, <Line: +                config.getMantaHomeDirectory(), UUID.randomUUID());
>, <Line: +        mantaClient.putDirectory(testPathPrefix, null);
>, <Line: +    }
>, <Line: +    @AfterClass
>, <Line: +    public void cleanup() throws IOException {
>, <Line: +        if (mantaClient != null) {
>, <Line: +            mantaClient.deleteRecursive(testPathPrefix);
>, <Line: +            mantaClient.closeQuietly();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void canBuildTypicalJob() throws IOException {
>, <Line: +        final MantaJobBuilder builder = mantaClient.jobBuilder();
>, <Line: +        MantaJobBuilder.Done finishedJob = builder.newJob("foo")
>, <Line: +               .addPhase(new MantaJobPhase()
>, <Line: +                            .setExec("")
>, <Line: +                            .setType("map"))
>, <Line: +               .addInput("")
>, <Line: +               .validateInputs()
>, <Line: +               .run()
>, <Line: +               .waitUntilDone();
>, <Line: +        List<String> outputs = finishedJob
>, <Line: +                .validateJobsSucceeded()
>, <Line: +                .outputs()
>, <Line: +                .collect(Collectors.toList());
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void canRerunOldJob() {
>, <Line: +    }
>, <Line: +}>]
[]