[<Line: +import org.testng.Assert;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.List;
>, <Line: +import java.util.concurrent.atomic.AtomicInteger;
>, <Line: +    private static final String TEST_DATA = "EPISODEII_IS_BEST_EPISODE";
>, <Line: +    private String testPathPrefix;
>, <Line: +    private AtomicInteger count = new AtomicInteger(0);
>, <Line: +        testPathPrefix = String.format("%s/stor/%s",
>, <Line: +                config.getMantaHomeDirectory(), UUID.randomUUID());
>, <Line: +        mantaClient.putDirectory(testPathPrefix, null);
>, <Line: +    public void cleanup() throws IOException {
>, <Line: +            mantaClient.deleteRecursive(testPathPrefix);
>, <Line: +    public void createJob() throws IOException {
>, <Line: +        MantaJob job = buildJob();
>, <Line: +        UUID jobId = mantaClient.createJob(job);
>, <Line: +        Assert.assertNotNull(jobId);
>, <Line: +        boolean accepted = mantaClient.cancelJob(jobId);
>, <Line: +        Assert.assertTrue(accepted, "Cancel request was not accepted");
>, <Line: +    }
>, <Line: +    @Test(dependsOnMethods = { "createJob" })
>, <Line: +        MantaJob job = buildJob();
>, <Line: +        UUID jobId = mantaClient.createJob(job);
>, <Line: +        MantaJob jobResponse = mantaClient.getJob(jobId);
>, <Line: +        Assert.assertEquals(jobResponse.getName(),
>, <Line: +                job.getName());
>, <Line: +        MantaJobPhase mapPhaseRequest = job.getMapPhases().get(0);
>, <Line: +        MantaJobPhase mapPhaseResponse = jobResponse.getMapPhases().get(0);
>, <Line: +        Assert.assertEquals(mapPhaseResponse.getType(),
>, <Line: +                mapPhaseRequest.getType());
>, <Line: +        Assert.assertEquals(mapPhaseResponse.getExec(),
>, <Line: +                mapPhaseRequest.getExec());
>, <Line: +        Assert.assertFalse(jobResponse.getCancelled());
>, <Line: +        Assert.assertFalse(jobResponse.getInputDone());
>, <Line: +        Assert.assertNotNull(jobResponse.getTimeCreated());
>, <Line: +        Assert.assertNull(jobResponse.getTimeDone());
>, <Line: +        mantaClient.cancelJob(jobId);
>, <Line: +    @Test(dependsOnMethods = { "createJob", "getJob" })
>, <Line: +    public void cancelJob() throws IOException {
>, <Line: +        MantaJob job = buildJob();
>, <Line: +        UUID jobId = mantaClient.createJob(job);
>, <Line: +        mantaClient.cancelJob(jobId);
>, <Line: +        MantaJob jobResponse = mantaClient.getJob(jobId);
>, <Line: +        Assert.assertEquals(jobResponse.getName(),
>, <Line: +                job.getName());
>, <Line: +        MantaJobPhase mapPhaseRequest = job.getMapPhases().get(0);
>, <Line: +        MantaJobPhase mapPhaseResponse = jobResponse.getMapPhases().get(0);
>, <Line: +        Assert.assertEquals(mapPhaseResponse.getType(),
>, <Line: +                mapPhaseRequest.getType());
>, <Line: +        Assert.assertEquals(mapPhaseResponse.getExec(),
>, <Line: +                mapPhaseRequest.getExec());
>, <Line: +        Assert.assertTrue(jobResponse.getCancelled());
>, <Line: +        Assert.assertTrue(jobResponse.getInputDone());
>, <Line: +        Assert.assertNotNull(jobResponse.getTimeCreated());
>, <Line: +    }
>, <Line: +    @Test(dependsOnMethods = { "createJob" })
>, <Line: +    public void canAddAndGetInputsFromIterator() throws IOException {
>, <Line: +        MantaJob job = buildJob();
>, <Line: +        UUID jobId = mantaClient.createJob(job);
>, <Line: +        List<String> inputs = new ArrayList<>();
>, <Line: +        String objPath = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
>, <Line: +        mantaClient.put(objPath, TEST_DATA);
>, <Line: +        inputs.add(objPath);
>, <Line: +        try {
>, <Line: +            mantaClient.addJobInputs(jobId, inputs.iterator());
>, <Line: +            boolean ended = mantaClient.endJobInput(jobId);
>, <Line: +            Assert.assertTrue(ended, "Ending input wasn't accepted");
>, <Line: +            List<String> inputsResponse = mantaClient.getJobInputs(jobId);
>, <Line: +            Assert.assertEquals(inputsResponse, inputs);
>, <Line: +        } finally {
>, <Line: +            mantaClient.cancelJob(jobId);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test(dependsOnMethods = { "createJob" })
>, <Line: +    public void canAddAndGetInputsFromStream() throws IOException {
>, <Line: +        MantaJob job = buildJob();
>, <Line: +        UUID jobId = mantaClient.createJob(job);
>, <Line: +        List<String> inputs = new ArrayList<>();
>, <Line: +        String objPath = String.format("%s/%s", testPathPrefix, UUID.randomUUID());
>, <Line: +        mantaClient.put(objPath, TEST_DATA);
>, <Line: +        inputs.add(objPath);
>, <Line: +        try {
>, <Line: +            mantaClient.addJobInputs(jobId, inputs.stream());
>, <Line: +            boolean ended = mantaClient.endJobInput(jobId);
>, <Line: +            Assert.assertTrue(ended, "Ending input wasn't accepted");
>, <Line: +            List<String> inputsResponse = mantaClient.getJobInputs(jobId);
>, <Line: +            Assert.assertEquals(inputsResponse, inputs);
>, <Line: +        } finally {
>, <Line: +            mantaClient.cancelJob(jobId);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    private MantaJob buildJob() {
>, <Line: +        List<MantaJobPhase> phases = new ArrayList<>();
>, <Line: +        MantaJobPhase map = new MantaJobPhase()
>, <Line: +            .setType("map")
>, <Line: +            .setExec("echo 'Hello World'");
>, <Line: +        phases.add(map);
>, <Line: +        String name = String.format("integration_test_%d", count.incrementAndGet());
>, <Line: +        return new MantaJob(name, phases);
>, <Line: +    }
>]
[<Line: -    public void afterClass() throws IOException, MantaCryptoException {
>, <Line: -        UUID id = UUID.fromString("299a4e54-1070-cafe-8fcb-ee95a50a8ea4");
>, <Line: -        MantaJob job = mantaClient.getJob(id);
>, <Line: -        System.out.println(job);
>]