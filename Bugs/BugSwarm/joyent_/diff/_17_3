[<Line: +/**
>, <Line: + * Copyright (c) 2015, Joyent, Inc. All rights reserved.
>, <Line: + */
>, <Line: +package com.joyent.manta.exception;
>, <Line: +import com.joyent.manta.client.MantaJobError;
>, <Line: +import java.util.Collections;
>, <Line: +import java.util.Iterator;
>, <Line: +import java.util.List;
>, <Line: +import java.util.UUID;
>, <Line: +/**
>, <Line: + * Exception thrown when there is a problem processing a Manta job.
>, <Line: + *
>, <Line: + * @author <a href="https://github.com/dekobon">Elijah Zupancic</a>
>, <Line: + */
>, <Line: +public class MantaJobException extends MantaException {
>, <Line: +    /**
>, <Line: +     * Errors associated with failed inputs.
>, <Line: +     */
>, <Line: +    private final List<MantaJobError> errors;
>, <Line: +    /**
>, <Line: +     * Job ID associated with this exception.
>, <Line: +     */
>, <Line: +    private final UUID jobId;
>, <Line: +    /**
>, <Line: +     * Creates an exception without an associated error list nor a job id.
>, <Line: +     * @param message error message
>, <Line: +     */
>, <Line: +    public MantaJobException(final String message) {
>, <Line: +        super(message);
>, <Line: +        this.jobId = null;
>, <Line: +        this.errors = Collections.emptyList();
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Creates an exception without an associated error list.
>, <Line: +     * @param jobId job ID
>, <Line: +     * @param message error message
>, <Line: +     */
>, <Line: +    public MantaJobException(final UUID jobId, final String message) {
>, <Line: +        super(String.format("[job: %s] %s", jobId, message));
>, <Line: +        this.jobId = jobId;
>, <Line: +        this.errors = Collections.emptyList();
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Creates an exception without an associated error list.
>, <Line: +     *
>, <Line: +     * @param jobId job ID
>, <Line: +     * @param message error message
>, <Line: +     * @param cause exception to wrap
>, <Line: +     */
>, <Line: +    public MantaJobException(final UUID jobId, final String message,
>, <Line: +                             final Throwable cause) {
>, <Line: +        super(String.format("[job: %s] %s", jobId, message), cause);
>, <Line: +        this.jobId = jobId;
>, <Line: +        this.errors = Collections.emptyList();
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Creates an exception that bundles all of the errors associated with
>, <Line: +     * all of the inputs for a job.
>, <Line: +     * @param jobId job ID
>, <Line: +     * @param errors list of errors for each failed input
>, <Line: +     */
>, <Line: +    public MantaJobException(final UUID jobId,
>, <Line: +                             final List<MantaJobError> errors) {
>, <Line: +        this.jobId = jobId;
>, <Line: +        this.errors = errors;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return list of errors for each failed input
>, <Line: +     */
>, <Line: +    public List<MantaJobError> getErrors() {
>, <Line: +        return errors;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return job id of job that failed
>, <Line: +     */
>, <Line: +    public UUID getJobId() {
>, <Line: +        return jobId;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public String getMessage() {
>, <Line: +        if (errors.isEmpty()) {
>, <Line: +            return super.getMessage();
>, <Line: +        }
>, <Line: +        StringBuilder builder = new StringBuilder();
>, <Line: +        Iterator<MantaJobError> itr = errors.iterator();
>, <Line: +        while (itr.hasNext()) {
>, <Line: +            MantaJobError error = itr.next();
>, <Line: +            String msg = String.format("[%s] (phase: %s) %s",
>, <Line: +                    error.getCode(), error.getPhase(), error.getMessage());
>, <Line: +            builder.append(msg);
>, <Line: +            if (itr.hasNext()) {
>, <Line: +                builder.append(msg);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        return builder.toString();
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public String getLocalizedMessage() {
>, <Line: +        if (errors.isEmpty()) {
>, <Line: +            return super.getLocalizedMessage();
>, <Line: +        }
>, <Line: +        return getMessage();
>, <Line: +    }
>, <Line: +}
>]
[]