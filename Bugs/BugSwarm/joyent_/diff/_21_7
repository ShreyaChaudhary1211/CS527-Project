[<Line: +import com.google.api.client.http.javanet.NetHttpTransport;
>, <Line: +import com.google.api.client.testing.http.MockHttpTransport;
>, <Line: +    private static final Logger LOG = LoggerFactory.getLogger(HttpRequestFactoryProvider.class);
>, <Line: +        this.requestFactory = buildRequestFactory(httpSigner);
>, <Line: +        final SSLSocketFactory socketFactory = SSLSocketFactory.getSystemSocketFactory();
>, <Line: +     * @param httpSigner HTTP Signer used to sign Google HTTP requests or null to disable
>, <Line: +    private HttpRequestFactory buildRequestFactory(final HttpSigner httpSigner)
>, <Line: +        final HttpTransport transport;
>, <Line: +        /* We only allow three choices for HttpTransport because we shade the
>, <Line: +         * Google HTTP Client libraries, so even if you stick in another
>, <Line: +         * library, you will have to make it comply with a munged classpath.
>, <Line: +         */
>, <Line: +        switch (config.getHttpTransport()) {
>, <Line: +            case "MockHttpTransport":
>, <Line: +                transport = new MockHttpTransport();
>, <Line: +                break;
>, <Line: +            case "NetHttpTransport":
>, <Line: +                transport = new NetHttpTransport();
>, <Line: +                break;
>, <Line: +            case "ApacheHttpTransport":
>, <Line: +                transport = new ApacheHttpTransport(buildHttpClient());
>, <Line: +                break;
>, <Line: +            default:
>, <Line: +                transport = new ApacheHttpTransport(buildHttpClient());
>, <Line: +        }
>, <Line: +        LOG.debug("Using HttpTransport implementation: {}", transport.getClass());
>, <Line: +            if (httpSigner != null) {
>, <Line: +                httpSigner.signRequest(request);
>, <Line: +            }
>, <Line: +        final HttpTransport transport = requestFactory.getTransport();
>, <Line: +        if (config.getHttpTransport().equals("ApacheHttpTransport")) {
>, <Line: +            // We know this will cast fine because it is configured as such
>, <Line: +            @SuppressWarnings("unchecked")
>, <Line: +            ApacheHttpTransport apacheTransport = (ApacheHttpTransport)transport;
>, <Line: +            HttpClient httpClient = apacheTransport.getHttpClient();
>, <Line: +            if (httpClient.getConnectionManager() != null) {
>, <Line: +                httpClient.getConnectionManager().shutdown();
>, <Line: +            }
>]
[<Line: -    private static final Logger LOG = LoggerFactory.getLogger(MantaClient.class);
>, <Line: -    /**
>, <Line: -     * Apache HTTP Client instance.
>, <Line: -     */
>, <Line: -    private final HttpClient httpClient;
>, <Line: -        this.httpClient = buildHttpClient();
>, <Line: -        this.requestFactory = buildRequestFactory(httpSigner, httpClient);
>, <Line: -        final SSLSocketFactory socketFactory = SSLSocketFactory.getSocketFactory();
>, <Line: -     * @param httpSigner HTTP Signer used to sign Google HTTP requests
>, <Line: -     * @param apacheHttpClient Apache HTTP Client instance used to back Google HTTP Client
>, <Line: -    private HttpRequestFactory buildRequestFactory(final HttpSigner httpSigner,
>, <Line: -                                                   final HttpClient apacheHttpClient)
>, <Line: -        final HttpTransport transport = new ApacheHttpTransport(apacheHttpClient);
>, <Line: -            httpSigner.signRequest(request);
>, <Line: -    /**
>, <Line: -     * @return the Apache HTTP Client instance backing the {@link HttpRequestFactory}
>, <Line: -     */
>, <Line: -    public HttpClient getHttpClient() {
>, <Line: -        return httpClient;
>, <Line: -    }
>, <Line: -        if (httpClient.getConnectionManager() != null) {
>, <Line: -            httpClient.getConnectionManager().shutdown();
>]