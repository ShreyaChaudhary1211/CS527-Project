[<Line: +    /**
>, <Line: +     * The class name of the {@link com.google.api.client.http.HttpTransport} implementation to use.
>, <Line: +     */
>, <Line: +    private String httpTransport;
>, <Line: +    @Override
>, <Line: +    public String getHttpTransport() {
>, <Line: +        return this.httpTransport;
>, <Line: +    }
>, <Line: +        if (isPresent(context.getHttpTransport())) {
>, <Line: +            this.httpTransport = context.getHttpTransport();
>, <Line: +        }
>, <Line: +    /**
>, <Line: +     * Sets the class name of the {@link com.google.api.client.http.HttpTransport}
>, <Line: +     * implementation to use. Use the strings ApacheHttpTransport, NetHttpTransport
>, <Line: +     * or MockHttpTransport to use the included implementations. If the value
>, <Line: +     * is not one of those three - then we default to the ApacheHttpTransport
>, <Line: +     * method.
>, <Line: +     *
>, <Line: +     * @param httpTransport Typically 'ApacheHttpTransport' or 'NetHttpTransport'
>, <Line: +     * @return the current instance of {@link BaseChainedConfigContext}
>, <Line: +     */
>, <Line: +    public BaseChainedConfigContext setHttpTransport(final String httpTransport) {
>, <Line: +        this.httpTransport = httpTransport;
>, <Line: +        return this;
>, <Line: +    }
>, <Line: +                && Objects.equals(password, that.password)
>, <Line: +                && Objects.equals(httpTransport, that.httpTransport);
>, <Line: +                timeout, retries, maxConnections, privateKeyContent, password,
>, <Line: +                httpTransport);
>]
[<Line: -                && Objects.equals(password, that.password);
>, <Line: -                timeout, retries, maxConnections, privateKeyContent, password);
>]