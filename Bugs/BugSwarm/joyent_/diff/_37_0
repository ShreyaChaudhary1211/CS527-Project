[<Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part putPart(final MantaMultipartUpload upload,
>, <Line: +                                             final int partNumber,
>, <Line: +                                             final String contents)
>, <Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part putPart(final UUID id, final int partNumber,
>, <Line: +        final MantaObjectResponse response = mantaClient.put(path, contents);
>, <Line: +        return new MantaMultipartUpload.Part(response);
>, <Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part putPart(final MantaMultipartUpload upload,
>, <Line: +                                             final int partNumber,
>, <Line: +                                             final byte[] bytes)
>, <Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part putPart(final UUID id, final int partNumber,
>, <Line: +                                             final byte[] bytes)
>, <Line: +        final MantaObjectResponse response = mantaClient.put(path, bytes);
>, <Line: +        return new MantaMultipartUpload.Part(response);
>, <Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part putPart(final MantaMultipartUpload upload,
>, <Line: +                                             final int partNumber,
>, <Line: +                                             final File file)
>, <Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part putPart(final UUID id, final int partNumber,
>, <Line: +                                             final File file)
>, <Line: +        final MantaObjectResponse response = mantaClient.put(path, file);
>, <Line: +        return new MantaMultipartUpload.Part(response);
>, <Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part putPart(final MantaMultipartUpload upload,
>, <Line: +                                             final int partNumber,
>, <Line: +                                             final InputStream inputStream)
>, <Line: +     * @return multipart single part object
>, <Line: +     * @throws IOException thrown if there is a problem connecting to Manta
>, <Line: +     */
>, <Line: +    public MantaMultipartUpload.Part putPart(final UUID id, final int partNumber,
>, <Line: +                                             final InputStream inputStream)
>, <Line: +            throws IOException {
>, <Line: +        final String path = multipartPath(id, partNumber);
>, <Line: +        final MantaObjectResponse response = mantaClient.put(path, inputStream);
>, <Line: +        return new MantaMultipartUpload.Part(response);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Retrieves information about a single part of a multipart upload.
>, <Line: +     *
>, <Line: +     * @param upload multipart upload object
>, <Line: +     * @param partNumber part number to identify relative location in final file
>, <Line: +     * @return multipart single part object
>, <Line: +     * @throws IOException thrown if there is a problem connecting to Manta
>, <Line: +     */
>, <Line: +    public MantaMultipartUpload.Part getPart(final MantaMultipartUpload upload,
>, <Line: +                                             final int partNumber)
>, <Line: +            throws IOException {
>, <Line: +        if (upload == null) {
>, <Line: +            throw new IllegalArgumentException("Upload must be present");
>, <Line: +        }
>, <Line: +        return getPart(upload.getId(), partNumber);
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Retrieves information about a single part of a multipart upload.
>, <Line: +     *
>, <Line: +     * @param id multipart upload id
>, <Line: +     * @param partNumber part number to identify relative location in final file
>, <Line: +     * @return multipart single part object
>, <Line: +    public MantaMultipartUpload.Part getPart(final UUID id, final int partNumber)
>, <Line: +        final MantaObjectResponse response = mantaClient.head(path);
>, <Line: +        return new MantaMultipartUpload.Part(response);
>, <Line: +        try (Stream<MantaMultipartUpload.Part> parts = listParts(id).sorted()) {
>, <Line: +        try (InputStream in = mantaClient.getAsInputStream(metadataPath)) {
>]
[<Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final MantaMultipartUpload upload,
>, <Line: -                                       final int partNumber,
>, <Line: -                                       final String contents)
>, <Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final UUID id, final int partNumber,
>, <Line: -        return mantaClient.put(path, contents);
>, <Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final MantaMultipartUpload upload,
>, <Line: -                                       final int partNumber,
>, <Line: -                                       final byte[] bytes)
>, <Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final UUID id, final int partNumber,
>, <Line: -                                       final byte[] bytes)
>, <Line: -        return mantaClient.put(path, bytes);
>, <Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final MantaMultipartUpload upload,
>, <Line: -                                       final int partNumber,
>, <Line: -                                       final File file)
>, <Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final UUID id, final int partNumber,
>, <Line: -                                       final File file)
>, <Line: -        return mantaClient.put(path, file);
>, <Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final MantaMultipartUpload upload,
>, <Line: -                                       final int partNumber,
>, <Line: -                                       final InputStream inputStream)
>, <Line: -     * @return server HTTP response
>, <Line: -    public MantaObjectResponse putPart(final UUID id, final int partNumber,
>, <Line: -                                       final InputStream inputStream)
>, <Line: -        return mantaClient.put(path, inputStream);
>, <Line: -        try (final Stream<MantaMultipartUpload.Part> parts = listParts(id).sorted()) {
>, <Line: -        try (final InputStream in = mantaClient.getAsInputStream(metadataPath)){
>]