[<Line: +import com.fasterxml.jackson.annotation.JsonIgnore;
>, <Line: +import java.util.ArrayList;
>, <Line: +import java.util.stream.Collectors;
>, <Line: +import java.util.stream.Stream;
>, <Line: +    /**
>, <Line: +     * Manta job ID.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Name of Manta job.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Manta job state (running, done, etc).
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Flag indicating that the job was cancelled.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Flag indicating whether or not new input is accepted.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Flag indicating that a job is transient.
>, <Line: +     */
>, <Line: +    @JsonProperty(value = "transient", access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Statistics about job.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Creation time of job.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Timestamp of when the job finished.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Timestamp of when the job was archived.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Flag indicating that the job was archived.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * List of job phases associated with job (map/reduce).
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * List of options associated with job.
>, <Line: +     */
>, <Line: +    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
>, <Line: +    /**
>, <Line: +     * Package scope constructor used when deserializing from JSON.
>, <Line: +     */
>, <Line: +    MantaJob() {
>, <Line: +    /**
>, <Line: +     * Constructor used when creating a new Manta job to be executed.
>, <Line: +     * @param name name of job
>, <Line: +     * @param phases map and/or reduce phases
>, <Line: +     */
>, <Line: +    public MantaJob(final String name, final List<MantaJobPhase> phases) {
>, <Line: +        this.name = name;
>, <Line: +        this.phases = phases;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return Manta job ID
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @return Name of Manta job
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @return Manta job state (running, done, etc)
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @return flag indicating that a job is transient
>, <Line: +     */
>, <Line: +    public Boolean getTransient() {
>, <Line: +        return tranzient;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return statistics about job
>, <Line: +     */
>, <Line: +    public Map<String, Number> getStats() {
>, <Line: +        return stats;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return timestamp of when the job was archived
>, <Line: +     */
>, <Line: +    public Instant getTimeArchiveStarted() {
>, <Line: +        return timeArchiveStarted;
>, <Line: +    /**
>, <Line: +     * @return timestamp of when the job finished
>, <Line: +     */
>, <Line: +    public Instant getTimeArchiveDone() {
>, <Line: +        return timeArchiveDone;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return list of options associated with job
>, <Line: +     */
>, <Line: +    public Map<String, Object> getOptions() {
>, <Line: +        return options;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return flag indicating that the job was cancelled
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @return flag indicating whether or not new input is accepted
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @return creation time of job
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @return timestamp of when the job finished
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @return list of job phases associated with job (map/reduce)
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * List of all of the map phases of the job.
>, <Line: +     *
>, <Line: +     * @return list of map phases
>, <Line: +     */
>, <Line: +    @JsonIgnore
>, <Line: +    public List<MantaJobPhase> getMapPhases() {
>, <Line: +        Stream<MantaJobPhase> stream = phases.stream()
>, <Line: +                .filter(p -> p.getType().equals("map"));
>, <Line: +        return stream.collect(Collectors.toCollection(ArrayList::new));
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * List of all of the reduce phases of the job.
>, <Line: +     *
>, <Line: +     * @return list of reduce phases
>, <Line: +     */
>, <Line: +    @JsonIgnore
>, <Line: +    public List<MantaJobPhase> getReducePhases() {
>, <Line: +        Stream<MantaJobPhase> stream = phases.stream()
>, <Line: +                .filter(p -> p.getType().equals("reduce"));
>, <Line: +        return stream.collect(Collectors.toCollection(ArrayList::new));
>, <Line: +    public boolean equals(final Object that) {
>, <Line: +        if (this == that) {
>, <Line: +            return true;
>, <Line: +        }
>, <Line: +        if (that == null || getClass() != that.getClass()) {
>, <Line: +            return false;
>, <Line: +        }
>, <Line: +        MantaJob mantaJob = (MantaJob) that;
>, <Line: +        return Objects.equals(id, mantaJob.id)
>, <Line: +                && Objects.equals(name, mantaJob.name)
>, <Line: +                && Objects.equals(state, mantaJob.state)
>, <Line: +                && Objects.equals(cancelled, mantaJob.cancelled)
>, <Line: +                && Objects.equals(inputDone, mantaJob.inputDone)
>, <Line: +                && Objects.equals(timeCreated, mantaJob.timeCreated)
>, <Line: +                && Objects.equals(timeDone, mantaJob.timeDone)
>, <Line: +                && Objects.equals(phases, mantaJob.phases);
>]
[<Line: -import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
>, <Line: -import com.google.api.client.util.Key;
>, <Line: -    @JsonProperty("transient")
>, <Line: -    @JsonProperty
>, <Line: -    public MantaJob() {
>, <Line: -    public void setId(UUID id) {
>, <Line: -        this.id = id;
>, <Line: -    }
>, <Line: -    public void setName(String name) {
>, <Line: -        this.name = name;
>, <Line: -    }
>, <Line: -    public void setState(String state) {
>, <Line: -        this.state = state;
>, <Line: -    public void setCancelled(Boolean cancelled) {
>, <Line: -        this.cancelled = cancelled;
>, <Line: -    }
>, <Line: -    public void setInputDone(Boolean inputDone) {
>, <Line: -        this.inputDone = inputDone;
>, <Line: -    }
>, <Line: -    public void setTimeCreated(Instant timeCreated) {
>, <Line: -        this.timeCreated = timeCreated;
>, <Line: -    }
>, <Line: -    public void setTimeDone(Instant timeDone) {
>, <Line: -        this.timeDone = timeDone;
>, <Line: -    }
>, <Line: -    public void setPhases(List<MantaJobPhase> phases) {
>, <Line: -        this.phases = phases;
>, <Line: -    public boolean equals(Object o) {
>, <Line: -        if (this == o) return true;
>, <Line: -        if (o == null || getClass() != o.getClass()) return false;
>, <Line: -        MantaJob mantaJob = (MantaJob) o;
>, <Line: -        return Objects.equals(id, mantaJob.id) &&
>, <Line: -                Objects.equals(name, mantaJob.name) &&
>, <Line: -                Objects.equals(state, mantaJob.state) &&
>, <Line: -                Objects.equals(cancelled, mantaJob.cancelled) &&
>, <Line: -                Objects.equals(inputDone, mantaJob.inputDone) &&
>, <Line: -                Objects.equals(timeCreated, mantaJob.timeCreated) &&
>, <Line: -                Objects.equals(timeDone, mantaJob.timeDone) &&
>, <Line: -                Objects.equals(phases, mantaJob.phases);
>]