[<Line: + *
>, <Line: +    /**
>, <Line: +     * List of Manta objects to include in job as assets.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Command to execute as job phase.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Phase type - either "map" or "reduce".
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Initial command to execute before exec command is executed.
>, <Line: +     */
>, <Line: +    private String init;
>, <Line: +    /**
>, <Line: +     * An optional number of reducers for this phase (reduce-only).
>, <Line: +     */
>, <Line: +    private Integer count;
>, <Line: +    /**
>, <Line: +     * An optional amount of DRAM to give to your compute zone (MB).
>, <Line: +     */
>, <Line: +    private Integer memory;
>, <Line: +    /**
>, <Line: +     * An optional amount of disk space to give to your compute zone (GB).
>, <Line: +     */
>, <Line: +    private Integer disk;
>, <Line: +    /**
>, <Line: +     * Constructor used when creating a phase for starting a new job.
>, <Line: +     * Use the fluent setters to set properties.
>, <Line: +     */
>, <Line: +    public MantaJobPhase() {
>, <Line: +    /**
>, <Line: +     * @return command to execute as job phase
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @param exec command to execute as job phase
>, <Line: +     * @return reference to the current instance
>, <Line: +     */
>, <Line: +    public MantaJobPhase setExec(final String exec) {
>, <Line: +        return this;
>, <Line: +    /**
>, <Line: +     * @return Phase type - either "map" or "reduce"
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @param type phase type - either "map" or "reduce"
>, <Line: +     * @return reference to the current instance
>, <Line: +     */
>, <Line: +    public MantaJobPhase setType(final String type) {
>, <Line: +        Objects.requireNonNull(type, "Type must be present");
>, <Line: +        if (!(type.equals("map") || type.equals("reduce"))) {
>, <Line: +            throw new IllegalArgumentException("Type must equal map or reduce");
>, <Line: +        }
>, <Line: +        return this;
>, <Line: +    /**
>, <Line: +     * @return list of Manta objects to include in job as assets
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * @param assets list of Manta objects to include in job as assets
>, <Line: +     * @return reference to the current instance
>, <Line: +     */
>, <Line: +    public MantaJobPhase setAssets(final List<String> assets) {
>, <Line: +        return this;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return initial command to execute before exec command is executed
>, <Line: +     */
>, <Line: +    public String getInit() {
>, <Line: +        return init;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @param init initial command to execute before exec command is executed
>, <Line: +     * @return reference to the current instance
>, <Line: +     */
>, <Line: +    public MantaJobPhase setInit(final String init) {
>, <Line: +        this.init = init;
>, <Line: +        return this;
>, <Line: +    /**
>, <Line: +     * @return an optional number of reducers for this phase (reduce-only)
>, <Line: +     */
>, <Line: +    public Integer getCount() {
>, <Line: +        return count;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @param count an optional number of reducers for this phase (reduce-only)
>, <Line: +     * @return reference to the current instance
>, <Line: +     */
>, <Line: +    public MantaJobPhase setCount(final Integer count) {
>, <Line: +        if (getType() != null && !getType().equals("reduce")) {
>, <Line: +            throw new IllegalArgumentException("Count can only be set for the reduce phase");
>, <Line: +        }
>, <Line: +        if (count != null && count < 1) {
>, <Line: +            throw new IllegalArgumentException("Count must be null or greater than 1");
>, <Line: +        }
>, <Line: +        this.count = count;
>, <Line: +        return this;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return an optional amount of DRAM to give to your compute zone (MB)
>, <Line: +     */
>, <Line: +    public Integer getMemory() {
>, <Line: +        return memory;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @param memory an optional amount of DRAM to give to your compute zone (MB)
>, <Line: +     * @return reference to the current instance
>, <Line: +     */
>, <Line: +    public MantaJobPhase setMemory(final Integer memory) {
>, <Line: +        if (memory != null && memory < 1) {
>, <Line: +            throw new IllegalArgumentException("Count must be null or greater than 1");
>, <Line: +        }
>, <Line: +        this.memory = memory;
>, <Line: +        return this;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @return an optional amount of disk space to give to your compute zone (GB)
>, <Line: +     */
>, <Line: +    public Integer getDisk() {
>, <Line: +        return disk;
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * @param disk an optional amount of disk space to give to your compute zone (GB)
>, <Line: +     * @return reference to the current instance
>, <Line: +     */
>, <Line: +    public MantaJobPhase setDisk(final Integer disk) {
>, <Line: +        if (disk != null && disk < 1) {
>, <Line: +            throw new IllegalArgumentException("Count must be null or greater than 1");
>, <Line: +        }
>, <Line: +        this.disk = disk;
>, <Line: +        return this;
>, <Line: +    }
>, <Line: +    public boolean equals(final Object other) {
>, <Line: +        if (this == other) {
>, <Line: +            return true;
>, <Line: +        }
>, <Line: +        if (other == null || getClass() != other.getClass()) {
>, <Line: +            return false;
>, <Line: +        }
>, <Line: +        MantaJobPhase that = (MantaJobPhase) other;
>, <Line: +        return Objects.equals(assets, that.assets)
>, <Line: +                && Objects.equals(exec, that.exec)
>, <Line: +                && Objects.equals(type, that.type)
>, <Line: +                && Objects.equals(init, that.init)
>, <Line: +                && Objects.equals(count, that.count)
>, <Line: +                && Objects.equals(memory, that.memory)
>, <Line: +                && Objects.equals(disk, that.disk);
>, <Line: +        return Objects.hash(assets, exec, type, init, count, memory, disk);
>, <Line: +        sb.append(", init='").append(init).append('\'');
>, <Line: +        sb.append(", count=").append(count);
>, <Line: +        sb.append(", memory=").append(memory);
>, <Line: +        sb.append(", disk=").append(disk);
>]
[<Line: -import com.google.api.client.util.Key;
>, <Line: -    public MantaJobPhase() {
>, <Line: -    }
>, <Line: -    public MantaJobPhase(String exec, String type) {
>, <Line: -        this.exec = exec;
>, <Line: -        this.type = type;
>, <Line: -    public void setExec(String exec) {
>, <Line: -    public void setType(String type) {
>, <Line: -    public void setAssets(List<String> assets) {
>, <Line: -    public boolean equals(Object o) {
>, <Line: -        if (this == o) return true;
>, <Line: -        if (o == null || getClass() != o.getClass()) return false;
>, <Line: -        MantaJobPhase that = (MantaJobPhase) o;
>, <Line: -        return Objects.equals(assets, that.assets) &&
>, <Line: -                Objects.equals(exec, that.exec) &&
>, <Line: -                Objects.equals(type, that.type);
>, <Line: -        return Objects.hash(assets, exec, type);
>]