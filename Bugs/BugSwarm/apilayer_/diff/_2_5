[<Line: +    List<Country> countries;
>, <Line: +    @Before
>, <Line: +    public void before() throws IOException {
>, <Line: +        InputStream is = this.getClass().getClassLoader()
>, <Line: +                .getResourceAsStream("countriesV1.json");
>, <Line: +        Gson gson = new Gson();
>, <Line: +        JsonReader reader = new JsonReader(new InputStreamReader(is, "UTF-8"));
>, <Line: +        countries = new ArrayList<Country>();
>, <Line: +        reader.beginArray();
>, <Line: +        while (reader.hasNext()) {
>, <Line: +            Country country = gson.fromJson(reader, Country.class);
>, <Line: +            countries.add(country);
>, <Line: +        }
>, <Line: +        reader.endArray();
>, <Line: +        reader.close();
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void emptyBorders() throws Exception {
>, <Line: +        System.out.println("- Empty Borders");
>, <Line: +        for (Country c : countries) {
>, <Line: +            if (c.getBorders() == null || c.getBorders().isEmpty()) {
>, <Line: +                System.out.println(c.getName());
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void emptyAreas() throws Exception {
>, <Line: +        System.out.println("- Empty Areas");
>, <Line: +        for (Country c : countries) {
>, <Line: +            if (c.getArea() == null) {
>, <Line: +                System.out.println(c.getName());
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void emptyGini() throws Exception {
>, <Line: +        System.out.println("- Empty Gini");
>, <Line: +        for (Country c : countries) {
>, <Line: +            if (c.getGini() == null) {
>, <Line: +                System.out.println(c.getName());
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void emptyRegion() throws Exception {
>, <Line: +        System.out.println("- Empty Region");
>, <Line: +        for (Country c : countries) {
>, <Line: +            if (c.getRegion() == null) {
>, <Line: +                System.out.println(c.getName());
>, <Line: +            }
>, <Line: +        }
>, <Line: +    }
>]
[<Line: -	List<Country> countries;
>, <Line: -	@Before
>, <Line: -	public void before() throws IOException {
>, <Line: -		InputStream is = this.getClass().getClassLoader()
>, <Line: -				.getResourceAsStream("countriesV1.json");
>, <Line: -		Gson gson = new Gson();
>, <Line: -		JsonReader reader = new JsonReader(new InputStreamReader(is, "UTF-8"));
>, <Line: -		countries = new ArrayList<Country>();
>, <Line: -		reader.beginArray();
>, <Line: -		while (reader.hasNext()) {
>, <Line: -			Country country = gson.fromJson(reader, Country.class);
>, <Line: -			countries.add(country);
>, <Line: -		}
>, <Line: -		reader.endArray();
>, <Line: -		reader.close();
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void emptyBorders() throws Exception {
>, <Line: -		System.out.println("- Empty Borders");
>, <Line: -		for (Country c : countries) {
>, <Line: -			if (c.getBorders() == null || c.getBorders().isEmpty()) {
>, <Line: -				System.out.println(c.getName());
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void emptyAreas() throws Exception {
>, <Line: -		System.out.println("- Empty Areas");
>, <Line: -		for (Country c : countries) {
>, <Line: -			if (c.getArea() == null) {
>, <Line: -				System.out.println(c.getName());
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>, <Line: -	@Test
>, <Line: -	public void emptyGini() throws Exception {
>, <Line: -		System.out.println("- Empty Gini");
>, <Line: -		for (Country c : countries) {
>, <Line: -			if (c.getGini() == null) {
>, <Line: -				System.out.println(c.getName());
>, <Line: -			}
>, <Line: -		}
>, <Line: -	}
>]