[<Line: +  @Test(expectedExceptions = AssertionError.class)
>, <Line: +  public void assertEqualsSymmetricScalar() {
>, <Line: +    Assert.assertEquals(new Asymmetric(42, 'd'), new Contrived(42));
>, <Line: +  }
>, <Line: +  @Test(expectedExceptions = AssertionError.class)
>, <Line: +  public void assertEqualsSymmetricArrays() {
>, <Line: +    Object[] actual = {new Integer(1), new Asymmetric(42, 'd'), "inDay"};
>, <Line: +    Object[] expected = {new Integer(1), new Contrived(42), "inDay"};
>, <Line: +    Assert.assertEquals(actual, expected);
>, <Line: +  }
>, <Line: +  class Contrived {
>, <Line: +    int integer;
>, <Line: +    Contrived(int integer){
>, <Line: +      this.integer = integer;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public boolean equals(Object o) {
>, <Line: +      if (this == o) return true;
>, <Line: +      if (!(o instanceof Contrived)) return false;
>, <Line: +      Contrived contrived = (Contrived) o;
>, <Line: +      if (integer != contrived.integer) return false;
>, <Line: +      return true;
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    public int hashCode() {
>, <Line: +      return integer;
>, <Line: +    }
>, <Line: +  }
>, <Line: +  class Asymmetric extends Contrived {
>, <Line: +      char character;
>, <Line: +      Asymmetric(int integer, char character) {
>, <Line: +          super(integer);
>, <Line: +          this.character = character;
>, <Line: +      }
>, <Line: +      @Override
>, <Line: +      public boolean equals(Object o) {
>, <Line: +          if (this == o) return true;
>, <Line: +          if (!(o instanceof Asymmetric)) return false;
>, <Line: +          if (!super.equals(o)) return false;
>, <Line: +          Asymmetric that = (Asymmetric) o;
>, <Line: +          if (character != that.character) return false;
>, <Line: +          return true;
>, <Line: +      }
>, <Line: +      @Override
>, <Line: +      public int hashCode() {
>, <Line: +          int result = super.hashCode();
>, <Line: +          result = 31 * result + (int) character;
>, <Line: +          return result;
>, <Line: +      }
>, <Line: +  }
>]
[]