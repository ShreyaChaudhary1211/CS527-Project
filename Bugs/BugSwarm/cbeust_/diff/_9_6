[<Line: +import java.util.ArrayList;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.Collections;
>, <Line: +import java.util.List;
>, <Line: +  public void itestTest() {
>, <Line: +  public void itestTestWithXml() {
>, <Line: +    TestNG tng = createTests("suite", SimpleITestSample.class);
>, <Line: +    TestListenerAdapter adapter = new TestListenerAdapter();
>, <Line: +    tng.addListener(adapter);
>, <Line: +    tng.run();
>, <Line: +    Assert.assertTrue(adapter.getFailedTests().isEmpty());
>, <Line: +    Assert.assertTrue(adapter.getSkippedTests().isEmpty());
>, <Line: +    Assert.assertEquals(adapter.getPassedTests().size(), 1);
>, <Line: +    ITestResult result = adapter.getPassedTests().get(0);
>, <Line: +    Assert.assertEquals(result.getMethod().getMethodName(), "test");
>, <Line: +    Assert.assertEquals(result.getName(), "NAME");
>, <Line: +    Assert.assertEquals(result.getTestName(), "NAME");
>, <Line: +  }
>, <Line: +  @Test
>, <Line: +  public void testNameTest() {
>, <Line: +  @Test
>, <Line: +  public void testNameTestWithXml() {
>, <Line: +    TestNG tng = createTests("suite", NameSample.class);
>, <Line: +    TestListenerAdapter adapter = new TestListenerAdapter();
>, <Line: +    tng.addListener(adapter);
>, <Line: +    tng.run();
>, <Line: +    Assert.assertTrue(adapter.getFailedTests().isEmpty());
>, <Line: +    Assert.assertTrue(adapter.getSkippedTests().isEmpty());
>, <Line: +    Assert.assertEquals(adapter.getPassedTests().size(), 1);
>, <Line: +    ITestResult result = adapter.getPassedTests().get(0);
>, <Line: +    Assert.assertEquals(result.getMethod().getMethodName(), "test");
>, <Line: +    Assert.assertEquals(result.getName(), "NAME");
>, <Line: +    Assert.assertEquals(result.getTestName(), "NAME");
>, <Line: +  }
>, <Line: +  @Test
>, <Line: +  public void complexITestTest() {
>, <Line: +    TestNG tng = create(ITestSample.class);
>, <Line: +    TestListenerAdapter adapter = new TestListenerAdapter();
>, <Line: +    tng.addListener(adapter);
>, <Line: +    tng.run();
>, <Line: +    Assert.assertTrue(adapter.getFailedTests().isEmpty());
>, <Line: +    Assert.assertTrue(adapter.getSkippedTests().isEmpty());
>, <Line: +    Assert.assertEquals(adapter.getPassedTests().size(), 5);
>, <Line: +    List<String> testNames = new ArrayList<>(Arrays.asList("test1", "test2", "test3", "test4", "test5"));
>, <Line: +    for (ITestResult testResult : adapter.getPassedTests()) {
>, <Line: +      Assert.assertTrue(testNames.remove(testResult.getName()),
>, <Line: +                        "Duplicate test names " + getNames(adapter.getPassedTests()));
>, <Line: +    }
>, <Line: +    Assert.assertEquals(testNames, Collections.emptyList());
>, <Line: +  }
>, <Line: +  private static List<String> getNames(List<ITestResult> results) {
>, <Line: +    List<String> names = new ArrayList<>(results.size());
>, <Line: +    for (ITestResult result : results) {
>, <Line: +      names.add(result.getName());
>, <Line: +    }
>, <Line: +    return names;
>, <Line: +  }
>]
[<Line: -  public void itest_test() {
>, <Line: -  public void testName_test() {
>]