[<Line: +    Annotation annotation = m.getAnnotation(a);
>, <Line: +    return findAnnotation(annotation, annotationClass, m.getDeclaringClass(), null, m, new Pair<>(annotation, m));
>, <Line: +    return findAnnotation(annotation, annotationClass, testClass, null, m, new Pair<>(annotation, m));
>, <Line: +    Annotation annotation = findAnnotationInSuperClasses(cls, a);
>, <Line: +    return findAnnotation(annotation, annotationClass, cls, null, null, new Pair<>(annotation, annotationClass));
>, <Line: +    Annotation annotation = cons.getAnnotation(a);
>, <Line: +    return findAnnotation(annotation, annotationClass, cons.getDeclaringClass(), cons, null, new Pair<>(annotation, cons));
>, <Line: +                                                   Class testClass, Constructor testConstructor, Method testMethod,
>, <Line: +                                                   Pair<Annotation, ?> p) {
>, <Line: +    IAnnotation result = m_annotations.get(p);
>, <Line: +    return (A) result;
>]
[<Line: -    return findAnnotation(m.getAnnotation(a), annotationClass, m.getDeclaringClass(), null, m);
>, <Line: -    return findAnnotation(annotation, annotationClass, testClass, null, m);
>, <Line: -    return findAnnotation(findAnnotationInSuperClasses(cls, a), annotationClass, cls, null, null);
>, <Line: -    return findAnnotation(cons.getAnnotation(a), annotationClass, cons.getDeclaringClass(), cons, null);
>, <Line: -                                                   Class testClass, Constructor testConstructor, Method testMethod) {
>, <Line: -    final Pair<Annotation, ?> p;
>, <Line: -    if (testClass != null) {
>, <Line: -      p = new Pair<Annotation, Class>(a, testClass);
>, <Line: -    } else if (testConstructor != null) {
>, <Line: -      p = new Pair<Annotation, Constructor>(a, testConstructor);
>, <Line: -    } else {
>, <Line: -      p = new Pair<Annotation, Method>(a, testMethod);
>, <Line: -    }
>, <Line: -    //noinspection unchecked
>, <Line: -    A result = (A) m_annotations.get(p);
>, <Line: -    return result;
>]