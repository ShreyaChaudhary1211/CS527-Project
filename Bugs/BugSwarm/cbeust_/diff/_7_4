[<Line: +import java.util.ArrayList;
>, <Line: +  private final int m_verbose;
>, <Line: +  private final String m_testName;
>, <Line: +  private static List<ITestNGMethod> resultsToMethods(List<ITestResult> results) {
>, <Line: +    List<ITestNGMethod> result = new ArrayList<>(results.size());
>, <Line: +      result.add(tr.getMethod());
>, <Line: +    for (ITestResult tr : getConfigurationFailures()) {
>, <Line: +      String stackTrace = "";
>, <Line: +      if (ex != null && m_verbose >= 2) {
>, <Line: +        stackTrace = Utils.stackTrace(ex, false)[0];
>, <Line: +    for (ITestResult tr : getConfigurationSkips()) {
>, <Line: +    for (ITestResult tr : getPassedTests()) {
>, <Line: +    for (ITestResult tr : getFailedTests()) {
>, <Line: +      if (ex != null && m_verbose >= 2) {
>, <Line: +        stackTrace= Utils.stackTrace(ex, false)[0];
>, <Line: +    for (ITestResult tr : getSkippedTests()) {
>, <Line: +    List<ITestNGMethod> ft = resultsToMethods(getFailedTests());
>, <Line: +    StringBuilder logBuf = new StringBuilder("\n===============================================\n");
>, <Line: +    int confFailures = getConfigurationFailures().size();
>, <Line: +    int confSkips = getConfigurationSkips().size();
>, <Line: +    StringBuilder buf = new StringBuilder();
>, <Line: +          Object[] params, Class<?>[] paramTypes) {
>, <Line: +    StringBuilder msg = new StringBuilder(name);
>, <Line: +    if (null != params && params.length > 0) {
>, <Line: +        msg.append(name).append(": Wrong number of arguments were passed by ")
>, <Line: +                .append("the Data Provider: found ").append(params.length).append(" but ")
>, <Line: +                .append("expected ").append(paramTypes.length)
>, <Line: +                .append(")");
>, <Line: +      } else {
>, <Line: +        for (int i= 0; i < params.length; i++) {
>, <Line: +          if (i > 0) {
>, <Line: +    if (!Utils.isStringEmpty(description)) {
>, <Line: +    if (!Utils.isStringEmpty(stackTrace)) {
>]
[<Line: -  private int m_verbose = 0;
>, <Line: -  private String m_testName = null;
>, <Line: -  private ITestNGMethod[] resultsToMethods(List<ITestResult> results) {
>, <Line: -    ITestNGMethod[] result = new ITestNGMethod[results.size()];
>, <Line: -    int i = 0;
>, <Line: -      result[i++] = tr.getMethod();
>, <Line: -    //
>, <Line: -    //
>, <Line: -    for(Object o : getConfigurationFailures()) {
>, <Line: -      ITestResult tr = (ITestResult) o;
>, <Line: -      String stackTrace= "";
>, <Line: -      if (ex != null) {
>, <Line: -        if (m_verbose >= 2) {
>, <Line: -          stackTrace= Utils.stackTrace(ex, false)[0];
>, <Line: -        }
>, <Line: -    for(Object o : getConfigurationSkips()) {
>, <Line: -      ITestResult tr = (ITestResult) o;
>, <Line: -    for(Object o : getPassedTests()) {
>, <Line: -      ITestResult tr = (ITestResult) o;
>, <Line: -    for(Object o : getFailedTests()) {
>, <Line: -      ITestResult tr = (ITestResult) o;
>, <Line: -      if (ex != null) {
>, <Line: -        if (m_verbose >= 2) {
>, <Line: -          stackTrace= Utils.stackTrace(ex, false)[0];
>, <Line: -        }
>, <Line: -    for(Object o : getSkippedTests()) {
>, <Line: -      ITestResult tr = (ITestResult) o;
>, <Line: -    ITestNGMethod[] ft = resultsToMethods(getFailedTests());
>, <Line: -    StringBuffer logBuf= new StringBuffer("\n===============================================\n");
>, <Line: -    int confFailures= getConfigurationFailures().size();
>, <Line: -    int confSkips= getConfigurationSkips().size();
>, <Line: -  private String getName() {
>, <Line: -    return m_testName;
>, <Line: -  }
>, <Line: -    StringBuffer buf= new StringBuffer();
>, <Line: -          Object[] params, Class[] paramTypes) {
>, <Line: -    StringBuffer msg= new StringBuffer(name);
>, <Line: -    if(null != params && params.length > 0) {
>, <Line: -        msg.append(name + ": Wrong number of arguments were passed by " +
>, <Line: -                "the Data Provider: found " + params.length + " but " +
>, <Line: -                "expected " + paramTypes.length
>, <Line: -                + ")");
>, <Line: -      }
>, <Line: -      else {
>, <Line: -        for(int i= 0; i < params.length; i++) {
>, <Line: -          if(i > 0) {
>, <Line: -    if (! Utils.isStringEmpty(description)) {
>, <Line: -    if ( ! Utils.isStringEmpty(stackTrace)) {
>, <Line: -  public void ppp(String s) {
>, <Line: -    System.out.println("[TextReporter " + getName() + "] " + s);
>, <Line: -  }
>]