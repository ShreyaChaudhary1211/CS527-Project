[<Line: +import java.lang.reflect.Array;
>, <Line: +  transient private List<IMethodInterceptor> m_methodInterceptors;
>, <Line: +  private IMethodInterceptor builtinInterceptor;
>, <Line: +    m_methodInterceptors = new ArrayList<IMethodInterceptor>();
>, <Line: +    builtinInterceptor = preserveOrder ? new PreserveOrderMethodInterceptor() : new InstanceOrderingMethodInterceptor();
>, <Line: +        m_methodInterceptors.add((IMethodInterceptor) listener);
>, <Line: +    List<IMethodInstance> methodInstances = methodsToMethodInstances(Arrays.asList(methods));
>, <Line: +    // add built-in interceptor (PreserveOrderMethodInterceptor or InstanceOrderingMethodInterceptor at the end of the list
>, <Line: +    m_methodInterceptors.add(builtinInterceptor);
>, <Line: +    for (IMethodInterceptor m_methodInterceptor : m_methodInterceptors) {
>, <Line: +      methodInstances = m_methodInterceptor.intercept(methodInstances, this);
>, <Line: +    }
>, <Line: +    for (IMethodInstance imi : methodInstances) {
>, <Line: +    for (IMethodInterceptor m_methodInterceptor : m_methodInterceptors) {
>, <Line: +      methodInstances = m_methodInterceptor.intercept(methodInstances, this);
>, <Line: +    }
>, <Line: +  private List<IMethodInstance> methodsToMethodInstances(List<ITestNGMethod> sl) {
>, <Line: +    List<IMethodInstance> result = new ArrayList<>();
>, <Line: +      for (ITestNGMethod iTestNGMethod : sl) {
>, <Line: +        result.add(new MethodInstance(iTestNGMethod));
>, <Line: +      }
>, <Line: +  @Deprecated
>, <Line: +  public void setMethodInterceptor(IMethodInterceptor methodInterceptor){
>, <Line: +    m_methodInterceptors.add(methodInterceptor);
>, <Line: +  }
>, <Line: +  public void addMethodInterceptor(IMethodInterceptor methodInterceptor){
>, <Line: +    m_methodInterceptors.add(methodInterceptor);
>]
[<Line: -  private transient IMethodInterceptor m_methodInterceptor;
>, <Line: -    m_methodInterceptor = preserveOrder ? new PreserveOrderMethodInterceptor()
>, <Line: -        : new InstanceOrderingMethodInterceptor();
>, <Line: -        setMethodInterceptor((IMethodInterceptor) listener);
>, <Line: -    if (m_methodInterceptor == null) return methods;
>, <Line: -    IMethodInstance[] instances = methodsToMethodInstances(Arrays.asList(methods));
>, <Line: -    List<IMethodInstance> resultInstances =
>, <Line: -        m_methodInterceptor.intercept(Arrays.asList(instances), this);
>, <Line: -    for (IMethodInstance imi : resultInstances) {
>, <Line: -    methodInstances = m_methodInterceptor.intercept(methodInstances, this);
>, <Line: -  private MethodInstance[] methodsToMethodInstances(List<ITestNGMethod> sl) {
>, <Line: -    MethodInstance[] result = new MethodInstance[sl.size()];
>, <Line: -    for (int i = 0; i < result.length; i++) {
>, <Line: -      result[i] = new MethodInstance(sl.get(i));
>, <Line: -    }
>, <Line: -  public void setMethodInterceptor(IMethodInterceptor methodInterceptor) {
>, <Line: -    m_methodInterceptor = methodInterceptor;
>]