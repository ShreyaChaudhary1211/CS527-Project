[<Line: +    @Test
>, <Line: +    public void testReadCMYKAsCMYKSameRGBasRGB() throws IOException {
>, <Line: +        // Make sure CMYK images can be read and still contain their original (embedded) color profile
>, <Line: +        JPEGImageReader reader = createReader();
>, <Line: +        // NOTE: Data without ICC profile won't work in this test, as we might end up
>, <Line: +        // using the non-ICC color conversion case and fail miserably on the CI server.
>, <Line: +        List<TestData> cmykData = Arrays.asList(
>, <Line: +                new TestData(getClassLoaderResource("/jpeg/cmyk-sample-multiple-chunk-icc.jpg"), new Dimension(100, 100)),
>, <Line: +                new TestData(getClassLoaderResource("/jpeg/cmyk-sample-custom-icc-bright.jpg"), new Dimension(100, 100))
>, <Line: +        );
>, <Line: +        for (TestData data : cmykData) {
>, <Line: +            reader.setInput(data.getInputStream());
>, <Line: +            Iterator<ImageTypeSpecifier> types = reader.getImageTypes(0);
>, <Line: +            assertTrue(data + " has no image types", types.hasNext());
>, <Line: +            ImageTypeSpecifier cmykType = null;
>, <Line: +            ImageTypeSpecifier rgbType = null;
>, <Line: +            while (types.hasNext()) {
>, <Line: +                ImageTypeSpecifier type = types.next();
>, <Line: +                int csType = type.getColorModel().getColorSpace().getType();
>, <Line: +                if (rgbType == null && csType == ColorSpace.TYPE_RGB) {
>, <Line: +                    rgbType = type;
>, <Line: +                }
>, <Line: +                else if (cmykType == null && csType == ColorSpace.TYPE_CMYK) {
>, <Line: +                    cmykType = type;
>, <Line: +                }
>, <Line: +                if (rgbType != null && cmykType != null) {
>, <Line: +                    break;
>, <Line: +                }
>, <Line: +            }
>, <Line: +            assertNotNull("No RGB types for " + data, rgbType);
>, <Line: +            assertNotNull("No CMYK types for " + data, cmykType);
>, <Line: +            ImageReadParam param = reader.getDefaultReadParam();
>, <Line: +            param.setSourceRegion(new Rectangle(reader.getWidth(0), 8)); // We don't really need to read it all
>, <Line: +            param.setDestinationType(cmykType);
>, <Line: +            BufferedImage imageCMYK = reader.read(0, param);
>, <Line: +            param.setDestinationType(rgbType);
>, <Line: +            BufferedImage imageRGB = reader.read(0, param);
>, <Line: +            assertNotNull(imageCMYK);
>, <Line: +            assertEquals(ColorSpace.TYPE_CMYK, imageCMYK.getColorModel().getColorSpace().getType());
>, <Line: +            assertNotNull(imageRGB);
>, <Line: +            assertEquals(ColorSpace.TYPE_RGB, imageRGB.getColorModel().getColorSpace().getType());
>, <Line: +            for (int y = 0; y < imageCMYK.getHeight(); y++) {
>, <Line: +                for (int x = 0; x < imageCMYK.getWidth(); x++) {
>, <Line: +                    int cmykAsRGB = imageCMYK.getRGB(x, y);
>, <Line: +                    int rgb = imageRGB.getRGB(x, y);
>, <Line: +                    if (rgb != cmykAsRGB) {
>, <Line: +                        assertRGBEquals(String.format("Diff at [%d, %d]: %s != %s", x, y, String.format("#%04x", cmykAsRGB), String.format("#%04x", rgb)), rgb, cmykAsRGB, 2);
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +        }
>, <Line: +        reader.dispose();
>, <Line: +    }
>, <Line: +        assertRGBEquals("RGB values differ", expectedRGB, actualRGB, 5);
>, <Line: +    }
>, <Line: +    private void assertRGBEquals(String message, int expectedRGB, int actualRGB, int tolerance) {
>, <Line: +        assertEquals(message, (expectedRGB >> 16) & 0xff, (actualRGB >> 16) & 0xff, tolerance);
>, <Line: +        assertEquals(message, (expectedRGB >>  8) & 0xff, (actualRGB >>  8) & 0xff, tolerance);
>, <Line: +        assertEquals(message, (expectedRGB      ) & 0xff, (actualRGB      ) & 0xff, tolerance);
>]
[<Line: -        assertEquals((expectedRGB >> 16) & 0xff, (actualRGB >> 16) & 0xff, 5);
>, <Line: -        assertEquals((expectedRGB >>  8) & 0xff, (actualRGB >>  8) & 0xff, 5);
>, <Line: -        assertEquals((expectedRGB      ) & 0xff, (actualRGB      ) & 0xff, 5);
>]