[<Line: +             * The class loader to use for loading types which might be {@code null} to represent the bootstrap class loader.
>, <Line: +             * @param classLoader The class loader to use for loading types which might be {@code null} to represent the bootstrap class loader.
>, <Line: +                    return new ForLoadedType(load());
>, <Line: +                if (superClass == null) {
>, <Line: +                    return Generic.UNDEFINED;
>, <Line: +                } else {
>, <Line: +                    try {
>, <Line: +                        return new ClassLoadingTypeProjection(superClass, load().getClassLoader());
>, <Line: +                    } catch (ClassNotFoundException ignored) {
>, <Line: +                        return superClass;
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                TypeList.Generic interfaces = delegate.getInterfaces();
>, <Line: +                try {
>, <Line: +                    return new ClassLoadingTypeList(interfaces, load().getClassLoader());
>, <Line: +                } catch (ClassNotFoundException ignored) {
>, <Line: +                    return interfaces;
>, <Line: +                }
>, <Line: +            /**
>, <Line: +             * Loads the represented raw type.
>, <Line: +             *
>, <Line: +             * @return The loaded type.
>, <Line: +             * @throws ClassNotFoundException If the class cannot be loaded.
>, <Line: +             */
>, <Line: +            private Class<?> load() throws ClassNotFoundException {
>, <Line: +                return Class.forName(delegate.asErasure().getName(), false, classLoader);
>, <Line: +            }
>, <Line: +             * The class loader to use for loading types which might be {@code null} to represent the bootstrap class loader.
>, <Line: +             * Creates a class loading type list.
>, <Line: +             * @param classLoader The class loader to use for loading types which might be {@code null} to represent the bootstrap class loader.
>]
[<Line: -             * The class loader to use for loading types.
>, <Line: -             * @param classLoader The class loader to use for loading types.
>, <Line: -                    return new ForLoadedType(Class.forName(delegate.asErasure().getName(), false, classLoader));
>, <Line: -                return superClass == null
>, <Line: -                        ? Generic.UNDEFINED
>, <Line: -                        : new ClassLoadingTypeProjection(superClass, classLoader);
>, <Line: -                return new ClassLoadingTypeList(delegate.getInterfaces(), classLoader);
>, <Line: -             * The class loader to use for loading types.
>, <Line: -             * Creates a class loading
>, <Line: -             * @param classLoader The class loader to use for loading types.
>]