[<Line: +    /**
>, <Line: +     * A handler for computing the instrumented method's size.
>, <Line: +     */
>, <Line: +    protected interface MethodSizeHandler {
>, <Line: +        /**
>, <Line: +         * Binds a method size handler for the entry advice.
>, <Line: +         *
>, <Line: +         * @param adviceMethod The method representing the entry advice.
>, <Line: +         * @return A method size handler for the entry advice.
>, <Line: +         */
>, <Line: +        /**
>, <Line: +         * Binds the method size handler for the exit advice.
>, <Line: +         *
>, <Line: +         * @param adviceMethod  The method representing the exit advice.
>, <Line: +         * @param skipThrowable {@code true} if the exit advice is not invoked on an exception.
>, <Line: +         * @return A method size handler for the exit advice.
>, <Line: +         */
>, <Line: +        ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod, boolean skipThrowable);
>, <Line: +        /**
>, <Line: +         * A method size handler for an advice method.
>, <Line: +         */
>, <Line: +            /**
>, <Line: +             * Records a minimum stack size required by the represented advice method.
>, <Line: +             *
>, <Line: +             * @param stackSize The minimum size required by the represented advice method.
>, <Line: +             */
>, <Line: +        /**
>, <Line: +         * A non-operational method size handler.
>, <Line: +         */
>, <Line: +        enum NoOp implements MethodSizeHandler, ForAdvice {
>, <Line: +            /**
>, <Line: +             * The singleton instance.
>, <Line: +             */
>, <Line: +            public ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod, boolean skipThrowable) {
>, <Line: +            @Override
>, <Line: +            public String toString() {
>, <Line: +                return "Advice.MethodSizeHandler.NoOp." + name();
>, <Line: +            }
>, <Line: +        /**
>, <Line: +         * A default implementation for a method size handler.
>, <Line: +         */
>, <Line: +        class Default implements MethodSizeHandler {
>, <Line: +            /**
>, <Line: +             * The instrumented method.
>, <Line: +             */
>, <Line: +            /**
>, <Line: +             * The list of types that the instrumented method requires in addition to the method parameters.
>, <Line: +             */
>, <Line: +            /**
>, <Line: +             * A list of types that are yielded by the instrumented method and available to the exit advice.
>, <Line: +             */
>, <Line: +            /**
>, <Line: +             * Creates a method size handler applicable for the given instrumented method.
>, <Line: +             *
>, <Line: +             * @param instrumentedMethod The instrumented method.
>, <Line: +             * @param requiredTypes      The list of types that the instrumented method requires in addition to the method parameters.
>, <Line: +             * @param yieldedTypes       A list of types that are yielded by the instrumented method and available to the exit advice.
>, <Line: +             * @param writerFlags        The flags supplied to the ASM class writer.
>, <Line: +             * @return An appropriate method size handler.
>, <Line: +             */
>, <Line: +            protected static MethodSizeHandler of(MethodDescription.InDefinedShape instrumentedMethod,
>, <Line: +                                                  List<? extends TypeDescription> requiredTypes,
>, <Line: +                                                  List<? extends TypeDescription> yieldedTypes,
>, <Line: +                                                  int writerFlags) {
>, <Line: +            public MethodSizeHandler.ForAdvice bindEntry(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: +            public MethodSizeHandler.ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod, boolean skipThrowable) {
>, <Line: +                stackSize = Math.max(stackSize, adviceMethod.getReturnType().getStackSize().maximum(skipThrowable
>, <Line: +            @Override
>, <Line: +            public String toString() {
>, <Line: +                return "Advice.MethodSizeHandler.Default{" +
>, <Line: +                        "instrumentedMethod=" + instrumentedMethod +
>, <Line: +                        ", requiredTypes=" + requiredTypes +
>, <Line: +                        ", yieldedTypes=" + yieldedTypes +
>, <Line: +                        ", stackSize=" + stackSize +
>, <Line: +                        ", localVariableLength=" + localVariableLength +
>, <Line: +                        '}';
>, <Line: +            }
>, <Line: +            /**
>, <Line: +             * A method size handler for an advice method.
>, <Line: +             */
>, <Line: +            protected class ForAdvice implements MethodSizeHandler.ForAdvice {
>, <Line: +                /**
>, <Line: +                 * The advice method.
>, <Line: +                 */
>, <Line: +                /**
>, <Line: +                 * A list of types required by this advice method.
>, <Line: +                 */
>, <Line: +                /**
>, <Line: +                 * A list of types yielded by this advice method.
>, <Line: +                 */
>, <Line: +                /**
>, <Line: +                 * Creates a new method size handler for an advice method.
>, <Line: +                 *
>, <Line: +                 * @param adviceMethod  The advice method.
>, <Line: +                 * @param requiredTypes A list of types required by this advice method.
>, <Line: +                 * @param yieldedTypes  A list of types yielded by this advice method.
>, <Line: +                 */
>, <Line: +                @Override
>, <Line: +                public String toString() {
>, <Line: +                    return "Advice.MethodSizeHandler.Default.ForAdvice{" +
>, <Line: +                            "adviceMethod=" + adviceMethod +
>, <Line: +                            ", requiredTypes=" + requiredTypes +
>, <Line: +                            ", yieldedTypes=" + yieldedTypes +
>, <Line: +                            ", padding=" + padding +
>, <Line: +                            '}';
>, <Line: +                }
>, <Line: +    /**
>, <Line: +     * A handler for computing and translating stack map frames.
>, <Line: +     */
>, <Line: +    protected interface StackMapFrameHandler {
>, <Line: +        /**
>, <Line: +         * A stack map frame handler for an instrumented method.
>, <Line: +         */
>, <Line: +        interface ForInstrumentedMethod extends StackMapFrameHandler {
>, <Line: +            /**
>, <Line: +             * Returns a hint to supply to a {@link ClassReader} when parsing an advice method.
>, <Line: +             *
>, <Line: +             * @return The reader hint to supply to an ASM class reader.
>, <Line: +             */
>, <Line: +        /**
>, <Line: +         * A stack map frame handler for an advice method.
>, <Line: +         */
>, <Line: +        interface ForAdvice extends StackMapFrameHandler {
>, <Line: +        /**
>, <Line: +         * A non-operational stack map frame handler.
>, <Line: +         */
>, <Line: +            /**
>, <Line: +             * The singleton instance.
>, <Line: +             */
>, <Line: +            public StackMapFrameHandler.ForAdvice bindEntry(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: +            public StackMapFrameHandler.ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: +            @Override
>, <Line: +            public String toString() {
>, <Line: +                return "Advice.StackMapFrameHandler.NoOp." + name();
>, <Line: +            }
>, <Line: +        /**
>, <Line: +         * A default implementation of a stack map frame handler for an instrumented method.
>, <Line: +         */
>, <Line: +            /**
>, <Line: +             * Creates an appropriate stack map frame handler for an instrumented method.
>, <Line: +             *
>, <Line: +             * @param instrumentedMethod The instrumented method.
>, <Line: +             * @param requiredTypes      A list of intermediate types to be considered as part of the instrumented method's steady signature.
>, <Line: +             * @param yieldedTypes       The types that are expected to be added after the instrumented method returns.
>, <Line: +             * @param classFileVersion   The instrumented type's class file version.
>, <Line: +             * @param writerFlags        The flags supplied to the ASM writier.
>, <Line: +             * @param readerFlags        The reader flags supplied to the ASM reader.
>, <Line: +             * @return An approrpiate stack map frame handler for an instrumented method.
>, <Line: +             */
>, <Line: +            protected static ForInstrumentedMethod of(MethodDescription.InDefinedShape instrumentedMethod,
>, <Line: +                                                      List<? extends TypeDescription> requiredTypes,
>, <Line: +                                                      List<? extends TypeDescription> yieldedTypes,
>, <Line: +                                                      ClassFileVersion classFileVersion,
>, <Line: +                                                      int writerFlags,
>, <Line: +                                                      int readerFlags) {
>, <Line: +                return (writerFlags & ClassWriter.COMPUTE_FRAMES) != 0 || classFileVersion.isLessThan(ClassFileVersion.JAVA_V6)
>, <Line: +                        ? NoOp.INSTANCE
>, <Line: +                        : new Default(instrumentedMethod, new TypeList.Explicit(requiredTypes), new TypeList.Explicit(yieldedTypes), (readerFlags & ClassReader.EXPAND_FRAMES) != 0);
>, <Line: +            }
>, <Line: +            public StackMapFrameHandler.ForAdvice bindEntry(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: +            public StackMapFrameHandler.ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: +            @Override
>, <Line: +            public String toString() {
>, <Line: +                return "Advice.StackMapFrameHandler.Default{" +
>, <Line: +                        "instrumentedMethod=" + instrumentedMethod +
>, <Line: +                        ", requiredTypes=" + requiredTypes +
>, <Line: +                        ", yieldedTypes=" + yieldedTypes +
>, <Line: +                        ", expandFrames=" + expandFrames +
>, <Line: +                        ", currentFrameDivergence=" + currentFrameDivergence +
>, <Line: +                        '}';
>, <Line: +            }
>, <Line: +                @Override
>, <Line: +                public String toString() {
>, <Line: +                    return "Advice.StackMapFrameHandler.Default.TranslationMode." + name();
>, <Line: +                }
>, <Line: +            /**
>, <Line: +             * A stack map frame handler for an advice method.
>, <Line: +             */
>, <Line: +            protected class ForAdvice implements StackMapFrameHandler.ForAdvice {
>, <Line: +                @Override
>, <Line: +                public String toString() {
>, <Line: +                    return "Advice.StackMapFrameHandler.Default.ForAdvice{" +
>, <Line: +                            "methodDescription=" + methodDescription +
>, <Line: +                            ", requiredTypes=" + requiredTypes +
>, <Line: +                            ", yieldedTypes=" + yieldedTypes +
>, <Line: +                            ", translationMode=" + translationMode +
>, <Line: +                            '}';
>, <Line: +                }
>, <Line: +        /**
>, <Line: +         * A handler for computing the method size requirements.
>, <Line: +         */
>, <Line: +        protected final MethodSizeHandler methodSizeHandler;
>, <Line: +        /**
>, <Line: +         * A handler for translating and injecting stack map frames.
>, <Line: +         */
>, <Line: +        protected final StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler;
>, <Line: +         * @param classFileVersion   The instrumented type's class file version.
>, <Line: +            methodSizeHandler = MethodSizeHandler.Default.of(instrumentedMethod, requiredTypes, yieldedTypes, writerFlags);
>, <Line: +            stackMapFrameHandler = StackMapFrameHandler.Default.of(instrumentedMethod, requiredTypes, yieldedTypes, classFileVersion, writerFlags, readerFlags);
>, <Line: +            this.methodEnter = methodEnter.bind(instrumentedMethod, methodVisitor, methodSizeHandler, stackMapFrameHandler);
>, <Line: +            this.methodExit = methodExit.bind(instrumentedMethod, methodVisitor, methodSizeHandler, stackMapFrameHandler);
>, <Line: +            stackMapFrameHandler.translateFrame(mv, frameType, localVariableLength, localVariable, stackSize, stack);
>, <Line: +            mv.visitMaxs(methodSizeHandler.compoundStackSize(stackSize), methodSizeHandler.compoundLocalVariableLength(localVariableLength));
>, <Line: +             * @param classFileVersion   The instrumented type's class file version.
>, <Line: +             * @param classFileVersion   The instrumented type's class file version.
>, <Line: +                stackMapFrameHandler.injectCompletionFrame(mv, false);
>, <Line: +                 * @param classFileVersion   The instrumented type's class file version.
>, <Line: +                    stackMapFrameHandler.injectHandlerFrame(mv);
>, <Line: +                    stackMapFrameHandler.injectCompletionFrame(mv, true);
>, <Line: +                 * @param classFileVersion   The instrumented type's class file version.
>, <Line: +                 * @param methodVisitor     The method visitor of the instrumented method.
>, <Line: +                 * @param methodSizeHandler A handler for computing the method size requirements.
>, <Line: +                void onStart(MethodVisitor methodVisitor, MethodSizeHandler.ForAdvice methodSizeHandler);
>, <Line: +                 * @param methodVisitor        The method visitor of the instrumented method.
>, <Line: +                 * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                 * @param returnValueProducer  A producer for defining a default return value of the advised method.
>, <Line: +                void onEnd(MethodVisitor methodVisitor, StackMapFrameHandler.ForAdvice stackMapFrameHandler, ReturnValueProducer returnValueProducer);
>, <Line: +                 * @param methodVisitor        The method visitor of the instrumented method.
>, <Line: +                 * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                 * @param returnValueProducer  A producer for defining a default return value of the advised method.
>, <Line: +                void onEndSkipped(MethodVisitor methodVisitor, StackMapFrameHandler.ForAdvice stackMapFrameHandler, ReturnValueProducer returnValueProducer);
>, <Line: +                public void onStart(MethodVisitor methodVisitor, MethodSizeHandler.ForAdvice methodSizeHandler) {
>, <Line: +                public void onEnd(MethodVisitor methodVisitor, StackMapFrameHandler.ForAdvice stackMapFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: +                public void onEndSkipped(MethodVisitor methodVisitor, StackMapFrameHandler.ForAdvice stackMapFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: +                    public void onStart(MethodVisitor methodVisitor, MethodSizeHandler.ForAdvice methodSizeHandler) {
>, <Line: +                        methodSizeHandler.recordMinimum(StackSize.SINGLE.getSize());
>, <Line: +                    public void onEnd(MethodVisitor methodVisitor, StackMapFrameHandler.ForAdvice stackMapFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: +                        stackMapFrameHandler.injectHandlerFrame(methodVisitor);
>, <Line: +                    public void onEndSkipped(MethodVisitor methodVisitor, StackMapFrameHandler.ForAdvice stackMapFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: +                        onEnd(methodVisitor, stackMapFrameHandler, returnValueProducer);
>, <Line: +             * @param instrumentedMethod   The instrumented method.
>, <Line: +             * @param methodVisitor        The method visitor for writing the instrumented method.
>, <Line: +             * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +             * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                       MethodSizeHandler methodSizeHandler,
>, <Line: +                       StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler);
>, <Line: +                              MethodSizeHandler methodSizeHandler,
>, <Line: +                              StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler) {
>, <Line: +                                  MethodSizeHandler methodSizeHandler,
>, <Line: +                                  StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler) {
>, <Line: +                            methodSizeHandler,
>, <Line: +                            stackMapFrameHandler,
>, <Line: +                 * @param methodVisitor        A method visitor for writing byte code to the instrumented method.
>, <Line: +                 * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                 * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                 * @param instrumentedMethod   A description of the instrumented method.
>, <Line: +                 * @param suppressionHandler   The bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                                                       MethodSizeHandler methodSizeHandler,
>, <Line: +                                                       StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler,
>, <Line: +                    /**
>, <Line: +                     * A handler for computing the method size requirements.
>, <Line: +                     */
>, <Line: +                    private final MethodSizeHandler methodSizeHandler;
>, <Line: +                    /**
>, <Line: +                     * A handler for translating and injecting stack map frames.
>, <Line: +                     */
>, <Line: +                    private final StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler;
>, <Line: +                     * @param instrumentedMethod   The instrumented method.
>, <Line: +                     * @param methodVisitor        The method visitor for writing the instrumented method.
>, <Line: +                     * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                     * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                     * @param suppressionHandler   A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                     * @param classReader          A class reader for parsing the class file containing the represented advice method.
>, <Line: +                                                  MethodSizeHandler methodSizeHandler,
>, <Line: +                                                  StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler,
>, <Line: +                        this.methodSizeHandler = methodSizeHandler;
>, <Line: +                        this.stackMapFrameHandler = stackMapFrameHandler;
>, <Line: +                        classReader.accept(this, ClassReader.SKIP_DEBUG | stackMapFrameHandler.getReaderHint());
>, <Line: +                                ? new ExceptionTableSubstitutor(Inlining.Resolved.this.apply(methodVisitor, methodSizeHandler, stackMapFrameHandler, instrumentedMethod, suppressionHandler))
>, <Line: +                                ", methodSizeHandler=" + methodSizeHandler +
>, <Line: +                                ", stackMapFrameHandler=" + stackMapFrameHandler +
>, <Line: +                                                  MethodSizeHandler methodSizeHandler,
>, <Line: +                                                  StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler,
>, <Line: +                                methodSizeHandler.bindEntry(adviceMethod),
>, <Line: +                                stackMapFrameHandler.bindEntry(adviceMethod),
>, <Line: +                                                  MethodSizeHandler methodSizeHandler,
>, <Line: +                                                  StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler,
>, <Line: +                                methodSizeHandler.bindExit(adviceMethod, isSkipThrowable()),
>, <Line: +                                stackMapFrameHandler.bindExit(adviceMethod),
>, <Line: +                /**
>, <Line: +                 * A handler for computing the method size requirements.
>, <Line: +                 */
>, <Line: +                private final MethodSizeHandler.ForAdvice methodSizeHandler;
>, <Line: +                /**
>, <Line: +                 * A handler for translating and injecting stack map frames.
>, <Line: +                 */
>, <Line: +                private final StackMapFrameHandler.ForAdvice stackMapFrameHandler;
>, <Line: +                 * @param methodVisitor        A method visitor for writing the instrumented method's byte code.
>, <Line: +                 * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                 * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                 * @param instrumentedMethod   The instrumented method.
>, <Line: +                 * @param adviceMethod         The advice method.
>, <Line: +                 * @param offsetMappings       A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: +                 * @param suppressionHandler   The suppression handler to use.
>, <Line: +                                                 MethodSizeHandler.ForAdvice methodSizeHandler,
>, <Line: +                                                 StackMapFrameHandler.ForAdvice stackMapFrameHandler,
>, <Line: +                    this.methodSizeHandler = methodSizeHandler;
>, <Line: +                    this.stackMapFrameHandler = stackMapFrameHandler;
>, <Line: +                    suppressionHandler.onStart(mv, methodSizeHandler);
>, <Line: +                    stackMapFrameHandler.translateFrame(mv, frameType, localVariableLength, localVariable, stackSize, stack);
>, <Line: +                    suppressionHandler.onEnd(mv, stackMapFrameHandler, this);
>, <Line: +                    stackMapFrameHandler.injectCompletionFrame(mv, false);
>, <Line: +                    methodSizeHandler.recordMaxima(stackSize, localVariableLength);
>, <Line: +                        methodSizeHandler.recordPadding(target.resolveAccess(mv, opcode));
>, <Line: +                        methodSizeHandler.recordPadding(target.resolveIncrement(mv, increment));
>, <Line: +                     * @param methodVisitor        A method visitor for writing the instrumented method's byte code.
>, <Line: +                     * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                     * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                     * @param instrumentedMethod   The instrumented method.
>, <Line: +                     * @param adviceMethod         The advice method.
>, <Line: +                     * @param offsetMappings       A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: +                     * @param suppressionHandler   The suppression handler to use.
>, <Line: +                                             MethodSizeHandler.ForAdvice methodSizeHandler,
>, <Line: +                                             StackMapFrameHandler.ForAdvice stackMapFrameHandler,
>, <Line: +                        super(methodVisitor, methodSizeHandler, stackMapFrameHandler, instrumentedMethod, adviceMethod, offsetMappings, suppressionHandler);
>, <Line: +                     * @param methodVisitor        A method visitor for writing the instrumented method's byte code.
>, <Line: +                     * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                     * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                     * @param instrumentedMethod   The instrumented method.
>, <Line: +                     * @param adviceMethod         The advice method.
>, <Line: +                     * @param offsetMappings       A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: +                     * @param suppressionHandler   The suppression handler to use.
>, <Line: +                     * @param padding              The padding after the instrumented method's arguments in the local variable array.
>, <Line: +                                            MethodSizeHandler.ForAdvice methodSizeHandler,
>, <Line: +                                            StackMapFrameHandler.ForAdvice stackMapFrameHandler,
>, <Line: +                                methodSizeHandler,
>, <Line: +                                stackMapFrameHandler,
>, <Line: +                                  MethodSizeHandler methodSizeHandler,
>, <Line: +                                  StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler) {
>, <Line: +                    return resolve(instrumentedMethod, methodVisitor, methodSizeHandler, stackMapFrameHandler);
>, <Line: +                 * @param instrumentedMethod   The instrumented method that is being bound.
>, <Line: +                 * @param methodVisitor        The method visitor for writing to the instrumented method.
>, <Line: +                 * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                 * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                                                 MethodSizeHandler methodSizeHandler,
>, <Line: +                                                 StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler);
>, <Line: +                    /**
>, <Line: +                     * A handler for computing the method size requirements.
>, <Line: +                     */
>, <Line: +                    private final MethodSizeHandler.ForAdvice methodSizeHandler;
>, <Line: +                    /**
>, <Line: +                     * A handler for translating and injecting stack map frmes.
>, <Line: +                     */
>, <Line: +                    private final StackMapFrameHandler.ForAdvice stackMapFrameHandler;
>, <Line: +                     * @param adviceMethod         The advice method.
>, <Line: +                     * @param instrumentedMethod   The instrumented method.
>, <Line: +                     * @param offsetMappings       The offset mappings available to this advice.
>, <Line: +                     * @param methodVisitor        The method visitor for writing the instrumented method.
>, <Line: +                     * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                     * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                     * @param suppressionHandler   A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                                                 MethodSizeHandler.ForAdvice methodSizeHandler,
>, <Line: +                                                 StackMapFrameHandler.ForAdvice stackMapFrameHandler,
>, <Line: +                        this.methodSizeHandler = methodSizeHandler;
>, <Line: +                        this.stackMapFrameHandler = stackMapFrameHandler;
>, <Line: +                        suppressionHandler.onStart(methodVisitor, methodSizeHandler);
>, <Line: +                        suppressionHandler.onEndSkipped(methodVisitor, stackMapFrameHandler, this);
>, <Line: +                        stackMapFrameHandler.injectCompletionFrame(methodVisitor, false);
>, <Line: +                        methodSizeHandler.recordMaxima(Math.max(maximumStackSize, adviceMethod.getReturnType().getStackSize().getSize()), EMPTY);
>, <Line: +                                ", methodSizeHandler=" + methodSizeHandler +
>, <Line: +                                ", stackMapFrameHandler=" + stackMapFrameHandler +
>, <Line: +                         * @param adviceMethod         The advice method.
>, <Line: +                         * @param instrumentedMethod   The instrumented method.
>, <Line: +                         * @param offsetMappings       The offset mappings available to this advice.
>, <Line: +                         * @param methodVisitor        The method visitor for writing the instrumented method.
>, <Line: +                         * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                         * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                         * @param suppressionHandler   A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                                                 MethodSizeHandler.ForAdvice methodSizeHandler,
>, <Line: +                                                 StackMapFrameHandler.ForAdvice stackMapFrameHandler,
>, <Line: +                            super(adviceMethod, instrumentedMethod, offsetMappings, methodVisitor, methodSizeHandler, stackMapFrameHandler, suppressionHandler);
>, <Line: +                         * @param adviceMethod         The advice method.
>, <Line: +                         * @param instrumentedMethod   The instrumented method.
>, <Line: +                         * @param offsetMappings       The offset mappings available to this advice.
>, <Line: +                         * @param methodVisitor        The method visitor for writing the instrumented method.
>, <Line: +                         * @param methodSizeHandler    A handler for computing the method size requirements.
>, <Line: +                         * @param stackMapFrameHandler A handler for translating and injecting stack map frames.
>, <Line: +                         * @param suppressionHandler   A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                                                MethodSizeHandler.ForAdvice methodSizeHandler,
>, <Line: +                                                StackMapFrameHandler.ForAdvice stackMapFrameHandler,
>, <Line: +                            super(adviceMethod, instrumentedMethod, offsetMappings, methodVisitor, methodSizeHandler, stackMapFrameHandler, suppressionHandler);
>, <Line: +                                            MethodSizeHandler methodSizeHandler,
>, <Line: +                                            StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler) {
>, <Line: +                                methodSizeHandler.bindEntry(adviceMethod),
>, <Line: +                                stackMapFrameHandler.bindEntry(adviceMethod),
>, <Line: +                                            MethodSizeHandler methodSizeHandler,
>, <Line: +                                            StackMapFrameHandler.ForInstrumentedMethod stackMapFrameHandler) {
>, <Line: +                                methodSizeHandler.bindExit(adviceMethod, isSkipThrowable()),
>, <Line: +                                stackMapFrameHandler.bindExit(adviceMethod),
>]
[<Line: -    protected interface StackSizeHandler {
>, <Line: -        ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod, boolean onThrowable);
>, <Line: -        enum NoOp implements StackSizeHandler, ForAdvice {
>, <Line: -            public ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod, boolean onThrowable) {
>, <Line: -        class Default implements StackSizeHandler {
>, <Line: -            protected static StackSizeHandler of(MethodDescription.InDefinedShape instrumentedMethod,
>, <Line: -                                                 List<? extends TypeDescription> requiredTypes,
>, <Line: -                                                 List<? extends TypeDescription> yieldedTypes,
>, <Line: -                                                 int writerFlags) {
>, <Line: -            public StackSizeHandler.ForAdvice bindEntry(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: -            public StackSizeHandler.ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod, boolean onThrowable) {
>, <Line: -                stackSize = Math.max(stackSize, adviceMethod.getReturnType().getStackSize().maximum(onThrowable
>, <Line: -            protected class ForAdvice implements StackSizeHandler.ForAdvice {
>, <Line: -    protected interface StackFrameHandler {
>, <Line: -        interface ForInstrumentedMethod extends StackFrameHandler {
>, <Line: -        interface ForAdvice extends StackFrameHandler {
>, <Line: -            public StackFrameHandler.ForAdvice bindEntry(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: -            public StackFrameHandler.ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: -            protected static ForInstrumentedMethod of(MethodDescription.InDefinedShape instrumentedMethod,
>, <Line: -                                                      List<? extends TypeDescription> requiredTypes,
>, <Line: -                                                      List<? extends TypeDescription> yieldedTypes,
>, <Line: -                                                      ClassFileVersion classFileVersion,
>, <Line: -                                                      int writerFlags,
>, <Line: -                                                      int readerFlags) {
>, <Line: -                return (writerFlags & ClassWriter.COMPUTE_FRAMES) != 0 || classFileVersion.isLessThan(ClassFileVersion.JAVA_V6)
>, <Line: -                        ? NoOp.INSTANCE
>, <Line: -                        : new Default(instrumentedMethod, new TypeList.Explicit(requiredTypes), new TypeList.Explicit(yieldedTypes), (readerFlags & ClassReader.EXPAND_FRAMES) != 0);
>, <Line: -            }
>, <Line: -            public StackFrameHandler.ForAdvice bindEntry(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: -            public StackFrameHandler.ForAdvice bindExit(MethodDescription.InDefinedShape adviceMethod) {
>, <Line: -            protected class ForAdvice implements StackFrameHandler.ForAdvice {
>, <Line: -        protected final StackSizeHandler stackSizeHandler;
>, <Line: -        protected final StackFrameHandler.ForInstrumentedMethod stackFrameHandler;
>, <Line: -            stackSizeHandler = StackSizeHandler.Default.of(instrumentedMethod, requiredTypes, yieldedTypes, writerFlags);
>, <Line: -            stackFrameHandler = StackFrameHandler.Default.of(instrumentedMethod, requiredTypes, yieldedTypes, classFileVersion, writerFlags, readerFlags);
>, <Line: -            this.methodEnter = methodEnter.bind(instrumentedMethod, methodVisitor, stackSizeHandler, stackFrameHandler);
>, <Line: -            this.methodExit = methodExit.bind(instrumentedMethod, methodVisitor, stackSizeHandler, stackFrameHandler);
>, <Line: -            stackFrameHandler.translateFrame(mv, frameType, localVariableLength, localVariable, stackSize, stack);
>, <Line: -            mv.visitMaxs(stackSizeHandler.compoundStackSize(stackSize), stackSizeHandler.compoundLocalVariableLength(localVariableLength));
>, <Line: -                stackFrameHandler.injectCompletionFrame(mv, false);
>, <Line: -                    stackFrameHandler.injectHandlerFrame(mv);
>, <Line: -                    stackFrameHandler.injectCompletionFrame(mv, true);
>, <Line: -                 * @param methodVisitor The method visitor of the instrumented method.
>, <Line: -                void onStart(MethodVisitor methodVisitor, StackSizeHandler.ForAdvice stackSizeHandler);
>, <Line: -                 * @param methodVisitor       The method visitor of the instrumented method.
>, <Line: -                 * @param returnValueProducer A producer for defining a default return value of the advised method.
>, <Line: -                void onEnd(MethodVisitor methodVisitor, StackFrameHandler.ForAdvice stackFrameHandler, ReturnValueProducer returnValueProducer);
>, <Line: -                 * @param methodVisitor       The method visitor of the instrumented method.
>, <Line: -                 * @param returnValueProducer A producer for defining a default return value of the advised method.
>, <Line: -                void onEndSkipped(MethodVisitor methodVisitor, StackFrameHandler.ForAdvice stackFrameHandler, ReturnValueProducer returnValueProducer);
>, <Line: -                public void onStart(MethodVisitor methodVisitor, StackSizeHandler.ForAdvice stackSizeHandler) {
>, <Line: -                public void onEnd(MethodVisitor methodVisitor, StackFrameHandler.ForAdvice stackFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: -                public void onEndSkipped(MethodVisitor methodVisitor, StackFrameHandler.ForAdvice stackFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: -                    public void onStart(MethodVisitor methodVisitor, StackSizeHandler.ForAdvice stackSizeHandler) {
>, <Line: -                        stackSizeHandler.recordMinimum(StackSize.SINGLE.getSize());
>, <Line: -                    public void onEnd(MethodVisitor methodVisitor, StackFrameHandler.ForAdvice stackFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: -                        stackFrameHandler.injectHandlerFrame(methodVisitor);
>, <Line: -                    public void onEndSkipped(MethodVisitor methodVisitor, StackFrameHandler.ForAdvice stackFrameHandler, ReturnValueProducer returnValueProducer) {
>, <Line: -                        onEnd(methodVisitor, stackFrameHandler, returnValueProducer);
>, <Line: -             * @param instrumentedMethod The instrumented method.
>, <Line: -             * @param methodVisitor      The method visitor for writing the instrumented method.
>, <Line: -                       StackSizeHandler stackSizeHandler,
>, <Line: -                       StackFrameHandler.ForInstrumentedMethod stackFrameHandler);
>, <Line: -                              StackSizeHandler stackSizeHandler,
>, <Line: -                              StackFrameHandler.ForInstrumentedMethod stackFrameHandler) {
>, <Line: -                                  StackSizeHandler stackSizeHandler,
>, <Line: -                                  StackFrameHandler.ForInstrumentedMethod stackFrameHandler) {
>, <Line: -                            stackSizeHandler,
>, <Line: -                            stackFrameHandler,
>, <Line: -                 * @param methodVisitor      A method visitor for writing byte code to the instrumented method.
>, <Line: -                 * @param instrumentedMethod A description of the instrumented method.
>, <Line: -                 * @param suppressionHandler The bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: -                                                       StackSizeHandler stackSizeHandler,
>, <Line: -                                                       StackFrameHandler.ForInstrumentedMethod stackFrameHandler,
>, <Line: -                    private final StackSizeHandler stackSizeHandler;
>, <Line: -                    private final StackFrameHandler.ForInstrumentedMethod stackFrameHandler;
>, <Line: -                     * @param instrumentedMethod The instrumented method.
>, <Line: -                     * @param methodVisitor      The method visitor for writing the instrumented method.
>, <Line: -                     * @param suppressionHandler A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: -                     * @param classReader        A class reader for parsing the class file containing the represented advice method.
>, <Line: -                                                  StackSizeHandler stackSizeHandler,
>, <Line: -                                                  StackFrameHandler.ForInstrumentedMethod stackFrameHandler,
>, <Line: -                        this.stackSizeHandler = stackSizeHandler;
>, <Line: -                        this.stackFrameHandler = stackFrameHandler;
>, <Line: -                        classReader.accept(this, ClassReader.SKIP_DEBUG | stackFrameHandler.getReaderHint());
>, <Line: -                                ? new ExceptionTableSubstitutor(Inlining.Resolved.this.apply(methodVisitor, stackSizeHandler, stackFrameHandler, instrumentedMethod, suppressionHandler))
>, <Line: -                                ", stackSizeHandler=" + stackSizeHandler +
>, <Line: -                                ", stackFrameHandler=" + stackFrameHandler +
>, <Line: -                                                  StackSizeHandler stackSizeHandler,
>, <Line: -                                                  StackFrameHandler.ForInstrumentedMethod stackFrameHandler,
>, <Line: -                                stackSizeHandler.bindEntry(adviceMethod),
>, <Line: -                                stackFrameHandler.bindEntry(adviceMethod),
>, <Line: -                                                  StackSizeHandler stackSizeHandler,
>, <Line: -                                                  StackFrameHandler.ForInstrumentedMethod stackFrameHandler,
>, <Line: -                                stackSizeHandler.bindExit(adviceMethod, isSkipThrowable()),
>, <Line: -                                stackFrameHandler.bindExit(adviceMethod),
>, <Line: -                protected final StackSizeHandler.ForAdvice stackSizeHandler;
>, <Line: -                protected final StackFrameHandler.ForAdvice stackFrameHandler;
>, <Line: -                 * @param methodVisitor      A method visitor for writing the instrumented method's byte code.
>, <Line: -                 * @param instrumentedMethod The instrumented method.
>, <Line: -                 * @param adviceMethod       The advice method.
>, <Line: -                 * @param offsetMappings     A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: -                 * @param suppressionHandler The suppression handler to use.
>, <Line: -                                                 StackSizeHandler.ForAdvice stackSizeHandler,
>, <Line: -                                                 StackFrameHandler.ForAdvice stackFrameHandler,
>, <Line: -                    this.stackSizeHandler = stackSizeHandler;
>, <Line: -                    this.stackFrameHandler = stackFrameHandler;
>, <Line: -                    suppressionHandler.onStart(mv, stackSizeHandler);
>, <Line: -                    stackFrameHandler.translateFrame(mv, frameType, localVariableLength, localVariable, stackSize, stack);
>, <Line: -                    suppressionHandler.onEnd(mv, stackFrameHandler, this);
>, <Line: -                    stackFrameHandler.injectCompletionFrame(mv, false);
>, <Line: -                    stackSizeHandler.recordMaxima(stackSize, localVariableLength);
>, <Line: -                        stackSizeHandler.recordPadding(target.resolveAccess(mv, opcode));
>, <Line: -                        stackSizeHandler.recordPadding(target.resolveIncrement(mv, increment));
>, <Line: -                     * @param methodVisitor      A method visitor for writing the instrumented method's byte code.
>, <Line: -                     * @param instrumentedMethod The instrumented method.
>, <Line: -                     * @param adviceMethod       The advice method.
>, <Line: -                     * @param offsetMappings     A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: -                     * @param suppressionHandler The suppression handler to use.
>, <Line: -                                             StackSizeHandler.ForAdvice stackSizeHandler,
>, <Line: -                                             StackFrameHandler.ForAdvice stackFrameHandler,
>, <Line: -                        super(methodVisitor, stackSizeHandler, stackFrameHandler, instrumentedMethod, adviceMethod, offsetMappings, suppressionHandler);
>, <Line: -                     * @param methodVisitor      A method visitor for writing the instrumented method's byte code.
>, <Line: -                     * @param instrumentedMethod The instrumented method.
>, <Line: -                     * @param adviceMethod       The advice method.
>, <Line: -                     * @param offsetMappings     A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: -                     * @param suppressionHandler The suppression handler to use.
>, <Line: -                     * @param padding            The padding after the instrumented method's arguments in the local variable array.
>, <Line: -                                            StackSizeHandler.ForAdvice stackSizeHandler,
>, <Line: -                                            StackFrameHandler.ForAdvice stackFrameHandler,
>, <Line: -                                stackSizeHandler,
>, <Line: -                                stackFrameHandler,
>, <Line: -                                  StackSizeHandler stackSizeHandler,
>, <Line: -                                  StackFrameHandler.ForInstrumentedMethod stackFrameHandler) {
>, <Line: -                    return resolve(instrumentedMethod, methodVisitor, stackSizeHandler, stackFrameHandler);
>, <Line: -                 * @param instrumentedMethod The instrumented method that is being bound.
>, <Line: -                 * @param methodVisitor      The method visitor for writing to the instrumented method.
>, <Line: -                                                 StackSizeHandler stackSizeHandler,
>, <Line: -                                                 StackFrameHandler.ForInstrumentedMethod stackFrameHandler);
>, <Line: -                    private final StackSizeHandler.ForAdvice stackSizeHandler;
>, <Line: -                    private final StackFrameHandler.ForAdvice stackFrameHandler;
>, <Line: -                     * @param adviceMethod       The advice method.
>, <Line: -                     * @param instrumentedMethod The instrumented method.
>, <Line: -                     * @param offsetMappings     The offset mappings available to this advice.
>, <Line: -                     * @param methodVisitor      The method visitor for writing the instrumented method.
>, <Line: -                     * @param suppressionHandler A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: -                                                 StackSizeHandler.ForAdvice stackSizeHandler,
>, <Line: -                                                 StackFrameHandler.ForAdvice stackFrameHandler,
>, <Line: -                        this.stackSizeHandler = stackSizeHandler;
>, <Line: -                        this.stackFrameHandler = stackFrameHandler;
>, <Line: -                        suppressionHandler.onStart(methodVisitor, stackSizeHandler);
>, <Line: -                        suppressionHandler.onEndSkipped(methodVisitor, stackFrameHandler, this);
>, <Line: -                        stackFrameHandler.injectCompletionFrame(methodVisitor, false);
>, <Line: -                        stackSizeHandler.recordMaxima(Math.max(maximumStackSize, adviceMethod.getReturnType().getStackSize().getSize()), EMPTY);
>, <Line: -                                ", stackSizeHandler=" + stackSizeHandler +
>, <Line: -                                ", stackFrameHandler=" + stackFrameHandler +
>, <Line: -                         * @param adviceMethod       The advice method.
>, <Line: -                         * @param instrumentedMethod The instrumented method.
>, <Line: -                         * @param offsetMappings     The offset mappings available to this advice.
>, <Line: -                         * @param methodVisitor      The method visitor for writing the instrumented method.
>, <Line: -                         * @param suppressionHandler A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: -                                                 StackSizeHandler.ForAdvice stackSizeHandler,
>, <Line: -                                                 StackFrameHandler.ForAdvice stackFrameHandler,
>, <Line: -                            super(adviceMethod, instrumentedMethod, offsetMappings, methodVisitor, stackSizeHandler, stackFrameHandler, suppressionHandler);
>, <Line: -                         * @param adviceMethod       The advice method.
>, <Line: -                         * @param instrumentedMethod The instrumented method.
>, <Line: -                         * @param offsetMappings     The offset mappings available to this advice.
>, <Line: -                         * @param methodVisitor      The method visitor for writing the instrumented method.
>, <Line: -                         * @param suppressionHandler A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: -                                                StackSizeHandler.ForAdvice stackSizeHandler,
>, <Line: -                                                StackFrameHandler.ForAdvice stackFrameHandler,
>, <Line: -                            super(adviceMethod, instrumentedMethod, offsetMappings, methodVisitor, stackSizeHandler, stackFrameHandler, suppressionHandler);
>, <Line: -                                            StackSizeHandler stackSizeHandler,
>, <Line: -                                            StackFrameHandler.ForInstrumentedMethod stackFrameHandler) {
>, <Line: -                                stackSizeHandler.bindEntry(adviceMethod),
>, <Line: -                                stackFrameHandler.bindEntry(adviceMethod),
>, <Line: -                                            StackSizeHandler stackSizeHandler,
>, <Line: -                                            StackFrameHandler.ForInstrumentedMethod stackFrameHandler) {
>, <Line: -                                stackSizeHandler.bindExit(adviceMethod, isSkipThrowable()),
>, <Line: -                                stackFrameHandler.bindExit(adviceMethod),
>]