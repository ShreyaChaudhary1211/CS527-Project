[<Line: +    @Test
>, <Line: +    public void testNexusAccessorClassLoaderNoResource() throws Exception {
>, <Line: +        ClassLoader classLoader = new ByteArrayClassLoader.ChildFirst(getClass().getClassLoader(),
>, <Line: +                ClassFileExtraction.of(Nexus.class,
>, <Line: +                        AgentBuilder.InitializationStrategy.SelfInjection.NexusAccessor.class,
>, <Line: +                        AgentBuilder.InitializationStrategy.SelfInjection.NexusAccessor.Dispatcher.class,
>, <Line: +                        AgentBuilder.InitializationStrategy.SelfInjection.NexusAccessor.Dispatcher.Available.class,
>, <Line: +                        AgentBuilder.InitializationStrategy.SelfInjection.NexusAccessor.Dispatcher.Unavailable.class),
>, <Line: +                null,
>, <Line: +                AccessController.getContext(),
>, <Line: +                ByteArrayClassLoader.PersistenceHandler.LATENT,
>, <Line: +                PackageDefinitionStrategy.NoOp.INSTANCE);
>, <Line: +        Field duplicateInitializers = classLoader.loadClass(Nexus.class.getName()).getDeclaredField("TYPE_INITIALIZERS");
>, <Line: +        duplicateInitializers.setAccessible(true);
>, <Line: +        assertThat(((Map<?, ?>) duplicateInitializers.get(null)).size(), is(0));
>, <Line: +        Field actualInitializers = Nexus.class.getDeclaredField("TYPE_INITIALIZERS");
>, <Line: +        actualInitializers.setAccessible(true);
>, <Line: +        assertThat(((Map<?, ?>) actualInitializers.get(null)).size(), is(0));
>, <Line: +        Class<?> accessor = classLoader.loadClass(AgentBuilder.InitializationStrategy.SelfInjection.NexusAccessor.class.getName());
>, <Line: +        ClassLoader qux = mock(ClassLoader.class);
>, <Line: +        assertThat(accessor
>, <Line: +                .getDeclaredMethod("register", String.class, ClassLoader.class, int.class, LoadedTypeInitializer.class)
>, <Line: +                .invoke(accessor.getEnumConstants()[0], FOO, qux, BAR, loadedTypeInitializer), nullValue(Object.class));
>, <Line: +        try {
>, <Line: +            assertThat(((Map<?, ?>) duplicateInitializers.get(null)).size(), is(0));
>, <Line: +            assertThat(((Map<?, ?>) actualInitializers.get(null)).size(), is(1));
>, <Line: +        } finally {
>, <Line: +            Constructor<Nexus> constructor = Nexus.class.getDeclaredConstructor(String.class, ClassLoader.class, int.class);
>, <Line: +            constructor.setAccessible(true);
>, <Line: +            Object value = ((Map<?, ?>) actualInitializers.get(null)).remove(constructor.newInstance(FOO, qux, BAR));
>, <Line: +            assertThat(value, is((Object) loadedTypeInitializer));
>, <Line: +        }
>, <Line: +    }
>]
[]