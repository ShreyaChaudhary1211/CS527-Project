[<Line: +import org.objectweb.asm.Opcodes;
>, <Line: +        when(methodDescription.isVirtual()).thenReturn(true);
>, <Line: +        when(methodDescription.isBridge()).thenReturn(false);
>, <Line: +    @Test
>, <Line: +    public void testCompilationNonVirtual() throws Exception {
>, <Line: +        TypeDescription typeDescription = mock(TypeDescription.class);
>, <Line: +        MethodDescription.InDefinedShape methodDescription = mock(MethodDescription.InDefinedShape.class);
>, <Line: +        when(typeDescription.getDeclaredMethods()).thenReturn(new MethodList.Explicit<MethodDescription.InDefinedShape>(methodDescription));
>, <Line: +        when(methodDescription.isVirtual()).thenReturn(false);
>, <Line: +        when(methodDescription.isBridge()).thenReturn(false);
>, <Line: +        when(methodDescription.isVisibleTo(typeDescription)).thenReturn(true);
>, <Line: +        MethodGraph.Linked methodGraph = MethodGraph.Compiler.ForDeclaredMethods.INSTANCE.compile(typeDescription);
>, <Line: +        assertThat(methodGraph.listNodes().size(), is(0));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testCompilationNonBridge() throws Exception {
>, <Line: +        TypeDescription typeDescription = mock(TypeDescription.class);
>, <Line: +        MethodDescription.InDefinedShape methodDescription = mock(MethodDescription.InDefinedShape.class);
>, <Line: +        when(typeDescription.getDeclaredMethods()).thenReturn(new MethodList.Explicit<MethodDescription.InDefinedShape>(methodDescription));
>, <Line: +        when(methodDescription.isVirtual()).thenReturn(true);
>, <Line: +        when(methodDescription.getModifiers()).thenReturn(Opcodes.ACC_BRIDGE);
>, <Line: +        when(methodDescription.isVisibleTo(typeDescription)).thenReturn(true);
>, <Line: +        MethodGraph.Linked methodGraph = MethodGraph.Compiler.ForDeclaredMethods.INSTANCE.compile(typeDescription);
>, <Line: +        assertThat(methodGraph.listNodes().size(), is(0));
>, <Line: +    }
>, <Line: +        when(methodDescription.isVirtual()).thenReturn(true);
>, <Line: +        when(methodDescription.isBridge()).thenReturn(false);
>]
[]