[<Line: +import net.bytebuddy.utility.JavaModule;
>, <Line: +    public static <T extends TypeDefinition> ElementMatcher.Junction<T> isVariable(String symbol) {
>, <Line: +    public static <T extends TypeDefinition> ElementMatcher.Junction<T> isVariable(ElementMatcher<? super NamedElement> matcher) {
>, <Line: +    /**
>, <Line: +     * Matches a {@link NamedElement.WithOptionalName} for having an explicit name.
>, <Line: +     *
>, <Line: +     * @param <T> The type of the matched object.
>, <Line: +     * @return An element matcher that checks if the matched optionally named element has an explicit name.
>, <Line: +     */
>, <Line: +    public static <T extends NamedElement.WithOptionalName> ElementMatcher.Junction<T> isNamed() {
>, <Line: +        return new IsNamedMatcher<T>();
>, <Line: +    }
>, <Line: +     * @param type The type to be checked for being a subtype of the matched type.
>, <Line: +     * @param type The type to be checked for being a subtype of the matched type.
>, <Line: +     * @param type The type to be checked for being a subtype of the matched type.
>, <Line: +     * @param type The type to be checked for being a subtype of the matched type.
>, <Line: +    /**
>, <Line: +     * Matches any type description that declares a super type that matches the provided matcher.
>, <Line: +     *
>, <Line: +     * @param matcher The type to be checked for being a super type of the matched type.
>, <Line: +     * @param <T>     The type of the matched object.
>, <Line: +     * @return A matcher that matches any type description that declares a super type that matches the provided matcher.
>, <Line: +     */
>, <Line: +    public static <T extends TypeDescription> ElementMatcher.Junction<T> hasSuperType(ElementMatcher<? super TypeDescription> matcher) {
>, <Line: +        return hasGenericSuperType(rawType(matcher));
>, <Line: +    }
>, <Line: +    /**
>, <Line: +     * Matches any type description that declares a super type that matches the provided matcher.
>, <Line: +     *
>, <Line: +     * @param matcher The type to be checked for being a super type of the matched type.
>, <Line: +     * @param <T>     The type of the matched object.
>, <Line: +     * @return A matcher that matches any type description that declares a super type that matches the provided matcher.
>, <Line: +     */
>, <Line: +    public static <T extends TypeDescription> ElementMatcher.Junction<T> hasGenericSuperType(ElementMatcher<? super TypeDescription.Generic> matcher) {
>, <Line: +        return new HasSuperTypeMatcher<T>(matcher);
>, <Line: +    }
>, <Line: +    public static <T extends ClassLoader> ElementMatcher.Junction<T> isBootstrapClassLoader() {
>, <Line: +    public static <T extends ClassLoader> ElementMatcher.Junction<T> isSystemClassLoader() {
>, <Line: +    public static <T extends ClassLoader> ElementMatcher.Junction<T> isExtensionClassLoader() {
>, <Line: +    public static <T extends ClassLoader> ElementMatcher.Junction<T> isChildOf(ClassLoader classLoader) {
>, <Line: +    public static <T extends ClassLoader> ElementMatcher.Junction<T> hasChild(ElementMatcher<? super ClassLoader> matcher) {
>, <Line: +    public static <T extends ClassLoader> ElementMatcher.Junction<T> isParentOf(ClassLoader classLoader) {
>, <Line: +    /**
>, <Line: +     * Matches a module if it exists, i.e. not {@code null}.
>, <Line: +     *
>, <Line: +     * @param <T>     The type of the matched object.
>, <Line: +     * @return A matcher that validates a module's existence.
>, <Line: +     */
>, <Line: +    public static <T extends JavaModule> ElementMatcher.Junction<T> supportsModules() {
>, <Line: +        return not(new NullMatcher<T>());
>, <Line: +    }
>]
[<Line: -    public static <T extends TypeDefinition> ElementMatcher<T> isVariable(String symbol) {
>, <Line: -    public static <T extends TypeDefinition> ElementMatcher<T> isVariable(ElementMatcher<? super NamedElement> matcher) {
>, <Line: -     * @param type The type to be checked being a super type of the matched type.
>, <Line: -     * @param type The type to be checked being a super type of the matched type.
>, <Line: -     * @param type The type to be checked being a subtype of the matched type.
>, <Line: -     * @param type The type to be checked being a subtype of the matched type.
>, <Line: -    public static <T extends ClassLoader> ElementMatcher<T> isBootstrapClassLoader() {
>, <Line: -    public static <T extends ClassLoader> ElementMatcher<T> isSystemClassLoader() {
>, <Line: -    public static <T extends ClassLoader> ElementMatcher<T> isExtensionClassLoader() {
>, <Line: -    public static <T extends ClassLoader> ElementMatcher<T> isChildOf(ClassLoader classLoader) {
>, <Line: -    public static <T extends ClassLoader> ElementMatcher<T> hasChild(ElementMatcher<? super ClassLoader> matcher) {
>, <Line: -    public static <T extends ClassLoader> ElementMatcher<T> isParentOf(ClassLoader classLoader) {
>]