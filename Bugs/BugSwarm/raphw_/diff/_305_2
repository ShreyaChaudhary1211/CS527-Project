[<Line: +         * A lazy projection of the parameter type of a {@link Constructor}.
>, <Line: +        public static class OfConstructorParameter extends LazyProjection {
>, <Line: +             * The constructor of which a parameter type is represented.
>, <Line: +            private final Constructor<?> constructor;
>, <Line: +            /**
>, <Line: +             * The parameter's index.
>, <Line: +            private final int index;
>, <Line: +             * The erasure of the parameter type.
>, <Line: +            private final Class<?> erasure;
>, <Line: +             * Creates a lazy projection of a constructor's parameter.
>, <Line: +             * @param constructor The constructor of which a parameter type is represented.
>, <Line: +             * @param index       The parameter's index.
>, <Line: +             * @param erasure     The erasure of the parameter type.
>, <Line: +            public OfConstructorParameter(Constructor<?> constructor, int index, Class<?> erasure) {
>, <Line: +                this.constructor = constructor;
>, <Line: +                this.index = index;
>, <Line: +                this.erasure = erasure;
>, <Line: +                Type[] type = constructor.getGenericParameterTypes();
>, <Line: +                return index < type.length
>, <Line: +                        ? Sort.describe(type[index])
>, <Line: +                        : new ForNonGenericType.OfLoadedType(erasure);
>, <Line: +                return new TypeDescription.ForLoadedType(erasure);
>, <Line: +        }
>, <Line: +        /**
>, <Line: +         * A lazy projection of the parameter type of a {@link Method}.
>, <Line: +         */
>, <Line: +        public static class OfMethodParameter extends LazyProjection {
>, <Line: +             * The method of which a parameter type is represented.
>, <Line: +            private final Method method;
>, <Line: +             * The parameter's index.
>, <Line: +            private final int index;
>, <Line: +             * The erasure of the parameter type.
>, <Line: +            private final Class<?> erasure;
>, <Line: +            /**
>, <Line: +             * Creates a lazy projection of a constructor's parameter.
>, <Line: +             *
>, <Line: +             * @param method  The method of which a parameter type is represented.
>, <Line: +             * @param index   The parameter's index.
>, <Line: +             * @param erasure The erasure of the parameter's type.
>, <Line: +             */
>, <Line: +            public OfMethodParameter(Method method, int index, Class<?> erasure) {
>, <Line: +                this.method = method;
>, <Line: +                this.index = index;
>, <Line: +                this.erasure = erasure;
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            protected GenericTypeDescription resolve() {
>, <Line: +                Type[] type = method.getGenericParameterTypes();
>, <Line: +                return index < type.length
>, <Line: +                        ? Sort.describe(type[index])
>, <Line: +                        : new ForNonGenericType.OfLoadedType(erasure);
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public TypeDescription asErasure() {
>, <Line: +                return new TypeDescription.ForLoadedType(erasure);
>]
[<Line: -         * A lazy projection of a loaded parameter.
>, <Line: -        public static class OfLoadedParameter extends LazyProjection {
>, <Line: -             * A dispatcher for introspecting a parameter's type.
>, <Line: -            private static final Dispatcher DISPATCHER;
>, <Line: -            /*
>, <Line: -             * Looks up Java 7+ specific methods if possible.
>, <Line: -            static {
>, <Line: -                Dispatcher dispatcher;
>, <Line: -                try {
>, <Line: -                    Class<?> parameterType = Class.forName("java.lang.reflect.Parameter");
>, <Line: -                    dispatcher = new Dispatcher.ForModernVm(parameterType.getDeclaredMethod("getType"), parameterType.getDeclaredMethod("getParameterizedType"));
>, <Line: -                } catch (RuntimeException exception) {
>, <Line: -                    throw exception;
>, <Line: -                } catch (Exception ignored) {
>, <Line: -                    dispatcher = Dispatcher.ForLegacyVm.INSTANCE;
>, <Line: -                }
>, <Line: -                DISPATCHER = dispatcher;
>, <Line: -            }
>, <Line: -             * The represented parameter.
>, <Line: -            private final Object parameter;
>, <Line: -             * Creates a lazy projection of a loaded parameter's type.
>, <Line: -             * @param parameter The represented parameter.
>, <Line: -            public OfLoadedParameter(Object parameter) {
>, <Line: -                this.parameter = parameter;
>, <Line: -                return Sort.describe(DISPATCHER.getParameterizedType(parameter));
>, <Line: -                return new TypeDescription.ForLoadedType(DISPATCHER.getType(parameter));
>, <Line: -             * A dispatcher for introspecting a method's types.
>, <Line: -            protected interface Dispatcher {
>, <Line: -                /**
>, <Line: -                 * Returns a parameter's parameterized type.
>, <Line: -                 *
>, <Line: -                 * @param parameter The parameter to extract the paramaterized type of.
>, <Line: -                 * @return The parameter's generic type.
>, <Line: -                 */
>, <Line: -                Type getParameterizedType(Object parameter);
>, <Line: -                /**
>, <Line: -                 * Returns the parameter's type.
>, <Line: -                 *
>, <Line: -                 * @param parameter The parameter to extract the non-generic type of.
>, <Line: -                 * @return The parameter's non-generic type.
>, <Line: -                 */
>, <Line: -                Class<?> getType(Object parameter);
>, <Line: -                /**
>, <Line: -                 * A dispatcher for a modern VM that supports the {@code java.lang.reflect.Parameter} API for Java 8+.
>, <Line: -                 */
>, <Line: -                class ForModernVm implements Dispatcher {
>, <Line: -                    /**
>, <Line: -                     * A reference to {@code java.lang.reflect.Parameter#getType}.
>, <Line: -                     */
>, <Line: -                    private final Method getType;
>, <Line: -                    /**
>, <Line: -                     * A reference to {@code java.lang.reflect.Parameter#getParameterizedType}.
>, <Line: -                     */
>, <Line: -                    private final Method getParameterizedType;
>, <Line: -                    /**
>, <Line: -                     * Creates a new dispatcher.
>, <Line: -                     *
>, <Line: -                     * @param getType              A reference to {@code java.lang.reflect.Parameter#getType}.
>, <Line: -                     * @param getParameterizedType A reference to {@code java.lang.reflect.Parameter#getParameterizedType}.
>, <Line: -                     */
>, <Line: -                    protected ForModernVm(Method getType, Method getParameterizedType) {
>, <Line: -                        this.getType = getType;
>, <Line: -                        this.getParameterizedType = getParameterizedType;
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public Type getParameterizedType(Object parameter) {
>, <Line: -                        try {
>, <Line: -                            return (Type) getParameterizedType.invoke(parameter);
>, <Line: -                        } catch (IllegalAccessException exception) {
>, <Line: -                            throw new IllegalStateException("Cannot access java.lang.reflect.Parameter#getParameterizedType", exception);
>, <Line: -                        } catch (InvocationTargetException exception) {
>, <Line: -                            throw new IllegalStateException("Error invoking java.lang.reflect.Parameter#getParameterizedType", exception.getCause());
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public Class<?> getType(Object parameter) {
>, <Line: -                        try {
>, <Line: -                            return (Class<?>) getType.invoke(parameter);
>, <Line: -                        } catch (IllegalAccessException exception) {
>, <Line: -                            throw new IllegalStateException("Cannot access java.lang.reflect.Parameter#getType", exception);
>, <Line: -                        } catch (InvocationTargetException exception) {
>, <Line: -                            throw new IllegalStateException("Error invoking java.lang.reflect.Parameter#getType", exception.getCause());
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public boolean equals(Object other) {
>, <Line: -                        if (this == other) return true;
>, <Line: -                        if (other == null || getClass() != other.getClass()) return false;
>, <Line: -                        ForModernVm legal = (ForModernVm) other;
>, <Line: -                        return getType.equals(legal.getType) && getParameterizedType.equals(legal.getParameterizedType);
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public int hashCode() {
>, <Line: -                        int result = getType.hashCode();
>, <Line: -                        result = 31 * result + getParameterizedType.hashCode();
>, <Line: -                        return result;
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public String toString() {
>, <Line: -                        return "GenericTypeDescription.LazyProjection.OfLoadedParameter.Dispatcher.ForModernVm{" +
>, <Line: -                                "getType=" + getType +
>, <Line: -                                ", getParameterizedType=" + getParameterizedType +
>, <Line: -                                '}';
>, <Line: -                    }
>, <Line: -                }
>, <Line: -                /**
>, <Line: -                 * A dispatcher for a VM that does not support the {@code java.lang.reflect.Parameter} API that throws an exception
>, <Line: -                 * for any property.
>, <Line: -                 */
>, <Line: -                enum ForLegacyVm implements Dispatcher {
>, <Line: -                    /**
>, <Line: -                     * The singleton instance.
>, <Line: -                     */
>, <Line: -                    INSTANCE;
>, <Line: -                    @Override
>, <Line: -                    public Type getParameterizedType(Object parameter) {
>, <Line: -                        throw new IllegalStateException("Cannot dispatch method for java.lang.reflect.Parameter");
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public Class<?> getType(Object parameter) {
>, <Line: -                        throw new IllegalStateException("Unsupported type for current JVM: java,lang.Parameter");
>, <Line: -                    }
>, <Line: -                    @Override
>, <Line: -                    public String toString() {
>, <Line: -                        return "GenericTypeDescription.LazyProjection.OfLoadedParameter.Dispatcher.ForLegacyVm." + name();
>, <Line: -                    }
>, <Line: -                }
>, <Line: -            }
>, <Line: -             * Represents a constructor's parameter on a JVM that does not know the {@code java.lang.reflect.Parameter} type.
>, <Line: -            public static class OfLegacyVmConstructor extends LazyProjection {
>, <Line: -                /**
>, <Line: -                 * The constructor of which a parameter type is represented.
>, <Line: -                 */
>, <Line: -                private final Constructor<?> constructor;
>, <Line: -                /**
>, <Line: -                 * The parameter's index.
>, <Line: -                 */
>, <Line: -                private final int index;
>, <Line: -                /**
>, <Line: -                 * The erasure of the parameter type.
>, <Line: -                 */
>, <Line: -                private final Class<?> erasure;
>, <Line: -                /**
>, <Line: -                 * Creates a lazy projection of a constructor's parameter.
>, <Line: -                 *
>, <Line: -                 * @param constructor The constructor of which a parameter type is represented.
>, <Line: -                 * @param index       The parameter's index.
>, <Line: -                 * @param erasure     The erasure of the parameter type.
>, <Line: -                 */
>, <Line: -                public OfLegacyVmConstructor(Constructor<?> constructor, int index, Class<?> erasure) {
>, <Line: -                    this.constructor = constructor;
>, <Line: -                    this.index = index;
>, <Line: -                    this.erasure = erasure;
>, <Line: -                }
>, <Line: -                @Override
>, <Line: -                protected GenericTypeDescription resolve() {
>, <Line: -                    return Sort.describe(constructor.getGenericParameterTypes()[index]);
>, <Line: -                }
>, <Line: -                @Override
>, <Line: -                public TypeDescription asErasure() {
>, <Line: -                    return new TypeDescription.ForLoadedType(erasure);
>, <Line: -                }
>, <Line: -            }
>, <Line: -             * Represents a method's parameter on a JVM that does not know the {@code java.lang.reflect.Parameter} type.
>, <Line: -            public static class OfLegacyVmMethod extends LazyProjection {
>, <Line: -                /**
>, <Line: -                 * The method of which a parameter type is represented.
>, <Line: -                 */
>, <Line: -                private final Method method;
>, <Line: -                /**
>, <Line: -                 * The parameter's index.
>, <Line: -                 */
>, <Line: -                private final int index;
>, <Line: -                /**
>, <Line: -                 * The erasure of the parameter type.
>, <Line: -                 */
>, <Line: -                private final Class<?> erasure;
>, <Line: -                /**
>, <Line: -                 * Creates a lazy projection of a constructor's parameter.
>, <Line: -                 *
>, <Line: -                 * @param method  The method of which a parameter type is represented.
>, <Line: -                 * @param index   The parameter's index.
>, <Line: -                 * @param erasure The erasure of the parameter's type.
>, <Line: -                 */
>, <Line: -                public OfLegacyVmMethod(Method method, int index, Class<?> erasure) {
>, <Line: -                    this.method = method;
>, <Line: -                    this.index = index;
>, <Line: -                    this.erasure = erasure;
>, <Line: -                }
>, <Line: -                @Override
>, <Line: -                protected GenericTypeDescription resolve() {
>, <Line: -                    return Sort.describe(method.getGenericParameterTypes()[index]);
>, <Line: -                }
>, <Line: -                @Override
>, <Line: -                public TypeDescription asErasure() {
>, <Line: -                    return new TypeDescription.ForLoadedType(erasure);
>, <Line: -                }
>]