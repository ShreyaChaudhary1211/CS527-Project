[<Line: +package net.bytebuddy.dynamic.scaffold;
>, <Line: +import net.bytebuddy.description.field.FieldDescription;
>, <Line: +import net.bytebuddy.description.type.TypeDescription;
>, <Line: +import net.bytebuddy.test.utility.ObjectPropertyAssertion;
>, <Line: +import org.junit.Test;
>, <Line: +import static org.hamcrest.core.Is.is;
>, <Line: +import static org.junit.Assert.assertThat;
>, <Line: +public class FieldLocatorTest {
>, <Line: +    private static final String FOO = "foo", BAR = "bar", QUX = "qux";
>, <Line: +    @Test
>, <Line: +    public void testExactTypeFound() throws Exception {
>, <Line: +        FieldLocator.Resolution resolution = new FieldLocator.ForExactType(new TypeDescription.ForLoadedType(Foo.class)).locate(FOO);
>, <Line: +        assertThat(resolution.isResolved(), is(true));
>, <Line: +        assertThat(resolution.getFieldDescription(), is((FieldDescription) new FieldDescription.ForLoadedField(Foo.class.getDeclaredField(FOO))));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testExactTypeFoundWithType() throws Exception {
>, <Line: +        FieldLocator.Resolution resolution = new FieldLocator.ForExactType(new TypeDescription.ForLoadedType(Foo.class)).locate(FOO, new TypeDescription.ForLoadedType(Void.class));
>, <Line: +        assertThat(resolution.isResolved(), is(true));
>, <Line: +        assertThat(resolution.getFieldDescription(), is((FieldDescription) new FieldDescription.ForLoadedField(Foo.class.getDeclaredField(FOO))));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testExactTypeNotFoundInherited() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForExactType(new TypeDescription.ForLoadedType(Bar.class)).locate(FOO).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testExactTypeNotFoundNotExistent() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForExactType(new TypeDescription.ForLoadedType(Foo.class)).locate(QUX).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testExactTypeNotFoundInvisible() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForExactType(new TypeDescription.ForLoadedType(Foo.class), new TypeDescription.ForLoadedType(Object.class)).locate(QUX).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testExactTypeNotFoundWrongType() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForExactType(new TypeDescription.ForLoadedType(Foo.class)).locate(QUX, new TypeDescription.ForLoadedType(Object.class)).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyTypeFound() throws Exception {
>, <Line: +        FieldLocator.Resolution resolution = new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Foo.class)).locate(FOO);
>, <Line: +        assertThat(resolution.isResolved(), is(true));
>, <Line: +        assertThat(resolution.getFieldDescription(), is((FieldDescription) new FieldDescription.ForLoadedField(Foo.class.getDeclaredField(FOO))));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyFoundWithType() throws Exception {
>, <Line: +        FieldLocator.Resolution resolution = new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Foo.class)).locate(FOO, new TypeDescription.ForLoadedType(Void.class));
>, <Line: +        assertThat(resolution.isResolved(), is(true));
>, <Line: +        assertThat(resolution.getFieldDescription(), is((FieldDescription) new FieldDescription.ForLoadedField(Foo.class.getDeclaredField(FOO))));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyFoundInherited() throws Exception {
>, <Line: +        FieldLocator.Resolution resolution = new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Qux.class)).locate(BAR);
>, <Line: +        assertThat(resolution.isResolved(), is(true));
>, <Line: +        assertThat(resolution.getFieldDescription(), is((FieldDescription) new FieldDescription.ForLoadedField(Foo.class.getDeclaredField(BAR))));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyFoundInheritedShadowed() throws Exception {
>, <Line: +        FieldLocator.Resolution resolution = new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Bar.class)).locate(BAR);
>, <Line: +        assertThat(resolution.isResolved(), is(true));
>, <Line: +        assertThat(resolution.getFieldDescription(), is((FieldDescription) new FieldDescription.ForLoadedField(Bar.class.getDeclaredField(BAR))));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyNotFoundInherited() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Bar.class)).locate(FOO).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyNotFoundNotExistent() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Foo.class)).locate(QUX).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyNotFoundInvisible() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Foo.class), new TypeDescription.ForLoadedType(Object.class)).locate(QUX).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassHierarchyNotFoundWrongType() throws Exception {
>, <Line: +        assertThat(new FieldLocator.ForClassHierarchy(new TypeDescription.ForLoadedType(Foo.class)).locate(QUX, new TypeDescription.ForLoadedType(Object.class)).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testObjectProperties() throws Exception {
>, <Line: +        ObjectPropertyAssertion.of(FieldLocator.ForExactType.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldLocator.ForClassHierarchy.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldLocator.Resolution.Illegal.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldLocator.Resolution.Simple.class).apply();
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    private static class Foo {
>, <Line: +        private Void foo;
>, <Line: +        protected Void bar;
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    private static class Bar extends Foo {
>, <Line: +        protected Void bar;
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    private static class Qux extends Foo {
>, <Line: +        private Void baz;
>, <Line: +    }
>, <Line: +}
>]
[]