[<Line: +package net.bytebuddy.matcher;
>, <Line: +import net.bytebuddy.description.method.MethodList;
>, <Line: +import net.bytebuddy.description.type.TypeDefinition;
>, <Line: +import net.bytebuddy.description.type.TypeDescription;
>, <Line: +import net.bytebuddy.description.type.TypeList;
>, <Line: +import org.junit.Before;
>, <Line: +import org.junit.Test;
>, <Line: +import org.mockito.Mock;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.Collections;
>, <Line: +import static org.hamcrest.CoreMatchers.is;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +import static org.mockito.Mockito.*;
>, <Line: +public class HasSuperTypeMatcherTest extends AbstractElementMatcherTest<HasSuperTypeMatcher<?>> {
>, <Line: +    @Mock
>, <Line: +    private ElementMatcher<? super TypeDescription.Generic> typeMatcher;
>, <Line: +    @Mock
>, <Line: +    private TypeDescription typeDescription;
>, <Line: +    @Mock
>, <Line: +    private TypeDescription.Generic superType, interfaceType, implicitInterfaceType;
>, <Line: +    @Before
>, <Line: +    public void setUp() throws Exception {
>, <Line: +        when(superType.asGenericType()).thenReturn(superType);
>, <Line: +        when(interfaceType.asGenericType()).thenReturn(interfaceType);
>, <Line: +        when(interfaceType.asErasure()).thenReturn(mock(TypeDescription.class));
>, <Line: +        when(implicitInterfaceType.asGenericType()).thenReturn(implicitInterfaceType);
>, <Line: +        when(implicitInterfaceType.asErasure()).thenReturn(mock(TypeDescription.class));
>, <Line: +        when(typeDescription.iterator()).thenReturn(Collections.<TypeDefinition>singletonList(superType).iterator());
>, <Line: +        when(superType.getInterfaces()).thenReturn(new TypeList.Generic.Explicit(interfaceType));
>, <Line: +        when(interfaceType.getInterfaces()).thenReturn(new TypeList.Generic.Explicit(implicitInterfaceType));
>, <Line: +        when(implicitInterfaceType.getInterfaces()).thenReturn(new TypeList.Generic.Empty());
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public HasSuperTypeMatcherTest() {
>, <Line: +        super((Class<HasSuperTypeMatcher<?>>) (Object) HasSuperTypeMatcher.class, "hasSuperType");
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testMatchSuperClass() throws Exception {
>, <Line: +        when(typeMatcher.matches(superType)).thenReturn(true);
>, <Line: +        assertThat(new HasSuperTypeMatcher<TypeDescription>(typeMatcher).matches(typeDescription), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testMatchSuperInterface() throws Exception {
>, <Line: +        when(typeMatcher.matches(interfaceType)).thenReturn(true);
>, <Line: +        assertThat(new HasSuperTypeMatcher<TypeDescription>(typeMatcher).matches(typeDescription), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testMatchSuperInterfaceImplicit() throws Exception {
>, <Line: +        when(typeMatcher.matches(implicitInterfaceType)).thenReturn(true);
>, <Line: +        assertThat(new HasSuperTypeMatcher<TypeDescription>(typeMatcher).matches(typeDescription), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testNoMatch() throws Exception {
>, <Line: +        assertThat(new HasSuperTypeMatcher<TypeDescription>(typeMatcher).matches(typeDescription), is(false));
>, <Line: +    }
>, <Line: +}
>]
[]