[<Line: +import net.bytebuddy.test.utility.JavaVersionRule;
>, <Line: +import org.junit.Rule;
>, <Line: +import org.junit.rules.MethodRule;
>, <Line: +import java.lang.annotation.Annotation;
>, <Line: +    @Rule
>, <Line: +    public MethodRule javaVersionRule = new JavaVersionRule();
>, <Line: +    private static final String TYPE_ANNOTATION = "net.bytebuddy.test.precompiled.TypeAnnotation";
>, <Line: +    private static final String OTHER_TYPE_ANNOTATION = "net.bytebuddy.test.precompiled.OtherTypeAnnotation";
>, <Line: +    private static final String TYPE_ANNOTATION_SAMPLES = "net.bytebuddy.test.precompiled.TypeAnnotationSamples";
>, <Line: +    private static final String TYPE_ANNOTATION_OTHER_SAMPLES = "net.bytebuddy.test.precompiled.TypeAnnotationOtherSamples";
>, <Line: +    protected abstract TypeDescription.Generic describeType(Field field);
>, <Line: +    protected abstract TypeDescription.Generic describeReturnType(Method method);
>, <Line: +    protected abstract TypeDescription.Generic describeParameterType(Method method, int index);
>, <Line: +    protected abstract TypeDescription.Generic describeExceptionType(Method method, int index);
>, <Line: +    protected abstract TypeDescription.Generic describeSuperType(Class<?> type);
>, <Line: +    protected abstract TypeDescription.Generic describeInterfaceType(Class<?> type, int index);
>, <Line: +        describeType(NonGeneric.class.getDeclaredField(FOO)).getOwnerType();
>, <Line: +        describeType(NonGeneric.class.getDeclaredField(FOO)).getTypeArguments();
>, <Line: +        describeType(NonGeneric.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: +        describeType(NonGeneric.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: +        describeType(NonGeneric.class.getDeclaredField(FOO)).getSymbol();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(SimpleParameterizedType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().asErasure().represents(String.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(SimpleParameterizedType.class.getDeclaredField(FOO));
>, <Line: +        describeType(SimpleParameterizedType.class.getDeclaredField(FOO)).getComponentType();
>, <Line: +        describeType(SimpleParameterizedType.class.getDeclaredField(FOO)).getVariableSource();
>, <Line: +        describeType(SimpleParameterizedType.class.getDeclaredField(FOO)).getSymbol();
>, <Line: +        describeType(SimpleParameterizedType.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: +        describeType(SimpleParameterizedType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().getOnly().asErasure().represents(String.class), is(true));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getLowerBounds().size(), is(0));
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getComponentType();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getOwnerType();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getVariableSource();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSymbol();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().asErasure();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getStackSize();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSuperType();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getInterfaces();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredFields();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredMethods();
>, <Line: +        describeType(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().iterator();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getLowerBounds().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getLowerBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getLowerBounds().getOnly().asErasure().represents(String.class), is(true));
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getComponentType();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getOwnerType();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getVariableSource();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSymbol();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().asErasure();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getStackSize();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSuperType();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getInterfaces();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredFields();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredMethods();
>, <Line: +        describeType(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().iterator();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().getOnly().asErasure().represents(Object.class), is(true));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getLowerBounds().size(), is(0));
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getComponentType();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getOwnerType();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getVariableSource();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSymbol();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().asErasure();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getStackSize();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSuperType();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getInterfaces();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredFields();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredMethods();
>, <Line: +        describeType(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().iterator();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getUpperBounds().getOnly().asErasure().represents(Object.class), is(true));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getLowerBounds().size(), is(0));
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getComponentType();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getOwnerType();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getVariableSource();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSymbol();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().asErasure();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getStackSize();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getSuperType();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getInterfaces();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredFields();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().getDeclaredMethods();
>, <Line: +        describeType(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getTypeArguments().getOnly().iterator();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(NestedParameterizedType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly().getTypeArguments().getOnly().asErasure().represents(Foo.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(SimpleGenericArrayType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getComponentType().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getComponentType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getComponentType().getTypeArguments().getOnly().asErasure().represents(String.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(SimpleGenericArrayType.class.getDeclaredField(FOO));
>, <Line: +        describeType(SimpleGenericArrayType.class.getDeclaredField(FOO)).getVariableSource();
>, <Line: +        describeType(SimpleGenericArrayType.class.getDeclaredField(FOO)).getSymbol();
>, <Line: +        describeType(SimpleGenericArrayType.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: +        describeType(SimpleGenericArrayType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: +        describeType(SimpleGenericArrayType.class.getDeclaredField(FOO)).getOwnerType();
>, <Line: +        describeType(SimpleGenericArrayType.class.getDeclaredField(FOO)).getTypeArguments();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getComponentType().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getComponentType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(typeDescription.getComponentType().getTypeArguments().getOnly().asErasure().represents(String.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO));
>, <Line: +        describeType(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getVariableSource();
>, <Line: +        describeType(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getSymbol();
>, <Line: +        describeType(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: +        describeType(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(SimpleTypeVariableType.class.getDeclaredField(FOO));
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).getComponentType();
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).getOwnerType();
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).getSuperType();
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).getInterfaces();
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).getDeclaredFields();
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).getDeclaredMethods();
>, <Line: +        describeType(SimpleTypeVariableType.class.getDeclaredField(FOO)).iterator();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(SingleUpperBoundTypeVariableType.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MultipleUpperBoundTypeVariableType.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(InterfaceOnlyMultipleUpperBoundTypeVariableType.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeReturnType(ShadowingTypeVariableType.class.getDeclaredMethod(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(NestedTypeVariableType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(0));
>, <Line: +        assertThat(typeDescription.getOwnerType().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getOwnerType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(typeDescription.getOwnerType().getTypeArguments().getOnly().getSymbol(), is(T));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(NestedSpecifiedTypeVariableType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(0));
>, <Line: +        assertThat(typeDescription.getOwnerType().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getOwnerType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getOwnerType().getTypeArguments().getOnly(), is((TypeDefinition) new TypeDescription.ForLoadedType(String.class)));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(NestedStaticTypeVariableType.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getTypeArguments().getOnly(), is((TypeDefinition) new TypeDescription.ForLoadedType(String.class)));
>, <Line: +        TypeDescription.Generic foo = describeReturnType(NestedInnerType.InnerType.class.getDeclaredMethod(FOO));
>, <Line: +        TypeDescription.Generic bar = describeReturnType(NestedInnerType.InnerType.class.getDeclaredMethod(BAR));
>, <Line: +        TypeDescription.Generic qux = describeReturnType(NestedInnerType.InnerType.class.getDeclaredMethod(QUX));
>, <Line: +        TypeDescription.Generic foo = describeReturnType(innerType.getDeclaredMethod(FOO));
>, <Line: +        TypeDescription.Generic bar = describeReturnType(innerType.getDeclaredMethod(BAR));
>, <Line: +        TypeDescription.Generic qux = describeReturnType(innerType.getDeclaredMethod(QUX));
>, <Line: +        TypeDescription.Generic baz = describeReturnType(innerType.getDeclaredMethod(BAZ));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(RecursiveTypeVariable.class.getDeclaredField(FOO));
>, <Line: +        assertThat(upperBound.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(upperBound.getTypeArguments().getOnly(), is(typeDescription));
>, <Line: +        TypeDescription.Generic foo = describeType(BackwardsReferenceTypeVariable.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic bar = describeType(BackwardsReferenceTypeVariable.class.getDeclaredField(BAR));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(superType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(superType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        assertThat(fieldType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(fieldType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(fieldType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        assertThat(methodReturnType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(methodReturnType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(methodReturnType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        assertThat(methodParameterType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(methodParameterType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(methodParameterType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(interfaceType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(interfaceType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(interfaceType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        assertThat(methodReturnType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(methodReturnType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(methodReturnType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        assertThat(methodParameterType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(methodParameterType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(methodParameterType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(BAR));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(BAR));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(QUX));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superSuperType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(0).asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(1).asErasure().represents(List.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(QUX));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(0).asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(1).asErasure().represents(List.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(BAZ));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superSuperType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(0).asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(0).getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(0).getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(0).getTypeArguments().getOnly().asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(1).asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(1).getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(1).getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superSuperType.getTypeArguments().get(1).getTypeArguments().getOnly().asErasure().represents(String.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(BAZ));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(0).asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(0).getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(0).getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(0).getTypeArguments().getOnly().asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(1).asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(1).getTypeArguments().size(), is(1));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(1).getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superInterfaceType.getTypeArguments().get(1).getTypeArguments().getOnly().asErasure().represents(String.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(FOO + BAR));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(superType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(superType.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        assertThat(superType.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(TypeResolution.class.getDeclaredField(FOO + BAR));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(interfaceType.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(interfaceType.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(interfaceType.getTypeArguments().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: +        assertThat(interfaceType.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(interfaceType.getTypeArguments().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(0).asErasure().represents(Number.class), is(true));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(1).asErasure().represents(Integer.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(0).asErasure().represents(Number.class), is(true));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(1).asErasure().represents(Integer.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        assertThat(typeDescription.getTypeArguments().size(), is(2));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(0).asErasure().represents(Number.class), is(true));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getTypeArguments().get(1).asErasure().represents(Integer.class), is(true));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(BAR)).getSuperType();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(BAR)).getSuperType();
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(MemberVariable.class.getDeclaredField(FOO));
>, <Line: +        TypeDescription.Generic typeDescription = describeType(GenericDisintegrator.make());
>, <Line: +        assertThat(describeType(SimpleParameterizedType.class.getDeclaredField(FOO))
>, <Line: +        assertThat(describeType(SimpleParameterizedType.class.getDeclaredField(FOO))
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationsFieldType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic fieldType = describeType(samples.getDeclaredField(FOO));
>, <Line: +        assertThat(fieldType.getSort(), is(TypeDefinition.Sort.GENERIC_ARRAY));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(24));
>, <Line: +        assertThat(fieldType.getComponentType().getSort(), is(TypeDefinition.Sort.GENERIC_ARRAY));
>, <Line: +        assertThat(fieldType.getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(25));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(22));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getTypeArguments().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getTypeArguments().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getComponentType().getComponentType().getTypeArguments().getOnly().getDeclaredAnnotations()
>, <Line: +                .ofType(typeAnnotation).getValue(value, Integer.class), is(23));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationsMethodReturnType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic returnType = describeReturnType(samples.getDeclaredMethod(FOO, Exception[][].class));
>, <Line: +        assertThat(returnType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(28));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationsMethodParameterType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic parameterType = describeParameterType(samples.getDeclaredMethod(FOO, Exception[][].class), 0);
>, <Line: +        assertThat(parameterType.getSort(), is(TypeDefinition.Sort.GENERIC_ARRAY));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(30));
>, <Line: +        assertThat(parameterType.getComponentType().getSort(), is(TypeDefinition.Sort.GENERIC_ARRAY));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(31));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(29));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationsSuperType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic superType = describeSuperType(samples);
>, <Line: +        assertThat(superType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(superType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(superType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(superType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(18));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationsInterfaceType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic firstInterfaceType = describeInterfaceType(samples, 0);
>, <Line: +        assertThat(firstInterfaceType.getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(firstInterfaceType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(firstInterfaceType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(firstInterfaceType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(19));
>, <Line: +        assertThat(firstInterfaceType.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(firstInterfaceType.getTypeArguments().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(firstInterfaceType.getTypeArguments().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(firstInterfaceType.getTypeArguments().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(20));
>, <Line: +        TypeDescription.Generic secondInterfaceType = describeInterfaceType(samples, 1);
>, <Line: +        assertThat(secondInterfaceType.getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(secondInterfaceType.getDeclaredAnnotations().size(), is(0));
>, <Line: +        assertThat(secondInterfaceType.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(secondInterfaceType.getTypeArguments().get(0).getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(secondInterfaceType.getTypeArguments().get(0).getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(secondInterfaceType.getTypeArguments().get(0).getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(21));
>, <Line: +        assertThat(secondInterfaceType.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(secondInterfaceType.getTypeArguments().get(1).getDeclaredAnnotations().size(), is(0));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationExceptionType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic firstExceptionType = describeExceptionType(samples.getDeclaredMethod(FOO, Exception[][].class), 0);
>, <Line: +        assertThat(firstExceptionType.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(firstExceptionType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(firstExceptionType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(firstExceptionType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(32));
>, <Line: +        TypeDescription.Generic secondExceptionType = describeExceptionType(samples.getDeclaredMethod(FOO, Exception[][].class), 1);
>, <Line: +        assertThat(secondExceptionType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(secondExceptionType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(secondExceptionType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(secondExceptionType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(33));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationOnNonGenericField() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_OTHER_SAMPLES);
>, <Line: +        TypeDescription.Generic fieldType = describeType(samples.getDeclaredField(FOO));
>, <Line: +        assertThat(fieldType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(0));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationOnNonGenericReturnType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_OTHER_SAMPLES);
>, <Line: +        TypeDescription.Generic returnType = describeReturnType(samples.getDeclaredMethod(FOO, Void.class));
>, <Line: +        assertThat(returnType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(7));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationOnNonGenericParameterType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_OTHER_SAMPLES);
>, <Line: +        TypeDescription.Generic parameterType = describeParameterType(samples.getDeclaredMethod(FOO, Void.class), 0);
>, <Line: +        assertThat(parameterType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(8));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationOnNonGenericExceptionType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_OTHER_SAMPLES);
>, <Line: +        TypeDescription.Generic exceptionType = describeExceptionType(samples.getDeclaredMethod(FOO, Void.class), 0);
>, <Line: +        assertThat(exceptionType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(exceptionType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(exceptionType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(exceptionType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(9));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationOnNonGenericArrayType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic returnType = describeReturnType(samples.getDeclaredMethod(BAR, Void[][].class));
>, <Line: +        assertThat(returnType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(35));
>, <Line: +        assertThat(returnType.getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(36));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(34));
>, <Line: +        TypeDescription.Generic parameterType = describeParameterType(samples.getDeclaredMethod(BAR, Void[][].class), 0);
>, <Line: +        assertThat(parameterType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(38));
>, <Line: +        assertThat(parameterType.getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(39));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(37));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationOnNonGenericArrayTypeWithGenericSignature() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_SAMPLES);
>, <Line: +        TypeDescription.Generic returnType = describeReturnType(samples.getDeclaredMethod(QUX, Void[][].class));
>, <Line: +        assertThat(returnType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(41));
>, <Line: +        assertThat(returnType.getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(42));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(returnType.getComponentType().getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(40));
>, <Line: +        TypeDescription.Generic parameterType = describeParameterType(samples.getDeclaredMethod(QUX, Void[][].class), 0);
>, <Line: +        assertThat(parameterType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(44));
>, <Line: +        assertThat(parameterType.getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(45));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(43));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationOwnerType() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_OTHER_SAMPLES);
>, <Line: +        TypeDescription.Generic fieldType = describeType(samples.getDeclaredField(BAR));
>, <Line: +        assertThat(fieldType.getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(1));
>, <Line: +        assertThat(fieldType.getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(fieldType.getTypeArguments().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getTypeArguments().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getTypeArguments().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(2));
>, <Line: +        assertThat(fieldType.getOwnerType().getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(fieldType.getOwnerType().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getOwnerType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getOwnerType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(3));;
>, <Line: +        assertThat(fieldType.getOwnerType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(fieldType.getOwnerType().getTypeArguments().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(fieldType.getOwnerType().getTypeArguments().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getOwnerType().getTypeArguments().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(4));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeAnnotationTwoAnnotations() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<? extends Annotation> otherTypeAnnotation = (Class<? extends Annotation>) Class.forName(OTHER_TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape otherValue = new TypeDescription.ForLoadedType(otherTypeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        Class<?> samples = Class.forName(TYPE_ANNOTATION_OTHER_SAMPLES);
>, <Line: +        TypeDescription.Generic fieldType = describeType(samples.getDeclaredField(QUX));
>, <Line: +        assertThat(fieldType.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().size(), is(2));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(5));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().isAnnotationPresent(otherTypeAnnotation), is(true));
>, <Line: +        assertThat(fieldType.getDeclaredAnnotations().ofType(otherTypeAnnotation).getValue(otherValue, Integer.class), is(6));
>, <Line: +    }
>]
[<Line: -    protected abstract TypeDescription.Generic describe(Field field);
>, <Line: -    protected abstract TypeDescription.Generic describe(Method method);
>, <Line: -        describe(NonGeneric.class.getDeclaredField(FOO)).getOwnerType();
>, <Line: -        describe(NonGeneric.class.getDeclaredField(FOO)).getParameters();
>, <Line: -        describe(NonGeneric.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: -        describe(NonGeneric.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: -        describe(NonGeneric.class.getDeclaredField(FOO)).getSymbol();
>, <Line: -        TypeDescription.Generic typeDescription = describe(SimpleParameterizedType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().asErasure().represents(String.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(SimpleParameterizedType.class.getDeclaredField(FOO));
>, <Line: -        describe(SimpleParameterizedType.class.getDeclaredField(FOO)).getComponentType();
>, <Line: -        describe(SimpleParameterizedType.class.getDeclaredField(FOO)).getVariableSource();
>, <Line: -        describe(SimpleParameterizedType.class.getDeclaredField(FOO)).getSymbol();
>, <Line: -        describe(SimpleParameterizedType.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: -        describe(SimpleParameterizedType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: -        TypeDescription.Generic typeDescription = describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().getOnly().asErasure().represents(String.class), is(true));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getLowerBounds().size(), is(0));
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getComponentType();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getOwnerType();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getVariableSource();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSymbol();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().asErasure();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getStackSize();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSuperType();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getInterfaces();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredFields();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredMethods();
>, <Line: -        describe(UpperBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().iterator();
>, <Line: -        TypeDescription.Generic typeDescription = describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getLowerBounds().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getLowerBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getLowerBounds().getOnly().asErasure().represents(String.class), is(true));
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getComponentType();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getOwnerType();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getVariableSource();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSymbol();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().asErasure();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getStackSize();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSuperType();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getInterfaces();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredFields();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredMethods();
>, <Line: -        describe(LowerBoundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().iterator();
>, <Line: -        TypeDescription.Generic typeDescription = describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().getOnly().asErasure().represents(Object.class), is(true));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getLowerBounds().size(), is(0));
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getComponentType();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getOwnerType();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getVariableSource();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSymbol();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().asErasure();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getStackSize();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSuperType();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getInterfaces();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredFields();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredMethods();
>, <Line: -        describe(UnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().iterator();
>, <Line: -        TypeDescription.Generic typeDescription = describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getUpperBounds().getOnly().asErasure().represents(Object.class), is(true));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getLowerBounds().size(), is(0));
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getComponentType();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getOwnerType();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getVariableSource();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSymbol();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().asErasure();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getStackSize();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getSuperType();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getInterfaces();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredFields();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().getDeclaredMethods();
>, <Line: -        describe(ExplicitlyUnboundWildcardParameterizedType.class.getDeclaredField(FOO)).getParameters().getOnly().iterator();
>, <Line: -        TypeDescription.Generic typeDescription = describe(NestedParameterizedType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly().getParameters().getOnly().asErasure().represents(Foo.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(SimpleGenericArrayType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getComponentType().getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getComponentType().getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getComponentType().getParameters().getOnly().asErasure().represents(String.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(SimpleGenericArrayType.class.getDeclaredField(FOO));
>, <Line: -        describe(SimpleGenericArrayType.class.getDeclaredField(FOO)).getVariableSource();
>, <Line: -        describe(SimpleGenericArrayType.class.getDeclaredField(FOO)).getSymbol();
>, <Line: -        describe(SimpleGenericArrayType.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: -        describe(SimpleGenericArrayType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: -        describe(SimpleGenericArrayType.class.getDeclaredField(FOO)).getOwnerType();
>, <Line: -        describe(SimpleGenericArrayType.class.getDeclaredField(FOO)).getParameters();
>, <Line: -        TypeDescription.Generic typeDescription = describe(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getComponentType().getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getComponentType().getParameters().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: -        assertThat(typeDescription.getComponentType().getParameters().getOnly().asErasure().represents(String.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO));
>, <Line: -        describe(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getVariableSource();
>, <Line: -        describe(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getSymbol();
>, <Line: -        describe(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getUpperBounds();
>, <Line: -        describe(GenericArrayOfGenericComponentType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: -        TypeDescription.Generic typeDescription = describe(SimpleTypeVariableType.class.getDeclaredField(FOO));
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).getLowerBounds();
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).getComponentType();
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).getOwnerType();
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).getSuperType();
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).getInterfaces();
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).getDeclaredFields();
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).getDeclaredMethods();
>, <Line: -        describe(SimpleTypeVariableType.class.getDeclaredField(FOO)).iterator();
>, <Line: -        TypeDescription.Generic typeDescription = describe(SingleUpperBoundTypeVariableType.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MultipleUpperBoundTypeVariableType.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(InterfaceOnlyMultipleUpperBoundTypeVariableType.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(ShadowingTypeVariableType.class.getDeclaredMethod(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(NestedTypeVariableType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(0));
>, <Line: -        assertThat(typeDescription.getOwnerType().getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getOwnerType().getParameters().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: -        assertThat(typeDescription.getOwnerType().getParameters().getOnly().getSymbol(), is(T));
>, <Line: -        TypeDescription.Generic typeDescription = describe(NestedSpecifiedTypeVariableType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(0));
>, <Line: -        assertThat(typeDescription.getOwnerType().getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getOwnerType().getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getOwnerType().getParameters().getOnly(), is((TypeDefinition) new TypeDescription.ForLoadedType(String.class)));
>, <Line: -        TypeDescription.Generic typeDescription = describe(NestedStaticTypeVariableType.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(typeDescription.getParameters().getOnly(), is((TypeDefinition) new TypeDescription.ForLoadedType(String.class)));
>, <Line: -        TypeDescription.Generic foo = describe(NestedInnerType.InnerType.class.getDeclaredMethod(FOO));
>, <Line: -        TypeDescription.Generic bar = describe(NestedInnerType.InnerType.class.getDeclaredMethod(BAR));
>, <Line: -        TypeDescription.Generic qux = describe(NestedInnerType.InnerType.class.getDeclaredMethod(QUX));
>, <Line: -        TypeDescription.Generic foo = describe(innerType.getDeclaredMethod(FOO));
>, <Line: -        TypeDescription.Generic bar = describe(innerType.getDeclaredMethod(BAR));
>, <Line: -        TypeDescription.Generic qux = describe(innerType.getDeclaredMethod(QUX));
>, <Line: -        TypeDescription.Generic baz = describe(innerType.getDeclaredMethod(BAZ));
>, <Line: -        TypeDescription.Generic typeDescription = describe(RecursiveTypeVariable.class.getDeclaredField(FOO));
>, <Line: -        assertThat(upperBound.getParameters().size(), is(1));
>, <Line: -        assertThat(upperBound.getParameters().getOnly(), is(typeDescription));
>, <Line: -        TypeDescription.Generic foo = describe(BackwardsReferenceTypeVariable.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic bar = describe(BackwardsReferenceTypeVariable.class.getDeclaredField(BAR));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(superType.getParameters().size(), is(2));
>, <Line: -        assertThat(superType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        assertThat(superType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        assertThat(fieldType.getParameters().size(), is(2));
>, <Line: -        assertThat(fieldType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        assertThat(fieldType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        assertThat(methodReturnType.getParameters().size(), is(2));
>, <Line: -        assertThat(methodReturnType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        assertThat(methodReturnType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        assertThat(methodParameterType.getParameters().size(), is(2));
>, <Line: -        assertThat(methodParameterType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        assertThat(methodParameterType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(interfaceType.getParameters().size(), is(2));
>, <Line: -        assertThat(interfaceType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        assertThat(interfaceType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        assertThat(methodReturnType.getParameters().size(), is(2));
>, <Line: -        assertThat(methodReturnType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        assertThat(methodReturnType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        assertThat(methodParameterType.getParameters().size(), is(2));
>, <Line: -        assertThat(methodParameterType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        assertThat(methodParameterType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(BAR));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(BAR));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(QUX));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(superSuperType.getParameters().size(), is(2));
>, <Line: -        assertThat(superSuperType.getParameters().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superSuperType.getParameters().get(0).asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superSuperType.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superSuperType.getParameters().get(1).asErasure().represents(List.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(QUX));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(superInterfaceType.getParameters().size(), is(2));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(0).asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(1).asErasure().represents(List.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(BAZ));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(superSuperType.getParameters().size(), is(2));
>, <Line: -        assertThat(superSuperType.getParameters().get(0).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: -        assertThat(superSuperType.getParameters().get(0).asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superSuperType.getParameters().get(0).getParameters().size(), is(1));
>, <Line: -        assertThat(superSuperType.getParameters().get(0).getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superSuperType.getParameters().get(0).getParameters().getOnly().asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superSuperType.getParameters().get(1).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: -        assertThat(superSuperType.getParameters().get(1).asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superSuperType.getParameters().get(1).getParameters().size(), is(1));
>, <Line: -        assertThat(superSuperType.getParameters().get(1).getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superSuperType.getParameters().get(1).getParameters().getOnly().asErasure().represents(String.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(BAZ));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(1));
>, <Line: -        assertThat(superInterfaceType.getParameters().size(), is(2));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(0).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(0).asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(0).getParameters().size(), is(1));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(0).getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(0).getParameters().getOnly().asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(1).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(1).asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(1).getParameters().size(), is(1));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(1).getParameters().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superInterfaceType.getParameters().get(1).getParameters().getOnly().asErasure().represents(String.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(FOO + BAR));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(2));
>, <Line: -        assertThat(superType.getParameters().size(), is(2));
>, <Line: -        assertThat(superType.getParameters().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        assertThat(superType.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(superType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        TypeDescription.Generic typeDescription = describe(TypeResolution.class.getDeclaredField(FOO + BAR));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(2));
>, <Line: -        assertThat(interfaceType.getParameters().size(), is(2));
>, <Line: -        assertThat(interfaceType.getParameters().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(interfaceType.getParameters().get(0), is((TypeDefinition) new TypeDescription.ForLoadedType(Bar.class)));
>, <Line: -        assertThat(interfaceType.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(interfaceType.getParameters().get(1), is((TypeDefinition) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(2));
>, <Line: -        assertThat(typeDescription.getParameters().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().get(0).asErasure().represents(Number.class), is(true));
>, <Line: -        assertThat(typeDescription.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().get(1).asErasure().represents(Integer.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(2));
>, <Line: -        assertThat(typeDescription.getParameters().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().get(0).asErasure().represents(Number.class), is(true));
>, <Line: -        assertThat(typeDescription.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().get(1).asErasure().represents(Integer.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        assertThat(typeDescription.getParameters().size(), is(2));
>, <Line: -        assertThat(typeDescription.getParameters().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().get(0).asErasure().represents(Number.class), is(true));
>, <Line: -        assertThat(typeDescription.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(typeDescription.getParameters().get(1).asErasure().represents(Integer.class), is(true));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(BAR)).getSuperType();
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(BAR)).getSuperType();
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(MemberVariable.class.getDeclaredField(FOO));
>, <Line: -        TypeDescription.Generic typeDescription = describe(GenericDisintegrator.make());
>, <Line: -        assertThat(describe(SimpleParameterizedType.class.getDeclaredField(FOO))
>, <Line: -        assertThat(describe(SimpleParameterizedType.class.getDeclaredField(FOO))
>]