[<Line: +package net.bytebuddy.agent.builder;
>, <Line: +import net.bytebuddy.description.type.TypeDescription;
>, <Line: +import net.bytebuddy.matcher.ElementMatcher;
>, <Line: +import net.bytebuddy.test.utility.MockitoRule;
>, <Line: +import net.bytebuddy.test.utility.ObjectPropertyAssertion;
>, <Line: +import net.bytebuddy.utility.JavaModule;
>, <Line: +import org.junit.Rule;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.rules.TestRule;
>, <Line: +import org.mockito.Mock;
>, <Line: +import java.security.ProtectionDomain;
>, <Line: +import static org.hamcrest.CoreMatchers.is;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +import static org.mockito.Mockito.*;
>, <Line: +public class AgentBuilderRawMatcherForElementMatchersTest {
>, <Line: +    @Rule
>, <Line: +    public TestRule mockitoRule = new MockitoRule(this);
>, <Line: +    @Mock
>, <Line: +    private ElementMatcher<TypeDescription> typeMatcher;
>, <Line: +    @Mock
>, <Line: +    private ElementMatcher<ClassLoader> classLoaderMatcher;
>, <Line: +    @Mock
>, <Line: +    private ElementMatcher<JavaModule> moduleMatcher;
>, <Line: +    @Mock
>, <Line: +    private TypeDescription typeDescription;
>, <Line: +    @Mock
>, <Line: +    private ClassLoader classLoader;
>, <Line: +    @Mock
>, <Line: +    private JavaModule module;
>, <Line: +    @Mock
>, <Line: +    private ProtectionDomain protectionDomain;
>, <Line: +    @Test
>, <Line: +    public void testNoneMatches() throws Exception {
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(false));
>, <Line: +        verify(moduleMatcher).matches(module);
>, <Line: +        verifyNoMoreInteractions(moduleMatcher);
>, <Line: +        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: +        verifyZeroInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testModuleMatches() throws Exception {
>, <Line: +        when(moduleMatcher.matches(module)).thenReturn(true);
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(false));
>, <Line: +        verify(moduleMatcher).matches(module);
>, <Line: +        verifyNoMoreInteractions(moduleMatcher);
>, <Line: +        verify(classLoaderMatcher).matches(classLoader);
>, <Line: +        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: +        verifyZeroInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassLoaderMatches() throws Exception {
>, <Line: +        when(classLoaderMatcher.matches(classLoader)).thenReturn(true);
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(false));
>, <Line: +        verify(moduleMatcher).matches(module);
>, <Line: +        verifyNoMoreInteractions(moduleMatcher);
>, <Line: +        verifyZeroInteractions(classLoaderMatcher);
>, <Line: +        verifyNoMoreInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testModuleAndClassLoaderMatches() throws Exception {
>, <Line: +        when(moduleMatcher.matches(module)).thenReturn(true);
>, <Line: +        when(classLoaderMatcher.matches(classLoader)).thenReturn(true);
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(false));
>, <Line: +        verify(moduleMatcher).matches(module);
>, <Line: +        verifyNoMoreInteractions(moduleMatcher);
>, <Line: +        verify(classLoaderMatcher).matches(classLoader);
>, <Line: +        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: +        verify(typeMatcher).matches(typeDescription);
>, <Line: +        verifyNoMoreInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testModuleAndTypeMatches() throws Exception {
>, <Line: +        when(moduleMatcher.matches(module)).thenReturn(true);
>, <Line: +        when(typeMatcher.matches(typeDescription)).thenReturn(true);
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(false));
>, <Line: +        verify(moduleMatcher).matches(module);
>, <Line: +        verifyNoMoreInteractions(moduleMatcher);
>, <Line: +        verify(classLoaderMatcher).matches(classLoader);
>, <Line: +        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: +        verifyZeroInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testClassLoaderAndTypeMatches() throws Exception {
>, <Line: +        when(classLoaderMatcher.matches(classLoader)).thenReturn(true);
>, <Line: +        when(typeMatcher.matches(typeDescription)).thenReturn(true);
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(false));
>, <Line: +        verify(moduleMatcher).matches(module);
>, <Line: +        verifyNoMoreInteractions(moduleMatcher);
>, <Line: +        verifyZeroInteractions(classLoaderMatcher);
>, <Line: +        verifyZeroInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testTypeMatches() throws Exception {
>, <Line: +        when(typeMatcher.matches(typeDescription)).thenReturn(true);
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(false));
>, <Line: +        verify(moduleMatcher).matches(module);
>, <Line: +        verifyNoMoreInteractions(moduleMatcher);
>, <Line: +        verifyZeroInteractions(classLoaderMatcher);
>, <Line: +        verifyZeroInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testAllMatches() throws Exception {
>, <Line: +        when(moduleMatcher.matches(module)).thenReturn(true);
>, <Line: +        when(classLoaderMatcher.matches(classLoader)).thenReturn(true);
>, <Line: +        when(typeMatcher.matches(typeDescription)).thenReturn(true);
>, <Line: +        assertThat(new AgentBuilder.RawMatcher.ForElementMatchers(typeMatcher, classLoaderMatcher, moduleMatcher)
>, <Line: +                .matches(typeDescription, classLoader, module, Object.class, protectionDomain), is(true));
>, <Line: +        verify(classLoaderMatcher).matches(classLoader);
>, <Line: +        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: +        verify(typeMatcher).matches(typeDescription);
>, <Line: +        verifyNoMoreInteractions(typeMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testObjectProperties() throws Exception {
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.RawMatcher.ForElementMatchers.class).apply();
>, <Line: +    }
>, <Line: +}
>]
[]