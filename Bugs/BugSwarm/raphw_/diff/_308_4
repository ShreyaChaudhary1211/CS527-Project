[<Line: +    private final List<Class<?>> standardTypes;
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +        class MemberType {
>, <Line: +            /* empty */
>, <Line: +        constructorType = MemberType.class;
>, <Line: +        standardTypes = Arrays.asList(Object.class,
>, <Line: +                SampleClass.class,
>, <Line: +                void.class,
>, <Line: +                byte.class,
>, <Line: +                short.class,
>, <Line: +                char.class,
>, <Line: +                int.class,
>, <Line: +                long.class,
>, <Line: +                float.class,
>, <Line: +                double.class,
>, <Line: +                Object[].class,
>, <Line: +                MemberType.class,
>, <Line: +                MemberType[].class,
>, <Line: +                new Object() {
>, <Line: +                    /* empty */
>, <Line: +                }.getClass());
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +    @Test
>, <Line: +    public void testIsMemberClass() throws Exception {
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +            assertThat(describe(type).isMemberClass(), is(type.isMemberClass()));
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testIsAnonymousClass() throws Exception {
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +            assertThat(describe(type).isAnonymousClass(), is(type.isAnonymousClass()));
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testIsLocalClass() throws Exception {
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +            assertThat(describe(type).isLocalClass(), is(type.isLocalClass()));
>, <Line: +        }
>, <Line: +    }
>, <Line: +        for (Class<?> type : standardTypes) {
>, <Line: +        for (Class<?> type : standardTypes) {
>]
[<Line: -    @SuppressWarnings("unchecked")
>, <Line: -    private static final List<Class<?>> TYPES = Arrays.asList(Object.class,
>, <Line: -            SampleClass.class,
>, <Line: -            void.class,
>, <Line: -            byte.class,
>, <Line: -            short.class,
>, <Line: -            char.class,
>, <Line: -            int.class,
>, <Line: -            long.class,
>, <Line: -            float.class,
>, <Line: -            double.class,
>, <Line: -            Object[].class);
>, <Line: -        class ConstructorType {
>, <Line: -        constructorType = ConstructorType.class;
>, <Line: -        for (Class<?> type : TYPES) {
>, <Line: -        for (Class<?> type : TYPES) {
>, <Line: -        for (Class<?> type : TYPES) {
>, <Line: -        for (Class<?> type : TYPES) {
>, <Line: -        for (Class<?> type : TYPES) {
>, <Line: -        for (Class<?> type : TYPES) {
>, <Line: -        for (Class<?> type : TYPES) {
>]