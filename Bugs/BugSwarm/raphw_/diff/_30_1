[<Line: +package net.bytebuddy.description.modifier;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.runner.RunWith;
>, <Line: +import org.junit.runners.Parameterized;
>, <Line: +import org.objectweb.asm.Opcodes;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.Collection;
>, <Line: +import static org.hamcrest.CoreMatchers.is;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +@RunWith(Parameterized.class)
>, <Line: +public class FieldPersistenceTest extends AbstractModifierContributorTest {
>, <Line: +    private final boolean isTransient;
>, <Line: +    public FieldPersistenceTest(ModifierContributor modifierContributor,
>, <Line: +                                int expectedModifier,
>, <Line: +                                boolean defaultModifier,
>, <Line: +                                boolean isTransient) {
>, <Line: +        super(modifierContributor, expectedModifier, defaultModifier);
>, <Line: +        this.isTransient = isTransient;
>, <Line: +    }
>, <Line: +    @Parameterized.Parameters
>, <Line: +    public static Collection<Object[]> data() {
>, <Line: +        return Arrays.asList(new Object[][]{
>, <Line: +                {FieldPersistence.PLAIN, 0, true, false},
>, <Line: +                {FieldPersistence.TRANSIENT, Opcodes.ACC_TRANSIENT, false, true},
>, <Line: +                {FieldPersistence.isTransient(false), 0, true, false},
>, <Line: +                {FieldPersistence.isTransient(true), Opcodes.ACC_TRANSIENT, false, true}
>, <Line: +        });
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testProperties() throws Exception {
>, <Line: +        assertThat(((FieldPersistence) modifierContributor).isTransient(), is(isTransient));
>, <Line: +    }
>, <Line: +}
>]
[]