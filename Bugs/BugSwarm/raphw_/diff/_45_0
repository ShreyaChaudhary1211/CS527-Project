[<Line: + * <p>
>, <Line: + * </p>
>, <Line: + * <p>
>, <Line: + * Field accessors always implement a getter if a non-{@code void} value is returned from a method and attempt to define a setter
>, <Line: + * otherwise. If a field accessor is not explicitly defined as a setter via {@link PropertyConfigurable}, an instrumented
>, <Line: + * method must define exactly one parameter. Using the latter API, an explicit parameter index can be defined and a return
>, <Line: + * value can be specified explicitly when {@code void} is not returned.
>, <Line: + * </p>
>, <Line: +        String resolve(MethodDescription methodDescription);
>, <Line: +            public String resolve(MethodDescription methodDescription) {
>, <Line: +             *
>, <Line: +            public String resolve(MethodDescription methodDescription) {
>, <Line: +                FieldLocator.Resolution resolution = fieldLocator.locate(fieldNameExtractor.resolve(instrumentedMethod));
>, <Line: +                FieldLocator.Resolution resolution = fieldLocator.locate(fieldNameExtractor.resolve(instrumentedMethod));
>]
[<Line: -        String fieldNameFor(MethodDescription methodDescription);
>, <Line: -            public String fieldNameFor(MethodDescription methodDescription) {
>, <Line: -            public String fieldNameFor(MethodDescription methodDescription) {
>, <Line: -                FieldLocator.Resolution resolution = fieldLocator.locate(fieldNameExtractor.fieldNameFor(instrumentedMethod));
>, <Line: -                FieldLocator.Resolution resolution = fieldLocator.locate(fieldNameExtractor.fieldNameFor(instrumentedMethod));
>]