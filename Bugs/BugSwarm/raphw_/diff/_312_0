[<Line: + * <i>read-only</i>. In the latter case, it suffices that a parameter type is a super type of the corresponding type of the instrumented method.
>, <Line: + * parameter's type must be equal to the instrumented method's return type if it is not set to <i>read-only</i> where it suffices to declare the
>, <Line: + * to be <i>read-only</i>, it suffices that the annotated parameter is of a super type of the return type of the method annotated by
>, <Line: +                /**
>, <Line: +                 * Indicates a read-only mapping for an offset.
>, <Line: +                 */
>, <Line: +                             *
>, <Line: +                         * Determines if the parameter is to be treated as read-only.
>, <Line: +                         * @param targetType Determines if the parameter is to be treated as read-only.
>, <Line: +                         * @param readOnly   Determines if the parameter is to be treated as read-only.
>, <Line: +                                throw new IllegalStateException("read-only " + targetType + " is not equal to type of " + parameters.get(index));
>, <Line: +                         * Determines if the parameter is to be treated as read-only.
>, <Line: +                         * @param readOnly  Determines if the parameter is to be treated as read-only.
>, <Line: +                                throw new IllegalStateException("Declaring type of " + instrumentedMethod + " is not equal to read-only " + targetType);
>, <Line: +                         * Determines if the parameter is to be treated as read-only.
>, <Line: +                         * @param readOnly Determines if the parameter is to be treated as read-only.
>, <Line: +                         * @param readOnly {@code true} if the value is to be treated as read-only.
>, <Line: +                                        throw new IllegalStateException("read-only type of " + parameterDescription + " does not equal " + enterType);
>, <Line: +                         * Determines if the parameter is to be treated as read-only.
>, <Line: +                         * @param readOnly   Determines if the parameter is to be treated as read-only.
>, <Line: +                                throw new IllegalStateException("read-only return type of " + instrumentedMethod + " is not equal to " + targetType);
>, <Line: +                /**
>, <Line: +                 * A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: +                 */
>, <Line: +                 * @param offsetMappings     A mapping of offsets to resolved target offsets in the instrumented method.
>, <Line: +                            throw new IllegalStateException("Cannot write to read-only variable " + target);
>, <Line: +         * @return {@code true} if this parameter is read-only.
>, <Line: +         * @return {@code true} if this parameter is read-only.
>, <Line: +         * @return {@code true} if this parameter is read-only.
>, <Line: +         * @return {@code true} if this parameter is read-only.
>]
[<Line: - * <i>read only</i>. In the latter case, it suffices that a parameter type is a super type of the corresponding type of the instrumented method.
>, <Line: - * parameter's type must be equal to the instrumented method's return type if it is not set to <i>read only</i> where it suffices to declare the
>, <Line: - * to be <i>read only</i>, it suffices that the annotated parameter is of a super type of the return type of the method annotated by
>, <Line: -                         * Determines if the parameter is to be treated as read only.
>, <Line: -                         * @param targetType Determines if the parameter is to be treated as read only.
>, <Line: -                         * @param readOnly   Determines if the parameter is to be treated as read only.
>, <Line: -                                throw new IllegalStateException("Read only " + targetType + " is not equal to type of " + parameters.get(index));
>, <Line: -                         * Determines if the parameter is to be treated as read only.
>, <Line: -                                throw new IllegalStateException("Declaring type of " + instrumentedMethod + " is not equal to read only " + targetType);
>, <Line: -                         * Determines if the parameter is to be treated as read only.
>, <Line: -                         * @param readOnly Determines if the parameter is to be treated as read only.
>, <Line: -                         * @param readOnly {@code true} if the value is to be treated as read only.
>, <Line: -                                        throw new IllegalStateException("Read only type of " + parameterDescription + " does not equal " + enterType);
>, <Line: -                         * Determines if the parameter is to be treated as read only.
>, <Line: -                         * @param readOnly   Determines if the parameter is to be treated as read only.
>, <Line: -                                throw new IllegalStateException("Read only return type of " + instrumentedMethod + " is not equal to " + targetType);
>, <Line: -                 * @param offsetMappings     A mapping of offsets of the advise methods to their corresponding offsets in the instrumented method.
>, <Line: -                            throw new IllegalStateException("Cannot write to read only variable " + target);
>, <Line: -         * @return {@code true} if this parameter is read only.
>, <Line: -         * @return {@code true} if this parameter is read only.
>, <Line: -         * @return {@code true} if this parameter is read only.
>, <Line: -         * @return {@code true} if this parameter is read only.
>]