[<Line: +import net.bytebuddy.dynamic.scaffold.MethodGraph;
>, <Line: +import java.util.Collections;
>, <Line: +import static net.bytebuddy.matcher.ElementMatchers.named;
>, <Line: +                .methodGraphCompiler(PrecomputedMethodGraph.INSTANCE)
>, <Line: +    /**
>, <Line: +     * A precomputed method graph that only displays the methods that are relevant for creating a method call proxy.
>, <Line: +     */
>, <Line: +    protected enum PrecomputedMethodGraph implements MethodGraph.Compiler {
>, <Line: +        /**
>, <Line: +         * The singleton instance.
>, <Line: +         */
>, <Line: +        INSTANCE;
>, <Line: +        /**
>, <Line: +         * The precomputed method graph.
>, <Line: +         */
>, <Line: +        private final MethodGraph.Linked methodGraph;
>, <Line: +        PrecomputedMethodGraph() {
>, <Line: +            LinkedHashMap<MethodDescription.Token, MethodGraph.Node> nodes = new LinkedHashMap<MethodDescription.Token, MethodGraph.Node>(2);
>, <Line: +            MethodDescription callMethod = new TypeDescription.ForLoadedType(Callable.class).getDeclaredMethods().filter(named("call")).getOnly();
>, <Line: +            nodes.put(callMethod.asToken(), new MethodGraph.Node.Simple(callMethod));
>, <Line: +            MethodDescription runMethod = new TypeDescription.ForLoadedType(Runnable.class).getDeclaredMethods().filter(named("run")).getOnly();
>, <Line: +            nodes.put(runMethod.asToken(), new MethodGraph.Node.Simple(runMethod));
>, <Line: +            MethodGraph methodGraph = new MethodGraph.Simple(nodes);
>, <Line: +            this.methodGraph = new MethodGraph.Linked.Delegation(methodGraph, methodGraph, Collections.<TypeDescription, MethodGraph>emptyMap());
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public MethodGraph.Linked compile(TypeDescription typeDescription) {
>, <Line: +            return compile(typeDescription, typeDescription);
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public MethodGraph.Linked compile(TypeDescription typeDescription, TypeDescription viewPoint) {
>, <Line: +            return methodGraph;
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        public String toString() {
>, <Line: +            return "MethodCallProxy.PrecomputedMethodGraph." + name();
>, <Line: +        }
>, <Line: +    }
>]
[]