[<Line: +public class ClassLoaderHierarchyMatcher<T extends ClassLoader> extends ElementMatcher.Junction.AbstractBase<T> {
>, <Line: +    private final ElementMatcher<? super ClassLoader> matcher;
>, <Line: +     * @param matcher The matcher to apply on each class loader in the hierarchy.
>, <Line: +    public ClassLoaderHierarchyMatcher(ElementMatcher<? super ClassLoader> matcher) {
>, <Line: +        this.matcher = matcher;
>, <Line: +            if (matcher.matches(current)) {
>, <Line: +        return matcher.matches(null);
>, <Line: +                && matcher.equals(((ClassLoaderHierarchyMatcher<?>) other).matcher);
>, <Line: +        return matcher.hashCode();
>, <Line: +        return "hasChild(" + matcher + ')';
>]
[<Line: -public class ClassLoaderHierarchyMatcher<T extends ClassLoader> implements ElementMatcher<T> {
>, <Line: -    private final ElementMatcher<? super ClassLoader> classLoaderMatcher;
>, <Line: -     * @param classLoaderMatcher The matcher to apply on each class loader in the hierarchy.
>, <Line: -    public ClassLoaderHierarchyMatcher(ElementMatcher<? super ClassLoader> classLoaderMatcher) {
>, <Line: -        this.classLoaderMatcher = classLoaderMatcher;
>, <Line: -            if (classLoaderMatcher.matches(current)) {
>, <Line: -        return classLoaderMatcher.matches(null);
>, <Line: -                && classLoaderMatcher.equals(((ClassLoaderHierarchyMatcher<?>) other).classLoaderMatcher);
>, <Line: -        return classLoaderMatcher.hashCode();
>, <Line: -        return "hasChild(" + classLoaderMatcher + ')';
>]