[<Line: +    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
>, <Line: +                Class<?> type = parent.loadClass(name);
>, <Line: +                if (resolve) {
>, <Line: +                    resolveClass(type);
>, <Line: +                }
>, <Line: +                return type;
>]
[<Line: -import java.lang.reflect.InvocationTargetException;
>, <Line: -import java.lang.reflect.Method;
>, <Line: -import java.security.AccessController;
>, <Line: -import java.security.PrivilegedAction;
>, <Line: -    /**
>, <Line: -     * A dispatcher for accessing the {@link ClassLoader#loadClass(String, boolean)} method.
>, <Line: -     */
>, <Line: -    private static final Dispatcher DISPATCHER = Dispatcher.Active.make();
>, <Line: -    public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
>, <Line: -                return DISPATCHER.loadClass(parent, name, resolve);
>, <Line: -    /**
>, <Line: -     * A dispatcher for locating a class from a parent class loader.
>, <Line: -     */
>, <Line: -    protected interface Dispatcher {
>, <Line: -        /**
>, <Line: -         * Locates a class.
>, <Line: -         *
>, <Line: -         * @param classLoader The class loader to access.
>, <Line: -         * @param name        The name of the class.
>, <Line: -         * @param resolve     {@code true} if the class should be resolved.
>, <Line: -         * @return The loaded class.
>, <Line: -         * @throws ClassNotFoundException If the class could not be found.
>, <Line: -         */
>, <Line: -        Class<?> loadClass(ClassLoader classLoader, String name, boolean resolve) throws ClassNotFoundException;
>, <Line: -        /**
>, <Line: -         * An active dispatcher for the {@link ClassLoader#loadClass(String, boolean)} method.
>, <Line: -         */
>, <Line: -        class Active implements Dispatcher, PrivilegedAction<Dispatcher> {
>, <Line: -            /**
>, <Line: -             * The {@link ClassLoader#loadClass(String, boolean)} method.
>, <Line: -             */
>, <Line: -            private final Method loadClass;
>, <Line: -            /**
>, <Line: -             * Creates a new active dispatcher.
>, <Line: -             *
>, <Line: -             * @param loadClass The {@link ClassLoader#loadClass(String, boolean)} method.
>, <Line: -             */
>, <Line: -            protected Active(Method loadClass) {
>, <Line: -                this.loadClass = loadClass;
>, <Line: -            }
>, <Line: -            /**
>, <Line: -             * Creates a new dispatcher.
>, <Line: -             *
>, <Line: -             * @return A dispatcher for invoking the {@link ClassLoader#loadClass(String, boolean)} method.
>, <Line: -             */
>, <Line: -            @SuppressFBWarnings(value = "REC_CATCH_EXCEPTION", justification = "Exception should not be rethrown but trigger a fallback")
>, <Line: -            protected static Dispatcher make() {
>, <Line: -                try {
>, <Line: -                    return AccessController.doPrivileged(new Active(ClassLoader.class.getDeclaredMethod("loadClass", String.class, boolean.class)));
>, <Line: -                } catch (Exception exception) {
>, <Line: -                    return new Erroneous(exception);
>, <Line: -                }
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public Dispatcher run() {
>, <Line: -                loadClass.setAccessible(true);
>, <Line: -                return this;
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public Class<?> loadClass(ClassLoader classLoader, String name, boolean resolve) throws ClassNotFoundException {
>, <Line: -                try {
>, <Line: -                    return (Class<?>) loadClass.invoke(classLoader, name, resolve);
>, <Line: -                } catch (IllegalAccessException exception) {
>, <Line: -                    throw new IllegalStateException("Cannot access " + loadClass, exception);
>, <Line: -                } catch (InvocationTargetException exception) {
>, <Line: -                    Throwable cause = exception.getCause();
>, <Line: -                    if (cause instanceof ClassNotFoundException) {
>, <Line: -                        throw (ClassNotFoundException) cause;
>, <Line: -                    }
>, <Line: -                    throw new IllegalStateException("Cannot execute " + loadClass, cause);
>, <Line: -                }
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public boolean equals(Object object) {
>, <Line: -                if (this == object) return true;
>, <Line: -                if (object == null || getClass() != object.getClass()) return false;
>, <Line: -                Active active = (Active) object;
>, <Line: -                return loadClass.equals(active.loadClass);
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public int hashCode() {
>, <Line: -                return loadClass.hashCode();
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public String toString() {
>, <Line: -                return "MultipleParentClassLoader.Dispatcher.Active{" +
>, <Line: -                        "loadClass=" + loadClass +
>, <Line: -                        '}';
>, <Line: -            }
>, <Line: -        }
>, <Line: -        /**
>, <Line: -         * A dispatcher when the {@link ClassLoader#loadClass(String, boolean)} method cannot be accessed.
>, <Line: -         */
>, <Line: -        class Erroneous implements Dispatcher {
>, <Line: -            /**
>, <Line: -             * The exception that occurred when attempting to create a dispatcher.
>, <Line: -             */
>, <Line: -            private final Exception exception;
>, <Line: -            /**
>, <Line: -             * Creates a new erroneous dispatcher.
>, <Line: -             *
>, <Line: -             * @param exception The exception that occurred when attempting to create a dispatcher.
>, <Line: -             */
>, <Line: -            protected Erroneous(Exception exception) {
>, <Line: -                this.exception = exception;
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public Class<?> loadClass(ClassLoader classLoader, String name, boolean resolve) {
>, <Line: -                throw new IllegalStateException("Cannot access parent class", exception);
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public boolean equals(Object object) {
>, <Line: -                if (this == object) return true;
>, <Line: -                if (object == null || getClass() != object.getClass()) return false;
>, <Line: -                Erroneous erroneous = (Erroneous) object;
>, <Line: -                return exception.equals(erroneous.exception);
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public int hashCode() {
>, <Line: -                return exception.hashCode();
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public String toString() {
>, <Line: -                return "MultipleParentClassLoader.Dispatcher.Erroneous{" +
>, <Line: -                        "exception=" + exception +
>, <Line: -                        '}';
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>]