[<Line: +                } else if (!resolution.getField().getType().asErasure().isVisibleTo(instrumentedType)) {
>, <Line: +                    throw new IllegalStateException(resolution.getField() + " is not visible to " + instrumentedType);
>, <Line: +                return matcher.equals(forField.matcher)
>, <Line: +                        && fieldName.equals(forField.fieldName)
>, <Line: +                        && fieldLocatorFactory.equals(forField.fieldLocatorFactory)
>, <Line: +                        && methodGraphCompiler.equals(forField.methodGraphCompiler);
>, <Line: +                if (!fieldType.asErasure().isVisibleTo(instrumentedType)) {
>, <Line: +                    throw new IllegalStateException(fieldType + " is not visible to " + instrumentedType);
>, <Line: +                }
>]
[<Line: -                if (!matcher.equals(forField.matcher)) return false;
>, <Line: -                if (!fieldName.equals(forField.fieldName)) return false;
>, <Line: -                if (!fieldLocatorFactory.equals(forField.fieldLocatorFactory)) return false;
>, <Line: -                return methodGraphCompiler.equals(forField.methodGraphCompiler);
>]