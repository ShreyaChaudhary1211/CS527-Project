[<Line: +    private final ElementMatcher<? super TypeDescription.Generic> matcher;
>, <Line: +     * @param matcher The type matcher to apply to the matched field's type.
>, <Line: +    public FieldTypeMatcher(ElementMatcher<? super TypeDescription.Generic> matcher) {
>, <Line: +        this.matcher = matcher;
>, <Line: +        return matcher.matches(target.getType());
>, <Line: +                && matcher.equals(((FieldTypeMatcher<?>) other).matcher);
>, <Line: +        return matcher.hashCode();
>, <Line: +        return "ofType(" + matcher + ")";
>]
[<Line: -    private final ElementMatcher<? super TypeDescription.Generic> typeMatcher;
>, <Line: -     * @param typeMatcher The type matcher to apply to the matched field's type.
>, <Line: -    public FieldTypeMatcher(ElementMatcher<? super TypeDescription.Generic> typeMatcher) {
>, <Line: -        this.typeMatcher = typeMatcher;
>, <Line: -        return typeMatcher.matches(target.getType());
>, <Line: -                && typeMatcher.equals(((FieldTypeMatcher<?>) other).typeMatcher);
>, <Line: -        return typeMatcher.hashCode();
>, <Line: -        return "ofType(" + typeMatcher + ")";
>]