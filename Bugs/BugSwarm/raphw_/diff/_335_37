[<Line: +import net.bytebuddy.utility.JavaModule;
>, <Line: +    private TypeDescription typeDescription;
>, <Line: +    private JavaModule module;
>, <Line: +    @Mock
>, <Line: +    private DynamicType dynamicType;
>, <Line: +        AgentBuilder.Listener.NoOp.INSTANCE.onTransformation(typeDescription, classLoader, module, dynamicType);
>, <Line: +        AgentBuilder.Listener.NoOp.INSTANCE.onError(FOO, classLoader, module, throwable);
>, <Line: +        AgentBuilder.Listener.NoOp.INSTANCE.onIgnored(typeDescription, classLoader, module);
>, <Line: +        AgentBuilder.Listener.NoOp.INSTANCE.onComplete(FOO, classLoader, module);
>, <Line: +        listener.onTransformation(typeDescription, classLoader, module, dynamicType);
>, <Line: +        listener.onError(FOO, classLoader, module, throwable);
>, <Line: +        listener.onIgnored(typeDescription, classLoader, module);
>, <Line: +        listener.onComplete(FOO, classLoader, module);
>, <Line: +        new AgentBuilder.Listener.Compound(first, second).onTransformation(typeDescription, classLoader, module, dynamicType);
>, <Line: +        verify(first).onTransformation(typeDescription, classLoader, module, dynamicType);
>, <Line: +        verify(second).onTransformation(typeDescription, classLoader, module, dynamicType);
>, <Line: +        new AgentBuilder.Listener.Compound(first, second).onError(FOO, classLoader, module, throwable);
>, <Line: +        verify(first).onError(FOO, classLoader, module, throwable);
>, <Line: +        verify(second).onError(FOO, classLoader, module, throwable);
>, <Line: +        new AgentBuilder.Listener.Compound(first, second).onIgnored(typeDescription, classLoader, module);
>, <Line: +        verify(first).onIgnored(typeDescription, classLoader, module);
>, <Line: +        verify(second).onIgnored(typeDescription, classLoader, module);
>, <Line: +        new AgentBuilder.Listener.Compound(first, second).onComplete(FOO, classLoader, module);
>, <Line: +        verify(first).onComplete(FOO, classLoader, module);
>, <Line: +        verify(second).onComplete(FOO, classLoader, module);
>, <Line: +        listener.onTransformation(typeDescription, classLoader, module, dynamicType);
>, <Line: +        verify(printStream).println("[Byte Buddy] TRANSFORM " + FOO + "[" + classLoader + ", " + module + "]");
>, <Line: +        listener.onError(FOO, classLoader, module, throwable);
>, <Line: +        verify(printStream).println("[Byte Buddy] ERROR " + FOO + "[" + classLoader + ", " + module + "]");
>, <Line: +        listener.onComplete(FOO, classLoader, module);
>, <Line: +        verify(printStream).println("[Byte Buddy] COMPLETE " + FOO + "[" + classLoader + ", " + module + "]");
>, <Line: +        listener.onIgnored(typeDescription, classLoader, module);
>, <Line: +        verify(printStream).println("[Byte Buddy] IGNORE " + FOO + "[" + classLoader + ", " + module + "]");
>]
[<Line: -    private DynamicType dynamicType;
>, <Line: -    private TypeDescription typeDescription;
>, <Line: -        AgentBuilder.Listener.NoOp.INSTANCE.onTransformation(typeDescription, classLoader, dynamicType);
>, <Line: -        AgentBuilder.Listener.NoOp.INSTANCE.onError(FOO, classLoader, throwable);
>, <Line: -        AgentBuilder.Listener.NoOp.INSTANCE.onIgnored(typeDescription, classLoader);
>, <Line: -        AgentBuilder.Listener.NoOp.INSTANCE.onComplete(FOO, classLoader);
>, <Line: -        listener.onTransformation(typeDescription, classLoader, dynamicType);
>, <Line: -        listener.onError(FOO, classLoader, throwable);
>, <Line: -        listener.onIgnored(typeDescription, classLoader);
>, <Line: -        listener.onComplete(FOO, classLoader);
>, <Line: -        new AgentBuilder.Listener.Compound(first, second).onTransformation(typeDescription, classLoader, dynamicType);
>, <Line: -        verify(first).onTransformation(typeDescription, classLoader, dynamicType);
>, <Line: -        verify(second).onTransformation(typeDescription, classLoader, dynamicType);
>, <Line: -        new AgentBuilder.Listener.Compound(first, second).onError(FOO, classLoader, throwable);
>, <Line: -        verify(first).onError(FOO, classLoader, throwable);
>, <Line: -        verify(second).onError(FOO, classLoader, throwable);
>, <Line: -        new AgentBuilder.Listener.Compound(first, second).onIgnored(typeDescription, classLoader);
>, <Line: -        verify(first).onIgnored(typeDescription, classLoader);
>, <Line: -        verify(second).onIgnored(typeDescription, classLoader);
>, <Line: -        new AgentBuilder.Listener.Compound(first, second).onComplete(FOO, classLoader);
>, <Line: -        verify(first).onComplete(FOO, classLoader);
>, <Line: -        verify(second).onComplete(FOO, classLoader);
>, <Line: -        listener.onTransformation(typeDescription, classLoader, dynamicType);
>, <Line: -        verify(printStream).println("[Byte Buddy] TRANSFORM " + FOO);
>, <Line: -        listener.onError(FOO, classLoader, throwable);
>, <Line: -        verify(printStream).println("[Byte Buddy] ERROR " + FOO);
>, <Line: -        listener.onComplete(FOO, classLoader);
>, <Line: -        verify(printStream).println("[Byte Buddy] COMPLETE " + FOO);
>, <Line: -        listener.onIgnored(typeDescription, classLoader);
>, <Line: -        verify(printStream).println("[Byte Buddy] IGNORE " + FOO);
>]