[<Line: +        assertThat(describe(firstMethod), not(describe(secondMethod)));
>, <Line: +        assertThat(describe(firstMethod), not(describe(thirdMethod)));
>, <Line: +        assertThat(describe(firstMethod), is(describe(firstMethod)));
>, <Line: +        assertThat(describe(secondMethod), is(describe(secondMethod)));
>, <Line: +        assertThat(describe(thirdMethod), is(describe(thirdMethod)));
>, <Line: +        assertThat(describe(firstConstructor), not(describe(secondConstructor)));
>, <Line: +        assertThat(describe(firstConstructor), is(describe(firstConstructor)));
>, <Line: +        assertThat(describe(secondConstructor), is(describe(secondConstructor)));
>, <Line: +        assertThat(describe(firstMethod).hashCode(), not(hashCode(secondMethod)));
>, <Line: +        assertThat(describe(firstMethod).hashCode(), not(hashCode(thirdMethod)));
>, <Line: +        assertThat(describe(firstMethod).hashCode(), not(hashCode(firstConstructor)));
>, <Line: +        assertThat(describe(firstMethod).hashCode(), not(hashCode(secondConstructor)));
>, <Line: +        assertThat(describe(firstConstructor).hashCode(), not(hashCode(firstMethod)));
>, <Line: +        assertThat(describe(firstConstructor).hashCode(), not(hashCode(secondMethod)));
>, <Line: +        assertThat(describe(firstConstructor).hashCode(), not(hashCode(thirdMethod)));
>, <Line: +        assertThat(describe(firstConstructor).hashCode(), not(hashCode(secondConstructor)));
>, <Line: +        assertThat(identical, is(identical));
>, <Line: +        assertThat(describe(firstMethod), is(describe(firstMethod)));
>, <Line: +        assertThat(describe(firstMethod), not(describe(secondMethod)));
>, <Line: +        assertThat(describe(firstMethod), not(describe(thirdMethod)));
>, <Line: +        assertThat(describe(firstMethod), not(describe(firstConstructor)));
>, <Line: +        assertThat(describe(firstMethod), not(describe(secondConstructor)));
>, <Line: +        assertThat(describe(firstMethod), is((MethodDescription) new MethodDescription.ForLoadedMethod(firstMethod)));
>, <Line: +        assertThat(describe(firstMethod), not((MethodDescription) new MethodDescription.ForLoadedMethod(secondMethod)));
>, <Line: +        assertThat(describe(firstMethod), not((MethodDescription) new MethodDescription.ForLoadedMethod(thirdMethod)));
>, <Line: +        assertThat(describe(firstMethod), not((MethodDescription) new MethodDescription.ForLoadedConstructor(firstConstructor)));
>, <Line: +        assertThat(describe(firstMethod), not((MethodDescription) new MethodDescription.ForLoadedConstructor(secondConstructor)));
>, <Line: +        assertThat(describe(firstMethod), is(equalMethod));
>, <Line: +        assertThat(describe(firstMethod), not(equalMethodButName));
>, <Line: +        assertThat(describe(firstMethod), not(equalMethodButReturnType));
>, <Line: +        assertThat(describe(firstMethod), not(equalMethodButDeclaringType));
>, <Line: +        assertThat(describe(firstMethod), not(equalMethodButParameterTypes));
>, <Line: +        assertThat(describe(firstMethod), not(new Object()));
>, <Line: +        assertThat(identical, is(identical));
>, <Line: +        assertThat(describe(firstConstructor), is(describe(firstConstructor)));
>, <Line: +        assertThat(describe(firstConstructor), not(describe(secondConstructor)));
>, <Line: +        assertThat(describe(firstConstructor), not(describe(firstMethod)));
>, <Line: +        assertThat(describe(firstConstructor), not(describe(secondMethod)));
>, <Line: +        assertThat(describe(firstConstructor), not(describe(thirdMethod)));
>, <Line: +        assertThat(describe(firstConstructor), is((MethodDescription) new MethodDescription.ForLoadedConstructor(firstConstructor)));
>, <Line: +        assertThat(describe(firstConstructor), not((MethodDescription) new MethodDescription.ForLoadedConstructor(secondConstructor)));
>, <Line: +        assertThat(describe(firstConstructor), not((MethodDescription) new MethodDescription.ForLoadedMethod(firstMethod)));
>, <Line: +        assertThat(describe(firstConstructor), not((MethodDescription) new MethodDescription.ForLoadedMethod(secondMethod)));
>, <Line: +        assertThat(describe(firstConstructor), not((MethodDescription) new MethodDescription.ForLoadedMethod(thirdMethod)));
>, <Line: +        assertThat(describe(firstConstructor), is(equalMethod));
>, <Line: +        assertThat(describe(firstConstructor), not(equalMethodButName));
>, <Line: +        assertThat(describe(firstConstructor), not(equalMethodButReturnType));
>, <Line: +        assertThat(describe(firstConstructor), not(equalMethodButDeclaringType));
>, <Line: +        assertThat(describe(firstConstructor), not(equalMethodButParameterTypes));
>, <Line: +        assertThat(describe(firstConstructor), not(new Object()));
>, <Line: +        assertThat(identical, is(identical));
>, <Line: +        assertThat(identical, not(new Object()));
>, <Line: +        assertThat(describe(secondMethod).getParameters().get(0), is(equal));
>, <Line: +        assertThat(describe(secondMethod).getParameters().get(0), not(notEqualMethod));
>, <Line: +        assertThat(describe(secondMethod).getParameters().get(0), not(notEqualMethodIndex));
>]
[<Line: -        assertThat(describe(firstMethod), not(equalTo(describe(secondMethod))));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(describe(thirdMethod))));
>, <Line: -        assertThat(describe(firstMethod), equalTo(describe(firstMethod)));
>, <Line: -        assertThat(describe(secondMethod), equalTo(describe(secondMethod)));
>, <Line: -        assertThat(describe(thirdMethod), equalTo(describe(thirdMethod)));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(describe(secondConstructor))));
>, <Line: -        assertThat(describe(firstConstructor), equalTo(describe(firstConstructor)));
>, <Line: -        assertThat(describe(secondConstructor), equalTo(describe(secondConstructor)));
>, <Line: -        assertThat(describe(firstMethod).hashCode(), not(is(hashCode(secondMethod))));
>, <Line: -        assertThat(describe(firstMethod).hashCode(), not(is(hashCode(thirdMethod))));
>, <Line: -        assertThat(describe(firstMethod).hashCode(), not(is(hashCode(firstConstructor))));
>, <Line: -        assertThat(describe(firstMethod).hashCode(), not(is(hashCode(secondConstructor))));
>, <Line: -        assertThat(describe(firstConstructor).hashCode(), not(is(hashCode(firstMethod))));
>, <Line: -        assertThat(describe(firstConstructor).hashCode(), not(is(hashCode(secondMethod))));
>, <Line: -        assertThat(describe(firstConstructor).hashCode(), not(is(hashCode(thirdMethod))));
>, <Line: -        assertThat(describe(firstConstructor).hashCode(), not(is(hashCode(secondConstructor))));
>, <Line: -        assertThat(identical, equalTo(identical));
>, <Line: -        assertThat(describe(firstMethod), equalTo(describe(firstMethod)));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(describe(secondMethod))));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(describe(thirdMethod))));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(describe(firstConstructor))));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(describe(secondConstructor))));
>, <Line: -        assertThat(describe(firstMethod), equalTo((MethodDescription) new MethodDescription.ForLoadedMethod(firstMethod)));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo((MethodDescription) new MethodDescription.ForLoadedMethod(secondMethod))));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo((MethodDescription) new MethodDescription.ForLoadedMethod(thirdMethod))));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo((MethodDescription) new MethodDescription.ForLoadedConstructor(firstConstructor))));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo((MethodDescription) new MethodDescription.ForLoadedConstructor(secondConstructor))));
>, <Line: -        assertThat(describe(firstMethod), equalTo(equalMethod));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(equalMethodButName)));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(equalMethodButReturnType)));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(equalMethodButDeclaringType)));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(equalMethodButParameterTypes)));
>, <Line: -        assertThat(describe(firstMethod), not(equalTo(new Object())));
>, <Line: -        assertThat(identical, equalTo(identical));
>, <Line: -        assertThat(describe(firstConstructor), equalTo(describe(firstConstructor)));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(describe(secondConstructor))));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(describe(firstMethod))));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(describe(secondMethod))));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(describe(thirdMethod))));
>, <Line: -        assertThat(describe(firstConstructor), equalTo((MethodDescription) new MethodDescription.ForLoadedConstructor(firstConstructor)));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo((MethodDescription) new MethodDescription.ForLoadedConstructor(secondConstructor))));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo((MethodDescription) new MethodDescription.ForLoadedMethod(firstMethod))));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo((MethodDescription) new MethodDescription.ForLoadedMethod(secondMethod))));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo((MethodDescription) new MethodDescription.ForLoadedMethod(thirdMethod))));
>, <Line: -        assertThat(describe(firstConstructor), equalTo(equalMethod));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(equalMethodButName)));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(equalMethodButReturnType)));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(equalMethodButDeclaringType)));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(equalMethodButParameterTypes)));
>, <Line: -        assertThat(describe(firstConstructor), not(equalTo(new Object())));
>, <Line: -        assertThat(identical, equalTo(identical));
>, <Line: -        assertThat(identical, not(equalTo(new Object())));
>, <Line: -        assertThat(describe(secondMethod).getParameters().get(0), equalTo(equal));
>, <Line: -        assertThat(describe(secondMethod).getParameters().get(0), not(equalTo(notEqualMethod)));
>, <Line: -        assertThat(describe(secondMethod).getParameters().get(0), not(equalTo(notEqualMethodIndex)));
>]