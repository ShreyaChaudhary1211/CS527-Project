[<Line: +import net.bytebuddy.utility.JavaModule;
>, <Line: +    @Mock
>, <Line: +    private JavaModule module;
>, <Line: +        when(left.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: +        when(right.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: +        assertThat(rawMatcher.matches(typeDescription, classLoader, module, Foo.class, protectionDomain), is(true));
>, <Line: +        verify(left).matches(typeDescription, classLoader, module, Foo.class, protectionDomain);
>, <Line: +        when(left.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: +        when(right.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: +        assertThat(rawMatcher.matches(typeDescription, classLoader, module, Foo.class, protectionDomain), is(true));
>, <Line: +        verify(left).matches(typeDescription, classLoader, module, Foo.class, protectionDomain);
>, <Line: +        when(left.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: +        when(right.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: +        assertThat(rawMatcher.matches(typeDescription, classLoader, module, Foo.class, protectionDomain), is(true));
>, <Line: +        verify(left).matches(typeDescription, classLoader, module, Foo.class, protectionDomain);
>, <Line: +        verify(right).matches(typeDescription, classLoader, module, Foo.class, protectionDomain);
>, <Line: +        when(left.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: +        when(right.matches(typeDescription, classLoader, module, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: +        assertThat(rawMatcher.matches(typeDescription, classLoader, module, Foo.class, protectionDomain), is(false));
>, <Line: +        verify(left).matches(typeDescription, classLoader, module, Foo.class, protectionDomain);
>, <Line: +        verify(right).matches(typeDescription, classLoader, module, Foo.class, protectionDomain);
>]
[<Line: -        when(left.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: -        when(right.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: -        assertThat(rawMatcher.matches(typeDescription, classLoader, Foo.class, protectionDomain), is(true));
>, <Line: -        verify(left).matches(typeDescription, classLoader, Foo.class, protectionDomain);
>, <Line: -        when(left.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: -        when(right.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: -        assertThat(rawMatcher.matches(typeDescription, classLoader, Foo.class, protectionDomain), is(true));
>, <Line: -        verify(left).matches(typeDescription, classLoader, Foo.class, protectionDomain);
>, <Line: -        when(left.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: -        when(right.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(true);
>, <Line: -        assertThat(rawMatcher.matches(typeDescription, classLoader, Foo.class, protectionDomain), is(true));
>, <Line: -        verify(left).matches(typeDescription, classLoader, Foo.class, protectionDomain);
>, <Line: -        verify(right).matches(typeDescription, classLoader, Foo.class, protectionDomain);
>, <Line: -        when(left.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: -        when(right.matches(typeDescription, classLoader, Foo.class, protectionDomain)).thenReturn(false);
>, <Line: -        assertThat(rawMatcher.matches(typeDescription, classLoader, Foo.class, protectionDomain), is(false));
>, <Line: -        verify(left).matches(typeDescription, classLoader, Foo.class, protectionDomain);
>, <Line: -        verify(right).matches(typeDescription, classLoader, Foo.class, protectionDomain);
>]