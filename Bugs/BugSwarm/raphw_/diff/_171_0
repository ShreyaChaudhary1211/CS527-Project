[<Line: +            return new Binder(typeDescription, getterCandidates.getOnly(), setterCandidates.getOnly());
>, <Line: +            return new Binder(getterMethod, setterMethod);
>, <Line: +        /**
>, <Line: +         * Creates a new binder for a {@link FieldProxy} in simplex mode.
>, <Line: +         *
>, <Line: +         * @param getterMethod The getter method.
>, <Line: +         * @param setterMethod The setter method.
>, <Line: +         */
>, <Line: +        protected Binder(MethodDescription.InDefinedShape getterMethod, MethodDescription.InDefinedShape setterMethod) {
>, <Line: +            this(new FieldResolver.Factory.Simplex(getterMethod, setterMethod));
>, <Line: +        }
>, <Line: +        /**
>, <Line: +         * Creates a new binder for a {@link FieldProxy} in duplex mode.
>, <Line: +         *
>, <Line: +         * @param proxyType    The proxy type.
>, <Line: +         * @param getterMethod The getter method.
>, <Line: +         * @param setterMethod The setter method.
>, <Line: +         */
>, <Line: +        protected Binder(TypeDescription proxyType, MethodDescription.InDefinedShape getterMethod, MethodDescription.InDefinedShape setterMethod) {
>, <Line: +            this(new FieldResolver.Factory.Duplex(proxyType, getterMethod, setterMethod));
>, <Line: +        }
>, <Line: +            FieldResolver fieldResolver = fieldResolverFactory.resolve(target.getType().asErasure(), fieldDescription);
>, <Line: +            TypeDescription getProxyType();
>, <Line: +             * @param fieldDescription      The accessed field.
>, <Line: +                                         FieldDescription fieldDescription,
>, <Line: +                 * @param parameterType    The type of the annotated parameter.
>, <Line: +                 * @param fieldDescription The field being proxied.
>, <Line: +                FieldResolver resolve(TypeDescription parameterType, FieldDescription fieldDescription);
>, <Line: +                    private final TypeDescription proxyType;
>, <Line: +                     * @param proxyType    The type of the accessor proxy.
>, <Line: +                    protected Duplex(TypeDescription proxyType,
>, <Line: +                        this.proxyType = proxyType;
>, <Line: +                    public FieldResolver resolve(TypeDescription parameterType, FieldDescription fieldDescription) {
>, <Line: +                        if (parameterType.equals(proxyType)) {
>, <Line: +                            return new ForGetterSetterPair(proxyType, getterMethod, setterMethod);
>, <Line: +                        return proxyType.equals(duplex.proxyType)
>, <Line: +                        int result = proxyType.hashCode();
>, <Line: +                                "proxyType=" + proxyType +
>, <Line: +                    public FieldResolver resolve(TypeDescription parameterType, FieldDescription fieldDescription) {
>, <Line: +                            return fieldDescription.isFinal()
>, <Line: +                public TypeDescription getProxyType() {
>, <Line: +                                                    FieldDescription fieldDescription,
>, <Line: +                public TypeDescription getProxyType() {
>, <Line: +                                                    FieldDescription fieldDescription,
>, <Line: +                    return builder.method(is(getterMethod)).intercept(new FieldGetter(fieldDescription, assigner, methodAccessorFactory));
>, <Line: +                public TypeDescription getProxyType() {
>, <Line: +                                                    FieldDescription fieldDescription,
>, <Line: +                    return builder.method(is(setterMethod)).intercept(new FieldSetter(fieldDescription, assigner, methodAccessorFactory));
>, <Line: +                private final TypeDescription proxyType;
>, <Line: +                 * @param proxyType    The type of the accessor proxy.
>, <Line: +                protected ForGetterSetterPair(TypeDescription proxyType,
>, <Line: +                                              MethodDescription.InDefinedShape setterMethod) {
>, <Line: +                    this.proxyType = proxyType;
>, <Line: +                public TypeDescription getProxyType() {
>, <Line: +                    return proxyType;
>, <Line: +                                                    FieldDescription fieldDescription,
>, <Line: +                            .method(is(getterMethod)).intercept(new FieldGetter(fieldDescription, assigner, methodAccessorFactory))
>, <Line: +                            .method(is(setterMethod)).intercept(fieldDescription.isFinal()
>, <Line: +                                    ? ExceptionMethod.throwing(UnsupportedOperationException.class, "Cannot set final field " + fieldDescription)
>, <Line: +                                    : new FieldSetter(fieldDescription, assigner, methodAccessorFactory));
>, <Line: +                    return proxyType.equals(that.proxyType)
>, <Line: +                    int result = proxyType.hashCode();
>, <Line: +                            "proxyType=" + proxyType +
>, <Line: +                objectTypeDefaultConstructor = TypeDescription.OBJECT.getDeclaredMethods().filter(isConstructor()).getOnly();
>, <Line: +            private final FieldDescription fieldDescription;
>, <Line: +             * @param fieldDescription      The field that is being accessed.
>, <Line: +            protected FieldGetter(FieldDescription fieldDescription,
>, <Line: +                this.fieldDescription = fieldDescription;
>, <Line: +                return fieldDescription.equals(that.fieldDescription)
>, <Line: +                int result = fieldDescription.hashCode();
>, <Line: +                        "fieldDescription=" + fieldDescription +
>, <Line: +                    MethodDescription getterMethod = methodAccessorFactory.registerGetterFor(fieldDescription);
>, <Line: +                            fieldDescription.isStatic()
>, <Line: +            private final FieldDescription fieldDescription;
>, <Line: +             * @param fieldDescription      The field that is being accessed.
>, <Line: +            protected FieldSetter(FieldDescription fieldDescription,
>, <Line: +                this.fieldDescription = fieldDescription;
>, <Line: +                return fieldDescription.equals(that.fieldDescription)
>, <Line: +                int result = fieldDescription.hashCode();
>, <Line: +                        "fieldDescription=" + fieldDescription +
>, <Line: +                    MethodDescription setterMethod = methodAccessorFactory.registerSetterFor(fieldDescription);
>, <Line: +                            fieldDescription.isStatic()
>, <Line: +            private final FieldDescription fieldDescription;
>, <Line: +             * @param fieldDescription  The field that is being accessed.
>, <Line: +            protected AccessorProxy(FieldDescription fieldDescription,
>, <Line: +                this.fieldDescription = fieldDescription;
>, <Line: +                        .subclass(fieldResolver.getProxyType(), ConstructorStrategy.Default.NO_CONSTRUCTORS)
>, <Line: +                        .defineConstructor().withParameters(fieldDescription.isStatic()
>, <Line: +                        .intercept(fieldDescription.isStatic()
>, <Line: +                                : new InstanceFieldConstructor(instrumentedType)), fieldDescription, assigner, methodAccessorFactory).make();
>, <Line: +                        fieldDescription.isStatic()
>, <Line: +                        && fieldDescription.equals(that.fieldDescription)
>, <Line: +                int result = fieldDescription.hashCode();
>, <Line: +                        ", fieldDescription=" + fieldDescription +
>]
[<Line: -            return new Binder(new FieldResolver.Factory.Duplex(typeDescription, getterCandidates.getOnly(), setterCandidates.getOnly()));
>, <Line: -            return new Binder(new FieldResolver.Factory.Simplex(getterMethod, setterMethod));
>, <Line: -            FieldResolver fieldResolver = fieldResolverFactory.resolve(target.getType().asErasure(), fieldDescription.isFinal() && source.isMethod());
>, <Line: -            TypeDescription getType();
>, <Line: -             * @param accessedField         The accessed field.
>, <Line: -                                         FieldDescription accessedField,
>, <Line: -                 * @param parameterType The type of the annotated parameter.
>, <Line: -                 * @param frozen        {@code true} if the field is frozen, i.e {@code final} and not accessed within an initializer or accessor.
>, <Line: -                FieldResolver resolve(TypeDescription parameterType, boolean frozen);
>, <Line: -                    private final TypeDescription accessorType;
>, <Line: -                     * @param accessorType The type of the accessor proxy.
>, <Line: -                    protected Duplex(TypeDescription accessorType,
>, <Line: -                        this.accessorType = accessorType;
>, <Line: -                    public FieldResolver resolve(TypeDescription parameterType, boolean frozen) {
>, <Line: -                        if (parameterType.equals(accessorType)) {
>, <Line: -                            return new ForGetterSetterPair(accessorType, getterMethod, setterMethod, frozen);
>, <Line: -                        return accessorType.equals(duplex.accessorType)
>, <Line: -                        int result = accessorType.hashCode();
>, <Line: -                                "accessorType=" + accessorType +
>, <Line: -                    public FieldResolver resolve(TypeDescription parameterType, boolean frozen) {
>, <Line: -                            return frozen
>, <Line: -                public TypeDescription getType() {
>, <Line: -                                                    FieldDescription accessedField,
>, <Line: -                public TypeDescription getType() {
>, <Line: -                                                    FieldDescription accessedField,
>, <Line: -                    return builder.method(is(getterMethod)).intercept(new FieldGetter(accessedField, assigner, methodAccessorFactory));
>, <Line: -                public TypeDescription getType() {
>, <Line: -                                                    FieldDescription accessedField,
>, <Line: -                    return builder.method(is(setterMethod)).intercept(new FieldSetter(accessedField, assigner, methodAccessorFactory));
>, <Line: -                private final TypeDescription accessorType;
>, <Line: -                /**
>, <Line: -                 * {@code true} if the field is frozen, i.e. is {@code final} and accessed outside of a constructor or initializer.
>, <Line: -                 */
>, <Line: -                private final boolean frozen;
>, <Line: -                 * @param accessorType The type of the accessor proxy.
>, <Line: -                 * @param frozen       {@code true} if the field is frozen, i.e. is {@code final} and accessed outside of a constructor or initializer.
>, <Line: -                protected ForGetterSetterPair(TypeDescription accessorType,
>, <Line: -                                              MethodDescription.InDefinedShape setterMethod,
>, <Line: -                                              boolean frozen) {
>, <Line: -                    this.accessorType = accessorType;
>, <Line: -                    this.frozen = frozen;
>, <Line: -                public TypeDescription getType() {
>, <Line: -                    return accessorType;
>, <Line: -                                                    FieldDescription accessedField,
>, <Line: -                            .method(is(getterMethod)).intercept(new FieldGetter(accessedField, assigner, methodAccessorFactory))
>, <Line: -                            .method(is(setterMethod)).intercept(frozen
>, <Line: -                                    ? ExceptionMethod.throwing(UnsupportedOperationException.class, "Cannot set final field " + accessedField)
>, <Line: -                                    : new FieldSetter(accessedField, assigner, methodAccessorFactory));
>, <Line: -                    return frozen == that.frozen
>, <Line: -                            && accessorType.equals(that.accessorType)
>, <Line: -                    int result = accessorType.hashCode();
>, <Line: -                    result = 31 * result + (frozen ? 1 : 0);
>, <Line: -                            "accessorType=" + accessorType +
>, <Line: -                            ", frozen=" + frozen +
>, <Line: -                objectTypeDefaultConstructor = TypeDescription.OBJECT.getDeclaredMethods()
>, <Line: -                        .filter(isConstructor())
>, <Line: -                        .getOnly();
>, <Line: -            private final FieldDescription accessedField;
>, <Line: -             * @param accessedField         The field that is being accessed.
>, <Line: -            protected FieldGetter(FieldDescription accessedField,
>, <Line: -                this.accessedField = accessedField;
>, <Line: -                return accessedField.equals(that.accessedField)
>, <Line: -                int result = accessedField.hashCode();
>, <Line: -                        "accessedField=" + accessedField +
>, <Line: -                    MethodDescription getterMethod = methodAccessorFactory.registerGetterFor(accessedField);
>, <Line: -                            accessedField.isStatic()
>, <Line: -            private final FieldDescription accessedField;
>, <Line: -             * @param accessedField         The field that is being accessed.
>, <Line: -            protected FieldSetter(FieldDescription accessedField,
>, <Line: -                this.accessedField = accessedField;
>, <Line: -                return accessedField.equals(that.accessedField)
>, <Line: -                int result = accessedField.hashCode();
>, <Line: -                        "accessedField=" + accessedField +
>, <Line: -                    MethodDescription setterMethod = methodAccessorFactory.registerSetterFor(accessedField);
>, <Line: -                            accessedField.isStatic()
>, <Line: -            private final FieldDescription accessedField;
>, <Line: -             * @param accessedField     The field that is being accessed.
>, <Line: -            protected AccessorProxy(FieldDescription accessedField,
>, <Line: -                this.accessedField = accessedField;
>, <Line: -                        .subclass(fieldResolver.getType(), ConstructorStrategy.Default.NO_CONSTRUCTORS)
>, <Line: -                        .defineConstructor().withParameters(accessedField.isStatic()
>, <Line: -                        .intercept(accessedField.isStatic()
>, <Line: -                                : new InstanceFieldConstructor(instrumentedType)), accessedField, assigner, methodAccessorFactory).make();
>, <Line: -                        accessedField.isStatic()
>, <Line: -                        && accessedField.equals(that.accessedField)
>, <Line: -                int result = accessedField.hashCode();
>, <Line: -                        ", accessedField=" + accessedField +
>]