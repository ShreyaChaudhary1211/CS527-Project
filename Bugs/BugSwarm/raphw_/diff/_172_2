[<Line: +package net.bytebuddy.asm;
>, <Line: +import net.bytebuddy.ByteBuddy;
>, <Line: +import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.runner.RunWith;
>, <Line: +import org.junit.runners.Parameterized;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.Collection;
>, <Line: +import static net.bytebuddy.matcher.ElementMatchers.named;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +import static org.hamcrest.core.Is.is;
>, <Line: +@RunWith(Parameterized.class)
>, <Line: +public class AdviceSizeConversionTest {
>, <Line: +    private static final String FOO = "foo";
>, <Line: +    private static final int NUMERIC = 42;
>, <Line: +    private final Class<?> target, parameter;
>, <Line: +    private final Object input, output;
>, <Line: +    public AdviceSizeConversionTest(Class<?> target, Class<?> parameter, Object input, Object output) {
>, <Line: +        this.target = target;
>, <Line: +        this.parameter = parameter;
>, <Line: +        this.input = input;
>, <Line: +        this.output = output;
>, <Line: +    }
>, <Line: +    @Parameterized.Parameters
>, <Line: +    public static Collection<Object[]> data() {
>, <Line: +        return Arrays.asList(new Object[][]{
>, <Line: +                {IntToFloat.class, int.class, NUMERIC, (float) NUMERIC},
>, <Line: +                {IntToLong.class, int.class, NUMERIC, (long) NUMERIC},
>, <Line: +                {IntToDouble.class, int.class, NUMERIC, (double) NUMERIC},
>, <Line: +                {FloatToInt.class, float.class, (float) NUMERIC, NUMERIC},
>, <Line: +                {FloatToLong.class, float.class, (float) NUMERIC, (long) NUMERIC},
>, <Line: +                {FloatToDouble.class, float.class, (float) NUMERIC, (double) NUMERIC},
>, <Line: +                {LongToInt.class, long.class, (long) NUMERIC, NUMERIC},
>, <Line: +                {LongToFloat.class, long.class, (long) NUMERIC, (float) NUMERIC},
>, <Line: +                {LongToDouble.class, long.class, (long) NUMERIC, (double) NUMERIC},
>, <Line: +                {DoubleToInt.class, double.class, (double) NUMERIC, NUMERIC},
>, <Line: +                {DoubleToLong.class, double.class, (double) NUMERIC, (long) NUMERIC},
>, <Line: +                {DoubleToFloat.class, double.class, (double) NUMERIC, (float) NUMERIC},
>, <Line: +        });
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testAdvice() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(target)
>, <Line: +                .visit(Advice.to(AdviceSizeConversionTest.class).on(named(FOO)))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(FOO, parameter).invoke(type.getDeclaredConstructor().newInstance(), input), is(output));
>, <Line: +    }
>, <Line: +    @Advice.OnMethodExit
>, <Line: +    private static void exit() {
>, <Line: +        /* empty */
>, <Line: +    }
>, <Line: +    public static class IntToFloat {
>, <Line: +        public float foo(int value) {
>, <Line: +            return (float) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class IntToLong {
>, <Line: +        public long foo(int value) {
>, <Line: +            return (long) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class IntToDouble {
>, <Line: +        public double foo(int value) {
>, <Line: +            return (double) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class FloatToInt {
>, <Line: +        public int foo(float value) {
>, <Line: +            return (int) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class FloatToLong {
>, <Line: +        public long foo(float value) {
>, <Line: +            return (long) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class FloatToDouble {
>, <Line: +        public double foo(float value) {
>, <Line: +            return (double) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class LongToInt {
>, <Line: +        public int foo(long value) {
>, <Line: +            return (int) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class LongToFloat {
>, <Line: +        public float foo(long value) {
>, <Line: +            return (float) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class LongToDouble {
>, <Line: +        public double foo(long value) {
>, <Line: +            return (double) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class DoubleToInt {
>, <Line: +        public int foo(double value) {
>, <Line: +            return (int) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class DoubleToFloat {
>, <Line: +        public float foo(double value) {
>, <Line: +            return (float) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class DoubleToLong {
>, <Line: +        public long foo(double value) {
>, <Line: +            return (long) value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +}>]
[]