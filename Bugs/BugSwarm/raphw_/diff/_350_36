[]
[<Line: -package net.bytebuddy.description.type;
>, <Line: -import net.bytebuddy.test.utility.ObjectPropertyAssertion;
>, <Line: -import org.junit.Test;
>, <Line: -import java.lang.reflect.Type;
>, <Line: -import static org.hamcrest.CoreMatchers.is;
>, <Line: -import static org.hamcrest.CoreMatchers.sameInstance;
>, <Line: -import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: -import static org.mockito.Mockito.mock;
>, <Line: -import static org.mockito.Mockito.when;
>, <Line: -public class TypeDescriptionGenericOtherTest {
>, <Line: -    @Test(expected = IllegalArgumentException.class)
>, <Line: -    public void testUnknownType() throws Exception {
>, <Line: -        TypeDefinition.Sort.describe(mock(Type.class));
>, <Line: -    }
>, <Line: -    @Test(expected = IllegalArgumentException.class)
>, <Line: -    public void testNegativeArityGenericArray() throws Exception {
>, <Line: -        TypeDescription.Generic.OfGenericArray.Latent.of(mock(TypeDescription.Generic.class), -1);
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testZeroArityReturnsInstance() throws Exception {
>, <Line: -        TypeDescription.Generic typeDescription = mock(TypeDescription.Generic.class);
>, <Line: -        when(typeDescription.getSort()).thenReturn(TypeDefinition.Sort.PARAMETERIZED);
>, <Line: -        assertThat(TypeDescription.Generic.OfGenericArray.Latent.of(typeDescription, 0), sameInstance(typeDescription));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testNonGenericArrayType() throws Exception {
>, <Line: -        TypeDescription.Generic typeDescription = mock(TypeDescription.Generic.class);
>, <Line: -        when(typeDescription.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
>, <Line: -        assertThat(TypeDescription.Generic.OfGenericArray.Latent.of(typeDescription, 1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(TypeDescription.Generic.OfGenericArray.Latent.of(typeDescription, 1).getComponentType(), is(typeDescription));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testZeroArityIteratesTypesInstance() throws Exception {
>, <Line: -        TypeDescription.Generic typeDescription = mock(TypeDescription.Generic.class);
>, <Line: -        TypeDescription.Generic componentType = mock(TypeDescription.Generic.class);
>, <Line: -        when(typeDescription.getComponentType()).thenReturn(componentType);
>, <Line: -        when(typeDescription.getSort()).thenReturn(TypeDefinition.Sort.GENERIC_ARRAY);
>, <Line: -        when(componentType.getSort()).thenReturn(TypeDefinition.Sort.PARAMETERIZED);
>, <Line: -        TypeDescription.Generic result = TypeDescription.Generic.OfGenericArray.Latent.of(typeDescription, 1);
>, <Line: -        assertThat(result.getSort(), is(TypeDefinition.Sort.GENERIC_ARRAY));
>, <Line: -        assertThat(result.getComponentType().getSort(), is(TypeDefinition.Sort.GENERIC_ARRAY));
>, <Line: -        assertThat(result.getComponentType().getComponentType(), is(componentType));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testZeroArityIteratesTypesInstanceNonGeneric() throws Exception {
>, <Line: -        TypeDescription.Generic typeDescription = mock(TypeDescription.Generic.class);
>, <Line: -        TypeDescription.Generic componentType = mock(TypeDescription.Generic.class);
>, <Line: -        when(typeDescription.getComponentType()).thenReturn(componentType);
>, <Line: -        when(typeDescription.getSort()).thenReturn(TypeDefinition.Sort.GENERIC_ARRAY);
>, <Line: -        when(componentType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
>, <Line: -        TypeDescription.Generic result = TypeDescription.Generic.OfGenericArray.Latent.of(typeDescription, 1);
>, <Line: -        assertThat(result.getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(result.getComponentType().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(result.getComponentType().getComponentType(), is(componentType));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testObjectProperties() throws Exception {
>, <Line: -        ObjectPropertyAssertion.of(TypeDefinition.Sort.class).apply();
>, <Line: -    }
>, <Line: -}
>]