[<Line: +    public void testExplicitFieldAccessSimplex() throws Exception {
>, <Line: +        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SwapDuplex.class)
>, <Line: +    public void testExplicitFieldAccessSerializableSimplex() throws Exception {
>, <Line: +        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SwapSerializable.class)
>, <Line: +                .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
>, <Line: +    public void testExplicitFieldAccessSerializableDuplex() throws Exception {
>, <Line: +        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SwapSerializableDuplex.class)
>, <Line: +                .appendParameterBinder(FieldProxy.Binder.install(GetSet.class)));
>, <Line: +    @Test
>, <Line: +    public void testExplicitFieldAccessStaticDuplex() throws Exception {
>, <Line: +        DynamicType.Loaded<ExplicitStatic> loaded = implement(ExplicitStatic.class, MethodDelegation.to(SwapDuplex.class)
>, <Line: +                .appendParameterBinder(FieldProxy.Binder.install(GetSet.class)));
>, <Line: +        ExplicitStatic explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        assertThat(ExplicitStatic.foo, is(FOO));
>, <Line: +        explicit.swap();
>, <Line: +        assertThat(ExplicitStatic.foo, is(FOO + BAR));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testImplicitFieldGetterAccessDuplex() throws Exception {
>, <Line: +        DynamicType.Loaded<ImplicitGetter> loaded = implement(ImplicitGetter.class, MethodDelegation.to(GetInterceptorDuplex.class)
>, <Line: +                .appendParameterBinder(FieldProxy.Binder.install(GetSet.class)));
>, <Line: +        ImplicitGetter implicitGetter = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        assertThat(implicitGetter.foo, is(FOO));
>, <Line: +        assertThat(implicitGetter.getFoo(), is(FOO + BAR));
>, <Line: +        assertThat(implicitGetter.foo, is(FOO + BAR));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testImplicitFieldSetterAccessDuplex() throws Exception {
>, <Line: +        DynamicType.Loaded<ImplicitSetter> loaded = implement(ImplicitSetter.class, MethodDelegation.to(SetInterceptorDuplex.class)
>, <Line: +                .appendParameterBinder(FieldProxy.Binder.install(GetSet.class)));
>, <Line: +        ImplicitSetter implicitSetter = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        assertThat(implicitSetter.foo, is(FOO));
>, <Line: +        implicitSetter.setFoo(BAR);
>, <Line: +        assertThat(implicitSetter.foo, is(FOO + BAR));
>, <Line: +    }
>, <Line: +        DynamicType.Loaded<FinalField> loaded = implement(FinalField.class, MethodDelegation.to(SwapDuplex.class)
>, <Line: +    @Test(expected = ClassCastException.class)
>, <Line: +    public void testIncompatibleTypeThrowsExceptionGetDuplex() throws Exception {
>, <Line: +        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(GetterIncompatibleDuplex.class)
>, <Line: +                .appendParameterBinder(FieldProxy.Binder.install(GetSet.class)));
>, <Line: +        Explicit explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        explicit.swap();
>, <Line: +    }
>, <Line: +    @Test(expected = ClassCastException.class)
>, <Line: +    public void testIncompatibleTypeThrowsExceptionSetDuplex() throws Exception {
>, <Line: +        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SetterIncompatibleDuplex.class)
>, <Line: +                .appendParameterBinder(FieldProxy.Binder.install(GetSet.class)));
>, <Line: +        Explicit explicit = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        explicit.swap();
>, <Line: +    }
>, <Line: +        FieldProxy.Binder.install(Serializable.class, Set.class);
>, <Line: +        FieldProxy.Binder.install(Get.class, Serializable.class);
>, <Line: +        FieldProxy.Binder.install(GetInherited.class, Set.class);
>, <Line: +        FieldProxy.Binder.install(Get.class, SetInherited.class);
>, <Line: +        FieldProxy.Binder.install(GetPrivate.class, Set.class);
>, <Line: +        FieldProxy.Binder.install(Get.class, SetPrivate.class);
>, <Line: +        FieldProxy.Binder.install(GetIncorrect.class, Set.class);
>, <Line: +        FieldProxy.Binder.install(Get.class, SetIncorrect.class);
>, <Line: +        FieldProxy.Binder.install(Object.class, Set.class);
>, <Line: +        FieldProxy.Binder.install(Get.class, Object.class);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalArgumentException.class)
>, <Line: +    public void testDuplexTooManyMethodsThrowsException() throws Exception {
>, <Line: +        FieldProxy.Binder.install(GetSetTooManyMethods.class);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalArgumentException.class)
>, <Line: +    public void testDuplexNonPublicThrowsException() throws Exception {
>, <Line: +        FieldProxy.Binder.install(GetSetNonPublic.class);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalArgumentException.class)
>, <Line: +    public void testDuplexInheritedThrowsException() throws Exception {
>, <Line: +        FieldProxy.Binder.install(GetSetInherited.class);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalArgumentException.class)
>, <Line: +    public void testSetterTypeIncorrectSignatureDuplexThrowsException() throws Exception {
>, <Line: +        FieldProxy.Binder.install(GetSetSetIncorrect.class);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalArgumentException.class)
>, <Line: +    public void testGetterTypeIncorrectSignatureDuplexThrowsException() throws Exception {
>, <Line: +        FieldProxy.Binder.install(GetSetGetIncorrect.class);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalArgumentException.class)
>, <Line: +    public void testTypeNotInterfaceDuplexThrowsException() throws Exception {
>, <Line: +        FieldProxy.Binder.install(Object.class);
>, <Line: +    public interface GetSetGetIncorrect<T> {
>, <Line: +        String get();
>, <Line: +        void set(T value);
>, <Line: +    }
>, <Line: +    public interface GetSetSetIncorrect<T> {
>, <Line: +        T get();
>, <Line: +        void set(String value);
>, <Line: +    }
>, <Line: +    interface GetSetNonPublic<T> {
>, <Line: +        T get();
>, <Line: +        void set(T value);
>, <Line: +    }
>, <Line: +    public interface GetSetTooManyMethods<T> {
>, <Line: +        T get();
>, <Line: +        void set(String value);
>, <Line: +        void set(T value);
>, <Line: +    }
>, <Line: +    public interface GetSetInherited<T> extends GetSet<T> {
>, <Line: +        /* empty */
>, <Line: +    }
>, <Line: +    public static class SwapDuplex {
>, <Line: +        public static void swap(@FieldProxy(FOO) GetSet<String> accessor) {
>, <Line: +            assertThat(accessor, not(instanceOf(Serializable.class)));
>, <Line: +            accessor.set(accessor.get() + BAR);
>, <Line: +    public static class SetInterceptor {
>, <Line: +        public static void set(@Argument(0) String value, @FieldProxy Get<String> getter, @FieldProxy Set<String> setter) {
>, <Line: +            setter.set(getter.get() + value);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class GetInterceptorDuplex {
>, <Line: +        public static String get(@FieldProxy GetSet<String> accessor) {
>, <Line: +            accessor.set(accessor.get() + BAR);
>, <Line: +            return accessor.get();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class SetInterceptorDuplex {
>, <Line: +        public static void set(@Argument(0) String value, @FieldProxy GetSet<String> accessor) {
>, <Line: +            accessor.set(accessor.get() + value);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class SwapSerializableDuplex {
>, <Line: +        public static void swap(@FieldProxy(value = FOO, serializableProxy = true) GetSet<String> accessor) {
>, <Line: +            assertThat(accessor, instanceOf(Serializable.class));
>, <Line: +            accessor.set(accessor.get() + BAR);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class GetterIncompatibleDuplex {
>, <Line: +        public static void swap(@FieldProxy(FOO) GetSet<Integer> accessor) {
>, <Line: +            Integer value = accessor.get();
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class SetterIncompatibleDuplex {
>, <Line: +        public static void swap(@FieldProxy(FOO) GetSet<Integer> accessor) {
>, <Line: +            accessor.set(0);
>, <Line: +        }
>, <Line: +    }
>]
[<Line: -import net.bytebuddy.asm.AdviceTest;
>, <Line: -    public void testExplicitFieldAccess() throws Exception {
>, <Line: -        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SwapGetSet.class)
>, <Line: -    public void testExplicitFieldAccessDuplexFinal() throws Exception {
>, <Line: -        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SwapGetSet.class)
>, <Line: -                .appendParameterBinder(FieldProxy.Binder.install(GetSet.class)));
>, <Line: -    public void testExplicitFieldAccessSerializable() throws Exception {
>, <Line: -        DynamicType.Loaded<Explicit> loaded = implement(Explicit.class, MethodDelegation.to(SwapSerializable.class)
>, <Line: -                .appendParameterBinder(FieldProxy.Binder.install(Get.class, Set.class)));
>, <Line: -        DynamicType.Loaded<FinalField> loaded = implement(FinalField.class, MethodDelegation.to(SwapGetSet.class)
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(Serializable.class, Set.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(Get.class, Serializable.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(GetInherited.class, Set.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(Get.class, SetInherited.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(GetPrivate.class, Set.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(Get.class, SetPrivate.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(GetIncorrect.class, Set.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(Get.class, SetIncorrect.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(Object.class, Set.class));
>, <Line: -        MethodDelegation.to(GetterIncompatible.class).appendParameterBinder(FieldProxy.Binder.install(Get.class, Object.class));
>, <Line: -    public static class SwapGetSet {
>, <Line: -        public static void swap(@FieldProxy(FOO) GetSet<String> getset) {
>, <Line: -            assertThat(getset, not(instanceOf(Serializable.class)));
>, <Line: -            getset.set(getset.get() + BAR);
>, <Line: -    public static class SetInterceptor {
>, <Line: -        public static void set(@Argument(0) String value, @FieldProxy Get<String> getter, @FieldProxy Set<String> setter) {
>, <Line: -            setter.set(getter.get() + value);
>, <Line: -        }
>, <Line: -    }
>]