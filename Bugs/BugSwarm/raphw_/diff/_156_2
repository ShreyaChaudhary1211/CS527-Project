[]
[<Line: -import jdk.nashorn.internal.codegen.types.Type;
>, <Line: -import net.bytebuddy.asm.AsmVisitorWrapper;
>, <Line: -import net.bytebuddy.dynamic.loading.ByteArrayClassLoader;
>, <Line: -import net.bytebuddy.dynamic.loading.PackageDefinitionStrategy;
>, <Line: -import net.bytebuddy.test.scope.EnclosingType;
>, <Line: -import net.bytebuddy.test.utility.ClassFileExtraction;
>, <Line: -import org.objectweb.asm.ClassVisitor;
>, <Line: -import org.objectweb.asm.Opcodes;
>, <Line: -import java.lang.reflect.Modifier;
>, <Line: -import java.security.AccessController;
>, <Line: -    @Test
>, <Line: -    public void testInnerClassChangeModifierTest() throws Exception {
>, <Line: -        ClassLoader classLoader = new ByteArrayClassLoader(ClassLoadingStrategy.BOOTSTRAP_LOADER,
>, <Line: -                ClassFileExtraction.of(EnclosingType.class),
>, <Line: -                null,
>, <Line: -                AccessController.getContext(),
>, <Line: -                ByteArrayClassLoader.PersistenceHandler.LATENT,
>, <Line: -                PackageDefinitionStrategy.NoOp.INSTANCE);
>, <Line: -        Class<?> redefined = new ByteBuddy()
>, <Line: -                .redefine(EnclosingType.INNER)
>, <Line: -                .visit(new InnerClassValidator.Wrapper(EnclosingType.INNER, Opcodes.ACC_PUBLIC))
>, <Line: -                .modifiers(Visibility.PUBLIC)
>, <Line: -                .make()
>, <Line: -                .load(classLoader, ClassLoadingStrategy.Default.INJECTION)
>, <Line: -                .getLoaded();
>, <Line: -        assertThat(redefined.isAnonymousClass(), is(EnclosingType.INNER.isAnonymousClass()));
>, <Line: -        assertThat(redefined.isLocalClass(), is(EnclosingType.INNER.isLocalClass()));
>, <Line: -        assertThat(redefined.isMemberClass(), is(EnclosingType.INNER.isMemberClass()));
>, <Line: -        assertThat(redefined.getModifiers(), is(Modifier.PUBLIC | EnclosingType.INNER.getModifiers()));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testAnonymousInnerClassChangeModifierTest() throws Exception {
>, <Line: -        ClassLoader classLoader = new ByteArrayClassLoader(ClassLoadingStrategy.BOOTSTRAP_LOADER,
>, <Line: -                ClassFileExtraction.of(EnclosingType.class),
>, <Line: -                null,
>, <Line: -                AccessController.getContext(),
>, <Line: -                ByteArrayClassLoader.PersistenceHandler.LATENT,
>, <Line: -                PackageDefinitionStrategy.NoOp.INSTANCE);
>, <Line: -        Class<?> redefined = new ByteBuddy()
>, <Line: -                .redefine(EnclosingType.ANONYMOUS_INITIALIZER)
>, <Line: -                .visit(new InnerClassValidator.Wrapper(EnclosingType.ANONYMOUS_INITIALIZER, Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC))
>, <Line: -                .modifiers(Visibility.PUBLIC)
>, <Line: -                .make()
>, <Line: -                .load(classLoader, ClassLoadingStrategy.Default.INJECTION)
>, <Line: -                .getLoaded();
>, <Line: -        assertThat(redefined.isAnonymousClass(), is(EnclosingType.ANONYMOUS_INITIALIZER.isAnonymousClass()));
>, <Line: -        assertThat(redefined.isLocalClass(), is(EnclosingType.ANONYMOUS_INITIALIZER.isLocalClass()));
>, <Line: -        assertThat(redefined.isMemberClass(), is(EnclosingType.ANONYMOUS_INITIALIZER.isMemberClass()));
>, <Line: -        assertThat(redefined.getModifiers(), is(Modifier.PUBLIC | EnclosingType.ANONYMOUS_INITIALIZER.getModifiers()));
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testLocalClassChangeModifierTest() throws Exception {
>, <Line: -        ClassLoader classLoader = new ByteArrayClassLoader(ClassLoadingStrategy.BOOTSTRAP_LOADER,
>, <Line: -                ClassFileExtraction.of(EnclosingType.class),
>, <Line: -                null,
>, <Line: -                AccessController.getContext(),
>, <Line: -                ByteArrayClassLoader.PersistenceHandler.LATENT,
>, <Line: -                PackageDefinitionStrategy.NoOp.INSTANCE);
>, <Line: -        Class<?> redefined = new ByteBuddy()
>, <Line: -                .redefine(EnclosingType.LOCAL_INITIALIZER)
>, <Line: -                .modifiers(Visibility.PUBLIC)
>, <Line: -                .visit(new InnerClassValidator.Wrapper(EnclosingType.LOCAL_INITIALIZER, Opcodes.ACC_PUBLIC))
>, <Line: -                .make()
>, <Line: -                .load(classLoader, ClassLoadingStrategy.Default.INJECTION)
>, <Line: -                .getLoaded();
>, <Line: -        assertThat(redefined.isAnonymousClass(), is(EnclosingType.LOCAL_INITIALIZER.isAnonymousClass()));
>, <Line: -        assertThat(redefined.isLocalClass(), is(EnclosingType.LOCAL_INITIALIZER.isLocalClass()));
>, <Line: -        assertThat(redefined.isMemberClass(), is(EnclosingType.LOCAL_INITIALIZER.isMemberClass()));
>, <Line: -        assertThat(redefined.getModifiers(), is(Modifier.PUBLIC | EnclosingType.LOCAL_INITIALIZER.getModifiers()));
>, <Line: -    }
>, <Line: -    private static class InnerClassValidator extends ClassVisitor {
>, <Line: -        private final String name;
>, <Line: -        private final int modifiers;
>, <Line: -        private InnerClassValidator(ClassVisitor classVisitor, Class<?> type, int modifiers) {
>, <Line: -            super(Opcodes.ASM5, classVisitor);
>, <Line: -            this.name = Type.getInternalName(type);
>, <Line: -            this.modifiers = modifiers;
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        public void visitInnerClass(String internalName, String outerName, String innerName, int modifiers) {
>, <Line: -            if (internalName.equals(this.name) && this.modifiers != modifiers) {
>, <Line: -                throw new AssertionError("Unexpected modifiers: " + modifiers);
>, <Line: -            }
>, <Line: -            super.visitInnerClass(internalName, outerName, innerName, modifiers);
>, <Line: -        }
>, <Line: -        private static class Wrapper extends AsmVisitorWrapper.AbstractBase {
>, <Line: -            private final Class<?> type;
>, <Line: -            private final int modifiers;
>, <Line: -            private Wrapper(Class<?> type, int modifiers) {
>, <Line: -                this.type = type;
>, <Line: -                this.modifiers = modifiers;
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public ClassVisitor wrap(TypeDescription instrumentedType, ClassVisitor classVisitor, int writerFlags, int readerFlags) {
>, <Line: -                return new InnerClassValidator(classVisitor, type, modifiers);
>, <Line: -            }
>, <Line: -        }
>, <Line: -    }
>]