[<Line: +        assertThat(describe(first), is(describe(first)));
>, <Line: +        assertThat(describe(second), is(describe(second)));
>, <Line: +        assertThat(describe(first), not(describe(second)));
>, <Line: +        assertThat(describe(first).getAnnotationType(), is(describe(second).getAnnotationType()));
>, <Line: +        assertThat(describe(first).getAnnotationType(), not((TypeDescription) new TypeDescription.ForLoadedType(Other.class)));
>, <Line: +        assertThat(describe(second).getAnnotationType(), not((TypeDescription) new TypeDescription.ForLoadedType(Other.class)));
>, <Line: +        assertThat(describe(first).hashCode(), not(describe(second).hashCode()));
>, <Line: +        assertThat(identical, is(identical));
>, <Line: +        assertThat(describe(first), is(equalFirst));
>, <Line: +        assertThat(describe(second), is(equalSecond));
>, <Line: +        assertThat(describe(first), not(equalFirstTypeOnly));
>, <Line: +        assertThat(describe(first), not(equalFirstNameOnly));
>, <Line: +        assertThat(describe(first), not(equalSecond));
>, <Line: +        assertThat(describe(first), not(new Object()));
>, <Line: +        assertThat(describe(first).prepare(Sample.class).load(), is(first));
>, <Line: +        assertThat(describe(first).prepare(Sample.class).load(), is(describe(first).prepare(Sample.class).load()));
>, <Line: +        assertThat(describe(first).prepare(Sample.class).load(), not(describe(second).prepare(Sample.class).load()));
>, <Line: +        assertThat(describe(second).prepare(Sample.class).load(), is(second));
>, <Line: +        assertThat(describe(first).prepare(Sample.class).load(), not(second));
>, <Line: +        assertThat(describe(first).prepare(Sample.class).load().hashCode(), is(first.hashCode()));
>, <Line: +        assertThat(describe(second).prepare(Sample.class).load().hashCode(), is(second.hashCode()));
>, <Line: +        assertThat(describe(first).prepare(Sample.class).load().hashCode(), not(second.hashCode()));
>]
[<Line: -        assertThat(describe(first), equalTo(describe(first)));
>, <Line: -        assertThat(describe(second), equalTo(describe(second)));
>, <Line: -        assertThat(describe(first), not(equalTo(describe(second))));
>, <Line: -        assertThat(describe(first).getAnnotationType(), equalTo(describe(second).getAnnotationType()));
>, <Line: -        assertThat(describe(first).getAnnotationType(), not(equalTo((TypeDescription) new TypeDescription.ForLoadedType(Other.class))));
>, <Line: -        assertThat(describe(second).getAnnotationType(), not(equalTo((TypeDescription) new TypeDescription.ForLoadedType(Other.class))));
>, <Line: -        assertThat(describe(first).hashCode(), not(is(describe(second).hashCode())));
>, <Line: -        assertThat(identical, equalTo(identical));
>, <Line: -        assertThat(describe(first), equalTo(equalFirst));
>, <Line: -        assertThat(describe(second), equalTo(equalSecond));
>, <Line: -        assertThat(describe(first), not(equalTo(equalFirstTypeOnly)));
>, <Line: -        assertThat(describe(first), not(equalTo(equalFirstNameOnly)));
>, <Line: -        assertThat(describe(first), not(equalTo(equalSecond)));
>, <Line: -        assertThat(describe(first), not(equalTo(new Object())));
>, <Line: -        assertThat(describe(first).prepare(Sample.class).load(), equalTo(first));
>, <Line: -        assertThat(describe(first).prepare(Sample.class).load(), equalTo(describe(first).prepare(Sample.class).load()));
>, <Line: -        assertThat(describe(first).prepare(Sample.class).load(), not(equalTo(describe(second).prepare(Sample.class).load())));
>, <Line: -        assertThat(describe(second).prepare(Sample.class).load(), equalTo(second));
>, <Line: -        assertThat(describe(first).prepare(Sample.class).load(), not(equalTo(second)));
>, <Line: -        assertThat(describe(first).prepare(Sample.class).load().hashCode(), equalTo(first.hashCode()));
>, <Line: -        assertThat(describe(second).prepare(Sample.class).load().hashCode(), equalTo(second.hashCode()));
>, <Line: -        assertThat(describe(first).prepare(Sample.class).load().hashCode(), not(equalTo(second.hashCode())));
>]