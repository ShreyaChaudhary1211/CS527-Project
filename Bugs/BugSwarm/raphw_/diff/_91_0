[<Line: +                protected final SuppressionHandler suppressionHandler;
>, <Line: +                            ? SuppressionHandler.NoOp.INSTANCE
>, <Line: +                            : new SuppressionHandler.Suppressing(throwableType);
>, <Line: +                 * @param suppressionHandler The bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                                                       SuppressionHandler.Bound suppressionHandler);
>, <Line: +                    /**
>, <Line: +                     * A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                     */
>, <Line: +                    private final SuppressionHandler.Bound suppressionHandler;
>, <Line: +                     * @param suppressionHandler A bound suppression handler that is used for suppressing exceptions of this advice method.
>, <Line: +                                         SuppressionHandler.Bound suppressionHandler,
>, <Line: +                                ", suppressionHandler=" + suppressionHandler +
>, <Line: +                                                  SuppressionHandler.Bound suppressionHandler) {
>, <Line: +                                                  SuppressionHandler.Bound suppressionHandler) {
>, <Line: +            /**
>, <Line: +             * A suppression handler for optionally suppressing exceptions.
>, <Line: +             */
>, <Line: +            protected interface SuppressionHandler {
>, <Line: +                /**
>, <Line: +                 * Binds the supression handler for instrumenting a specific method.
>, <Line: +                 *
>, <Line: +                 * @return A bound version of the suppression handler.
>, <Line: +                 */
>, <Line: +                Bound bind();
>, <Line: +                /**
>, <Line: +                 * A bound version of a suppression handler that must not be reused.
>, <Line: +                 */
>, <Line: +                interface Bound {
>, <Line: +                    /**
>, <Line: +                     * Invoked to prepare the suppression handler, i.e. to write an exception handler entry if appropriate.
>, <Line: +                     *
>, <Line: +                     * @param methodVisitor The method visitor to apply the preparation to.
>, <Line: +                     */
>, <Line: +                    void onPrepare(MethodVisitor methodVisitor);
>, <Line: +                    /**
>, <Line: +                     * Invoked at the start of a method.
>, <Line: +                     *
>, <Line: +                     * @param methodVisitor   The method visitor of the instrumented method.
>, <Line: +                     * @param metaDataHandler The meta data handler to use for translating meta data.
>, <Line: +                     */
>, <Line: +                    void onStart(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler);
>, <Line: +                    /**
>, <Line: +                     * Invoked at the end of a method.
>, <Line: +                     *
>, <Line: +                     * @param methodVisitor       The method visitor of the instrumented method.
>, <Line: +                     * @param metaDataHandler     The meta data handler to use for translating meta data.
>, <Line: +                     * @param returnValueProducer A producer for defining a default return value of the advised method.
>, <Line: +                     */
>, <Line: +                    void onEnd(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler, ReturnValueProducer returnValueProducer);
>, <Line: +                }
>, <Line: +                /**
>, <Line: +                 * A non-operational suppression handler that does not suppress any method.
>, <Line: +                 */
>, <Line: +                enum NoOp implements SuppressionHandler, Bound {
>, <Line: +                    /**
>, <Line: +                     * The singleton instance.
>, <Line: +                     */
>, <Line: +                    INSTANCE;
>, <Line: +                    @Override
>, <Line: +                    public Bound bind() {
>, <Line: +                        return this;
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public void onPrepare(MethodVisitor methodVisitor) {
>, <Line: +                            /* do nothing */
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public void onStart(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler) {
>, <Line: +                            /* do nothing */
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public void onEnd(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler, ReturnValueProducer returnValueProducer) {
>, <Line: +                            /* do nothing */
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public String toString() {
>, <Line: +                        return "Advice.Dispatcher.Active.SuppressionHandler.NoOp." + name();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +                /**
>, <Line: +                 * A suppression handler that suppresses a given throwable type.
>, <Line: +                 */
>, <Line: +                class Suppressing implements SuppressionHandler {
>, <Line: +                    /**
>, <Line: +                     * The suppressed throwable type.
>, <Line: +                     */
>, <Line: +                    private final TypeDescription throwableType;
>, <Line: +                    /**
>, <Line: +                     * Creates a new suppressing suppression handler.
>, <Line: +                     *
>, <Line: +                     * @param throwableType The suppressed throwable type.
>, <Line: +                     */
>, <Line: +                    protected Suppressing(TypeDescription throwableType) {
>, <Line: +                        this.throwableType = throwableType;
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public SuppressionHandler.Bound bind() {
>, <Line: +                        return new Bound(throwableType);
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public boolean equals(Object object) {
>, <Line: +                        if (this == object) return true;
>, <Line: +                        if (object == null || getClass() != object.getClass()) return false;
>, <Line: +                        Suppressing that = (Suppressing) object;
>, <Line: +                        return throwableType.equals(that.throwableType);
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public int hashCode() {
>, <Line: +                        return throwableType.hashCode();
>, <Line: +                    }
>, <Line: +                    @Override
>, <Line: +                    public String toString() {
>, <Line: +                        return "Advice.Dispatcher.Active.SuppressionHandler.Suppressing{" +
>, <Line: +                                "throwableType=" + throwableType +
>, <Line: +                                '}';
>, <Line: +                    }
>, <Line: +                    /**
>, <Line: +                     * An active, bound suppression handler.
>, <Line: +                     */
>, <Line: +                    protected static class Bound implements SuppressionHandler.Bound {
>, <Line: +                        /**
>, <Line: +                         * The suppressed throwable type.
>, <Line: +                         */
>, <Line: +                        private final TypeDescription throwableType;
>, <Line: +                        /**
>, <Line: +                         * A label indicating the start of the method.
>, <Line: +                         */
>, <Line: +                        private final Label startOfMethod;
>, <Line: +                        /**
>, <Line: +                         * A label indicating the end of the method.
>, <Line: +                         */
>, <Line: +                        private final Label endOfMethod;
>, <Line: +                        /**
>, <Line: +                         * Creates a new active, bound suppression handler.
>, <Line: +                         *
>, <Line: +                         * @param throwableType The suppressed throwable type.
>, <Line: +                         */
>, <Line: +                        protected Bound(TypeDescription throwableType) {
>, <Line: +                            this.throwableType = throwableType;
>, <Line: +                            startOfMethod = new Label();
>, <Line: +                            endOfMethod = new Label();
>, <Line: +                        }
>, <Line: +                        @Override
>, <Line: +                        public void onPrepare(MethodVisitor methodVisitor) {
>, <Line: +                            methodVisitor.visitTryCatchBlock(startOfMethod, endOfMethod, endOfMethod, throwableType.getInternalName());
>, <Line: +                        }
>, <Line: +                        @Override
>, <Line: +                        public void onStart(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler) {
>, <Line: +                            methodVisitor.visitLabel(startOfMethod);
>, <Line: +                        }
>, <Line: +                        @Override
>, <Line: +                        public void onEnd(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler, ReturnValueProducer returnValueProducer) {
>, <Line: +                            Label endOfHandler = new Label();
>, <Line: +                            methodVisitor.visitLabel(endOfMethod);
>, <Line: +                            metaDataHandler.injectHandlerFrame(methodVisitor);
>, <Line: +                            methodVisitor.visitInsn(Opcodes.POP);
>, <Line: +                            returnValueProducer.makeDefault(methodVisitor);
>, <Line: +                            methodVisitor.visitLabel(endOfHandler);
>, <Line: +                        }
>, <Line: +                        @Override
>, <Line: +                        public String toString() {
>, <Line: +                            return "Advice.Dispatcher.Active.SuppressionHandler.Suppressing.Bound{" +
>, <Line: +                                    "throwableType=" + throwableType +
>, <Line: +                                    ", startOfMethod=" + startOfMethod +
>, <Line: +                                    ", endOfMethod=" + endOfMethod +
>, <Line: +                                    '}';
>, <Line: +                        }
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>]
[<Line: -                protected final CodeTranslationVisitor.SuppressionHandler suppressionHandler;
>, <Line: -                            ? CodeTranslationVisitor.SuppressionHandler.NoOp.INSTANCE
>, <Line: -                            : new CodeTranslationVisitor.SuppressionHandler.Suppressing(throwableType);
>, <Line: -                                                       CodeTranslationVisitor.SuppressionHandler.Bound suppressionHandler);
>, <Line: -                    private final CodeTranslationVisitor.SuppressionHandler.Bound suppressionHandler;
>, <Line: -                                         CodeTranslationVisitor.SuppressionHandler.Bound suppressionHandler,
>, <Line: -                                                  CodeTranslationVisitor.SuppressionHandler.Bound suppressionHandler) {
>, <Line: -                                                  CodeTranslationVisitor.SuppressionHandler.Bound suppressionHandler) {
>, <Line: -                /**
>, <Line: -                 * A suppression handler for optionally suppressing exceptions.
>, <Line: -                 */
>, <Line: -                protected interface SuppressionHandler {
>, <Line: -                    /**
>, <Line: -                     * Binds the supression handler for instrumenting a specific method.
>, <Line: -                     *
>, <Line: -                     * @return A bound version of the suppression handler.
>, <Line: -                     */
>, <Line: -                    Bound bind();
>, <Line: -                    /**
>, <Line: -                     * A bound version of a suppression handler that must not be reused.
>, <Line: -                     */
>, <Line: -                    interface Bound {
>, <Line: -                        /**
>, <Line: -                         * Invoked to prepare the suppression handler, i.e. to write an exception handler entry if appropriate.
>, <Line: -                         *
>, <Line: -                         * @param methodVisitor The method visitor to apply the preparation to.
>, <Line: -                         */
>, <Line: -                        void onPrepare(MethodVisitor methodVisitor);
>, <Line: -                        /**
>, <Line: -                         * Invoked at the start of a method.
>, <Line: -                         *
>, <Line: -                         * @param methodVisitor   The method visitor of the instrumented method.
>, <Line: -                         * @param metaDataHandler The meta data handler to use for translating meta data.
>, <Line: -                         */
>, <Line: -                        void onStart(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler);
>, <Line: -                        /**
>, <Line: -                         * Invoked at the end of a method.
>, <Line: -                         *
>, <Line: -                         * @param methodVisitor       The method visitor of the instrumented method.
>, <Line: -                         * @param metaDataHandler     The meta data handler to use for translating meta data.
>, <Line: -                         * @param returnValueProducer A producer for defining a default return value of the advised method.
>, <Line: -                         */
>, <Line: -                        void onEnd(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler, ReturnValueProducer returnValueProducer);
>, <Line: -                    }
>, <Line: -                    /**
>, <Line: -                     * A non-operational suppression handler that does not suppress any method.
>, <Line: -                     */
>, <Line: -                    enum NoOp implements SuppressionHandler, Bound {
>, <Line: -                        /**
>, <Line: -                         * The singleton instance.
>, <Line: -                         */
>, <Line: -                        INSTANCE;
>, <Line: -                        @Override
>, <Line: -                        public Bound bind() {
>, <Line: -                            return this;
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public void onPrepare(MethodVisitor methodVisitor) {
>, <Line: -                            /* do nothing */
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public void onStart(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler) {
>, <Line: -                            /* do nothing */
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public void onEnd(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler, ReturnValueProducer returnValueProducer) {
>, <Line: -                            /* do nothing */
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public String toString() {
>, <Line: -                            return "Advice.Dispatcher.Active.CodeTranslationVisitor.SuppressionHandler.NoOp." + name();
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                    /**
>, <Line: -                     * A suppression handler that suppresses a given throwable type.
>, <Line: -                     */
>, <Line: -                    class Suppressing implements SuppressionHandler {
>, <Line: -                        /**
>, <Line: -                         * The suppressed throwable type.
>, <Line: -                         */
>, <Line: -                        private final TypeDescription throwableType;
>, <Line: -                        /**
>, <Line: -                         * Creates a new suppressing suppression handler.
>, <Line: -                         *
>, <Line: -                         * @param throwableType The suppressed throwable type.
>, <Line: -                         */
>, <Line: -                        protected Suppressing(TypeDescription throwableType) {
>, <Line: -                            this.throwableType = throwableType;
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public SuppressionHandler.Bound bind() {
>, <Line: -                            return new Bound(throwableType);
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public boolean equals(Object object) {
>, <Line: -                            if (this == object) return true;
>, <Line: -                            if (object == null || getClass() != object.getClass()) return false;
>, <Line: -                            Suppressing that = (Suppressing) object;
>, <Line: -                            return throwableType.equals(that.throwableType);
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public int hashCode() {
>, <Line: -                            return throwableType.hashCode();
>, <Line: -                        }
>, <Line: -                        @Override
>, <Line: -                        public String toString() {
>, <Line: -                            return "Advice.Dispatcher.Active.CodeTranslationVisitor.SuppressionHandler.Suppressing{" +
>, <Line: -                                    "throwableType=" + throwableType +
>, <Line: -                                    '}';
>, <Line: -                        }
>, <Line: -                        /**
>, <Line: -                         * An active, bound suppression handler.
>, <Line: -                         */
>, <Line: -                        protected static class Bound implements SuppressionHandler.Bound {
>, <Line: -                            /**
>, <Line: -                             * The suppressed throwable type.
>, <Line: -                             */
>, <Line: -                            private final TypeDescription throwableType;
>, <Line: -                            /**
>, <Line: -                             * A label indicating the start of the method.
>, <Line: -                             */
>, <Line: -                            private final Label startOfMethod;
>, <Line: -                            /**
>, <Line: -                             * A label indicating the end of the method.
>, <Line: -                             */
>, <Line: -                            private final Label endOfMethod;
>, <Line: -                            /**
>, <Line: -                             * Creates a new active, bound suppression handler.
>, <Line: -                             *
>, <Line: -                             * @param throwableType The suppressed throwable type.
>, <Line: -                             */
>, <Line: -                            protected Bound(TypeDescription throwableType) {
>, <Line: -                                this.throwableType = throwableType;
>, <Line: -                                startOfMethod = new Label();
>, <Line: -                                endOfMethod = new Label();
>, <Line: -                            }
>, <Line: -                            @Override
>, <Line: -                            public void onPrepare(MethodVisitor methodVisitor) {
>, <Line: -                                methodVisitor.visitTryCatchBlock(startOfMethod, endOfMethod, endOfMethod, throwableType.getInternalName());
>, <Line: -                            }
>, <Line: -                            @Override
>, <Line: -                            public void onStart(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler) {
>, <Line: -                                methodVisitor.visitLabel(startOfMethod);
>, <Line: -                            }
>, <Line: -                            @Override
>, <Line: -                            public void onEnd(MethodVisitor methodVisitor, MetaDataHandler.ForAdvice metaDataHandler, ReturnValueProducer returnValueProducer) {
>, <Line: -                                Label endOfHandler = new Label();
>, <Line: -                                methodVisitor.visitLabel(endOfMethod);
>, <Line: -                                metaDataHandler.injectHandlerFrame(methodVisitor);
>, <Line: -                                methodVisitor.visitInsn(Opcodes.POP);
>, <Line: -                                returnValueProducer.makeDefault(methodVisitor);
>, <Line: -                                methodVisitor.visitLabel(endOfHandler);
>, <Line: -                            }
>, <Line: -                            @Override
>, <Line: -                            public String toString() {
>, <Line: -                                return "Advice.Dispatcher.Active.CodeTranslationVisitor.SuppressionHandler.Suppressing.Bound{" +
>, <Line: -                                        "throwableType=" + throwableType +
>, <Line: -                                        ", startOfMethod=" + startOfMethod +
>, <Line: -                                        ", endOfMethod=" + endOfMethod +
>, <Line: -                                        '}';
>, <Line: -                            }
>, <Line: -                        }
>, <Line: -                    }
>, <Line: -                }
>]