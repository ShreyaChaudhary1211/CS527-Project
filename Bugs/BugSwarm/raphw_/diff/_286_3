[<Line: +     * Represents a list of types in an untransformed form.
>, <Line: +    class OfTransformedTypes extends AbstractBase {
>, <Line: +         * The represented types in their untransformed form.
>, <Line: +        private final List<? extends GenericTypeDescription> untransformedTypes;
>, <Line: +         * The transformer to apply to these types.
>, <Line: +         * Creates a new list of untransformed types.
>, <Line: +         * @param untransformedTypes The represented types in their untransformed form.
>, <Line: +         * @param transformer        The transformer to apply to these types.
>, <Line: +        public OfTransformedTypes(List<? extends GenericTypeDescription> untransformedTypes,
>, <Line: +                                  GenericTypeDescription.Visitor<? extends GenericTypeDescription> transformer) {
>, <Line: +            this.untransformedTypes = untransformedTypes;
>, <Line: +            return new GenericTypeDescription.LazyProjection.OfTransformedType(untransformedTypes.get(index), transformer);
>, <Line: +            return untransformedTypes.size();
>]
[<Line: -     * A list of potentially raw generic type descriptions.
>, <Line: -    class OfPotentiallyRawType extends AbstractBase {
>, <Line: -         * The potentially raw types that are represented by this list.
>, <Line: -        private final List<? extends GenericTypeDescription> typeDescriptions;
>, <Line: -         * The transformer to apply to non-raw types.
>, <Line: -         * Creates a new list of potentially raw types.
>, <Line: -         * @param typeDescriptions The potentially raw types that are represented by this list.
>, <Line: -         * @param transformer      The transformer to apply to non-raw types.
>, <Line: -        public OfPotentiallyRawType(List<? extends GenericTypeDescription> typeDescriptions,
>, <Line: -                                    GenericTypeDescription.Visitor<? extends GenericTypeDescription> transformer) {
>, <Line: -            this.typeDescriptions = typeDescriptions;
>, <Line: -            return GenericTypeDescription.LazyProjection.OfPotentiallyRawType.of(typeDescriptions.get(index), transformer);
>, <Line: -            return typeDescriptions.size();
>]