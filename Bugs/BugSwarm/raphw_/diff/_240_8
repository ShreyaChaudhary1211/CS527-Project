[<Line: +                            return new ForJava8CapableVm(Class.class.getMethod("getAnnotatedSuperclass"),
>, <Line: +                                    Class.class.getMethod("getAnnotatedInterfaces"),
>, <Line: +                                    Field.class.getMethod("getAnnotatedType"),
>, <Line: +                                    Method.class.getMethod("getAnnotatedReturnType"),
>, <Line: +                                    Class.forName("java.lang.reflect.Executable").getMethod("getAnnotatedParameterTypes"),
>, <Line: +                                    Class.forName("java.lang.reflect.Executable").getMethod("getAnnotatedExceptionTypes"),
>, <Line: +                                    Class.forName("java.lang.reflect.Executable").getMethod("getAnnotatedReceiverType"),
>, <Line: +                                    Class.forName("java.lang.reflect.AnnotatedType").getMethod("getType"));
>, <Line: +                                return Class.forName(typeName).getMethod(methodName);
>]
[<Line: -                            return new ForJava8CapableVm(Class.class.getDeclaredMethod("getAnnotatedSuperclass"),
>, <Line: -                                    Class.class.getDeclaredMethod("getAnnotatedInterfaces"),
>, <Line: -                                    Field.class.getDeclaredMethod("getAnnotatedType"),
>, <Line: -                                    Method.class.getDeclaredMethod("getAnnotatedReturnType"),
>, <Line: -                                    Class.forName("java.lang.reflect.Executable").getDeclaredMethod("getAnnotatedParameterTypes"),
>, <Line: -                                    Class.forName("java.lang.reflect.Executable").getDeclaredMethod("getAnnotatedExceptionTypes"),
>, <Line: -                                    Class.forName("java.lang.reflect.Executable").getDeclaredMethod("getAnnotatedReceiverType"),
>, <Line: -                                    Class.forName("java.lang.reflect.AnnotatedType").getDeclaredMethod("getType"));
>, <Line: -                                return Class.forName(typeName).getDeclaredMethod(methodName);
>]