[<Line: +import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
>, <Line: +                if (Boolean.getBoolean(Nexus.PROPERTY)) {
>, <Line: +                    return new Unavailable(new IllegalStateException("Nexus injection was explicitly disabled"));
>, <Line: +                } else {
>, <Line: +                        Class<?> nexusType = new ClassInjector.UsingReflection(ClassLoader.getSystemClassLoader(), ClassLoadingStrategy.NO_PROTECTION_DOMAIN)
>, <Line: +                                .inject(Collections.singletonMap(new TypeDescription.ForLoadedType(Nexus.class), ClassFileLocator.ForClassLoader.read(Nexus.class).resolve()))
>, <Line: +                                .get(new TypeDescription.ForLoadedType(Nexus.class));
>, <Line: +                    } catch (Exception exception) {
>, <Line: +                        try {
>, <Line: +                            Class<?> nexusType = ClassLoader.getSystemClassLoader().loadClass(Nexus.class.getName());
>, <Line: +                            return new Dispatcher.Available(nexusType.getMethod("register", String.class, ClassLoader.class, ReferenceQueue.class, int.class, Object.class),
>, <Line: +                                    nexusType.getMethod("clean", Reference.class));
>, <Line: +                        } catch (Exception ignored) {
>, <Line: +                            return new Dispatcher.Unavailable(exception);
>, <Line: +                        }
>]
[<Line: -                try {
>, <Line: -                    Class<?> nexusType = new ClassInjector.UsingReflection(ClassLoader.getSystemClassLoader(), Nexus.class.getProtectionDomain())
>, <Line: -                            .inject(Collections.singletonMap(new TypeDescription.ForLoadedType(Nexus.class), ClassFileLocator.ForClassLoader.read(Nexus.class).resolve()))
>, <Line: -                            .get(new TypeDescription.ForLoadedType(Nexus.class));
>, <Line: -                    return new Dispatcher.Available(nexusType.getMethod("register", String.class, ClassLoader.class, ReferenceQueue.class, int.class, Object.class),
>, <Line: -                            nexusType.getMethod("clean", Reference.class));
>, <Line: -                } catch (Exception exception) {
>, <Line: -                        Class<?> nexusType = ClassLoader.getSystemClassLoader().loadClass(Nexus.class.getName());
>, <Line: -                    } catch (Exception ignored) {
>, <Line: -                        return new Dispatcher.Unavailable(exception);
>]