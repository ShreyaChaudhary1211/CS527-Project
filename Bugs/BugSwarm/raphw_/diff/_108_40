[]
[<Line: -package net.bytebuddy.agent.builder;
>, <Line: -import net.bytebuddy.description.type.TypeDescription;
>, <Line: -import net.bytebuddy.matcher.ElementMatcher;
>, <Line: -import net.bytebuddy.test.utility.MockitoRule;
>, <Line: -import net.bytebuddy.test.utility.ObjectPropertyAssertion;
>, <Line: -import org.junit.Rule;
>, <Line: -import org.junit.Test;
>, <Line: -import org.junit.rules.TestRule;
>, <Line: -import org.mockito.Mock;
>, <Line: -import java.security.ProtectionDomain;
>, <Line: -import static org.hamcrest.CoreMatchers.is;
>, <Line: -import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: -import static org.mockito.Mockito.*;
>, <Line: -public class AgentBuilderRawMatcherForElementMatcherPairTest {
>, <Line: -    @Rule
>, <Line: -    public TestRule mockitoRule = new MockitoRule(this);
>, <Line: -    @Mock
>, <Line: -    private ElementMatcher<TypeDescription> typeMatcher;
>, <Line: -    @Mock
>, <Line: -    private ElementMatcher<ClassLoader> classLoaderMatcher;
>, <Line: -    @Mock
>, <Line: -    private TypeDescription typeDescription;
>, <Line: -    @Mock
>, <Line: -    private ClassLoader classLoader;
>, <Line: -    @Mock
>, <Line: -    private ProtectionDomain protectionDomain;
>, <Line: -    @Test
>, <Line: -    public void testNoneMatches() throws Exception {
>, <Line: -        assertThat(new AgentBuilder.RawMatcher.ForElementMatcherPair(typeMatcher, classLoaderMatcher)
>, <Line: -                .matches(typeDescription, classLoader, Object.class, protectionDomain), is(false));
>, <Line: -        verify(classLoaderMatcher).matches(classLoader);
>, <Line: -        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: -        verifyZeroInteractions(typeMatcher);
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testClassLoaderMatches() throws Exception {
>, <Line: -        when(classLoaderMatcher.matches(classLoader)).thenReturn(true);
>, <Line: -        assertThat(new AgentBuilder.RawMatcher.ForElementMatcherPair(typeMatcher, classLoaderMatcher)
>, <Line: -                .matches(typeDescription, classLoader, Object.class, protectionDomain), is(false));
>, <Line: -        verify(classLoaderMatcher).matches(classLoader);
>, <Line: -        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: -        verify(typeMatcher).matches(typeDescription);
>, <Line: -        verifyNoMoreInteractions(typeMatcher);
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testTypeMatches() throws Exception {
>, <Line: -        when(typeMatcher.matches(typeDescription)).thenReturn(true);
>, <Line: -        assertThat(new AgentBuilder.RawMatcher.ForElementMatcherPair(typeMatcher, classLoaderMatcher)
>, <Line: -                .matches(typeDescription, classLoader, Object.class, protectionDomain), is(false));
>, <Line: -        verify(classLoaderMatcher).matches(classLoader);
>, <Line: -        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: -        verifyZeroInteractions(typeMatcher);
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testBothMatches() throws Exception {
>, <Line: -        when(classLoaderMatcher.matches(classLoader)).thenReturn(true);
>, <Line: -        when(typeMatcher.matches(typeDescription)).thenReturn(true);
>, <Line: -        assertThat(new AgentBuilder.RawMatcher.ForElementMatcherPair(typeMatcher, classLoaderMatcher)
>, <Line: -                .matches(typeDescription, classLoader, Object.class, protectionDomain), is(true));
>, <Line: -        verify(classLoaderMatcher).matches(classLoader);
>, <Line: -        verifyNoMoreInteractions(classLoaderMatcher);
>, <Line: -        verify(typeMatcher).matches(typeDescription);
>, <Line: -        verifyNoMoreInteractions(typeMatcher);
>, <Line: -    }
>, <Line: -    @Test
>, <Line: -    public void testObjectProperties() throws Exception {
>, <Line: -        ObjectPropertyAssertion.of(AgentBuilder.RawMatcher.ForElementMatcherPair.class).apply();
>, <Line: -    }
>, <Line: -}
>]