[<Line: +package net.bytebuddy.agent.builder;
>, <Line: +import net.bytebuddy.test.utility.MockitoRule;
>, <Line: +import net.bytebuddy.test.utility.ObjectPropertyAssertion;
>, <Line: +import org.junit.Rule;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.rules.TestRule;
>, <Line: +import org.mockito.Mock;
>, <Line: +import java.io.PrintStream;
>, <Line: +import java.lang.instrument.Instrumentation;
>, <Line: +import java.util.Collections;
>, <Line: +import java.util.List;
>, <Line: +import static org.hamcrest.CoreMatchers.is;
>, <Line: +import static org.hamcrest.CoreMatchers.nullValue;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +import static org.mockito.Mockito.*;
>, <Line: +public class AgentBuilderInstallationListenerTest {
>, <Line: +    @Rule
>, <Line: +    public TestRule mockitoRule = new MockitoRule(this);
>, <Line: +    @Mock
>, <Line: +    private Instrumentation instrumentation;
>, <Line: +    @Mock
>, <Line: +    private ResettableClassFileTransformer classFileTransformer;
>, <Line: +    @Mock
>, <Line: +    private Throwable throwable;
>, <Line: +    @Test
>, <Line: +    public void testNoOpListener() throws Exception {
>, <Line: +        AgentBuilder.InstallationListener.NoOp.INSTANCE.onInstall(instrumentation, classFileTransformer);
>, <Line: +        assertThat(AgentBuilder.InstallationListener.NoOp.INSTANCE.onError(instrumentation, classFileTransformer, throwable), is(throwable));
>, <Line: +        AgentBuilder.InstallationListener.NoOp.INSTANCE.onReset(instrumentation, classFileTransformer);
>, <Line: +        verifyZeroInteractions(instrumentation, classFileTransformer, throwable);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testErrorSuppressing() throws Exception {
>, <Line: +        AgentBuilder.InstallationListener.ErrorSuppressing.INSTANCE.onInstall(instrumentation, classFileTransformer);
>, <Line: +        AgentBuilder.InstallationListener.NoOp.INSTANCE.onReset(instrumentation, classFileTransformer);
>, <Line: +        verifyZeroInteractions(instrumentation, classFileTransformer, throwable);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testErrorSuppressingError() throws Exception {
>, <Line: +        assertThat(AgentBuilder.InstallationListener.ErrorSuppressing.INSTANCE.onError(instrumentation, classFileTransformer, throwable),
>, <Line: +                nullValue(Throwable.class));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testPrintWritingListenerInstall() throws Exception {
>, <Line: +        PrintStream printStream = mock(PrintStream.class);
>, <Line: +        AgentBuilder.InstallationListener installationListener = new AgentBuilder.InstallationListener.StreamWriting(printStream);
>, <Line: +        installationListener.onInstall(instrumentation, classFileTransformer);
>, <Line: +        verify(printStream).printf("[Byte Buddy] INSTALL %s on %s%n", classFileTransformer, instrumentation);
>, <Line: +        verifyNoMoreInteractions(printStream);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testPrintWritingListenerError() throws Exception {
>, <Line: +        PrintStream printStream = mock(PrintStream.class);
>, <Line: +        AgentBuilder.InstallationListener installationListener = new AgentBuilder.InstallationListener.StreamWriting(printStream);
>, <Line: +        assertThat(installationListener.onError(instrumentation, classFileTransformer, throwable), is(throwable));
>, <Line: +        verify(printStream).printf("[Byte Buddy] ERROR %s on %s%n", classFileTransformer, instrumentation);
>, <Line: +        verifyNoMoreInteractions(printStream);
>, <Line: +        verify(throwable).printStackTrace(printStream);
>, <Line: +        verifyNoMoreInteractions(throwable);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testPrintWritingListenerReset() throws Exception {
>, <Line: +        PrintStream printStream = mock(PrintStream.class);
>, <Line: +        AgentBuilder.InstallationListener installationListener = new AgentBuilder.InstallationListener.StreamWriting(printStream);
>, <Line: +        installationListener.onReset(instrumentation, classFileTransformer);
>, <Line: +        verify(printStream).printf("[Byte Buddy] RESET %s on %s%n", classFileTransformer, instrumentation);
>, <Line: +        verifyNoMoreInteractions(printStream);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testCompoundListenerInstall() throws Exception {
>, <Line: +        AgentBuilder.InstallationListener first = mock(AgentBuilder.InstallationListener.class), second = mock(AgentBuilder.InstallationListener.class);
>, <Line: +        AgentBuilder.InstallationListener installationListener = new AgentBuilder.InstallationListener.Compound(first, second);
>, <Line: +        installationListener.onInstall(instrumentation, classFileTransformer);
>, <Line: +        verify(first).onInstall(instrumentation, classFileTransformer);
>, <Line: +        verify(second).onInstall(instrumentation, classFileTransformer);
>, <Line: +        verifyNoMoreInteractions(first, second);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testCompoundListenerError() throws Exception {
>, <Line: +        AgentBuilder.InstallationListener first = mock(AgentBuilder.InstallationListener.class), second = mock(AgentBuilder.InstallationListener.class);
>, <Line: +        when(first.onError(instrumentation, classFileTransformer, throwable)).thenReturn(throwable);
>, <Line: +        when(second.onError(instrumentation, classFileTransformer, throwable)).thenReturn(throwable);
>, <Line: +        AgentBuilder.InstallationListener installationListener = new AgentBuilder.InstallationListener.Compound(first, second);
>, <Line: +        assertThat(installationListener.onError(instrumentation, classFileTransformer, throwable), is(throwable));
>, <Line: +        verify(first).onError(instrumentation, classFileTransformer, throwable);
>, <Line: +        verify(second).onError(instrumentation, classFileTransformer, throwable);
>, <Line: +        verifyNoMoreInteractions(first, second);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testCompoundListenerErrorHandled() throws Exception {
>, <Line: +        AgentBuilder.InstallationListener first = mock(AgentBuilder.InstallationListener.class), second = mock(AgentBuilder.InstallationListener.class);
>, <Line: +        when(first.onError(instrumentation, classFileTransformer, throwable)).thenReturn(null);
>, <Line: +        AgentBuilder.InstallationListener installationListener = new AgentBuilder.InstallationListener.Compound(first, second);
>, <Line: +        assertThat(installationListener.onError(instrumentation, classFileTransformer, throwable), nullValue(Throwable.class));
>, <Line: +        verify(first).onError(instrumentation, classFileTransformer, throwable);
>, <Line: +        verifyNoMoreInteractions(first);
>, <Line: +        verifyZeroInteractions(second);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testCompoundListenerReset() throws Exception {
>, <Line: +        AgentBuilder.InstallationListener first = mock(AgentBuilder.InstallationListener.class), second = mock(AgentBuilder.InstallationListener.class);
>, <Line: +        AgentBuilder.InstallationListener installationListener = new AgentBuilder.InstallationListener.Compound(first, second);
>, <Line: +        installationListener.onReset(instrumentation, classFileTransformer);
>, <Line: +        verify(first).onReset(instrumentation, classFileTransformer);
>, <Line: +        verify(second).onReset(instrumentation, classFileTransformer);
>, <Line: +        verifyNoMoreInteractions(first, second);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testObjectProperties() throws Exception {
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.InstallationListener.StreamWriting.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.InstallationListener.Compound.class)
>, <Line: +                .create(new ObjectPropertyAssertion.Creator<List<?>>() {
>, <Line: +            @Override
>, <Line: +            public List<?> create() {
>, <Line: +                return Collections.singletonList(mock(AgentBuilder.InstallationListener.class));
>, <Line: +            }
>, <Line: +        }).apply();
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.InstallationListener.ErrorSuppressing.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.InstallationListener.NoOp.class).apply();
>, <Line: +    }
>, <Line: +}
>]
[]