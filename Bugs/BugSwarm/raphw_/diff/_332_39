[<Line: +        assertThat(attached.getTypeArguments().size(), is(4));
>, <Line: +        assertThat(attached.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(attached.getTypeArguments().get(0).getSymbol(), is("T"));
>, <Line: +        assertThat(attached.getTypeArguments().get(0), is(target.getTypeVariables().filter(named("T")).getOnly()));
>, <Line: +        assertThat(attached.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(attached.getTypeArguments().get(1).asErasure().represents(String.class), is(true));
>, <Line: +        assertThat(attached.getTypeArguments().get(2).getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(attached.getTypeArguments().get(2).getSymbol(), is("U"));
>, <Line: +        assertThat(attached.getTypeArguments().get(2), is(target.getTypeVariables().filter(named("U")).getOnly()));
>, <Line: +        assertThat(attached.getTypeArguments().get(3).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(attached.getTypeArguments().get(3).asErasure().represents(List.class), is(true));
>, <Line: +        assertThat(attached.getTypeArguments().get(3).getTypeArguments().size(), is(1));
>, <Line: +        assertThat(attached.getTypeArguments().get(3).getTypeArguments().getOnly(), is(target.getTypeVariables().filter(named("S")).getOnly()));
>, <Line: +        assertThat(attached.getOwnerType().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(attached.getOwnerType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(attached.getOwnerType().getTypeArguments().getOnly().getSymbol(), is("T"));
>, <Line: +        assertThat(attached.getOwnerType().getTypeArguments().getOnly(), is(target.getTypeVariables().filter(named("T")).getOnly()));
>]
[<Line: -        assertThat(attached.getParameters().size(), is(4));
>, <Line: -        assertThat(attached.getParameters().get(0).getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: -        assertThat(attached.getParameters().get(0).getSymbol(), is("T"));
>, <Line: -        assertThat(attached.getParameters().get(0), is(target.getTypeVariables().filter(named("T")).getOnly()));
>, <Line: -        assertThat(attached.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(attached.getParameters().get(1).asErasure().represents(String.class), is(true));
>, <Line: -        assertThat(attached.getParameters().get(2).getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: -        assertThat(attached.getParameters().get(2).getSymbol(), is("U"));
>, <Line: -        assertThat(attached.getParameters().get(2), is(target.getTypeVariables().filter(named("U")).getOnly()));
>, <Line: -        assertThat(attached.getParameters().get(3).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: -        assertThat(attached.getParameters().get(3).asErasure().represents(List.class), is(true));
>, <Line: -        assertThat(attached.getParameters().get(3).getParameters().size(), is(1));
>, <Line: -        assertThat(attached.getParameters().get(3).getParameters().getOnly(), is(target.getTypeVariables().filter(named("S")).getOnly()));
>, <Line: -        assertThat(attached.getOwnerType().getParameters().size(), is(1));
>, <Line: -        assertThat(attached.getOwnerType().getParameters().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: -        assertThat(attached.getOwnerType().getParameters().getOnly().getSymbol(), is("T"));
>, <Line: -        assertThat(attached.getOwnerType().getParameters().getOnly(), is(target.getTypeVariables().filter(named("T")).getOnly()));
>]