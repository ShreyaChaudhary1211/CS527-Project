[<Line: +package net.bytebuddy.description.type;
>, <Line: +import net.bytebuddy.description.method.MethodDescription;
>, <Line: +import net.bytebuddy.test.utility.JavaVersionRule;
>, <Line: +import org.junit.Test;
>, <Line: +import java.lang.annotation.Annotation;
>, <Line: +import static net.bytebuddy.matcher.ElementMatchers.named;
>, <Line: +import static org.hamcrest.CoreMatchers.is;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +public abstract class AbstractTypeDescriptionGenericVariableDefiningTest extends AbstractTypeDescriptionGenericTest {
>, <Line: +    private static final String FOO = "foo";
>, <Line: +    private static final String T = "T", S = "S", U = "U", V = "V", W = "W", X = "X";
>, <Line: +    private static final String TYPE_ANNOTATION = "net.bytebuddy.test.precompiled.TypeAnnotation";
>, <Line: +    private static final String TYPE_ANNOTATION_SAMPLES = "net.bytebuddy.test.precompiled.TypeAnnotationSamples";
>, <Line: +    protected abstract TypeDescription describe(Class<?> type);
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeVariableT() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        TypeDescription typeDescription = describe(Class.forName(TYPE_ANNOTATION_SAMPLES));
>, <Line: +        TypeDescription.Generic t = typeDescription.getTypeVariables().filter(named(T)).getOnly();
>, <Line: +        assertThat(t.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(t.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(0));
>, <Line: +        assertThat(t.getUpperBounds().size(), is(1));
>, <Line: +        assertThat(t.getUpperBounds().contains(TypeDescription.Generic.OBJECT), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeVariableS() throws Exception {
>, <Line: +        TypeDescription typeDescription = describe(Class.forName(TYPE_ANNOTATION_SAMPLES));
>, <Line: +        TypeDescription.Generic t = typeDescription.getTypeVariables().filter(named(S)).getOnly();
>, <Line: +        assertThat(t.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(t.getDeclaredAnnotations().size(), is(0));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeVariableU() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        TypeDescription typeDescription = describe(Class.forName(TYPE_ANNOTATION_SAMPLES));
>, <Line: +        TypeDescription.Generic u = typeDescription.getTypeVariables().filter(named(U)).getOnly();
>, <Line: +        assertThat(u.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(u.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(u.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(u.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(2));
>, <Line: +        assertThat(u.getUpperBounds().get(0).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(u.getUpperBounds().get(0).getDeclaredAnnotations().size(), is(0));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(3));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getTypeArguments().get(0).getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getTypeArguments().get(0).getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(u.getUpperBounds().get(1).getTypeArguments().get(0).getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(4));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(5));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getTypeArguments().get(0).getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getTypeArguments().get(0).getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(u.getUpperBounds().get(2).getTypeArguments().get(0).getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(6));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeVariableV() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        TypeDescription typeDescription = describe(Class.forName(TYPE_ANNOTATION_SAMPLES));
>, <Line: +        TypeDescription.Generic v = typeDescription.getTypeVariables().filter(named(V)).getOnly();
>, <Line: +        assertThat(v.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(v.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(v.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(v.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(7));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getDeclaredAnnotations().size(), is(0));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(8));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getUpperBounds().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getUpperBounds().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(0).getUpperBounds().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(9));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(10));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getDeclaredAnnotations().ofType(typeAnnotation)
>, <Line: +                .getValue(value, Integer.class), is(11));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getDeclaredAnnotations()
>, <Line: +                .isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getDeclaredAnnotations()
>, <Line: +                .ofType(typeAnnotation).getValue(value, Integer.class), is(12));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getUpperBounds().get(0)
>, <Line: +                .getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getUpperBounds().get(0)
>, <Line: +                .getDeclaredAnnotations().size(), is(0));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getUpperBounds().get(1)
>, <Line: +                .getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getUpperBounds().get(1)
>, <Line: +                .getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getUpperBounds().get(1)
>, <Line: +                .getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(v.getUpperBounds().get(0).getTypeArguments().get(1).getTypeArguments().getOnly().getLowerBounds().getOnly().getUpperBounds().get(1)
>, <Line: +                .getDeclaredAnnotations().getOnly().prepare(typeAnnotation).getValue(value, Integer.class), is(3));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeVariableW() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        TypeDescription typeDescription = describe(Class.forName(TYPE_ANNOTATION_SAMPLES));
>, <Line: +        TypeDescription.Generic t = typeDescription.getTypeVariables().filter(named(W)).getOnly();
>, <Line: +        assertThat(t.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(t.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(13));
>, <Line: +        assertThat(t.getUpperBounds().size(), is(1));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(14));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    public void testTypeVariableX() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        TypeDescription typeDescription = describe(Class.forName(TYPE_ANNOTATION_SAMPLES));
>, <Line: +        TypeDescription.Generic t = typeDescription.getTypeVariables().filter(named(X)).getOnly();
>, <Line: +        assertThat(t.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(t.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(15));
>, <Line: +        assertThat(t.getUpperBounds().size(), is(1));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(16));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.WILDCARD));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getTypeArguments().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getTypeArguments().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getTypeArguments().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(17));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @SuppressWarnings("unchecked")
>, <Line: +    @JavaVersionRule.Enforce(8)
>, <Line: +    public void testMethodVariableT() throws Exception {
>, <Line: +        Class<? extends Annotation> typeAnnotation = (Class<? extends Annotation>) Class.forName(TYPE_ANNOTATION);
>, <Line: +        MethodDescription.InDefinedShape value = new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
>, <Line: +        MethodDescription methodDescription = describe(Class.forName(TYPE_ANNOTATION_SAMPLES)).getDeclaredMethods().filter(named(FOO)).getOnly();
>, <Line: +        TypeDescription.Generic t = methodDescription.getTypeVariables().getOnly();
>, <Line: +        assertThat(t.getSort(), is(TypeDefinition.Sort.VARIABLE));
>, <Line: +        assertThat(t.getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(26));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().size(), is(1));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation), is(true));
>, <Line: +        assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value, Integer.class), is(27));
>, <Line: +    }
>, <Line: +}
>]
[]