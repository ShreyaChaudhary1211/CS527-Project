[<Line: +import net.bytebuddy.dynamic.DynamicType;
>, <Line: +import net.bytebuddy.implementation.auxiliary.AuxiliaryType;
>, <Line: +import net.bytebuddy.implementation.bytecode.assign.Assigner;
>, <Line: +public class FieldProxyBinderTest extends AbstractAnnotationBinderTest<FieldProxy> {
>, <Line: +    private MethodDescription.InDefinedShape getterMethod, setterMethod;
>, <Line: +    public FieldProxyBinderTest() {
>, <Line: +        super(FieldProxy.class);
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    @Before
>, <Line: +    public void setUp() throws Exception {
>, <Line: +        super.setUp();
>, <Line: +        when(getterMethod.getDeclaringType()).thenReturn(getterType);
>, <Line: +        when(setterMethod.getDeclaringType()).thenReturn(setterType);
>, <Line: +        when(instrumentedType.getDeclaredFields()).thenReturn(new FieldList.Explicit<FieldDescription.InDefinedShape>(fieldDescription));
>, <Line: +        when(fieldDescription.getType()).thenReturn(genericFieldType);
>, <Line: +        when(genericFieldType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
>, <Line: +        when(genericFieldType.getStackSize()).thenReturn(StackSize.ZERO);
>, <Line: +        when(genericFieldType.asErasure()).thenReturn(fieldType);
>, <Line: +        when(fieldType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
>, <Line: +        when(fieldType.asErasure()).thenReturn(fieldType);
>, <Line: +        when(fieldType.getInternalName()).thenReturn(FOO);
>, <Line: +        when(genericSetterType.asErasure()).thenReturn(setterType);
>, <Line: +        when(genericGetterType.asErasure()).thenReturn(getterType);
>, <Line: +    }
>, <Line: +    @Override
>, <Line: +    protected TargetMethodAnnotationDrivenBinder.ParameterBinder<FieldProxy> getSimpleBinder() {
>, <Line: +        return new FieldProxy.Binder(getterMethod, setterMethod);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalStateException.class)
>, <Line: +    public void testFieldOfArrayThrowsException() throws Exception {
>, <Line: +        doReturn(Object[].class).when(annotation).declaringType();
>, <Line: +        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription, source, target, implementationTarget, assigner);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalStateException.class)
>, <Line: +    public void testFieldOfPrimitiveThrowsException() throws Exception {
>, <Line: +        doReturn(int.class).when(annotation).declaringType();
>, <Line: +        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription, source, target, implementationTarget, assigner);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalStateException.class)
>, <Line: +    public void testIllegalType() throws Exception {
>, <Line: +        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: +        when(annotation.value()).thenReturn(FOO);
>, <Line: +        TypeDescription targetType = mock(TypeDescription.class);
>, <Line: +        TypeDescription.Generic genericTargetType = mock(TypeDescription.Generic.class);
>, <Line: +        when(genericTargetType.asErasure()).thenReturn(targetType);
>, <Line: +        when(target.getType()).thenReturn(genericTargetType);
>, <Line: +        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: +        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription, source, target, implementationTarget, assigner);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testGetterForImplicitNamedFieldInHierarchy() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericGetterType);
>, <Line: +        doReturn(void.class).when(annotation).declaringType();
>, <Line: +        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: +        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: +        when(source.getName()).thenReturn("getFoo");
>, <Line: +        when(source.getActualName()).thenReturn("getFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testGetterForExplicitNamedFieldInHierarchy() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericGetterType);
>, <Line: +        doReturn(void.class).when(annotation).declaringType();
>, <Line: +        when(annotation.value()).thenReturn(FOO);
>, <Line: +        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: +        when(source.getName()).thenReturn("getFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testGetterForImplicitNamedFieldInNamedType() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericGetterType);
>, <Line: +        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: +        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: +        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: +        when(fieldDescription.getInternalName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: +        when(source.getName()).thenReturn("getFoo");
>, <Line: +        when(source.getActualName()).thenReturn("getFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testGetterForExplicitNamedFieldInNamedType() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericGetterType);
>, <Line: +        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: +        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: +        when(annotation.value()).thenReturn(FOO);
>, <Line: +        when(fieldDescription.getInternalName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: +        when(source.getName()).thenReturn("getFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testSetterForImplicitNamedFieldInHierarchy() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericSetterType);
>, <Line: +        doReturn(void.class).when(annotation).declaringType();
>, <Line: +        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: +        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: +        when(source.getActualName()).thenReturn("setFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testSetterForExplicitNamedFieldInHierarchy() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericSetterType);
>, <Line: +        doReturn(void.class).when(annotation).declaringType();
>, <Line: +        when(annotation.value()).thenReturn(FOO);
>, <Line: +        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: +        when(source.getName()).thenReturn("setFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testSetterForImplicitNamedFieldInNamedType() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericSetterType);
>, <Line: +        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: +        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: +        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: +        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: +        when(source.getName()).thenReturn("setFoo");
>, <Line: +        when(source.getActualName()).thenReturn("setFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testSetterForExplicitNamedFieldInNamedType() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericSetterType);
>, <Line: +        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: +        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: +        when(annotation.value()).thenReturn(FOO);
>, <Line: +        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: +        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: +        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: +        when(source.getName()).thenReturn("setFoo");
>, <Line: +        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: +        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testDefiningTypeNotAssignable() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericSetterType);
>, <Line: +        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: +        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(false);
>, <Line: +        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +        assertThat(binding.isValid(), is(false));
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalStateException.class)
>, <Line: +    public void testDefiningTypePrimitive() throws Exception {
>, <Line: +        when(target.getType()).thenReturn(genericSetterType);
>, <Line: +        doReturn(int.class).when(annotation).declaringType();
>, <Line: +        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: +                source,
>, <Line: +                target,
>, <Line: +                implementationTarget,
>, <Line: +                assigner);
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalStateException.class)
>, <Line: +    public void testUnresolvedResolverNoProxyType() throws Exception {
>, <Line: +        FieldProxy.Binder.FieldResolver.Unresolved.INSTANCE.getProxyType();
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalStateException.class)
>, <Line: +    public void testUnresolvedResolverNoApplication() throws Exception {
>, <Line: +        FieldProxy.Binder.FieldResolver.Unresolved.INSTANCE.apply(mock(DynamicType.Builder.class),
>, <Line: +                mock(FieldDescription.class),
>, <Line: +                mock(Assigner.class),
>, <Line: +                mock(AuxiliaryType.MethodAccessorFactory.class));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testObjectProperties() throws Exception {
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.StaticFieldConstructor.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.InstanceFieldConstructor.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.InstanceFieldConstructor.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>() {
>, <Line: +            @Override
>, <Line: +            @SuppressWarnings("unchecked")
>, <Line: +            public void apply(Implementation.Target mock) {
>, <Line: +                TypeDescription typeDescription = mock(TypeDescription.class);
>, <Line: +                when(mock.getInstrumentedType()).thenReturn(typeDescription);
>, <Line: +                FieldList fieldList = mock(FieldList.class);
>, <Line: +                FieldList filteredFieldList = mock(FieldList.class);
>, <Line: +                when(typeDescription.getDeclaredFields()).thenReturn(fieldList);
>, <Line: +                when(fieldList.filter(any(ElementMatcher.class))).thenReturn(filteredFieldList);
>, <Line: +                when(filteredFieldList.getOnly()).thenReturn(mock(FieldDescription.class));
>, <Line: +            }
>, <Line: +        }).skipSynthetic().apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldResolver.ForGetter.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldResolver.ForSetter.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldResolver.ForGetterSetterPair.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldResolver.Unresolved.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldResolver.Factory.Simplex.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldResolver.Factory.Duplex.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessorProxy.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldGetter.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldGetter.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>() {
>, <Line: +            @Override
>, <Line: +            public void apply(Implementation.Target mock) {
>, <Line: +                when(mock.getInstrumentedType()).thenReturn(mock(TypeDescription.class));
>, <Line: +            }
>, <Line: +        }).skipSynthetic().apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldSetter.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.FieldSetter.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>() {
>, <Line: +            @Override
>, <Line: +            public void apply(Implementation.Target mock) {
>, <Line: +                when(mock.getInstrumentedType()).thenReturn(mock(TypeDescription.class));
>, <Line: +            }
>, <Line: +        }).skipSynthetic().apply();
>, <Line: +        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessorProxy.class).apply();
>, <Line: +    }
>]
[<Line: -public class FieldProxyBinderTest /*extends AbstractAnnotationBinderTest<FieldProxy>*/ {
>, <Line: -    private MethodDescription getterMethod, setterMethod;
>, <Line: -//
>, <Line: -//    public FieldProxyBinderTest() {
>, <Line: -//        super(FieldProxy.class);
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Override
>, <Line: -//    //@Before
>, <Line: -//    public void setUp() throws Exception {
>, <Line: -//        super.setUp();
>, <Line: -//        when(getterMethod.getDeclaringType()).thenReturn(getterType);
>, <Line: -//        when(setterMethod.getDeclaringType()).thenReturn(setterType);
>, <Line: -//        when(instrumentedType.getDeclaredFields()).thenReturn(new FieldList.Explicit<FieldDescription.InDefinedShape>(fieldDescription));
>, <Line: -//        when(fieldDescription.getType()).thenReturn(genericFieldType);
>, <Line: -//        when(genericFieldType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
>, <Line: -//        when(genericFieldType.getStackSize()).thenReturn(StackSize.ZERO);
>, <Line: -//        when(genericFieldType.asErasure()).thenReturn(fieldType);
>, <Line: -//        when(fieldType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
>, <Line: -//        when(fieldType.asErasure()).thenReturn(fieldType);
>, <Line: -//        when(fieldType.getInternalName()).thenReturn(FOO);
>, <Line: -//        when(genericSetterType.asErasure()).thenReturn(setterType);
>, <Line: -//        when(genericGetterType.asErasure()).thenReturn(getterType);
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    // TODO: Redo
>, <Line: -//
>, <Line: -//    @Override
>, <Line: -//    protected TargetMethodAnnotationDrivenBinder.ParameterBinder<FieldProxy> getSimpleBinder() {
>, <Line: -//        return null; //new FieldProxy.Binder(getterMethod, setterMethod);
>, <Line: -//    }
>, <Line: -//
>, <Line: -//
>, <Line: -//    @Test(expected = IllegalStateException.class)
>, <Line: -//    public void testFieldOfArrayThrowsException() throws Exception {
>, <Line: -//        doReturn(Object[].class).when(annotation).declaringType();
>, <Line: -//        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription, source, target, implementationTarget, assigner);
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test(expected = IllegalStateException.class)
>, <Line: -//    public void testFieldOfPrimitiveThrowsException() throws Exception {
>, <Line: -//        doReturn(int.class).when(annotation).declaringType();
>, <Line: -//        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription, source, target, implementationTarget, assigner);
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test(expected = IllegalStateException.class)
>, <Line: -//    public void testIllegalType() throws Exception {
>, <Line: -//        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: -//        when(annotation.value()).thenReturn(FOO);
>, <Line: -//        TypeDescription targetType = mock(TypeDescription.class);
>, <Line: -//        TypeDescription.Generic genericTargetType = mock(TypeDescription.Generic.class);
>, <Line: -//        when(genericTargetType.asErasure()).thenReturn(targetType);
>, <Line: -//        when(target.getType()).thenReturn(genericTargetType);
>, <Line: -//        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: -//        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testGetterForImplicitNamedFieldInHierarchy() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericGetterType);
>, <Line: -//        doReturn(void.class).when(annotation).declaringType();
>, <Line: -//        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: -//        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: -//        when(source.getName()).thenReturn("getFoo");
>, <Line: -//        when(source.getActualName()).thenReturn("getFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testGetterForExplicitNamedFieldInHierarchy() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericGetterType);
>, <Line: -//        doReturn(void.class).when(annotation).declaringType();
>, <Line: -//        when(annotation.value()).thenReturn(FOO);
>, <Line: -//        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: -//        when(source.getName()).thenReturn("getFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testGetterForImplicitNamedFieldInNamedType() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericGetterType);
>, <Line: -//        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: -//        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: -//        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: -//        when(fieldDescription.getInternalName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: -//        when(source.getName()).thenReturn("getFoo");
>, <Line: -//        when(source.getActualName()).thenReturn("getFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testGetterForExplicitNamedFieldInNamedType() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericGetterType);
>, <Line: -//        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: -//        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: -//        when(annotation.value()).thenReturn(FOO);
>, <Line: -//        when(fieldDescription.getInternalName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(genericFieldType);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
>, <Line: -//        when(source.getName()).thenReturn("getFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("getFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testSetterForImplicitNamedFieldInHierarchy() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericSetterType);
>, <Line: -//        doReturn(void.class).when(annotation).declaringType();
>, <Line: -//        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: -//        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: -//        when(source.getActualName()).thenReturn("setFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testSetterForExplicitNamedFieldInHierarchy() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericSetterType);
>, <Line: -//        doReturn(void.class).when(annotation).declaringType();
>, <Line: -//        when(annotation.value()).thenReturn(FOO);
>, <Line: -//        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: -//        when(source.getName()).thenReturn("setFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testSetterForImplicitNamedFieldInNamedType() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericSetterType);
>, <Line: -//        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: -//        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: -//        when(annotation.value()).thenReturn(FieldProxy.Binder.BEAN_PROPERTY);
>, <Line: -//        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: -//        when(source.getName()).thenReturn("setFoo");
>, <Line: -//        when(source.getActualName()).thenReturn("setFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testSetterForExplicitNamedFieldInNamedType() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericSetterType);
>, <Line: -//        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: -//        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
>, <Line: -//        when(annotation.value()).thenReturn(FOO);
>, <Line: -//        when(fieldDescription.getActualName()).thenReturn(FOO);
>, <Line: -//        when(source.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
>, <Line: -//        when(source.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(source, fieldType));
>, <Line: -//        when(source.getName()).thenReturn("setFoo");
>, <Line: -//        when(source.getInternalName()).thenReturn("setFoo");
>, <Line: -//        when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(true));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testDefiningTypeNotAssignable() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericSetterType);
>, <Line: -//        doReturn(Foo.class).when(annotation).declaringType();
>, <Line: -//        when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(false);
>, <Line: -//        MethodDelegationBinder.ParameterBinding<?> binding = new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//        assertThat(binding.isValid(), is(false));
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test(expected = IllegalStateException.class)
>, <Line: -//    public void testDefiningTypePrimitive() throws Exception {
>, <Line: -//        when(target.getType()).thenReturn(genericSetterType);
>, <Line: -//        doReturn(int.class).when(annotation).declaringType();
>, <Line: -//        new FieldProxy.Binder(getterMethod, setterMethod).bind(annotationDescription,
>, <Line: -//                source,
>, <Line: -//                target,
>, <Line: -//                implementationTarget,
>, <Line: -//                assigner);
>, <Line: -//    }
>, <Line: -//
>, <Line: -//    @Test
>, <Line: -//    public void testObjectProperties() throws Exception {
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.class).apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.StaticFieldConstructor.class).apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.InstanceFieldConstructor.class).apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.InstanceFieldConstructor.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>() {
>, <Line: -//            @Override
>, <Line: -//            @SuppressWarnings("unchecked")
>, <Line: -//            public void apply(Implementation.Target mock) {
>, <Line: -//                TypeDescription typeDescription = mock(TypeDescription.class);
>, <Line: -//                when(mock.getInstrumentedType()).thenReturn(typeDescription);
>, <Line: -//                FieldList fieldList = mock(FieldList.class);
>, <Line: -//                FieldList filteredFieldList = mock(FieldList.class);
>, <Line: -//                when(typeDescription.getDeclaredFields()).thenReturn(fieldList);
>, <Line: -//                when(fieldList.filter(any(ElementMatcher.class))).thenReturn(filteredFieldList);
>, <Line: -//                when(filteredFieldList.getOnly()).thenReturn(mock(FieldDescription.class));
>, <Line: -//            }
>, <Line: -//        }).skipSynthetic().apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.class).apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Getter.class).apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Getter.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>() {
>, <Line: -//            @Override
>, <Line: -//            public void apply(Implementation.Target mock) {
>, <Line: -//                when(mock.getInstrumentedType()).thenReturn(mock(TypeDescription.class));
>, <Line: -//            }
>, <Line: -//        }).skipSynthetic().apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Setter.class).apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Setter.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>() {
>, <Line: -//            @Override
>, <Line: -//            public void apply(Implementation.Target mock) {
>, <Line: -//                when(mock.getInstrumentedType()).thenReturn(mock(TypeDescription.class));
>, <Line: -//            }
>, <Line: -//        }).skipSynthetic().apply();
>, <Line: -//        ObjectPropertyAssertion.of(FieldProxy.Binder.AccessorProxy.class).apply();
>, <Line: -//    }
>]