[<Line: +package net.bytebuddy.asm;
>, <Line: +import net.bytebuddy.ByteBuddy;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.runner.RunWith;
>, <Line: +import org.junit.runners.Parameterized;
>, <Line: +import org.objectweb.asm.ClassWriter;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.Collection;
>, <Line: +import static net.bytebuddy.matcher.ElementMatchers.named;
>, <Line: +@RunWith(Parameterized.class)
>, <Line: +public class AdviceWriteTest {
>, <Line: +    private static final String FOO = "foo", BAR = "bar", ENTER = "enter", EXIT = "exit", exception = "exception";
>, <Line: +    private static final byte VALUE = 42;
>, <Line: +    private static final boolean BOOLEAN = true;
>, <Line: +    @Parameterized.Parameters
>, <Line: +    public static Collection<Object[]> data() {
>, <Line: +        return Arrays.asList(new Object[][]{
>, <Line: +                {BooleanAdvice.class},
>, <Line: +                {ByteAdvice.class},
>, <Line: +                {ShortAdvice.class},
>, <Line: +                {CharacterAdvice.class},
>, <Line: +                {IntegerAdvice.class},
>, <Line: +                {LongAdvice.class},
>, <Line: +                {FloatAdvice.class},
>, <Line: +                {DoubleAdvice.class},
>, <Line: +                {ReferenceAdvice.class}
>, <Line: +        });
>, <Line: +    }
>, <Line: +    private final Class<?> type;
>, <Line: +    public AdviceWriteTest(Class<?> type) {
>, <Line: +        this.type = type;
>, <Line: +    }
>, <Line: +    @Test(expected = IllegalStateException.class)
>, <Line: +    public void testIllegalAssignment() throws Exception {
>, <Line: +        new ByteBuddy()
>, <Line: +                .redefine(type)
>, <Line: +                .visit(new AsmVisitorWrapper.ForDeclaredMethods().writerFlags(ClassWriter.COMPUTE_FRAMES).method(named(FOO), Advice.to(type)))
>, <Line: +                .make();
>, <Line: +    }
>, <Line: +    public static class BooleanAdvice {
>, <Line: +        void foo(boolean value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) boolean value) {
>, <Line: +            value = BOOLEAN;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class ByteAdvice {
>, <Line: +        void foo(byte value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) byte value) {
>, <Line: +            value = VALUE;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class ShortAdvice {
>, <Line: +        void foo(short value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) short value) {
>, <Line: +            value = VALUE;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class CharacterAdvice {
>, <Line: +        void foo(char value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) char value) {
>, <Line: +            value = VALUE;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class IntegerAdvice {
>, <Line: +        void foo(int value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) int value) {
>, <Line: +            value = VALUE;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class LongAdvice {
>, <Line: +        void foo(long value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) long value) {
>, <Line: +            value = VALUE;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class FloatAdvice {
>, <Line: +        void foo(float value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) float value) {
>, <Line: +            value = VALUE;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class DoubleAdvice {
>, <Line: +        void foo(double value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) double value) {
>, <Line: +            value = VALUE;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    public static class ReferenceAdvice {
>, <Line: +        void foo(Object value) {
>, <Line: +            /* empty */
>, <Line: +        }
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        public static void enter(@Advice.Argument(0) Object value) {
>, <Line: +            value = FOO;
>, <Line: +        }
>, <Line: +    }
>, <Line: +}>]
[]