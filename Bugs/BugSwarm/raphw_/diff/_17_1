[<Line: +    @Test
>, <Line: +    public void testSuccessfulWithExistingClassFallback() throws Exception {
>, <Line: +        when(dynamicType.getBytes()).thenReturn(BAZ);
>, <Line: +        when(typeMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED), REDEFINED, REDEFINED.getProtectionDomain()))
>, <Line: +                .thenThrow(new RuntimeException());
>, <Line: +        when(typeMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED), null, REDEFINED.getProtectionDomain()))
>, <Line: +                .thenReturn(true);
>, <Line: +        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
>, <Line: +        ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
>, <Line: +                .with(initializationStrategy)
>, <Line: +                .with(poolStrategy)
>, <Line: +                .with(typeStrategy)
>, <Line: +                .with(installationStrategy)
>, <Line: +                .with(listener)
>, <Line: +                .with(AgentBuilder.FallbackStrategy.Default.ENABLED)
>, <Line: +                .disableNativeMethodPrefix()
>, <Line: +                .ignore(none())
>, <Line: +                .type(typeMatcher).transform(transformer)
>, <Line: +                .installOn(instrumentation);
>, <Line: +        assertThat(transform(classFileTransformer, JavaModule.ofType(REDEFINED), REDEFINED.getClassLoader(), REDEFINED.getName(), REDEFINED, REDEFINED.getProtectionDomain(), QUX), is(BAZ));
>, <Line: +        verify(listener).onTransformation(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED), dynamicType);
>, <Line: +        verify(listener).onComplete(REDEFINED.getName(), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED));
>, <Line: +        verifyNoMoreInteractions(listener);
>, <Line: +        verify(instrumentation).addTransformer(classFileTransformer, false);
>, <Line: +        verifyNoMoreInteractions(instrumentation);
>, <Line: +        verify(initializationStrategy).dispatcher();
>, <Line: +        verifyNoMoreInteractions(initializationStrategy);
>, <Line: +        verify(dispatcher).apply(builder);
>, <Line: +        verify(dispatcher).register(dynamicType,
>, <Line: +                REDEFINED.getClassLoader(),
>, <Line: +                new AgentBuilder.Default.Transformation.Simple.Resolution.BootstrapClassLoaderCapableInjectorFactory(
>, <Line: +                        AgentBuilder.Default.BootstrapInjectionStrategy.Disabled.INSTANCE,
>, <Line: +                        REDEFINED.getClassLoader(),
>, <Line: +                        REDEFINED.getProtectionDomain()));
>, <Line: +        verifyNoMoreInteractions(dispatcher);
>, <Line: +        verifyZeroInteractions(installationStrategy);
>, <Line: +    }
>, <Line: +    /*
>, <Line: +     */
>, <Line: +    @Test
>, <Line: +    public void testSuccessfulWithRetransformationMatchedFallback() throws Exception {
>, <Line: +        when(typeMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED), REDEFINED, REDEFINED.getProtectionDomain()))
>, <Line: +                .thenThrow(new RuntimeException());
>, <Line: +        when(typeMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED), null, REDEFINED.getProtectionDomain()))
>, <Line: +                .thenReturn(true);
>, <Line: +        when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
>, <Line: +        when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
>, <Line: +        when(instrumentation.isRetransformClassesSupported()).thenReturn(true);
>, <Line: +        ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
>, <Line: +                .with(initializationStrategy)
>, <Line: +                .with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)
>, <Line: +                .with(poolStrategy)
>, <Line: +                .with(typeStrategy)
>, <Line: +                .with(installationStrategy)
>, <Line: +                .with(AgentBuilder.FallbackStrategy.Default.ENABLED)
>, <Line: +                .with(listener)
>, <Line: +                .disableNativeMethodPrefix()
>, <Line: +                .ignore(none())
>, <Line: +                .type(typeMatcher).transform(transformer)
>, <Line: +                .installOn(instrumentation);
>, <Line: +        verifyZeroInteractions(listener);
>, <Line: +        verify(instrumentation).addTransformer(classFileTransformer, true);
>, <Line: +        verify(instrumentation).getAllLoadedClasses();
>, <Line: +        verify(instrumentation).isModifiableClass(REDEFINED);
>, <Line: +        verify(instrumentation).retransformClasses(REDEFINED);
>, <Line: +        verify(instrumentation).isRetransformClassesSupported();
>, <Line: +        verifyNoMoreInteractions(instrumentation);
>, <Line: +        verify(typeMatcher).matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED), REDEFINED, REDEFINED.getProtectionDomain());
>, <Line: +        verify(typeMatcher).matches(new TypeDescription.ForLoadedType(REDEFINED), REDEFINED.getClassLoader(), JavaModule.ofType(REDEFINED), null, REDEFINED.getProtectionDomain());
>, <Line: +        verifyNoMoreInteractions(typeMatcher);
>, <Line: +        verifyZeroInteractions(initializationStrategy);
>, <Line: +        verifyZeroInteractions(installationStrategy);
>, <Line: +    }
>]
[]