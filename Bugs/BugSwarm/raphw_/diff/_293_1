[<Line: +import java.util.Arrays;
>, <Line: +import java.util.HashMap;
>, <Line: +import java.util.Iterator;
>, <Line: +import java.util.Map;
>, <Line: +        assertThat(classFileTransformer.transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), is(BAZ));
>, <Line: +    public void testSkipRetransformationWithNonRedefinable() throws Exception {
>, <Line: +        when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(false);
>, <Line: +        verifyZeroInteractions(listener);
>, <Line: +        verify(instrumentation).addTransformer(classFileTransformer, true);
>, <Line: +        verify(instrumentation).isModifiableClass(REDEFINED);
>, <Line: +        verify(instrumentation).getAllLoadedClasses();
>, <Line: +        verifyNoMoreInteractions(instrumentation);
>, <Line: +        verifyZeroInteractions(rawMatcher);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testSkipRetransformationWithNonMatched() throws Exception {
>, <Line: +        when(unloaded.getBytes()).thenReturn(BAZ);
>, <Line: +        when(resolution.resolve()).thenReturn(typeDescription);
>, <Line: +        when(rawMatcher.matches(typeDescription, classLoader, REDEFINED, protectionDomain)).thenReturn(false);
>, <Line: +        when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
>, <Line: +        ClassFileTransformer classFileTransformer = new AgentBuilder.Default(byteBuddy)
>, <Line: +                .disableSelfInitialization()
>, <Line: +                .allowRetransformation()
>, <Line: +                .withBinaryLocator(binaryLocator)
>, <Line: +                .withDefinitionHandler(definitionHandler)
>, <Line: +                .withListener(listener)
>, <Line: +                .type(rawMatcher).transform(transformer)
>, <Line: +                .installOn(instrumentation);
>, <Line: +        verifyZeroInteractions(listener);
>, <Line: +        verify(instrumentation).isModifiableClass(REDEFINED);
>, <Line: +        verify(rawMatcher).matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
>, <Line: +        verifyNoMoreInteractions(rawMatcher);
>, <Line: +        when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
>, <Line: +        verify(instrumentation).isModifiableClass(REDEFINED);
>, <Line: +        verify(rawMatcher).matches(TypeDescription.OBJECT, REDEFINED.getClassLoader(), REDEFINED, REDEFINED.getProtectionDomain());
>, <Line: +        verifyNoMoreInteractions(rawMatcher);
>, <Line: +        assertThat(classFileTransformer.transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), nullValue(byte[].class));
>, <Line: +        assertThat(classFileTransformer.transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), nullValue(byte[].class));
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Simple.Resolution.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Ignored.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Compound.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Resolution.Unresolved.class).apply();
>]
[<Line: -import org.mockito.invocation.InvocationOnMock;
>, <Line: -import org.mockito.stubbing.Answer;
>, <Line: -import java.util.*;
>, <Line: -    private List<ClassFileTransformer> classFileTransformers;
>, <Line: -        classFileTransformers = new LinkedList<ClassFileTransformer>();
>, <Line: -        doAnswer(new Answer<Object>() {
>, <Line: -            @Override
>, <Line: -            public Object answer(InvocationOnMock invocation) throws Throwable {
>, <Line: -                return classFileTransformers.add((ClassFileTransformer) invocation.getArguments()[0]);
>, <Line: -            }
>, <Line: -        }).when(instrumentation).addTransformer(any(ClassFileTransformer.class), anyBoolean());
>, <Line: -        assertThat(classFileTransformers.size(), is(1));
>, <Line: -        assertThat(classFileTransformers.get(0).transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), is(BAZ));
>, <Line: -    public void testSkipRetransformationWithNonMatched() throws Exception {
>, <Line: -        assertThat(classFileTransformers.size(), is(1));
>, <Line: -        assertThat(classFileTransformers.get(0).transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), is(BAZ));
>, <Line: -        verify(listener).onTransformation(typeDescription, unloaded);
>, <Line: -        verify(listener).onComplete(FOO);
>, <Line: -        verifyNoMoreInteractions(listener);
>, <Line: -        assertThat(classFileTransformers.size(), is(1));
>, <Line: -        assertThat(classFileTransformers.size(), is(1));
>, <Line: -        assertThat(classFileTransformers.get(0).transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), nullValue(byte[].class));
>, <Line: -        assertThat(classFileTransformers.size(), is(1));
>, <Line: -        assertThat(classFileTransformers.get(0).transform(classLoader, FOO, REDEFINED, protectionDomain, QUX), nullValue(byte[].class));
>]