[<Line: + * <p>
>, <Line: + * </p>
>, <Line: + * <p>
>, <Line: + * process.
>, <Line: + * </p>
>]
[<Line: - * <p>&nbsp;</p>
>, <Line: - * process. The following example demonstrates how the {@code @Pipe} annotation can be installed on a user type.
>, <Line: - * As a preparation, one needs to define a type for which the {@code @Pipe} implements the forwarding behavior:
>, <Line: - * <pre>
>, <Line: - * interface Forwarder&lt;T, S&gt; {
>, <Line: - *   T forwardTo(S s);
>, <Line: - * }
>, <Line: - * </pre>
>, <Line: - * Based on this type, one can now implement an interceptor:
>, <Line: - * <pre>
>, <Line: - * class Interceptor {
>, <Line: - *   private final Foo foo;
>, <Line: - *
>, <Line: - *   public Interceptor(Foo foo) {
>, <Line: - *     this.foo = foo;
>, <Line: - *   }
>, <Line: - *
>, <Line: - *   public String intercept(@Pipe Forwarder&lt;String, Foo&gt; forwarder) {
>, <Line: - *     return forwarder.forwardTo(foo);
>, <Line: - *   }
>, <Line: - * }
>, <Line: - * </pre>
>, <Line: - * Using both of these types, one can now install the
>, <Line: - * {@link net.bytebuddy.implementation.bind.annotation.Pipe.Binder} and register it on a
>, <Line: - * {@link net.bytebuddy.implementation.MethodDelegation}:
>, <Line: - * <pre>
>, <Line: - * MethodDelegation
>, <Line: - *   .to(new Interceptor(new Foo()))
>, <Line: - *   .appendParameterBinder(Pipe.Binder.install(ForwardingType.class))
>, <Line: - * </pre>
>]