[<Line: +    /**
>, <Line: +     * {@code true} if this advice should replace a super method invocation if used as an {@link Implementation}.
>, <Line: +     */
>, <Line: +    /**
>, <Line: +     * Creates a new advice.
>, <Line: +     *
>, <Line: +     * @param methodEnter The dispatcher for instrumenting the instrumented method upon entering.
>, <Line: +     * @param methodExit  The dispatcher for instrumenting the instrumented method upon exiting.
>, <Line: +     */
>, <Line: +     * @param replace     {@code true} if this advice should replace a super method invocation if used as an {@link Implementation}.
>, <Line: +            StackManipulation invocation = replace
>, <Line: +                    ? StackManipulation.Illegal.INSTANCE
>, <Line: +                    : implementationTarget.invokeDominant(instrumentedMethod.asSignatureToken());
>, <Line: +            return emulatingMethodVisitor.resolve(methodVisitor, implementationContext, new StackManipulation.Compound(invocation.isValid()
>]
[<Line: -            StackManipulation invocation = implementationTarget.invokeDominant(instrumentedMethod.asSignatureToken());
>, <Line: -            return emulatingMethodVisitor.resolve(methodVisitor, implementationContext, new StackManipulation.Compound(invocation.isValid() && !replace
>]