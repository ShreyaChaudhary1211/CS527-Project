[<Line: +     * Returns a description of the method that encloses this type. If this method is not enclosed by any type or is
>, <Line: +     * enclosed by the type initializer, {@code null} is returned by this method.
>, <Line: +     * Returns a description of this type's enclosing type if any.
>, <Line: +     * @return A description of the enclosing type of this type or {@code null} if there is no such type.
>, <Line: +     * returned modifiers take also into account if the type is marked as {@link Deprecated}. Anonymous classes that are
>, <Line: +     * enclosed in a static method or the type initializer are additionally marked as {@code final} as it is also done
>, <Line: +     * by the Java compiler.
>, <Line: +            if (isAnonymousClass()) {
>, <Line: +                MethodDescription enclosingMethod = getEnclosingMethod();
>, <Line: +                if (enclosingMethod == null || enclosingMethod.isStatic()) {
>, <Line: +                    actualModifiers |= Opcodes.ACC_FINAL;
>, <Line: +                }
>, <Line: +            }
>]
[<Line: -     * Returns a description of the enclosing method of this type.
>, <Line: -     * Returns a description of the enclosing type of this type.
>, <Line: -     * @return A  description of the enclosing type of this type or {@code null} if there is no such type.
>, <Line: -     * returned modifiers take also into account if the type is marked as {@link Deprecated}.
>]