[<Line: +        assertThat(detached.getTypeArguments().size(), is(4));
>, <Line: +        assertThat(detached.getTypeArguments().get(0).getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: +        assertThat(detached.getTypeArguments().get(0).getSymbol(), is("T"));
>, <Line: +        assertThat(detached.getTypeArguments().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(detached.getTypeArguments().get(1).asErasure().represents(String.class), is(true));
>, <Line: +        assertThat(detached.getTypeArguments().get(2).getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: +        assertThat(detached.getTypeArguments().get(2).getSymbol(), is("U"));
>, <Line: +        assertThat(detached.getTypeArguments().get(3).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(detached.getTypeArguments().get(3).getTypeArguments().size(), is(1));
>, <Line: +        assertThat(detached.getTypeArguments().get(3).getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: +        assertThat(detached.getTypeArguments().get(3).getTypeArguments().getOnly().getSymbol(), is("S"));
>, <Line: +        assertThat(detached.getOwnerType().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(detached.getOwnerType().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: +        assertThat(detached.getOwnerType().getTypeArguments().getOnly().getSymbol(), is("T"));
>, <Line: +        detached.getTypeArguments().get(0).getVariableSource();
>]
[<Line: -        assertThat(detached.getParameters().size(), is(4));
>, <Line: -        assertThat(detached.getParameters().get(0).getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: -        assertThat(detached.getParameters().get(0).getSymbol(), is("T"));
>, <Line: -        assertThat(detached.getParameters().get(1).getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: -        assertThat(detached.getParameters().get(1).asErasure().represents(String.class), is(true));
>, <Line: -        assertThat(detached.getParameters().get(2).getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: -        assertThat(detached.getParameters().get(2).getSymbol(), is("U"));
>, <Line: -        assertThat(detached.getParameters().get(3).getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: -        assertThat(detached.getParameters().get(3).getParameters().size(), is(1));
>, <Line: -        assertThat(detached.getParameters().get(3).getParameters().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: -        assertThat(detached.getParameters().get(3).getParameters().getOnly().getSymbol(), is("S"));
>, <Line: -        assertThat(detached.getOwnerType().getParameters().size(), is(1));
>, <Line: -        assertThat(detached.getOwnerType().getParameters().getOnly().getSort(), is(TypeDefinition.Sort.VARIABLE_SYMBOLIC));
>, <Line: -        assertThat(detached.getOwnerType().getParameters().getOnly().getSymbol(), is("T"));
>, <Line: -        detached.getParameters().get(0).getVariableSource();
>]