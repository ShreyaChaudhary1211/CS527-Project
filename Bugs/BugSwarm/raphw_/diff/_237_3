[<Line: +     * Creates a new target method annotation-driven binder.
>, <Line: +     *
>, <Line: +     * @param delegationProcessor The delegation proessor to use.
>, <Line: +    protected TargetMethodAnnotationDrivenBinder(DelegationProcessor delegationProcessor) {
>, <Line: +     * @param parameterBinders A list of parameter binder delegates. Each such delegate is responsible for creating a
>, <Line: +     *                         {@link net.bytebuddy.implementation.bind.MethodDelegationBinder.ParameterBinding}
>, <Line: +     *                         for a specific annotation.
>, <Line: +     * @return An appropriate method delegation binder.
>, <Line: +    public static MethodDelegationBinder of(List<? extends ParameterBinder<?>> parameterBinders) {
>, <Line: +        return new TargetMethodAnnotationDrivenBinder(DelegationProcessor.of(parameterBinders));
>, <Line: +    public MethodDelegationBinder.Record compile(MethodDescription candidate) {
>, <Line: +        if (IgnoreForBinding.Verifier.check(candidate)) {
>, <Line: +            return MethodDelegationBinder.Record.Illegal.INSTANCE;
>, <Line: +        List<DelegationProcessor.Handler> handlers = new ArrayList<DelegationProcessor.Handler>(candidate.getParameters().size());
>, <Line: +        for (ParameterDescription parameterDescription : candidate.getParameters()) {
>, <Line: +        return new Record(candidate, handlers);
>, <Line: +        return delegationProcessor.equals(that.delegationProcessor);
>, <Line: +        return delegationProcessor.hashCode();
>, <Line: +    /**
>, <Line: +     * A compiled record of a target method annotation-driven binder.
>, <Line: +     */
>, <Line: +    protected static class Record implements MethodDelegationBinder.Record {
>, <Line: +         * The candidate method.
>, <Line: +        private final MethodDescription candidate;
>, <Line: +         * A list of handlers for each parameter.
>, <Line: +        private final List<DelegationProcessor.Handler> handlers;
>, <Line: +         * Creates a default compiled method delegation binder.
>, <Line: +         *
>, <Line: +         * @param candidate The candidate method.
>, <Line: +         * @param handlers  A list of handlers for each parameter.
>, <Line: +        protected Record(MethodDescription candidate, List<DelegationProcessor.Handler> handlers) {
>, <Line: +            this.candidate = candidate;
>, <Line: +        public MethodBinding bind(Implementation.Target implementationTarget,
>, <Line: +                                  MethodDescription source,
>, <Line: +                                  MethodDelegationBinder.TerminationHandler terminationHandler,
>, <Line: +                                  MethodInvoker methodInvoker,
>, <Line: +                                  Assigner assigner) {
>, <Line: +            StackManipulation methodTermination = terminationHandler.resolve(assigner, source, candidate);
>, <Line: +            MethodBinding.Builder methodDelegationBindingBuilder = new MethodBinding.Builder(methodInvoker, candidate);
>, <Line: +            Record record = (Record) object;
>, <Line: +            return candidate.equals(record.candidate)
>, <Line: +                    && handlers.equals(record.handlers);
>, <Line: +            int result = candidate.hashCode();
>, <Line: +            return "TargetMethodAnnotationDrivenBinder.Record{" +
>, <Line: +                    ", candidate=" + candidate +
>, <Line: +    public enum TerminationHandler implements MethodDelegationBinder.TerminationHandler {
>, <Line: +            public StackManipulation resolve(Assigner assigner, MethodDescription source, MethodDescription target) {
>, <Line: +            public StackManipulation resolve(Assigner assigner, MethodDescription source, MethodDescription target) {
>, <Line: +        private final Map<? extends TypeDescription, ? extends ParameterBinder<?>> parameterBinders;
>, <Line: +        protected DelegationProcessor(Map<? extends TypeDescription, ? extends ParameterBinder<?>> parameterBinders) {
>, <Line: +        protected static DelegationProcessor of(List<? extends ParameterBinder<?>> parameterBinders) {
>, <Line: +         * @param target The target parameter being handled.
>, <Line: +            /**
>, <Line: +             * Indicates if this handler was explicitly bound.
>, <Line: +             *
>, <Line: +             * @return {@code true} if this handler was explicitly bound.
>, <Line: +             */
>, <Line: +             * @param assigner             The assigner to use.
>, <Line: +                /**
>, <Line: +                 * The target parameter being handled.
>, <Line: +                 */
>, <Line: +                /**
>, <Line: +                 * Creates a new unbound handler.
>, <Line: +                 *
>, <Line: +                 * @param target The target parameter being handled.
>, <Line: +                 */
>, <Line: +                /**
>, <Line: +                 * The target parameter being handled.
>, <Line: +                 */
>, <Line: +                 * @param target          The target parameter being handled.
>, <Line: +                 * @param target          The target parameter being handled.
>, <Line: +                protected static Handler of(ParameterDescription target,
>, <Line: +                    return new Bound<Annotation>(target,
>]
[<Line: -import java.lang.reflect.Proxy;
>, <Line: -     * The termination handler to be applied.
>, <Line: -     */
>, <Line: -    private final TerminationHandler terminationHandler;
>, <Line: -    /**
>, <Line: -     * An user-supplied assigner to use for variable assignments.
>, <Line: -     */
>, <Line: -    private final Assigner assigner;
>, <Line: -    /**
>, <Line: -     * A delegate for actually invoking a method.
>, <Line: -    private final MethodInvoker methodInvoker;
>, <Line: -    public TargetMethodAnnotationDrivenBinder(DelegationProcessor delegationProcessor,
>, <Line: -                                              TerminationHandler terminationHandler,
>, <Line: -                                              Assigner assigner,
>, <Line: -                                              MethodInvoker methodInvoker) {
>, <Line: -        this.terminationHandler = terminationHandler;
>, <Line: -        this.assigner = assigner;
>, <Line: -        this.methodInvoker = methodInvoker;
>, <Line: -     * @param parameterBinders   A list of parameter binder delegates. Each such delegate is responsible for creating a
>, <Line: -     *                           {@link net.bytebuddy.implementation.bind.MethodDelegationBinder.ParameterBinding}
>, <Line: -     *                           for a specific annotation.
>, <Line: -     * @param terminationHandler The termination handler to be applied.
>, <Line: -     * @param assigner           An assigner that is supplied to the {@code parameterBinders} and that is used for binding the return value.
>, <Line: -     * @param methodInvoker      A delegate for applying the actual method invocation of the target method.
>, <Line: -    public static MethodDelegationBinder of(List<ParameterBinder<?>> parameterBinders,
>, <Line: -                                            TerminationHandler terminationHandler,
>, <Line: -                                            Assigner assigner,
>, <Line: -                                            MethodInvoker methodInvoker) {
>, <Line: -        return new TargetMethodAnnotationDrivenBinder(DelegationProcessor.of(parameterBinders), terminationHandler, assigner, methodInvoker);
>, <Line: -    public MethodDelegationBinder.Compiled compile(MethodDescription target) {
>, <Line: -        if (IgnoreForBinding.Verifier.check(target)) {
>, <Line: -            return MethodDelegationBinder.Compiled.Ignored.INSTANCE;
>, <Line: -        List<DelegationProcessor.Handler> handlers = new ArrayList<DelegationProcessor.Handler>(target.getParameters().size());
>, <Line: -        for (ParameterDescription parameterDescription : target.getParameters()) {
>, <Line: -        return new Compiled(terminationHandler, assigner, methodInvoker, target, handlers);
>, <Line: -        return assigner.equals(that.assigner)
>, <Line: -                && terminationHandler.equals(that.terminationHandler)
>, <Line: -                && delegationProcessor.equals(that.delegationProcessor)
>, <Line: -                && methodInvoker.equals(that.methodInvoker);
>, <Line: -        int result = delegationProcessor.hashCode();
>, <Line: -        result = 31 * result + terminationHandler.hashCode();
>, <Line: -        result = 31 * result + assigner.hashCode();
>, <Line: -        result = 31 * result + methodInvoker.hashCode();
>, <Line: -        return result;
>, <Line: -                ", terminationHandler=" + terminationHandler +
>, <Line: -                ", assigner=" + assigner +
>, <Line: -                ", methodInvoker=" + methodInvoker +
>, <Line: -    protected static class Compiled implements MethodDelegationBinder.Compiled {
>, <Line: -         * The termination handler to be applied.
>, <Line: -        private final TerminationHandler terminationHandler;
>, <Line: -         * An user-supplied assigner to use for variable assignments.
>, <Line: -        private final Assigner assigner;
>, <Line: -         * A delegate for actually invoking a method.
>, <Line: -        private final MethodInvoker methodInvoker;
>, <Line: -        private final MethodDescription target;
>, <Line: -        private final List<DelegationProcessor.Handler> handlers;
>, <Line: -        protected Compiled(TerminationHandler terminationHandler,
>, <Line: -                           Assigner assigner,
>, <Line: -                           MethodInvoker methodInvoker,
>, <Line: -                           MethodDescription target,
>, <Line: -                           List<DelegationProcessor.Handler> handlers) {
>, <Line: -            this.terminationHandler = terminationHandler;
>, <Line: -            this.assigner = assigner;
>, <Line: -            this.methodInvoker = methodInvoker;
>, <Line: -            this.target = target;
>, <Line: -        public MethodBinding bind(Implementation.Target implementationTarget, MethodDescription source) {
>, <Line: -            StackManipulation methodTermination = terminationHandler.resolve(assigner, source, target);
>, <Line: -            MethodBinding.Builder methodDelegationBindingBuilder = new MethodBinding.Builder(methodInvoker, target);
>, <Line: -            Compiled compiled = (Compiled) object;
>, <Line: -            return terminationHandler == compiled.terminationHandler
>, <Line: -                    && assigner.equals(compiled.assigner)
>, <Line: -                    && methodInvoker.equals(compiled.methodInvoker)
>, <Line: -                    && target.equals(compiled.target)
>, <Line: -                    && handlers.equals(compiled.handlers);
>, <Line: -            int result = terminationHandler.hashCode();
>, <Line: -            result = 31 * result + assigner.hashCode();
>, <Line: -            result = 31 * result + methodInvoker.hashCode();
>, <Line: -            result = 31 * result + target.hashCode();
>, <Line: -            return "TargetMethodAnnotationDrivenBinder.Compiled{" +
>, <Line: -                    "terminationHandler=" + terminationHandler +
>, <Line: -                    ", assigner=" + assigner +
>, <Line: -                    ", methodInvoker=" + methodInvoker +
>, <Line: -                    ", target=" + target +
>, <Line: -    public enum TerminationHandler {
>, <Line: -            protected StackManipulation resolve(Assigner assigner, MethodDescription source, MethodDescription target) {
>, <Line: -            protected StackManipulation resolve(Assigner assigner, MethodDescription source, MethodDescription target) {
>, <Line: -        /**
>, <Line: -         * Creates a stack manipulation that is to be applied after the method return.
>, <Line: -         *
>, <Line: -         * @param assigner The supplied assigner.
>, <Line: -         * @param source   The source method that is bound to the {@code target} method.
>, <Line: -         * @param target   The target method that is subject to be bound by the {@code source} method.
>, <Line: -         * @return A stack manipulation that is applied after the method return.
>, <Line: -         */
>, <Line: -        protected abstract StackManipulation resolve(Assigner assigner, MethodDescription source, MethodDescription target);
>, <Line: -        private final Map<TypeDescription, ParameterBinder<?>> parameterBinders;
>, <Line: -        protected DelegationProcessor(Map<TypeDescription, ParameterBinder<?>> parameterBinders) {
>, <Line: -        protected static DelegationProcessor of(List<ParameterBinder<?>> parameterBinders) {
>, <Line: -             * @param assigner             An assigner that can be used for applying the binding.
>, <Line: -                protected static Handler of(ParameterDescription parameterDescription,
>, <Line: -                    return new Bound<Annotation>(parameterDescription,
>]