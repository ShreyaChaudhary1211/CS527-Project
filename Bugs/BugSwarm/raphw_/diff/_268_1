[<Line: +             * Creates a list of types that are attached to the provided type. The types are resolved lazily, i.e. type variables
>, <Line: +             * are not resolved prior to computing an erasure.
>, <Line: +                return new WithLazyResolution(detachedTypes, TypeDescription.Generic.Visitor.Substitutor.ForAttachment.of(typeDescription));
>, <Line: +            /**
>, <Line: +             * A list of detached types that are attached on reception but not when computing an erasure.
>, <Line: +             */
>, <Line: +            public static class WithLazyResolution extends Generic.AbstractBase {
>, <Line: +                /**
>, <Line: +                 * The detached types this list represents.
>, <Line: +                 */
>, <Line: +                private final List<? extends TypeDescription.Generic> detachedTypes;
>, <Line: +                /**
>, <Line: +                 * The visitor to use for attaching the detached types.
>, <Line: +                 */
>, <Line: +                private final TypeDescription.Generic.Visitor<? extends TypeDescription.Generic> visitor;
>, <Line: +                /**
>, <Line: +                 * Creates a list of generic type descriptions that are resolved lazily, i.e. type variables are not resolved
>, <Line: +                 * when computing an erausre.
>, <Line: +                 *
>, <Line: +                 * @param detachedTypes The detached types this list represents.
>, <Line: +                 * @param visitor       The visitor to use for attaching the detached types.
>, <Line: +                 */
>, <Line: +                public WithLazyResolution(List<? extends TypeDescription.Generic> detachedTypes,
>, <Line: +                                          TypeDescription.Generic.Visitor<? extends TypeDescription.Generic> visitor) {
>, <Line: +                    this.detachedTypes = detachedTypes;
>, <Line: +                    this.visitor = visitor;
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public TypeDescription.Generic get(int index) {
>, <Line: +                    return new TypeDescription.Generic.LazyProjection.WithLazyNavigation.Detached(detachedTypes.get(index), visitor);
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public int size() {
>, <Line: +                    return detachedTypes.size();
>, <Line: +                }
>, <Line: +            }
>, <Line: +                                       List<? extends TypeVariableToken> detachedTypeVariables,
>, <Line: +                                       TypeDescription.Generic.Visitor<? extends TypeDescription.Generic> visitor) {
>]
[<Line: -             * Creates a list of types that are attached to the provided type.
>, <Line: -                return new ForDetachedTypes(detachedTypes, TypeDescription.Generic.Visitor.Substitutor.ForAttachment.of(typeDescription));
>, <Line: -                                          List<? extends TypeVariableToken> detachedTypeVariables,
>, <Line: -                                          TypeDescription.Generic.Visitor<? extends TypeDescription.Generic> visitor) {
>]