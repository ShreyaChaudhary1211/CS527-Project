[<Line: +package net.bytebuddy.utility;
>, <Line: +import net.bytebuddy.description.type.TypeDescription;
>, <Line: +import net.bytebuddy.test.utility.ObjectPropertyAssertion;
>, <Line: +import org.junit.Test;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +import static org.hamcrest.core.Is.is;
>, <Line: +public class PropertyDispatcherOtherTest {
>, <Line: +    @Test
>, <Line: +    public void testTypeRendererAdjustment() throws Exception {
>, <Line: +        assertThat(PropertyDispatcher.TypeRenderer.FOR_LEGACY_VM.adjust('0'), is('0'));
>, <Line: +        assertThat(PropertyDispatcher.TypeRenderer.FOR_JAVA9_CAPABLE_VM.adjust('0'), is((char) ('0' + '{' - '[')));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testLegacyVm() throws Exception {
>, <Line: +        assertThat(PropertyDispatcher.TypeRenderer.FOR_LEGACY_VM.render(Object.class), is(Object.class.toString()));
>, <Line: +        assertThat(PropertyDispatcher.TypeRenderer.FOR_LEGACY_VM.render(TypeDescription.OBJECT), is(Object.class.toString()));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testModernVm() throws Exception {
>, <Line: +        assertThat(PropertyDispatcher.TypeRenderer.FOR_JAVA9_CAPABLE_VM.render(Object.class), is(Object.class.getName() + ".class"));
>, <Line: +        assertThat(PropertyDispatcher.TypeRenderer.FOR_JAVA9_CAPABLE_VM.render(TypeDescription.OBJECT), is(Object.class.getName() + ".class"));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testObjectProperties() throws Exception {
>, <Line: +        ObjectPropertyAssertion.of(PropertyDispatcher.class).apply();
>, <Line: +        ObjectPropertyAssertion.of(PropertyDispatcher.TypeRenderer.class).apply();
>, <Line: +    }
>, <Line: +}
>]
[]