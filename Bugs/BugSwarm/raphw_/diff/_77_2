[<Line: +import static org.hamcrest.CoreMatchers.is;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +    private static final int FOO = 1, BAR = 2, QUX = 3, BAZ = 4;
>, <Line: +    private ClassVisitorWrapper wrapper, prepend, append;
>, <Line: +    private ClassVisitor wrapperVisitor, prependVisitor, appendVisitor, resultVisitor;
>, <Line: +        when(prepend.wrap(prependVisitor)).thenReturn(wrapperVisitor);
>, <Line: +        when(wrapper.wrap(wrapperVisitor)).thenReturn(appendVisitor);
>, <Line: +        when(append.wrap(appendVisitor)).thenReturn(resultVisitor);
>, <Line: +        when(prepend.wrapReader(FOO)).thenReturn(BAR);
>, <Line: +        when(wrapper.wrapReader(BAR)).thenReturn(QUX);
>, <Line: +        when(append.wrapReader(QUX)).thenReturn(BAZ);
>, <Line: +        when(prepend.wrapWriter(FOO)).thenReturn(BAR);
>, <Line: +        when(wrapper.wrapWriter(BAR)).thenReturn(QUX);
>, <Line: +        when(append.wrapWriter(QUX)).thenReturn(BAZ);
>, <Line: +        chain = chain.append(wrapper).append(append).prepend(prepend);
>, <Line: +        assertThat(chain.wrap(prependVisitor), is(resultVisitor));
>, <Line: +        verify(prepend).wrap(prependVisitor);
>, <Line: +        verifyNoMoreInteractions(prepend);
>, <Line: +        verify(wrapper).wrap(wrapperVisitor);
>, <Line: +        verifyNoMoreInteractions(wrapper);
>, <Line: +        verify(append).wrap(appendVisitor);
>, <Line: +        verifyNoMoreInteractions(append);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testReaderHint() throws Exception {
>, <Line: +        ClassVisitorWrapper.Chain chain = new ClassVisitorWrapper.Chain();
>, <Line: +        chain = chain.append(wrapper).append(append).prepend(prepend);
>, <Line: +        assertThat(chain.wrapReader(FOO), is(BAZ));
>, <Line: +        verify(prepend).wrapReader(FOO);
>, <Line: +        verifyNoMoreInteractions(prepend);
>, <Line: +        verify(wrapper).wrapReader(BAR);
>, <Line: +        verifyNoMoreInteractions(wrapper);
>, <Line: +        verify(append).wrapReader(QUX);
>, <Line: +        verifyNoMoreInteractions(append);
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testWriterHint() throws Exception {
>, <Line: +        ClassVisitorWrapper.Chain chain = new ClassVisitorWrapper.Chain();
>, <Line: +        chain = chain.append(wrapper).append(append).prepend(prepend);
>, <Line: +        assertThat(chain.wrapWriter(FOO), is(BAZ));
>, <Line: +        verify(prepend).wrapWriter(FOO);
>, <Line: +        verify(wrapper).wrapWriter(BAR);
>, <Line: +        verifyNoMoreInteractions(wrapper);
>, <Line: +        verify(append).wrapWriter(QUX);
>]
[<Line: -    private ClassVisitorWrapper first, prepend, append;
>, <Line: -    private ClassVisitor classVisitor;
>, <Line: -        when(first.wrap(any(ClassVisitor.class))).thenReturn(classVisitor);
>, <Line: -        when(prepend.wrap(any(ClassVisitor.class))).thenReturn(classVisitor);
>, <Line: -        when(append.wrap(any(ClassVisitor.class))).thenReturn(classVisitor);
>, <Line: -        chain = chain.append(first).append(append).prepend(prepend);
>, <Line: -        chain.wrap(classVisitor);
>, <Line: -        verify(prepend).wrap(classVisitor);
>, <Line: -        verify(first).wrap(classVisitor);
>, <Line: -        verifyNoMoreInteractions(first);
>, <Line: -        verify(append).wrap(classVisitor);
>]