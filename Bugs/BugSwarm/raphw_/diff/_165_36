[<Line: +        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        InstanceMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        ArgumentCall instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        ArgumentCallDynamic instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        SelfReference instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        SuperMethodInvocation instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithTwoExplicitArguments instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithExplicitArgument instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        InvisibleMethodCallWithField instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithThis instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallWithOwnType instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallAppending instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        MethodCallAppending instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        ExplicitTarget instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        ExplicitTarget instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        SimpleMethod instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        Object instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
>, <Line: +        assertThat(loaded.getDeclaredConstructor().newInstance().foo(), is(FOO));
>, <Line: +        assertThat(loaded.getDeclaredConstructor().newInstance().foo(), nullValue(String.class));
>]
[<Line: -        SimpleMethod instance = loaded.getLoaded().newInstance();
>, <Line: -        SimpleMethod instance = loaded.getLoaded().newInstance();
>, <Line: -        InstanceMethod instance = loaded.getLoaded().newInstance();
>, <Line: -        ArgumentCall instance = loaded.getLoaded().newInstance();
>, <Line: -        ArgumentCallDynamic instance = loaded.getLoaded().newInstance();
>, <Line: -        Object instance = loaded.getLoaded().newInstance();
>, <Line: -        SelfReference instance = loaded.getLoaded().newInstance();
>, <Line: -        SuperMethodInvocation instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithExplicitArgument instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithExplicitArgument instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithExplicitArgument instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithExplicitArgument instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithTwoExplicitArguments instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithExplicitArgument instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithField instance = loaded.getLoaded().newInstance();
>, <Line: -        InvisibleMethodCallWithField instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithThis instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallWithOwnType instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallAppending instance = loaded.getLoaded().newInstance();
>, <Line: -        MethodCallAppending instance = loaded.getLoaded().newInstance();
>, <Line: -        ExplicitTarget instance = loaded.getLoaded().newInstance();
>, <Line: -        ExplicitTarget instance = loaded.getLoaded().newInstance();
>, <Line: -        SimpleMethod instance = loaded.getLoaded().newInstance();
>, <Line: -        SimpleMethod instance = loaded.getLoaded().newInstance();
>, <Line: -        SimpleMethod instance = loaded.getLoaded().newInstance();
>, <Line: -        Object instance = loaded.getLoaded().newInstance();
>, <Line: -        assertThat(loaded.newInstance().foo(), is(FOO));
>, <Line: -        assertThat(loaded.newInstance().foo(), nullValue(String.class));
>]