[<Line: +     * Represents a list of parameters for an executable, i.e. a {@link java.lang.reflect.Method} or {@link java.lang.reflect.Constructor}.
>, <Line: +     *
>, <Line: +     * @param <T> The type of the {@code java.lang.reflect.Executable} that this list represents.
>, <Line: +    abstract class ForLoadedExecutable<T> extends AbstractBase<ParameterDescription.InDefinedShape> {
>, <Line: +         * The dispatcher used creating parameter list instances and for accessing {@code java.lang.reflect.Executable} instances.
>, <Line: +         * Creates a dispatcher for a loaded parameter if the type is available for the running JVM.
>, <Line: +                dispatcher = new Dispatcher.ForModernVm(Class.forName("java.lang.reflect.Executable").getDeclaredMethod("getParameterCount"));
>, <Line: +         * The executable for which a parameter list is represented.
>, <Line: +        protected final T executable;
>, <Line: +         * Creates a new description for a loaded executable.
>, <Line: +         * @param executable The executable for which a parameter list is represented.
>, <Line: +        protected ForLoadedExecutable(T executable) {
>, <Line: +            this.executable = executable;
>, <Line: +         * Creates a new list that describes the parameters of the given {@link Method}.
>, <Line: +         * @param method The method for which the parameters should be described.
>, <Line: +         * @return A list describing the method's parameters.
>, <Line: +            return DISPATCHER.describe(method);
>, <Line: +         * Creates a new list that describes the parameters of the given {@link Constructor}.
>, <Line: +         * @param constructor The constructor for which the parameters should be described.
>, <Line: +         * @return A list describing the constructor's parameters.
>, <Line: +            return DISPATCHER.describe(constructor);
>, <Line: +            return DISPATCHER.getParameterCount(executable);
>, <Line: +         * A dispatcher for creating descriptions of parameter lists and for evaluating the size of an {@code java.lang.reflect.Executable}'s parameters.
>, <Line: +             * Returns the amount of parameters of a given executable..
>, <Line: +             * @param executable The executable for which the amount of parameters should be found.
>, <Line: +             * @return The amount of parameters of the given executable.
>, <Line: +            int getParameterCount(Object executable);
>, <Line: +             * Describes a {@link Method}'s parameters of the given VM.
>, <Line: +             * @param method The method for which the parameters should be described.
>, <Line: +             * @return A list describing the method's parameters.
>, <Line: +            ParameterList<ParameterDescription.InDefinedShape> describe(Method method);
>, <Line: +            /**
>, <Line: +             * Describes a {@link Constructor}'s parameters of the given VM.
>, <Line: +             *
>, <Line: +             * @param constructor The constructor for which the parameters should be described.
>, <Line: +             * @return A list describing the constructor's parameters.
>, <Line: +             */
>, <Line: +            ParameterList<ParameterDescription.InDefinedShape> describe(Constructor<?> constructor);
>, <Line: +            /**
>, <Line: +             * A dispatcher for a legacy VM that does not support the {@code java.lang.reflect.Parameter} type.
>, <Line: +             */
>, <Line: +            enum ForLegacyVm implements Dispatcher {
>, <Line: +                /**
>, <Line: +                 * The singleton instance.
>, <Line: +                 */
>, <Line: +                INSTANCE;
>, <Line: +                @Override
>, <Line: +                public int getParameterCount(Object executable) {
>, <Line: +                    throw new IllegalStateException("Cannot dispatch method for java.lang.reflect.Executable");
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public ParameterList<ParameterDescription.InDefinedShape> describe(Method method) {
>, <Line: +                    return new OfLegacyVmMethod(method);
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public ParameterList<ParameterDescription.InDefinedShape> describe(Constructor<?> constructor) {
>, <Line: +                    return new OfLegacyVmConstructor(constructor);
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public String toString() {
>, <Line: +                    return "ParameterList.ForLoadedExecutable.Dispatcher.ForLegacyVm." + name();
>, <Line: +                }
>, <Line: +            }
>, <Line: +             * A dispatcher for a legacy VM that does support the {@code java.lang.reflect.Parameter} type.
>, <Line: +                 * The {@code java.lang.reflect.Executable#getParameterCount()} method.
>, <Line: +                private final Method getParameterCount;
>, <Line: +                 * Creates a new dispatcher for a modern VM.
>, <Line: +                 * @param getParameterCount The {@code java.lang.reflect.Executable#getParameterCount()} method.
>, <Line: +                protected ForModernVm(Method getParameterCount) {
>, <Line: +                    this.getParameterCount = getParameterCount;
>, <Line: +                public int getParameterCount(Object executable) {
>, <Line: +                        return (Integer) getParameterCount.invoke(executable);
>, <Line: +                    } catch (IllegalAccessException exception) {
>, <Line: +                        throw new IllegalStateException("Cannot access java.lang.reflect.Parameter#getModifiers", exception);
>, <Line: +                    } catch (InvocationTargetException exception) {
>, <Line: +                        throw new IllegalStateException("Error invoking java.lang.reflect.Parameter#getModifiers", exception.getCause());
>, <Line: +                public ParameterList<ParameterDescription.InDefinedShape> describe(Method method) {
>, <Line: +                    return new OfMethod(method);
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public ParameterList<ParameterDescription.InDefinedShape> describe(Constructor<?> constructor) {
>, <Line: +                    return new OfConstructor(constructor);
>, <Line: +                    return this == other || !(other == null || getClass() != other.getClass())
>, <Line: +                            && getParameterCount.equals(((ForModernVm) other).getParameterCount);
>, <Line: +                    return getParameterCount.hashCode();
>, <Line: +                            "getParameterCount=" + getParameterCount +
>, <Line: +        }
>, <Line: +        /**
>, <Line: +         * Describes the list of {@link Method} parameters on a modern VM.
>, <Line: +         */
>, <Line: +        protected static class OfMethod extends ForLoadedExecutable<Method> {
>, <Line: +             * Creates a new description of the parameters of a method.
>, <Line: +             *
>, <Line: +             * @param method The method that is represented by this instance.
>, <Line: +            protected OfMethod(Method method) {
>, <Line: +                super(method);
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public ParameterDescription.InDefinedShape get(int index) {
>, <Line: +                return new ParameterDescription.ForLoadedParameter.OfMethod(executable, index);
>, <Line: +            }
>, <Line: +        }
>, <Line: +        /**
>, <Line: +         * Describes the list of {@link Constructor} parameters on a modern VM.
>, <Line: +         */
>, <Line: +        protected static class OfConstructor extends ForLoadedExecutable<Constructor<?>> {
>, <Line: +            /**
>, <Line: +             * Creates a new description of the parameters of a constructor.
>, <Line: +             *
>, <Line: +             * @param constructor The constructor that is represented by this instance.
>, <Line: +             */
>, <Line: +            protected OfConstructor(Constructor<?> constructor) {
>, <Line: +                super(constructor);
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public ParameterDescription.InDefinedShape get(int index) {
>, <Line: +                return new ParameterDescription.ForLoadedParameter.OfConstructor(executable, index);
>]
[<Line: -     * Represents a list of parameters for an executable, i.e. a {@link java.lang.reflect.Method} or
>, <Line: -     * {@link java.lang.reflect.Constructor}.
>, <Line: -    class ForLoadedExecutable extends AbstractBase<ParameterDescription.InDefinedShape> {
>, <Line: -         * A dispatcher for creating parameter lists depending on the features of the currently running Java virtual machine.
>, <Line: -         * Creates a dispatcher for the currently running JVM.
>, <Line: -                dispatcher = new Dispatcher.ForModernVm(Class.forName("java.lang.reflect.Executable").getDeclaredMethod("getParameters"));
>, <Line: -         * An array of the represented {@code java.lang.reflect.Parameter} instances.
>, <Line: -        private final Object[] parameter;
>, <Line: -         * Creates a list representing a method's or a constructor's parameters.
>, <Line: -         * @param parameter The {@code java.lang.reflect.Parameter}-typed parameters to represent.
>, <Line: -        protected ForLoadedExecutable(Object[] parameter) {
>, <Line: -            this.parameter = parameter;
>, <Line: -         * Creates a parameter list for a loaded method.
>, <Line: -         * @param method The method to represent.
>, <Line: -         * @return A list of parameters for this method.
>, <Line: -            return DISPATCHER.getParameters(method);
>, <Line: -         * Creates a parameter list for a loaded constructor.
>, <Line: -         * @param constructor The constructor to represent.
>, <Line: -         * @return A list of parameters for this constructor.
>, <Line: -            return DISPATCHER.getParameters(constructor);
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        public ParameterDescription.InDefinedShape get(int index) {
>, <Line: -            return new ParameterDescription.ForLoadedParameter(parameter[index], index);
>, <Line: -            return parameter.length;
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        public GenericTypeList asTypeList() {
>, <Line: -            List<GenericTypeDescription> types = new ArrayList<GenericTypeDescription>(parameter.length);
>, <Line: -            for (Object aParameter : parameter) {
>, <Line: -                types.add(new GenericTypeDescription.LazyProjection.OfLoadedParameter(aParameter));
>, <Line: -            }
>, <Line: -            return new GenericTypeList.Explicit(types);
>, <Line: -         * A dispatcher for creating parameter lists depending on the features of the currently running JVM.
>, <Line: -             * Returns a list of descriptions of the provided method.
>, <Line: -             * @param method The loaded method for which to describe the parameters.
>, <Line: -             * @return A description of the method's parameters.
>, <Line: -            ParameterList<ParameterDescription.InDefinedShape> getParameters(Method method);
>, <Line: -             * Returns a list of descriptions of the provided constructor.
>, <Line: -             * @param constructor The loaded constructor for which to describe the parameters.
>, <Line: -             * @return A description of the constructor's parameters.
>, <Line: -            ParameterList<ParameterDescription.InDefinedShape> getParameters(Constructor<?> constructor);
>, <Line: -             * A dispatcher for virtual machines that are aware of the {@code java.lang.reflect.Executable} type that was added in Java version 8.
>, <Line: -                 * The {@code java.lang.reflect.Executable#getParameters} method.
>, <Line: -                private final Method getParameters;
>, <Line: -                 * Creates a dispatcher for modern VMs.
>, <Line: -                 * @param getParameters The {@code java.lang.reflect.Executable#getParameters} method.
>, <Line: -                protected ForModernVm(Method getParameters) {
>, <Line: -                    this.getParameters = getParameters;
>, <Line: -                public ParameterList<ParameterDescription.InDefinedShape> getParameters(Method method) {
>, <Line: -                        return new ForLoadedExecutable((Object[]) getParameters.invoke(method));
>, <Line: -                    } catch (IllegalAccessException e) {
>, <Line: -                        throw new IllegalStateException();
>, <Line: -                    } catch (InvocationTargetException e) {
>, <Line: -                        throw new IllegalStateException();
>, <Line: -                public ParameterList<ParameterDescription.InDefinedShape> getParameters(Constructor<?> constructor) {
>, <Line: -                    try {
>, <Line: -                        return new ForLoadedExecutable((Object[]) getParameters.invoke(constructor));
>, <Line: -                    } catch (IllegalAccessException e) {
>, <Line: -                        throw new IllegalStateException();
>, <Line: -                    } catch (InvocationTargetException e) {
>, <Line: -                        throw new IllegalStateException();
>, <Line: -                    }
>, <Line: -                    if (this == other) return true;
>, <Line: -                    if (other == null || getClass() != other.getClass()) return false;
>, <Line: -                    ForModernVm that = (ForModernVm) other;
>, <Line: -                    return getParameters.equals(that.getParameters);
>, <Line: -                    return getParameters.hashCode();
>, <Line: -                            "getParameters=" + getParameters +
>, <Line: -             * A dispatcher for virtual machines that are <b>not</b> aware of the {@code java.lang.reflect.Executable} type that was added in Java version 8.
>, <Line: -            enum ForLegacyVm implements Dispatcher {
>, <Line: -                /**
>, <Line: -                 * The singleton instance.
>, <Line: -                 */
>, <Line: -                INSTANCE;
>, <Line: -                @Override
>, <Line: -                public ParameterList<ParameterDescription.InDefinedShape> getParameters(Method method) {
>, <Line: -                    return new OfLegacyVmMethod(method);
>, <Line: -                }
>, <Line: -                @Override
>, <Line: -                public ParameterList<ParameterDescription.InDefinedShape> getParameters(Constructor<?> constructor) {
>, <Line: -                    return new OfLegacyVmConstructor(constructor);
>, <Line: -                }
>, <Line: -                @Override
>, <Line: -                public String toString() {
>, <Line: -                    return "ParameterList.ForLoadedExecutable.Dispatcher.ForLegacyVm." + name();
>, <Line: -                }
>, <Line: -            @Override
>, <Line: -            public GenericTypeList asTypeList() {
>, <Line: -                List<GenericTypeDescription> types = new ArrayList<GenericTypeDescription>(parameterType.length);
>, <Line: -                for (int index = 0; index < parameterType.length; index++) {
>, <Line: -                    types.add(new GenericTypeDescription.LazyProjection.OfLoadedParameter.OfLegacyVmMethod(method, index, parameterType[index]));
>, <Line: -                }
>, <Line: -                return new GenericTypeList.Explicit(types);
>, <Line: -            }
>, <Line: -            @Override
>, <Line: -            public GenericTypeList asTypeList() {
>, <Line: -                List<GenericTypeDescription> types = new ArrayList<GenericTypeDescription>(parameterType.length);
>, <Line: -                for (int index = 0; index < parameterType.length; index++) {
>, <Line: -                    types.add(new GenericTypeDescription.LazyProjection.OfLoadedParameter.OfLegacyVmConstructor(constructor, index, parameterType[index]));
>, <Line: -                }
>, <Line: -                return new GenericTypeList.Explicit(types);
>, <Line: -            }
>]