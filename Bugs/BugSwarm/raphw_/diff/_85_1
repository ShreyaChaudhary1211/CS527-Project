[<Line: +import java.util.*;
>, <Line: +            return LazyProjection.OfTransformedType.of(getDeclaredSuperType(), RawTypeWrapper.INSTANCE);
>, <Line: +            return new GenericTypeList.OfTransformedTypes(getDeclaredInterfaces(), RawTypeWrapper.INSTANCE);
>, <Line: +        /**
>, <Line: +         * A visitor that represents all {@link TypeDescription} instances as raw generic types.
>, <Line: +         */
>, <Line: +        protected enum RawTypeWrapper implements GenericTypeDescription.Visitor<GenericTypeDescription> {
>, <Line: +            /**
>, <Line: +             * The singleton instance.
>, <Line: +             */
>, <Line: +            INSTANCE;
>, <Line: +            @Override
>, <Line: +            public GenericTypeDescription onGenericArray(GenericTypeDescription genericArray) {
>, <Line: +                return ForGenericArray.Latent.of(genericArray.getComponentType().accept(this), 1);
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public GenericTypeDescription onWildcard(GenericTypeDescription wildcard) {
>, <Line: +                // Wildcards which are used within parameterized types are taken care of by the calling method.
>, <Line: +                GenericTypeList lowerBounds = wildcard.getLowerBounds();
>, <Line: +                return lowerBounds.isEmpty()
>, <Line: +                        ? GenericTypeDescription.ForWildcardType.Latent.boundedAbove(wildcard.getUpperBounds().getOnly().accept(this))
>, <Line: +                        : GenericTypeDescription.ForWildcardType.Latent.boundedBelow(lowerBounds.getOnly().accept(this));
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public GenericTypeDescription onParameterizedType(GenericTypeDescription parameterizedType) {
>, <Line: +                List<GenericTypeDescription> parameters = new ArrayList<GenericTypeDescription>(parameterizedType.getParameters().size());
>, <Line: +                for (GenericTypeDescription parameter : parameterizedType.getParameters()) {
>, <Line: +                    parameters.add(parameter.accept(this));
>, <Line: +                }
>, <Line: +                GenericTypeDescription ownerType = parameterizedType.getOwnerType();
>, <Line: +                return new GenericTypeDescription.ForParameterizedType.Latent(parameterizedType.asErasure(),
>, <Line: +                        parameters,
>, <Line: +                        ownerType == null
>, <Line: +                                ? TypeDescription.UNDEFINED
>, <Line: +                                : ownerType.accept(this));
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public GenericTypeDescription onTypeVariable(GenericTypeDescription typeVariable) {
>, <Line: +                return new RawTypeVariable(typeVariable);
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public GenericTypeDescription onNonGenericType(GenericTypeDescription typeDescription) {
>, <Line: +                return new ForNonGenericType(typeDescription.asErasure());
>, <Line: +            }
>, <Line: +            @Override
>, <Line: +            public String toString() {
>, <Line: +                return "TypeDescription.AbstractBase.RawTypeWrapper." + name();
>, <Line: +            }
>, <Line: +            /**
>, <Line: +             * An representation of a type variable with raw type bounds.
>, <Line: +             */
>, <Line: +            protected static class RawTypeVariable extends ForTypeVariable {
>, <Line: +                /**
>, <Line: +                 * The type variable in its declared form.
>, <Line: +                 */
>, <Line: +                private final GenericTypeDescription typeVariable;
>, <Line: +                /**
>, <Line: +                 * Creates a new raw type representation of a type variable.
>, <Line: +                 *
>, <Line: +                 * @param typeVariable The type variable in its declared form.
>, <Line: +                 */
>, <Line: +                protected RawTypeVariable(GenericTypeDescription typeVariable) {
>, <Line: +                    this.typeVariable = typeVariable;
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public GenericTypeList getUpperBounds() {
>, <Line: +                    return new GenericTypeList.OfTransformedTypes(typeVariable.getUpperBounds(), RawTypeWrapper.INSTANCE);
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public TypeVariableSource getVariableSource() {
>, <Line: +                    return typeVariable.getVariableSource();
>, <Line: +                }
>, <Line: +                @Override
>, <Line: +                public String getSymbol() {
>, <Line: +                    return typeVariable.getSymbol();
>, <Line: +                }
>, <Line: +            }
>, <Line: +        }
>]
[<Line: -import java.util.HashSet;
>, <Line: -import java.util.Iterator;
>, <Line: -import java.util.List;
>, <Line: -import java.util.Set;
>, <Line: -            return LazyProjection.OfPotentiallyRawType.of(getDeclaredSuperType(), GenericTypeDescription.Visitor.NoOp.INSTANCE);
>, <Line: -            return new GenericTypeList.OfPotentiallyRawType(getDeclaredInterfaces(), GenericTypeDescription.Visitor.NoOp.INSTANCE);
>]