[<Line: +import net.bytebuddy.description.type.TypeDescription;
>, <Line: +                ClassLoader classLoader = type.getClassLoader();
>, <Line: +                return locate(classLoader == null
>, <Line: +                        ? ClassLoader.getSystemClassLoader()
>, <Line: +                        : classLoader, TypeDescription.ForLoadedType.getName(type));
>, <Line: +                    return TypeDescription.ForLoadedType.getName(type).equals(name)
>, <Line: +                        this.types.put(TypeDescription.ForLoadedType.getName(type), type);
>]
[<Line: -                return locate(type.getClassLoader(), type.getName());
>, <Line: -                /**
>, <Line: -                 * Normalizes a type name if it is loaded by an anonymous class loader.
>, <Line: -                 *
>, <Line: -                 * @param typeName The name as returned by {@link Class#getName()}.
>, <Line: -                 * @return The non-anonymous name of the given class.
>, <Line: -                 */
>, <Line: -                private static String nonAnonymous(String typeName) {
>, <Line: -                    int anonymousLoaderIndex = typeName.indexOf('/');
>, <Line: -                    return anonymousLoaderIndex == -1
>, <Line: -                            ? typeName
>, <Line: -                            : typeName.substring(0, anonymousLoaderIndex);
>, <Line: -                }
>, <Line: -                    return nonAnonymous(type.getName()).equals(name)
>, <Line: -                        String typeName = type.getName();
>, <Line: -                        int anonymousLoaderIndex = typeName.indexOf('/');
>, <Line: -                        this.types.put(anonymousLoaderIndex == -1
>, <Line: -                                ? typeName
>, <Line: -                                : typeName.substring(0, anonymousLoaderIndex), type);
>]