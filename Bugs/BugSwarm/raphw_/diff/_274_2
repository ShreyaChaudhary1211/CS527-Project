[<Line: +    @Test
>, <Line: +    public void testNonGenericIntermediateType() throws Exception {
>, <Line: +        TypeDescription.Generic typeDescription = TypeDescription.Generic.OfNonGenericType.ForReifiedErasure.of(new TypeDescription.ForLoadedType(NonGenericSample.class))
>, <Line: +                .getSuperClass()
>, <Line: +                .getSuperClass();
>, <Line: +        assertThat(typeDescription.getSuperClass().getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(typeDescription.getSuperClass().asErasure(), is((TypeDescription) new TypeDescription.ForLoadedType(Foo.class)));
>, <Line: +        assertThat(typeDescription.getSuperClass().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getSuperClass().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getSuperClass().getTypeArguments().getOnly().asErasure(),
>, <Line: +                is((TypeDescription) new TypeDescription.ForLoadedType(Number.class)));
>, <Line: +        assertThat(typeDescription.getSuperClass().getDeclaredFields().getOnly().getType().getSort(),
>, <Line: +                is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getSuperClass().getDeclaredFields().getOnly().getType().asErasure(),
>, <Line: +                is((TypeDescription) new TypeDescription.ForLoadedType(Number.class)));
>, <Line: +        assertThat(typeDescription.getSuperClass().getDeclaredMethods().filter(named(FOO)).getOnly().getReturnType().getSort(),
>, <Line: +                is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getSuperClass().getDeclaredMethods().filter(named(FOO)).getOnly().getReturnType().asErasure(),
>, <Line: +                is((TypeDescription) new TypeDescription.ForLoadedType(Number.class)));
>, <Line: +        assertThat(typeDescription.getSuperClass().getDeclaredMethods().filter(named(BAR)).getOnly().getReturnType().getSort(),
>, <Line: +                is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(typeDescription.getSuperClass().getDeclaredMethods().filter(named(BAR)).getOnly().getReturnType().asErasure(),
>, <Line: +                is((TypeDescription) new TypeDescription.ForLoadedType(List.class)));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getSort(), is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().asErasure(), is((TypeDescription) new TypeDescription.ForLoadedType(Qux.class)));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getTypeArguments().size(), is(1));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getTypeArguments().getOnly().getSort(), is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getTypeArguments().getOnly().asErasure(),
>, <Line: +                is((TypeDescription) new TypeDescription.ForLoadedType(Number.class)));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getDeclaredMethods().filter(named(FOO)).getOnly().getReturnType().getSort(),
>, <Line: +                is(TypeDefinition.Sort.NON_GENERIC));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getDeclaredMethods().filter(named(FOO)).getOnly().getReturnType().asErasure(),
>, <Line: +                is((TypeDescription) new TypeDescription.ForLoadedType(Number.class)));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getDeclaredMethods().filter(named(BAR)).getOnly().getReturnType().getSort(),
>, <Line: +                is(TypeDefinition.Sort.PARAMETERIZED));
>, <Line: +        assertThat(typeDescription.getInterfaces().getOnly().getDeclaredMethods().filter(named(BAR)).getOnly().getReturnType().asErasure(),
>, <Line: +                is((TypeDescription) new TypeDescription.ForLoadedType(List.class)));
>, <Line: +    }
>, <Line: +    private static class Foo<T> {
>, <Line: +    private static class Bar<T extends Number> extends Foo<T> {
>, <Line: +    private interface Qux<T> {
>, <Line: +    private interface Baz<T extends Number> extends Qux<T> {
>, <Line: +        /* empty */
>, <Line: +    }
>, <Line: +    private abstract static class Sample extends Bar<Number> implements Baz<Number> {
>, <Line: +        /* empty */
>, <Line: +    }
>, <Line: +    private class NonGenericIntermediate extends Foo<Number> implements Qux<Number> {
>, <Line: +        /* empty */
>, <Line: +    }
>, <Line: +    private class RawTypeIntermediate<T> extends NonGenericIntermediate {
>, <Line: +    private class NonGenericSample extends RawTypeIntermediate<Number> {
>]
[<Line: -    public static class Foo<T> {
>, <Line: -    public static class Bar<T extends Number> extends Foo<T> {
>, <Line: -    public interface Qux<T> {
>, <Line: -    public interface Baz<T extends Number> extends Qux<T> {
>, <Line: -    public abstract static class Sample extends Bar<Number> implements Baz<Number> {
>]