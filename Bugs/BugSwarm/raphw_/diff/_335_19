[<Line: +    private final ElementMatcher<? super TypeDescription.Generic> matcher;
>, <Line: +     * @param matcher The type matcher to be applied if the target element is declared in a type.
>, <Line: +    public DeclaringTypeMatcher(ElementMatcher<? super TypeDescription.Generic> matcher) {
>, <Line: +        this.matcher = matcher;
>, <Line: +        return declaringType != null && matcher.matches(declaringType.asGenericType());
>, <Line: +                && matcher.equals(((DeclaringTypeMatcher<?>) other).matcher);
>, <Line: +        return matcher.hashCode();
>, <Line: +        return "declaredBy(" + matcher + ")";
>]
[<Line: -    private final ElementMatcher<? super TypeDescription.Generic> typeMatcher;
>, <Line: -     * @param typeMatcher The type matcher to be applied if the target element is declared in a type.
>, <Line: -    public DeclaringTypeMatcher(ElementMatcher<? super TypeDescription.Generic> typeMatcher) {
>, <Line: -        this.typeMatcher = typeMatcher;
>, <Line: -        return declaringType != null && typeMatcher.matches(declaringType.asGenericType());
>, <Line: -                && typeMatcher.equals(((DeclaringTypeMatcher<?>) other).typeMatcher);
>, <Line: -        return typeMatcher.hashCode();
>, <Line: -        return "declaredBy(" + typeMatcher + ")";
>]