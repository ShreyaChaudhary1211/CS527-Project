[<Line: +import net.bytebuddy.asm.ClassVisitorWrapper;
>, <Line: +import org.mockito.invocation.InvocationOnMock;
>, <Line: +import org.mockito.stubbing.Answer;
>, <Line: +import org.objectweb.asm.*;
>, <Line: +import org.objectweb.asm.commons.LocalVariablesSorter;
>, <Line: +import java.lang.reflect.Type;
>, <Line: +import static org.mockito.Matchers.any;
>, <Line: +import static org.mockito.Mockito.*;
>, <Line: +    @Test
>, <Line: +    public void testReaderHint() throws Exception {
>, <Line: +        ClassVisitorWrapper classVisitorWrapper = mock(ClassVisitorWrapper.class);
>, <Line: +        when(classVisitorWrapper.wrap(any(ClassVisitor.class))).then(new Answer<ClassVisitor>() {
>, <Line: +            @Override
>, <Line: +            public ClassVisitor answer(InvocationOnMock invocationOnMock) throws Throwable {
>, <Line: +                return new ClassVisitor(Opcodes.ASM5, (ClassVisitor) invocationOnMock.getArguments()[0]) {
>, <Line: +                    @Override
>, <Line: +                    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
>, <Line: +                        return new LocalVariablesSorter(access, desc, super.visitMethod(access, name, desc, signature, exceptions));
>, <Line: +                    }
>, <Line: +                };
>, <Line: +            }
>, <Line: +        });
>, <Line: +        when(classVisitorWrapper.wrapWriter(0)).thenReturn(ClassWriter.COMPUTE_MAXS);
>, <Line: +        when(classVisitorWrapper.wrapReader(0)).thenReturn(ClassReader.EXPAND_FRAMES);
>, <Line: +        Class<?> type = create(StackMapFrames.class)
>, <Line: +                .classVisitor(classVisitorWrapper)
>, <Line: +                .make()
>, <Line: +                .load(null, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) BAR));
>, <Line: +        verify(classVisitorWrapper).wrapWriter(0);
>, <Line: +        verify(classVisitorWrapper).wrapReader(0);
>, <Line: +        verify(classVisitorWrapper).wrap(any(ClassVisitor.class));
>, <Line: +        verifyNoMoreInteractions(classVisitorWrapper);
>, <Line: +    }
>, <Line: +    public static class StackMapFrames {
>, <Line: +        public boolean foo;
>, <Line: +        public String foo() {
>, <Line: +            return foo
>, <Line: +                    ? FOO
>, <Line: +                    : BAR;
>, <Line: +        }
>, <Line: +    }
>]
[<Line: -import org.objectweb.asm.Opcodes;
>]