[<Line: +import static org.mockito.Mockito.mock;
>, <Line: +import static org.mockito.Mockito.when;
>, <Line: +    public void testExplicitLookupBootstrapClassLoader() throws Exception {
>, <Line: +        ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate = ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit.of(Object.class);
>, <Line: +        assertThat(classLoadingDelegate.getClassLoader(), is(ClassLoader.getSystemClassLoader()));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testExplicitLookup() throws Exception {
>, <Line: +        ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate = ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit.of(Foo.class);
>, <Line: +        assertThat(classLoadingDelegate.getClassLoader(), is(Foo.class.getClassLoader()));
>, <Line: +        assertEquals(Foo.class, classLoadingDelegate.locate(Foo.class.getName()));
>, <Line: +        assertEquals(Object.class, classLoadingDelegate.locate(Object.class.getName()));
>]
[<Line: -import static org.mockito.Mockito.*;
>, <Line: -    public void testExplicitLookup() throws Exception {
>, <Line: -        ClassFileLocator.AgentBased.ClassLoadingDelegate fallback = mock(ClassFileLocator.AgentBased.ClassLoadingDelegate.class);
>, <Line: -        ClassFileLocator.AgentBased.ClassLoadingDelegate classLoadingDelegate = new ClassFileLocator.AgentBased
>, <Line: -                .ClassLoadingDelegate.Explicit(fallback, Collections.<Class<?>>singletonList(Object.class));
>, <Line: -        doReturn(String.class).when(fallback).locate(String.class.getName());
>, <Line: -        verify(fallback).locate(String.class.getName());
>, <Line: -        ClassLoader classLoader = mock(ClassLoader.class);
>, <Line: -        when(fallback.getClassLoader()).thenReturn(classLoader);
>, <Line: -        assertThat(classLoadingDelegate.getClassLoader(), is(classLoader));
>, <Line: -        verify(fallback).getClassLoader();
>, <Line: -        verifyNoMoreInteractions(fallback);
>]