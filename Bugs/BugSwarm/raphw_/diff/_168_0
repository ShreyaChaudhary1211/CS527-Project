[<Line: +            /**
>, <Line: +             * The access control context to use for loading classes.
>, <Line: +             */
>, <Line: +            private final AccessControlContext accessControlContext;
>, <Line: +                accessControlContext = AccessController.getContext();
>, <Line: +             * privileged code, the contextual {@link AccessControlContext} is used to limit the available privileges to the intersection
>]
[<Line: -    /**
>, <Line: -     * Assures that critical actions are performed using the supplied access control context.
>, <Line: -     *
>, <Line: -     * @param accessControlContext The access control context to be used for performing security critical action.
>, <Line: -     * @return A new instance of this agent builder which uses the given access control context for performing critical actions.
>, <Line: -     */
>, <Line: -    AgentBuilder with(AccessControlContext accessControlContext);
>, <Line: -        /**
>, <Line: -         * The access control context to use for loading classes.
>, <Line: -         */
>, <Line: -        private final AccessControlContext accessControlContext;
>, <Line: -                    AccessController.getContext(),
>, <Line: -         * @param accessControlContext          The access control context to use for loading classes.
>, <Line: -                          AccessControlContext accessControlContext,
>, <Line: -            this.accessControlContext = accessControlContext;
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    initializationStrategy,
>, <Line: -                    redefinitionStrategy,
>, <Line: -                    bootstrapInjectionStrategy,
>, <Line: -                    lambdaInstrumentationStrategy,
>, <Line: -                    descriptionStrategy,
>, <Line: -                    installationStrategy,
>, <Line: -                    ignoredTypeMatcher,
>, <Line: -                    transformation);
>, <Line: -        }
>, <Line: -        @Override
>, <Line: -        public AgentBuilder with(AccessControlContext accessControlContext) {
>, <Line: -            return new Default(byteBuddy,
>, <Line: -                    typeLocator,
>, <Line: -                    typeStrategy,
>, <Line: -                    locationStrategy,
>, <Line: -                    listener,
>, <Line: -                    nativeMethodStrategy,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    accessControlContext,
>, <Line: -                    && accessControlContext.equals(aDefault.accessControlContext)
>, <Line: -            result = 31 * result + accessControlContext.hashCode();
>, <Line: -                    ", accessControlContext=" + accessControlContext +
>, <Line: -            /**
>, <Line: -             * The access control context to use for loading classes.
>, <Line: -             */
>, <Line: -            private final AccessControlContext accessControlContext;
>, <Line: -             * @param accessControlContext       The access control context to use for loading classes.
>, <Line: -                                           AccessControlContext accessControlContext,
>, <Line: -                this.accessControlContext = accessControlContext;
>, <Line: -                 * @param accessControlContext       The access control context to use for loading classes.
>, <Line: -                                          AccessControlContext accessControlContext,
>, <Line: -                                                     AccessControlContext accessControlContext,
>, <Line: -                                    accessControlContext,
>, <Line: -                                                     AccessControlContext accessControlContext,
>, <Line: -                                accessControlContext,
>, <Line: -                                        AccessControlContext.class,
>, <Line: -             * privileged code, the supplied {@link AccessControlContext} is used to limit the available privileges to the intersection
>, <Line: -            @Override
>, <Line: -            public AgentBuilder with(AccessControlContext accessControlContext) {
>, <Line: -                return materialize().with(accessControlContext);
>, <Line: -            }
>, <Line: -                        accessControlContext,
>, <Line: -                        accessControlContext,
>]