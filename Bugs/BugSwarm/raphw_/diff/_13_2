[<Line: +import net.bytebuddy.test.utility.JavaVersionRule;
>, <Line: +import org.junit.rules.MethodRule;
>, <Line: +    @Rule
>, <Line: +    public MethodRule javaVersionRule = new JavaVersionRule();
>, <Line: +    @Test
>, <Line: +    public void testClassPath() throws Exception {
>, <Line: +        ClassFileLocator classFileLocator = ClassFileLocator.ForModule.ofClassPath();
>, <Line: +        assertThat(classFileLocator.locate(Object.class.getName()).isResolved(), is(true));
>, <Line: +        assertThat(classFileLocator.locate(getClass().getName()).isResolved(), is(true));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(value = 8, sort = JavaVersionRule.Sort.AT_MOST)
>, <Line: +    public void testBootPathLegacy() throws Exception {
>, <Line: +        ClassFileLocator classFileLocator = ClassFileLocator.ForModule.ofBootLayer();
>, <Line: +        assertThat(classFileLocator.locate(Object.class.getName()).isResolved(), is(false));
>, <Line: +        assertThat(classFileLocator.locate(getClass().getName()).isResolved(), is(false));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @JavaVersionRule.Enforce(9)
>, <Line: +    public void testBootPath() throws Exception {
>, <Line: +        ClassFileLocator classFileLocator = ClassFileLocator.ForModule.ofBootLayer();
>, <Line: +        assertThat(classFileLocator.locate(Object.class.getName()).isResolved(), is(true));
>, <Line: +        assertThat(classFileLocator.locate(getClass().getName()).isResolved(), is(true));
>, <Line: +    }
>]
[]