[<Line: +import org.junit.Ignore;
>, <Line: +    @Test
>, <Line: +    @AgentAttachmentRule.Enforce
>, <Line: +    @Ignore("Raises conflict with inner class attribute, must investigate")
>, <Line: +    public void testRedefinition() throws Exception {
>, <Line: +        assertThat(ByteBuddyAgent.install(), instanceOf(Instrumentation.class));
>, <Line: +        assertThat(classLoader.loadClass(Foo.class.getName()).getName(), is(Foo.class.getName())); // ensure that class is loaded
>, <Line: +        ClassFileTransformer classFileTransformer = new AgentBuilder.Default()
>, <Line: +                .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
>, <Line: +                .withTypeStrategy(AgentBuilder.TypeStrategy.REDEFINE)
>, <Line: +                .withRedefinitionStrategy(AgentBuilder.RedefinitionStrategy.REDEFINITION)
>, <Line: +                .type(isAnnotatedWith(ShouldRebase.class), ElementMatchers.is(classLoader)).transform(new FooTransformer())
>, <Line: +                .installOnByteBuddyAgent();
>, <Line: +        try {
>, <Line: +            Class<?> type = classLoader.loadClass(Foo.class.getName());
>, <Line: +            assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) BAR));
>, <Line: +        } finally {
>, <Line: +            ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    @AgentAttachmentRule.Enforce
>, <Line: +    public void testRetransformation() throws Exception {
>, <Line: +        assertThat(ByteBuddyAgent.install(), instanceOf(Instrumentation.class));
>, <Line: +        assertThat(classLoader.loadClass(Foo.class.getName()).getName(), is(Foo.class.getName())); // ensure that class is loaded
>, <Line: +        ClassFileTransformer classFileTransformer = new AgentBuilder.Default()
>, <Line: +                .withInitialization(AgentBuilder.InitializationStrategy.NoOp.INSTANCE)
>, <Line: +                .withTypeStrategy(AgentBuilder.TypeStrategy.REDEFINE)
>, <Line: +                .withRedefinitionStrategy(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION)
>, <Line: +                .type(isAnnotatedWith(ShouldRebase.class), ElementMatchers.is(classLoader)).transform(new FooTransformer())
>, <Line: +                .installOnByteBuddyAgent();
>, <Line: +        try {
>, <Line: +            Class<?> type = classLoader.loadClass(Foo.class.getName());
>, <Line: +            assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) BAR));
>, <Line: +        } finally {
>, <Line: +            ByteBuddyAgent.getInstrumentation().removeTransformer(classFileTransformer);
>, <Line: +        }
>, <Line: +    }
>]
[]