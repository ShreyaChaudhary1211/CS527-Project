[<Line: +import java.net.URL;
>, <Line: +import java.net.URLClassLoader;
>, <Line: +    private static final String FOO = "foo", TEMP = "tmp", TO_STRING = "toString";
>, <Line: +    private TypeDescription firstType, secondType;
>, <Line: +        when(firstType.getName()).thenReturn(Foo.class.getName());
>, <Line: +        when(secondType.getName()).thenReturn(Bar.class.getName());
>, <Line: +        Map<String, Class<?>> types = new HashMap<String, Class<?>>();
>, <Line: +        types.put(Foo.class.getName(), Foo.class);
>, <Line: +        types.put(Bar.class.getName(), Bar.class);
>, <Line: +        ClassLoader classLoader = new MapClassLoader(getClass().getClassLoader(), types);
>, <Line: +        unloaded.put(firstType, QUX);
>, <Line: +        unloaded.put(secondType, BAZ);
>, <Line: +        Map<TypeDescription, Class<?>> loaded = classLoadingStrategy.load(getClass().getClassLoader(), unloaded);
>, <Line: +        assertThat(loaded.get(firstType), CoreMatchers.<Class<?>>is(Foo.class));
>, <Line: +        assertThat(loaded.get(secondType), CoreMatchers.<Class<?>>is(Bar.class));
>, <Line: +        verify(dexProcessor).makeClassLoader(any(File.class), eq(folder), eq(getClass().getClassLoader()));
>, <Line: +        verify(conversion).register(Foo.class.getName(), QUX);
>, <Line: +        verify(conversion).register(Bar.class.getName(), BAZ);
>, <Line: +        final DynamicType.Unloaded<?> dynamicType = new ByteBuddy(ClassFileVersion.JAVA_V6)
>, <Line: +                .subclass(Object.class)
>, <Line: +        StubClassLoader stubClassLoader = new StubClassLoader(dynamicType);
>, <Line: +        ClassLoadingStrategy classLoadingStrategy = new AndroidClassLoadingStrategy(folder, new StubbedClassLoaderDexCompilation(stubClassLoader));
>, <Line: +        assertThat(map.get(dynamicType.getTypeDescription()), CoreMatchers.<Class<?>>is(stubClassLoader.getLoaded()));
>, <Line: +    private static class StubClassLoader extends ClassLoader {
>, <Line: +        private Class<?> loaded;
>, <Line: +        private final DynamicType.Unloaded<?> dynamicType;
>, <Line: +        public StubClassLoader(DynamicType.Unloaded<?> dynamicType) {
>, <Line: +            super(new URLClassLoader(new URL[0], null));
>, <Line: +            this.dynamicType = dynamicType;
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
>, <Line: +            if (loaded != null) {
>, <Line: +                throw new AssertionError("Already loaded: " + loaded);
>, <Line: +            } else if (resolve) {
>, <Line: +                throw new AssertionError("Did not intend to resolve: " + name);
>, <Line: +            }
>, <Line: +            loaded = dynamicType.load(getParent()).getLoaded();
>, <Line: +            return loaded;
>, <Line: +        }
>, <Line: +        public Class<?> getLoaded() {
>, <Line: +            return loaded;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    private static class MapClassLoader extends ClassLoader {
>, <Line: +        private final Map<String, Class<?>> types;
>, <Line: +        public MapClassLoader(ClassLoader parent, Map<String, Class<?>> types) {
>, <Line: +            super(parent);
>, <Line: +            this.types = types;
>, <Line: +        }
>, <Line: +        @Override
>, <Line: +        protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
>, <Line: +            Class<?> type = types.get(name);
>, <Line: +            if (type == null) {
>, <Line: +                throw new AssertionError("Unexpected type: " + name);
>, <Line: +            } else if (resolve) {
>, <Line: +                throw new AssertionError("Did not intend to resolve: " + name);
>, <Line: +            }
>, <Line: +            return type;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    private static class Foo {
>, <Line: +        /* empty */
>, <Line: +    }
>, <Line: +    private static class Bar {
>, <Line: +        /* empty */
>, <Line: +    }
>]
[<Line: -    private static final String FOO = "bar.foo", BAR = "foo.bar", TEMP = "tmp", TO_STRING = "toString";
>, <Line: -    private TypeDescription first, second;
>, <Line: -        when(first.getName()).thenReturn(FOO);
>, <Line: -        when(second.getName()).thenReturn(BAR);
>, <Line: -        ClassLoader classLoader = mock(ClassLoader.class);
>, <Line: -        doReturn(Object.class).when(classLoader).loadClass(FOO);
>, <Line: -        doReturn(Void.class).when(classLoader).loadClass(BAR);
>, <Line: -        unloaded.put(first, QUX);
>, <Line: -        unloaded.put(second, BAZ);
>, <Line: -        ClassLoader parentClassLoader = mock(ClassLoader.class);
>, <Line: -        Map<TypeDescription, Class<?>> loaded = classLoadingStrategy.load(parentClassLoader, unloaded);
>, <Line: -        assertThat(loaded.get(first), CoreMatchers.<Class<?>>is(Object.class));
>, <Line: -        assertThat(loaded.get(second), CoreMatchers.<Class<?>>is(Void.class));
>, <Line: -        verify(dexProcessor).makeClassLoader(any(File.class), eq(folder), eq(parentClassLoader));
>, <Line: -        verify(conversion).register(FOO, QUX);
>, <Line: -        verify(conversion).register(BAR, BAZ);
>, <Line: -        DynamicType dynamicType = new ByteBuddy(ClassFileVersion.JAVA_V6).subclass(Object.class)
>, <Line: -        ClassLoader classLoader = mock(ClassLoader.class);
>, <Line: -        doReturn(Void.class).when(classLoader).loadClass(any(String.class));
>, <Line: -        ClassLoadingStrategy classLoadingStrategy = new AndroidClassLoadingStrategy(folder, new StubbedClassLoaderDexCompilation(classLoader));
>, <Line: -        assertThat(map.get(dynamicType.getTypeDescription()), CoreMatchers.<Class<?>>is(Void.class));
>]