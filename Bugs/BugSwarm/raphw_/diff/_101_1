[<Line: +package net.bytebuddy.asm;
>, <Line: +import net.bytebuddy.ByteBuddy;
>, <Line: +import net.bytebuddy.dynamic.loading.ClassLoadingStrategy;
>, <Line: +import org.junit.Test;
>, <Line: +import org.junit.runner.RunWith;
>, <Line: +import org.junit.runners.Parameterized;
>, <Line: +import org.objectweb.asm.ClassReader;
>, <Line: +import org.objectweb.asm.ClassWriter;
>, <Line: +import java.util.Arrays;
>, <Line: +import java.util.Collection;
>, <Line: +import static net.bytebuddy.matcher.ElementMatchers.named;
>, <Line: +import static org.hamcrest.CoreMatchers.is;
>, <Line: +import static org.hamcrest.MatcherAssert.assertThat;
>, <Line: +@RunWith(Parameterized.class)
>, <Line: +public class AdviceFrameTest {
>, <Line: +    private static final String FOO = "foo", BAR = "bar", QUX = "qux", COUNT = "count";
>, <Line: +    @Parameterized.Parameters
>, <Line: +    public static Collection<Object[]> data() {
>, <Line: +        return Arrays.asList(new Object[][]{
>, <Line: +                {FrameAdvice.class, 2},
>, <Line: +                {FrameAdviceWithoutThrowable.class, 2},
>, <Line: +                {FrameAdviceWithSuppression.class, 2},
>, <Line: +                {FrameAdviceEntryOnly.class, 1},
>, <Line: +                {FrameAdviceEntryOnlyWithSuppression.class, 1},
>, <Line: +                {FrameAdviceExitOnly.class, 1},
>, <Line: +                {FrameAdviceExitOnlyWithSuppression.class, 1},
>, <Line: +                {FrameAdviceExitOnlyWithSuppressionAndNotException.class, 1},
>, <Line: +                {FrameReturnAdvice.class, 2}
>, <Line: +        });
>, <Line: +    }
>, <Line: +    private final Class<?> advice;
>, <Line: +    private final int count;
>, <Line: +    public AdviceFrameTest(Class<?> advice, int count) {
>, <Line: +        this.advice = advice;
>, <Line: +        this.count = count;
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdvice() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(FOO)))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.newInstance(), FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdviceStaticMethod() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(BAR)))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(null, FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdviceExpanded() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(FOO)).readerFlags(ClassReader.EXPAND_FRAMES))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.newInstance(), FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdviceStaticMethodExpanded() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(BAR)).readerFlags(ClassReader.EXPAND_FRAMES))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(null, FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdviceComputedMaxima() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(FOO)).writerFlags(ClassWriter.COMPUTE_MAXS))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.newInstance(), FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdviceStaticMethodComputedMaxima() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(BAR)).writerFlags(ClassWriter.COMPUTE_MAXS))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(null, FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdviceComputedFrames() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(FOO)).writerFlags(ClassWriter.COMPUTE_FRAMES))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.newInstance(), FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @Test
>, <Line: +    public void testFrameAdviceStaticMethodComputedFrames() throws Exception {
>, <Line: +        Class<?> type = new ByteBuddy()
>, <Line: +                .redefine(FrameSample.class)
>, <Line: +                .visit(Advice.to(advice).on(named(BAR)).writerFlags(ClassWriter.COMPUTE_FRAMES))
>, <Line: +                .make()
>, <Line: +                .load(ClassLoadingStrategy.BOOTSTRAP_LOADER, ClassLoadingStrategy.Default.WRAPPER)
>, <Line: +                .getLoaded();
>, <Line: +        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(null, FOO), is((Object) FOO));
>, <Line: +        assertThat(type.getField(COUNT).getInt(null), is((Object) count));
>, <Line: +    }
>, <Line: +    @SuppressWarnings("all")
>, <Line: +    public static class FrameSample {
>, <Line: +        public static int count;
>, <Line: +        public String foo(String value) {
>, <Line: +            int ignored = 0;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 4L, v5 = 5L, v6 = 6L, v7 = 7L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 8L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 9L;
>, <Line: +            }
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +        public static String bar(String value) {
>, <Line: +            int ignored = 0;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 4L, v5 = 5L, v6 = 6L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdvice {
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        @Advice.OnMethodExit
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdviceWithoutThrowable {
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        @Advice.OnMethodExit(onThrowable = false)
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdviceWithSuppression {
>, <Line: +        @Advice.OnMethodEnter(suppress = Exception.class)
>, <Line: +        @Advice.OnMethodExit(suppress = Exception.class)
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdviceEntryOnly {
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdviceEntryOnlyWithSuppression {
>, <Line: +        @Advice.OnMethodEnter(suppress = Exception.class)
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdviceExitOnly {
>, <Line: +        @Advice.OnMethodEnter
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdviceExitOnlyWithSuppression {
>, <Line: +        @Advice.OnMethodExit(suppress = Exception.class)
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("unused")
>, <Line: +    public static class FrameAdviceExitOnlyWithSuppressionAndNotException {
>, <Line: +        @Advice.OnMethodExit(suppress = Exception.class, onThrowable = false)
>, <Line: +        private static String advice(@Advice.Ignored int ignored, @Advice.Argument(0) String value) {
>, <Line: +            int v0 = 1;
>, <Line: +            {
>, <Line: +                long v1 = 1L, v2 = 2L, v3 = 3L;
>, <Line: +                if (ignored == 1) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                } else if (ignored == 2) {
>, <Line: +                    if (v1 + v2 + v3 == 0L) {
>, <Line: +                        throw new AssertionError();
>, <Line: +                    }
>, <Line: +                }
>, <Line: +            }
>, <Line: +            long v4 = 1L, v5 = 2L, v6 = 3L, v7 = 4L;
>, <Line: +            if (ignored == 3) {
>, <Line: +                throw new AssertionError();
>, <Line: +            } else if (ignored == 4) {
>, <Line: +                if (v4 + v5 + v6 + v7 == 0L) {
>, <Line: +                    throw new AssertionError();
>, <Line: +                }
>, <Line: +            }
>, <Line: +            try {
>, <Line: +                long v8 = 1L;
>, <Line: +            } catch (Exception exception) {
>, <Line: +                long v9 = 1L;
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return value;
>, <Line: +        }
>, <Line: +    }
>, <Line: +    @SuppressWarnings("all")
>, <Line: +    public static class FrameReturnAdvice {
>, <Line: +        @Advice.OnMethodEnter(suppress = RuntimeException.class)
>, <Line: +        @Advice.OnMethodExit(suppress = RuntimeException.class)
>, <Line: +        private static String advice() {
>, <Line: +            try {
>, <Line: +                int ignored = 0;
>, <Line: +                if (ignored != 0) {
>, <Line: +                    return BAR;
>, <Line: +                }
>, <Line: +            } catch (Exception e) {
>, <Line: +                int ignored = 0;
>, <Line: +                if (ignored != 0) {
>, <Line: +                    return QUX;
>, <Line: +                }
>, <Line: +            }
>, <Line: +            FrameSample.count++;
>, <Line: +            return FOO;
>, <Line: +        }
>, <Line: +    }
>, <Line: +}>]
[]