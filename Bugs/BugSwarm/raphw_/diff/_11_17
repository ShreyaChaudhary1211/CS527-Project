[<Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredConstructor().newInstance(), notNullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getDeclaredConstructor().newInstance(), BAR), is((Object) BAR));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.getDeclaredConstructor().newInstance(), BAR), is((Object) BAR));
>, <Line: +        assertThat(type.getDeclaredMethod(QUX, String.class, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO, BAR), is((Object) (FOO + BAR)));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO, int.class).invoke(type.getDeclaredConstructor().newInstance(), 0), is((Object) 2));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(BAR + BAZ).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(BAR + BAZ).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(BAR + BAZ).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO + BAR + QUX + BAZ), is((Object) (FOO + BAR + QUX + BAZ)));
>, <Line: +        assertThat(type.getDeclaredMethod(QUX + BAZ).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO + BAR + QUX + BAZ)));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) (FOO)));
>, <Line: +            type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +        type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.getDeclaredConstructor().newInstance(), FOO), is((Object) BAR));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO + BAR).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) BAR));
>, <Line: +            type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance());
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), nullValue(Object.class));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>, <Line: +        assertThat(type.getDeclaredMethod(FOO).invoke(type.getDeclaredConstructor().newInstance()), is((Object) FOO));
>]
[<Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO + BAZ).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.newInstance(), notNullValue(Object.class));
>, <Line: -        assertThat(type.newInstance(), notNullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.newInstance(), BAR), is((Object) BAR));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO, String.class).invoke(type.newInstance(), BAR), is((Object) BAR));
>, <Line: -        assertThat(type.getDeclaredMethod(QUX, String.class, String.class).invoke(type.newInstance(), FOO, BAR), is((Object) (FOO + BAR)));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO, int.class).invoke(type.newInstance(), 0), is((Object) 2));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -            type.getDeclaredMethod(FOO + BAR).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO + BAR).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO + BAR).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(BAR + BAZ).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(BAR + BAZ).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(BAR + BAZ).invoke(type.newInstance());
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.newInstance(), FOO + BAR + QUX + BAZ), is((Object) (FOO + BAR + QUX + BAZ)));
>, <Line: -        assertThat(type.getDeclaredMethod(QUX + BAZ).invoke(type.newInstance()), is((Object) (FOO + BAR + QUX + BAZ)));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) (FOO)));
>, <Line: -            type.getDeclaredMethod(FOO + BAR).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -        type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -        assertThat(type.getDeclaredMethod(BAR, String.class).invoke(type.newInstance(), FOO), is((Object) BAR));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO + BAR).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) BAR));
>, <Line: -            type.getDeclaredMethod(FOO).invoke(type.newInstance());
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), nullValue(Object.class));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>, <Line: -        assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()), is((Object) FOO));
>]