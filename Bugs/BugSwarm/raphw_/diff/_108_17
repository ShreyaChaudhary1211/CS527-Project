[<Line: +    private final ElementMatcher<? super FieldList<?>> matcher;
>, <Line: +     * @param matcher The field matcher to apply to the declared fields of the matched type description.
>, <Line: +    public DeclaringFieldMatcher(ElementMatcher<? super FieldList<? extends FieldDescription>> matcher) {
>, <Line: +        this.matcher = matcher;
>, <Line: +        return matcher.matches(target.getDeclaredFields());
>, <Line: +                && matcher.equals(((DeclaringFieldMatcher<?>) other).matcher);
>, <Line: +        return matcher.hashCode();
>, <Line: +        return "declaresFields(" + matcher + ")";
>]
[<Line: -    private final ElementMatcher<? super FieldList<?>> fieldMatcher;
>, <Line: -     * @param fieldMatcher The field matcher to apply to the declared fields of the matched type description.
>, <Line: -    public DeclaringFieldMatcher(ElementMatcher<? super FieldList<? extends FieldDescription>> fieldMatcher) {
>, <Line: -        this.fieldMatcher = fieldMatcher;
>, <Line: -        return fieldMatcher.matches(target.getDeclaredFields());
>, <Line: -                && fieldMatcher.equals(((DeclaringFieldMatcher<?>) other).fieldMatcher);
>, <Line: -        return fieldMatcher.hashCode();
>, <Line: -        return "declaresFields(" + fieldMatcher + ")";
>]