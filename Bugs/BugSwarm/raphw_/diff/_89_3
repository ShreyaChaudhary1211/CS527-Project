[<Line: +    private static final int FOO = 42;
>, <Line: +        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.getName(mock(Object.class), FOO);
>, <Line: +        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.getModifiers(mock(Object.class), FOO);
>, <Line: +        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.isNamePresent(mock(Object.class), FOO);
>]
[<Line: -        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.getName(mock(Object.class));
>, <Line: -        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.getModifiers(mock(Object.class));
>, <Line: -    }
>, <Line: -    @Test(expected = IllegalStateException.class)
>, <Line: -    public void testLegacyVmgetDeclaringExectuable() throws Exception {
>, <Line: -        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.getDeclaringExecutable(mock(Object.class));
>, <Line: -        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.isNamePresent(mock(Object.class));
>, <Line: -    }
>, <Line: -    @Test(expected = IllegalStateException.class)
>, <Line: -    public void testLegacyVm() throws Exception {
>, <Line: -        ParameterDescription.ForLoadedParameter.Dispatcher.ForLegacyVm.INSTANCE.getDeclaredAnnotations(mock(Object.class));
>]