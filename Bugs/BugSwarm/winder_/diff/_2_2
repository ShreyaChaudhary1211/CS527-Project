[<Line: +            this.controllerStatus = null;
>, <Line: +        if (this.controllerStatus != null && this.controllerStatus.getState().equals("Alarm")) {
>, <Line: +            return getControlState() == COMM_IDLE;
>, <Line: +    @Override
>, <Line: +    public ControlState getControlState() {
>, <Line: +        if (!this.capabilities.REAL_TIME) {
>, <Line: +            return super.getControlState();
>, <Line: +        }
>, <Line: +        String state = this.controllerStatus == null ? "" : this.controllerStatus.getState();
>, <Line: +        switch(state.toLowerCase()) {
>, <Line: +            case "jog":
>, <Line: +            case "run":
>, <Line: +                return ControlState.COMM_SENDING;
>, <Line: +            case "hold":
>, <Line: +            case "door":
>, <Line: +            case "queue":
>, <Line: +                return ControlState.COMM_SENDING_PAUSED;
>, <Line: +            case "idle":
>, <Line: +                if (isStreaming()){
>, <Line: +                    return ControlState.COMM_SENDING_PAUSED;
>, <Line: +                }
>, <Line: +            case "check":
>, <Line: +            case "alarm":
>, <Line: +            default:
>, <Line: +                return ControlState.COMM_IDLE;
>, <Line: +        }
>, <Line: +    };
>, <Line: +            ArrayList<String> commands = GrblUtils.getReturnToHomeCommands(this.grblVersion, this.grblVersionLetter, this.controllerStatus.getWorkCoord().z);
>, <Line: +        ControlState before = getControlState();
>, <Line: +        String beforeState = controllerStatus == null ? "" : controllerStatus.getState();
>, <Line: +        if (before != getControlState()) {
>, <Line: +            this.dispatchStateChange(getControlState());
>, <Line: +        }
>, <Line: +        // GRBL 1.1 jog complete transition
>, <Line: +        if (beforeState.equals("Jog") && controllerStatus.getState().equals("Idle")) {
>, <Line: +            this.comm.cancelSend();
>, <Line: +        }
>, <Line: +                if (this.controllerStatus.getState().equals("Idle")) {
>, <Line: +                // Otherwise check if the machine is Hold/Queue and stopped.
>, <Line: +                else if ((this.controllerStatus.getState().equals("Hold")
>, <Line: +                        || this.controllerStatus.getState().equals("Queue"))
>, <Line: +                        && lastLocation.equals(this.controllerStatus.getMachineCoord())) {
>, <Line: +            lastLocation = new Position(this.controllerStatus.getMachineCoord());
>, <Line: +        if (this.controllerStatus != null && this.getUnitsCode() != null) {
>, <Line: +            double zLocationMM = this.controllerStatus.getMachineCoord().z;
>]
[<Line: -    private String grblState = "";
>, <Line: -    private Position machineLocation;
>, <Line: -    private Position workLocation;
>, <Line: -        if (grblState != null && grblState.equals("Alarm")) {
>, <Line: -            return this.currentState == COMM_IDLE;
>, <Line: -            ArrayList<String> commands = GrblUtils.getReturnToHomeCommands(this.grblVersion, this.grblVersionLetter, this.workLocation.z);
>, <Line: -    private void sendStateMessageIfChanged(String beforeState, ControlState current) {
>, <Line: -        ControlState state = ControlState.COMM_IDLE;
>, <Line: -        switch (controllerStatus.getState().toLowerCase()) {
>, <Line: -            case "jog":
>, <Line: -            case "run":
>, <Line: -                state = ControlState.COMM_SENDING;
>, <Line: -                break;
>, <Line: -            case "hold":
>, <Line: -            case "door":
>, <Line: -                state = ControlState.COMM_SENDING_PAUSED;
>, <Line: -                break;
>, <Line: -            case "check":
>, <Line: -            case "alarm":
>, <Line: -            case "idle":
>, <Line: -                if (isStreaming()){
>, <Line: -                    state = ControlState.COMM_SENDING_PAUSED;
>, <Line: -                } else {
>, <Line: -                    // GRBL 1.1: cancel the send when from jog -> idle.
>, <Line: -                    if (beforeState != null &&
>, <Line: -                            beforeState.toLowerCase().equals("jog")) {
>, <Line: -                        this.comm.cancelSend();
>, <Line: -                    }
>, <Line: -                    state = ControlState.COMM_IDLE;
>, <Line: -                }
>, <Line: -                break;
>, <Line: -        }
>, <Line: -        if (current != state) {
>, <Line: -            this.dispatchStateChange(state);
>, <Line: -        }
>, <Line: -    }
>, <Line: -        String beforeState =  (controllerStatus != null) ?
>, <Line: -                controllerStatus.getState() : "";
>, <Line: -        sendStateMessageIfChanged(beforeState, this.currentState);
>, <Line: -        grblState = controllerStatus.getState();
>, <Line: -        machineLocation = controllerStatus.getMachineCoord();
>, <Line: -        workLocation = controllerStatus.getWorkCoord();
>, <Line: -                if (grblState.equals("Idle")) {
>, <Line: -                // Otherwise check if the machine is Hold and stopped.
>, <Line: -                else if (grblState.equals("Hold")
>, <Line: -                        && lastLocation.equals(machineLocation)) {
>, <Line: -            lastLocation = new Position(machineLocation);
>, <Line: -        if (machineLocation != null && this.getUnitsCode() != null) {
>, <Line: -            double zLocationMM = machineLocation.z;
>]