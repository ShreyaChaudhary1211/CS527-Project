[<Line: +    public void openInstanceExpectUtility(String port, int portRate, boolean handleStateChange) throws Exception {
>, <Line: +        EasyMock.expect(instance.handlesAllStateChangeEvents()).andReturn(handleStateChange).anyTimes();
>, <Line: +    private void startStreamExpectation(String port, int rate, String command, boolean handleStateChange) throws Exception {
>, <Line: +        openInstanceExpectUtility(port, rate, handleStateChange);
>, <Line: +        startStreamExpectation(port, rate, command, false);
>, <Line: +        openInstanceExpectUtility(port, rate, false);
>, <Line: +        startStreamExpectation(port, rate, command, false);
>, <Line: +        openInstanceExpectUtility(port, rate, false);
>, <Line: +                openInstanceExpectUtility(port, rate, false);
>, <Line: +        openInstanceExpectUtility(port, rate, false);
>, <Line: +        openInstanceExpectUtility(port, rate, false);
>, <Line: +        startStreamExpectation(port, baud, command, false);
>, <Line: +        EasyMock.expect(instance.handlesAllStateChangeEvents()).andReturn(true).anyTimes();
>, <Line: +        EasyMock.expect(niceInstance.handlesAllStateChangeEvents()).andReturn(true).anyTimes();
>]
[<Line: -    public void openInstanceExpectUtility(String port, int portRate) throws Exception {
>, <Line: -    private void startStreamExpectation(String port, int rate, String command) throws Exception {
>, <Line: -        openInstanceExpectUtility(port, rate);
>, <Line: -        startStreamExpectation(port, rate, command);
>, <Line: -        openInstanceExpectUtility(port, rate);
>, <Line: -        startStreamExpectation(port, rate, command);
>, <Line: -        openInstanceExpectUtility(port, rate);
>, <Line: -                openInstanceExpectUtility(port, rate);
>, <Line: -        openInstanceExpectUtility(port, rate);
>, <Line: -        openInstanceExpectUtility(port, rate);
>, <Line: -        startStreamExpectation(port, baud, command);
>]